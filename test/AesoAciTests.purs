module Aeso.Aci.Tests(erlps__test__0, erlps__simple_aci_test___0,
                      erlps__aci_test___0) where
{-
This file has been autogenerated
DO NOT EDIT - Your changes WILL be overwritten
Use this code at your own risk - the authors are just a mischievous raccoon and a haskell devote
Erlscripten v0.2.0
-}

import Prelude
import Data.BigInt as DBI
import Data.Array as DA
import Data.Maybe as DM
import Data.Map as Map
import Data.Tuple as DT
import Erlang.Builtins as BIF
import Erlang.Binary as BIN
import Erlang.Helpers
import Erlang.Exception as EXC
import Erlang.Type
import Partial.Unsafe (unsafePartial)


erlps__simple_aci_test___0 :: ErlangFun
erlps__simple_aci_test___0 [] =
  let    head_1 = toErl 1
  in let head_3 = toErl 2
  in let head_5 = toErl 3
  in
    flmap
      (\ lc_8 ->
         let    lop_11 = toErl "Test contract "
         in let rop_12 = BIF.erlang__integer_to_list__1 [lc_8]
         in let tup_el_10 = BIF.erlang__op_append [lop_11, rop_12]
         in let
           tup_el_14 =
             ErlangFun 0
               (let
                  lambda_15 [] = erlps__test_contract__1 [lc_8]
                  lambda_15 [] = EXC.function_clause unit
                  lambda_15 args = EXC.badarity (ErlangFun 0 lambda_15) args
                in lambda_15)
         in let lcRet_9 = ErlangTuple [tup_el_10, tup_el_14]
         in ErlangCons lcRet_9 ErlangEmptyList)
      (ErlangCons head_1
         (ErlangCons head_3 (ErlangCons head_5 ErlangEmptyList)))
erlps__simple_aci_test___0 args =
  EXC.badarity (ErlangFun 0 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__test_contract__1 :: ErlangFun
erlps__test_contract__1 [n_0] =
  let matchExpr_5 = erlps__test_cases__1 [n_0]
  in
    case matchExpr_5 of
      (ErlangTuple [contract_2, mapaci_3, decaci_4]) ->
        let
          matchExpr_9 =
            BIF.do_remote_fun_call "Aeso.Aci" "erlps__contract_interface__2"
              [ErlangAtom "json", contract_2]
        in
          case matchExpr_9 of
            (ErlangTuple [(ErlangAtom "ok"), json_8]) ->
              let   
                fun_10 =
                  ErlangFun 0
                    (let
                       lambda_11 [] =
                         case json_8 of
                           __x_16 | (__x_16 ==
                                       (ErlangCons mapaci_3 ErlangEmptyList)) ->
                             ErlangAtom "ok"
                           __v_17 ->
                             let   
                               head_21 =
                                 ErlangTuple
                                   [ErlangAtom "module",
                                    ErlangAtom "aeso_aci_tests"]
                             in let tup_el_27 = toErl 13
                             in let
                               head_25 =
                                 ErlangTuple [ErlangAtom "line", tup_el_27]
                             in let tup_el_31 = toErl "JSON"
                             in let
                               head_29 =
                                 ErlangTuple
                                   [ErlangAtom "expression", tup_el_31]
                             in let
                               head_33 =
                                 ErlangTuple
                                   [ErlangAtom "expected",
                                    ErlangCons mapaci_3 ErlangEmptyList]
                             in let
                               head_37 =
                                 ErlangTuple [ErlangAtom "value", __v_17]
                             in let
                               arg_18 =
                                 ErlangTuple
                                   [ErlangAtom "assertEqual",
                                    ErlangCons head_21
                                      (ErlangCons head_25
                                         (ErlangCons head_29
                                            (ErlangCons head_33
                                               (ErlangCons head_37
                                                  ErlangEmptyList))))]
                             in BIF.erlang__error__1 [arg_18]
                       lambda_11 [] = EXC.function_clause unit
                       lambda_11 args =
                         EXC.badarity (ErlangFun 0 lambda_11) args
                     in lambda_11)
                _ = BIF.erlang__apply__2 [fun_10, ErlangEmptyList]
              in let
                fun_41 =
                  ErlangFun 0
                    (let
                       lambda_42 [] =
                         let    __x_45 = ErlangTuple [ErlangAtom "ok", decaci_4]
                         in let
                           case_46 =
                             BIF.do_remote_fun_call "Aeso.Aci"
                               "erlps__render_aci_json__1" [json_8]
                         in
                           case case_46 of
                             __x_48 | (__x_48 == __x_45) -> ErlangAtom "ok"
                             __v_49 ->
                               let   
                                 head_53 =
                                   ErlangTuple
                                     [ErlangAtom "module",
                                      ErlangAtom "aeso_aci_tests"]
                               in let tup_el_59 = toErl 14
                               in let
                                 head_57 =
                                   ErlangTuple [ErlangAtom "line", tup_el_59]
                               in let
                                 tup_el_63 =
                                   toErl "aeso_aci : render_aci_json ( JSON )"
                               in let
                                 head_61 =
                                   ErlangTuple
                                     [ErlangAtom "expression", tup_el_63]
                               in let
                                 head_65 =
                                   ErlangTuple [ErlangAtom "expected", __x_45]
                               in let
                                 head_69 =
                                   ErlangTuple [ErlangAtom "value", __v_49]
                               in let
                                 arg_50 =
                                   ErlangTuple
                                     [ErlangAtom "assertEqual",
                                      ErlangCons head_53
                                        (ErlangCons head_57
                                           (ErlangCons head_61
                                              (ErlangCons head_65
                                                 (ErlangCons head_69
                                                    ErlangEmptyList))))]
                               in BIF.erlang__error__1 [arg_50]
                       lambda_42 [] = EXC.function_clause unit
                       lambda_42 args =
                         EXC.badarity (ErlangFun 0 lambda_42) args
                     in lambda_42)
                _ = BIF.erlang__apply__2 [fun_41, ErlangEmptyList]
              in let
                head_75 = ErlangTuple [ErlangAtom "aci", ErlangAtom "json"]
              in let
                matchExpr_81 =
                  BIF.do_remote_fun_call "Aeso.Compiler" "erlps__from_string__2"
                    [contract_2, ErlangCons head_75 ErlangEmptyList]
              in
                case matchExpr_81 of
                  (ErlangTuple [(ErlangAtom "ok"),
                                (ErlangMap map_79)]) | (DM.Just json2_80) <-
                                                         (Map.lookup
                                                            (ErlangAtom "aci")
                                                            map_79) ->
                    let
                      fun_82 =
                        ErlangFun 0
                          (let
                             lambda_83 [] =
                               case json2_80 of
                                 __x_86 | (__x_86 == json_8) -> ErlangAtom "ok"
                                 __v_87 ->
                                   let   
                                     head_91 =
                                       ErlangTuple
                                         [ErlangAtom "module",
                                          ErlangAtom "aeso_aci_tests"]
                                   in let tup_el_97 = toErl 17
                                   in let
                                     head_95 =
                                       ErlangTuple
                                         [ErlangAtom "line", tup_el_97]
                                   in let tup_el_101 = toErl "JSON2"
                                   in let
                                     head_99 =
                                       ErlangTuple
                                         [ErlangAtom "expression", tup_el_101]
                                   in let
                                     head_103 =
                                       ErlangTuple
                                         [ErlangAtom "expected", json_8]
                                   in let
                                     head_107 =
                                       ErlangTuple [ErlangAtom "value", __v_87]
                                   in let
                                     arg_88 =
                                       ErlangTuple
                                         [ErlangAtom "assertEqual",
                                          ErlangCons head_91
                                            (ErlangCons head_95
                                               (ErlangCons head_99
                                                  (ErlangCons head_103
                                                     (ErlangCons head_107
                                                        ErlangEmptyList))))]
                                   in BIF.erlang__error__1 [arg_88]
                             lambda_83 [] = EXC.function_clause unit
                             lambda_83 args =
                               EXC.badarity (ErlangFun 0 lambda_83) args
                           in lambda_83)
                    in BIF.erlang__apply__2 [fun_82, ErlangEmptyList]
                  _ -> EXC.badmatch matchExpr_81
            _ -> EXC.badmatch matchExpr_9
      _ -> EXC.badmatch matchExpr_5
erlps__test_contract__1 [arg_111] = EXC.function_clause unit
erlps__test_contract__1 args =
  EXC.badarity (ErlangFun 1 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__test_cases__1 :: ErlangFun
erlps__test_cases__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 1)) =
  let    bin_el_1 = toErl 112
  in let bin_el_2 = toErl 97
  in let bin_el_3 = toErl 121
  in let bin_el_4 = toErl 97
  in let bin_el_5 = toErl 98
  in let bin_el_6 = toErl 108
  in let bin_el_7 = toErl 101
  in let bin_el_8 = toErl 32
  in let bin_el_9 = toErl 99
  in let bin_el_10 = toErl 111
  in let bin_el_11 = toErl 110
  in let bin_el_12 = toErl 116
  in let bin_el_13 = toErl 114
  in let bin_el_14 = toErl 97
  in let bin_el_15 = toErl 99
  in let bin_el_16 = toErl 116
  in let bin_el_17 = toErl 32
  in let bin_el_18 = toErl 67
  in let bin_el_19 = toErl 32
  in let bin_el_20 = toErl 61
  in let bin_el_21 = toErl 10
  in let bin_el_22 = toErl 32
  in let bin_el_23 = toErl 32
  in let bin_el_24 = toErl 112
  in let bin_el_25 = toErl 97
  in let bin_el_26 = toErl 121
  in let bin_el_27 = toErl 97
  in let bin_el_28 = toErl 98
  in let bin_el_29 = toErl 108
  in let bin_el_30 = toErl 101
  in let bin_el_31 = toErl 32
  in let bin_el_32 = toErl 115
  in let bin_el_33 = toErl 116
  in let bin_el_34 = toErl 97
  in let bin_el_35 = toErl 116
  in let bin_el_36 = toErl 101
  in let bin_el_37 = toErl 102
  in let bin_el_38 = toErl 117
  in let bin_el_39 = toErl 108
  in let bin_el_40 = toErl 32
  in let bin_el_41 = toErl 101
  in let bin_el_42 = toErl 110
  in let bin_el_43 = toErl 116
  in let bin_el_44 = toErl 114
  in let bin_el_45 = toErl 121
  in let bin_el_46 = toErl 112
  in let bin_el_47 = toErl 111
  in let bin_el_48 = toErl 105
  in let bin_el_49 = toErl 110
  in let bin_el_50 = toErl 116
  in let bin_el_51 = toErl 32
  in let bin_el_52 = toErl 97
  in let bin_el_53 = toErl 40
  in let bin_el_54 = toErl 105
  in let bin_el_55 = toErl 32
  in let bin_el_56 = toErl 58
  in let bin_el_57 = toErl 32
  in let bin_el_58 = toErl 105
  in let bin_el_59 = toErl 110
  in let bin_el_60 = toErl 116
  in let bin_el_61 = toErl 41
  in let bin_el_62 = toErl 32
  in let bin_el_63 = toErl 61
  in let bin_el_64 = toErl 32
  in let bin_el_65 = toErl 105
  in let bin_el_66 = toErl 43
  in let bin_el_67 = toErl 49
  in let bin_el_68 = toErl 10
  in let
    contract_69 =
      ErlangBinary
        (BIN.concat
           [BIN.fromInt bin_el_1 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_2 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_3 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_4 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_5 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_6 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_7 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_8 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_9 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_10 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_11 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_12 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_13 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_14 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_15 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_16 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_17 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_18 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_19 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_20 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_21 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_22 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_23 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_24 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_25 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_26 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_27 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_28 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_29 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_30 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_31 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_32 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_33 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_34 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_35 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_36 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_37 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_38 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_39 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_40 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_41 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_42 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_43 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_44 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_45 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_46 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_47 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_48 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_49 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_50 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_51 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_52 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_53 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_54 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_55 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_56 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_57 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_58 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_59 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_60 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_61 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_62 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_63 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_64 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_65 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_66 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_67 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_68 (toErl 8) 1 BIN.Big])
  in let bin_el_77 = toErl 67
  in let
    val_76 = ErlangBinary (BIN.fromInt bin_el_77 (toErl 8) 1 BIN.Big)
  in let bin_el_88 = toErl 97
  in let
    val_87 = ErlangBinary (BIN.fromInt bin_el_88 (toErl 8) 1 BIN.Big)
  in let bin_el_94 = toErl 105
  in let
    val_93 = ErlangBinary (BIN.fromInt bin_el_94 (toErl 8) 1 BIN.Big)
  in let bin_el_96 = toErl 105
  in let bin_el_97 = toErl 110
  in let bin_el_98 = toErl 116
  in let
    val_95 =
      ErlangBinary
        (BIN.concat
           [BIN.fromInt bin_el_96 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_97 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_98 (toErl 8) 1 BIN.Big])
  in let
    head_90 =
      ErlangMap
        (Map.fromFoldable
           [DT.Tuple (ErlangAtom "name") val_93,
            DT.Tuple (ErlangAtom "type") val_95])
  in let bin_el_101 = toErl 105
  in let bin_el_102 = toErl 110
  in let bin_el_103 = toErl 116
  in let
    val_100 =
      ErlangBinary
        (BIN.concat
           [BIN.fromInt bin_el_101 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_102 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_103 (toErl 8) 1 BIN.Big])
  in let
    head_81 =
      ErlangMap
        (Map.fromFoldable
           [DT.Tuple (ErlangAtom "name") val_87,
            DT.Tuple (ErlangAtom "arguments")
              (ErlangCons head_90 ErlangEmptyList),
            DT.Tuple (ErlangAtom "returns") val_100,
            DT.Tuple (ErlangAtom "stateful") (ErlangAtom "true"),
            DT.Tuple (ErlangAtom "payable") (ErlangAtom "true")])
  in let
    val_71 =
      ErlangMap
        (Map.fromFoldable
           [DT.Tuple (ErlangAtom "name") val_76,
            DT.Tuple (ErlangAtom "type_defs") ErlangEmptyList,
            DT.Tuple (ErlangAtom "payable") (ErlangAtom "true"),
            DT.Tuple (ErlangAtom "functions")
              (ErlangCons head_81 ErlangEmptyList)])
  in let
    mapaci_107 =
      ErlangMap (Map.singleton (ErlangAtom "contract") val_71)
  in let bin_el_108 = toErl 112
  in let bin_el_109 = toErl 97
  in let bin_el_110 = toErl 121
  in let bin_el_111 = toErl 97
  in let bin_el_112 = toErl 98
  in let bin_el_113 = toErl 108
  in let bin_el_114 = toErl 101
  in let bin_el_115 = toErl 32
  in let bin_el_116 = toErl 99
  in let bin_el_117 = toErl 111
  in let bin_el_118 = toErl 110
  in let bin_el_119 = toErl 116
  in let bin_el_120 = toErl 114
  in let bin_el_121 = toErl 97
  in let bin_el_122 = toErl 99
  in let bin_el_123 = toErl 116
  in let bin_el_124 = toErl 32
  in let bin_el_125 = toErl 67
  in let bin_el_126 = toErl 32
  in let bin_el_127 = toErl 61
  in let bin_el_128 = toErl 10
  in let bin_el_129 = toErl 32
  in let bin_el_130 = toErl 32
  in let bin_el_131 = toErl 112
  in let bin_el_132 = toErl 97
  in let bin_el_133 = toErl 121
  in let bin_el_134 = toErl 97
  in let bin_el_135 = toErl 98
  in let bin_el_136 = toErl 108
  in let bin_el_137 = toErl 101
  in let bin_el_138 = toErl 32
  in let bin_el_139 = toErl 101
  in let bin_el_140 = toErl 110
  in let bin_el_141 = toErl 116
  in let bin_el_142 = toErl 114
  in let bin_el_143 = toErl 121
  in let bin_el_144 = toErl 112
  in let bin_el_145 = toErl 111
  in let bin_el_146 = toErl 105
  in let bin_el_147 = toErl 110
  in let bin_el_148 = toErl 116
  in let bin_el_149 = toErl 32
  in let bin_el_150 = toErl 97
  in let bin_el_151 = toErl 32
  in let bin_el_152 = toErl 58
  in let bin_el_153 = toErl 32
  in let bin_el_154 = toErl 40
  in let bin_el_155 = toErl 105
  in let bin_el_156 = toErl 110
  in let bin_el_157 = toErl 116
  in let bin_el_158 = toErl 41
  in let bin_el_159 = toErl 32
  in let bin_el_160 = toErl 61
  in let bin_el_161 = toErl 62
  in let bin_el_162 = toErl 32
  in let bin_el_163 = toErl 105
  in let bin_el_164 = toErl 110
  in let bin_el_165 = toErl 116
  in let bin_el_166 = toErl 10
  in let
    decaci_167 =
      ErlangBinary
        (BIN.concat
           [BIN.fromInt bin_el_108 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_109 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_110 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_111 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_112 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_113 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_114 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_115 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_116 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_117 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_118 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_119 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_120 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_121 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_122 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_123 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_124 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_125 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_126 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_127 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_128 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_129 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_130 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_131 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_132 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_133 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_134 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_135 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_136 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_137 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_138 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_139 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_140 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_141 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_142 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_143 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_144 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_145 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_146 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_147 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_148 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_149 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_150 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_151 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_152 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_153 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_154 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_155 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_156 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_157 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_158 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_159 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_160 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_161 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_162 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_163 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_164 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_165 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_166 (toErl 8) 1 BIN.Big])
  in ErlangTuple [contract_69, mapaci_107, decaci_167]
erlps__test_cases__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 2)) =
  let    bin_el_1 = toErl 99
  in let bin_el_2 = toErl 111
  in let bin_el_3 = toErl 110
  in let bin_el_4 = toErl 116
  in let bin_el_5 = toErl 114
  in let bin_el_6 = toErl 97
  in let bin_el_7 = toErl 99
  in let bin_el_8 = toErl 116
  in let bin_el_9 = toErl 32
  in let bin_el_10 = toErl 67
  in let bin_el_11 = toErl 32
  in let bin_el_12 = toErl 61
  in let bin_el_13 = toErl 10
  in let bin_el_14 = toErl 32
  in let bin_el_15 = toErl 32
  in let bin_el_16 = toErl 116
  in let bin_el_17 = toErl 121
  in let bin_el_18 = toErl 112
  in let bin_el_19 = toErl 101
  in let bin_el_20 = toErl 32
  in let bin_el_21 = toErl 97
  in let bin_el_22 = toErl 108
  in let bin_el_23 = toErl 108
  in let bin_el_24 = toErl 97
  in let bin_el_25 = toErl 110
  in let bin_el_26 = toErl 32
  in let bin_el_27 = toErl 61
  in let bin_el_28 = toErl 32
  in let bin_el_29 = toErl 105
  in let bin_el_30 = toErl 110
  in let bin_el_31 = toErl 116
  in let bin_el_32 = toErl 10
  in let bin_el_33 = toErl 32
  in let bin_el_34 = toErl 32
  in let bin_el_35 = toErl 101
  in let bin_el_36 = toErl 110
  in let bin_el_37 = toErl 116
  in let bin_el_38 = toErl 114
  in let bin_el_39 = toErl 121
  in let bin_el_40 = toErl 112
  in let bin_el_41 = toErl 111
  in let bin_el_42 = toErl 105
  in let bin_el_43 = toErl 110
  in let bin_el_44 = toErl 116
  in let bin_el_45 = toErl 32
  in let bin_el_46 = toErl 97
  in let bin_el_47 = toErl 40
  in let bin_el_48 = toErl 105
  in let bin_el_49 = toErl 32
  in let bin_el_50 = toErl 58
  in let bin_el_51 = toErl 32
  in let bin_el_52 = toErl 97
  in let bin_el_53 = toErl 108
  in let bin_el_54 = toErl 108
  in let bin_el_55 = toErl 97
  in let bin_el_56 = toErl 110
  in let bin_el_57 = toErl 41
  in let bin_el_58 = toErl 32
  in let bin_el_59 = toErl 61
  in let bin_el_60 = toErl 32
  in let bin_el_61 = toErl 105
  in let bin_el_62 = toErl 43
  in let bin_el_63 = toErl 49
  in let bin_el_64 = toErl 10
  in let
    contract_65 =
      ErlangBinary
        (BIN.concat
           [BIN.fromInt bin_el_1 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_2 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_3 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_4 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_5 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_6 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_7 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_8 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_9 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_10 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_11 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_12 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_13 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_14 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_15 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_16 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_17 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_18 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_19 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_20 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_21 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_22 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_23 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_24 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_25 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_26 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_27 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_28 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_29 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_30 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_31 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_32 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_33 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_34 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_35 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_36 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_37 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_38 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_39 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_40 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_41 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_42 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_43 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_44 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_45 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_46 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_47 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_48 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_49 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_50 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_51 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_52 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_53 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_54 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_55 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_56 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_57 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_58 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_59 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_60 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_61 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_62 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_63 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_64 (toErl 8) 1 BIN.Big])
  in let bin_el_73 = toErl 67
  in let
    val_72 = ErlangBinary (BIN.fromInt bin_el_73 (toErl 8) 1 BIN.Big)
  in let bin_el_81 = toErl 97
  in let bin_el_82 = toErl 108
  in let bin_el_83 = toErl 108
  in let bin_el_84 = toErl 97
  in let bin_el_85 = toErl 110
  in let
    val_80 =
      ErlangBinary
        (BIN.concat
           [BIN.fromInt bin_el_81 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_82 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_83 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_84 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_85 (toErl 8) 1 BIN.Big])
  in let bin_el_87 = toErl 105
  in let bin_el_88 = toErl 110
  in let bin_el_89 = toErl 116
  in let
    val_86 =
      ErlangBinary
        (BIN.concat
           [BIN.fromInt bin_el_87 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_88 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_89 (toErl 8) 1 BIN.Big])
  in let
    head_76 =
      ErlangMap
        (Map.fromFoldable
           [DT.Tuple (ErlangAtom "name") val_80,
            DT.Tuple (ErlangAtom "typedef") val_86,
            DT.Tuple (ErlangAtom "vars") ErlangEmptyList])
  in let bin_el_104 = toErl 105
  in let
    val_103 =
      ErlangBinary (BIN.fromInt bin_el_104 (toErl 8) 1 BIN.Big)
  in let bin_el_106 = toErl 67
  in let bin_el_107 = toErl 46
  in let bin_el_108 = toErl 97
  in let bin_el_109 = toErl 108
  in let bin_el_110 = toErl 108
  in let bin_el_111 = toErl 97
  in let bin_el_112 = toErl 110
  in let
    val_105 =
      ErlangBinary
        (BIN.concat
           [BIN.fromInt bin_el_106 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_107 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_108 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_109 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_110 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_111 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_112 (toErl 8) 1 BIN.Big])
  in let
    head_100 =
      ErlangMap
        (Map.fromFoldable
           [DT.Tuple (ErlangAtom "name") val_103,
            DT.Tuple (ErlangAtom "type") val_105])
  in let bin_el_115 = toErl 97
  in let
    val_114 =
      ErlangBinary (BIN.fromInt bin_el_115 (toErl 8) 1 BIN.Big)
  in let bin_el_117 = toErl 105
  in let bin_el_118 = toErl 110
  in let bin_el_119 = toErl 116
  in let
    val_116 =
      ErlangBinary
        (BIN.concat
           [BIN.fromInt bin_el_117 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_118 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_119 (toErl 8) 1 BIN.Big])
  in let
    head_93 =
      ErlangMap
        (Map.fromFoldable
           [DT.Tuple (ErlangAtom "arguments")
              (ErlangCons head_100 ErlangEmptyList),
            DT.Tuple (ErlangAtom "name") val_114,
            DT.Tuple (ErlangAtom "returns") val_116,
            DT.Tuple (ErlangAtom "stateful") (ErlangAtom "false"),
            DT.Tuple (ErlangAtom "payable") (ErlangAtom "false")])
  in let
    val_67 =
      ErlangMap
        (Map.fromFoldable
           [DT.Tuple (ErlangAtom "name") val_72,
            DT.Tuple (ErlangAtom "payable") (ErlangAtom "false"),
            DT.Tuple (ErlangAtom "type_defs")
              (ErlangCons head_76 ErlangEmptyList),
            DT.Tuple (ErlangAtom "functions")
              (ErlangCons head_93 ErlangEmptyList)])
  in let
    mapaci_123 =
      ErlangMap (Map.singleton (ErlangAtom "contract") val_67)
  in let bin_el_124 = toErl 99
  in let bin_el_125 = toErl 111
  in let bin_el_126 = toErl 110
  in let bin_el_127 = toErl 116
  in let bin_el_128 = toErl 114
  in let bin_el_129 = toErl 97
  in let bin_el_130 = toErl 99
  in let bin_el_131 = toErl 116
  in let bin_el_132 = toErl 32
  in let bin_el_133 = toErl 67
  in let bin_el_134 = toErl 32
  in let bin_el_135 = toErl 61
  in let bin_el_136 = toErl 10
  in let bin_el_137 = toErl 32
  in let bin_el_138 = toErl 32
  in let bin_el_139 = toErl 116
  in let bin_el_140 = toErl 121
  in let bin_el_141 = toErl 112
  in let bin_el_142 = toErl 101
  in let bin_el_143 = toErl 32
  in let bin_el_144 = toErl 97
  in let bin_el_145 = toErl 108
  in let bin_el_146 = toErl 108
  in let bin_el_147 = toErl 97
  in let bin_el_148 = toErl 110
  in let bin_el_149 = toErl 32
  in let bin_el_150 = toErl 61
  in let bin_el_151 = toErl 32
  in let bin_el_152 = toErl 105
  in let bin_el_153 = toErl 110
  in let bin_el_154 = toErl 116
  in let bin_el_155 = toErl 10
  in let bin_el_156 = toErl 32
  in let bin_el_157 = toErl 32
  in let bin_el_158 = toErl 101
  in let bin_el_159 = toErl 110
  in let bin_el_160 = toErl 116
  in let bin_el_161 = toErl 114
  in let bin_el_162 = toErl 121
  in let bin_el_163 = toErl 112
  in let bin_el_164 = toErl 111
  in let bin_el_165 = toErl 105
  in let bin_el_166 = toErl 110
  in let bin_el_167 = toErl 116
  in let bin_el_168 = toErl 32
  in let bin_el_169 = toErl 97
  in let bin_el_170 = toErl 32
  in let bin_el_171 = toErl 58
  in let bin_el_172 = toErl 32
  in let bin_el_173 = toErl 40
  in let bin_el_174 = toErl 67
  in let bin_el_175 = toErl 46
  in let bin_el_176 = toErl 97
  in let bin_el_177 = toErl 108
  in let bin_el_178 = toErl 108
  in let bin_el_179 = toErl 97
  in let bin_el_180 = toErl 110
  in let bin_el_181 = toErl 41
  in let bin_el_182 = toErl 32
  in let bin_el_183 = toErl 61
  in let bin_el_184 = toErl 62
  in let bin_el_185 = toErl 32
  in let bin_el_186 = toErl 105
  in let bin_el_187 = toErl 110
  in let bin_el_188 = toErl 116
  in let bin_el_189 = toErl 10
  in let
    decaci_190 =
      ErlangBinary
        (BIN.concat
           [BIN.fromInt bin_el_124 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_125 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_126 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_127 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_128 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_129 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_130 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_131 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_132 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_133 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_134 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_135 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_136 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_137 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_138 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_139 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_140 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_141 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_142 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_143 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_144 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_145 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_146 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_147 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_148 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_149 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_150 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_151 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_152 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_153 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_154 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_155 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_156 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_157 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_158 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_159 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_160 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_161 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_162 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_163 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_164 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_165 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_166 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_167 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_168 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_169 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_170 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_171 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_172 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_173 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_174 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_175 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_176 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_177 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_178 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_179 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_180 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_181 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_182 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_183 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_184 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_185 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_186 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_187 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_188 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_189 (toErl 8) 1 BIN.Big])
  in ErlangTuple [contract_65, mapaci_123, decaci_190]
erlps__test_cases__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 3)) =
  let    bin_el_1 = toErl 99
  in let bin_el_2 = toErl 111
  in let bin_el_3 = toErl 110
  in let bin_el_4 = toErl 116
  in let bin_el_5 = toErl 114
  in let bin_el_6 = toErl 97
  in let bin_el_7 = toErl 99
  in let bin_el_8 = toErl 116
  in let bin_el_9 = toErl 32
  in let bin_el_10 = toErl 67
  in let bin_el_11 = toErl 32
  in let bin_el_12 = toErl 61
  in let bin_el_13 = toErl 10
  in let bin_el_14 = toErl 32
  in let bin_el_15 = toErl 32
  in let bin_el_16 = toErl 116
  in let bin_el_17 = toErl 121
  in let bin_el_18 = toErl 112
  in let bin_el_19 = toErl 101
  in let bin_el_20 = toErl 32
  in let bin_el_21 = toErl 115
  in let bin_el_22 = toErl 116
  in let bin_el_23 = toErl 97
  in let bin_el_24 = toErl 116
  in let bin_el_25 = toErl 101
  in let bin_el_26 = toErl 32
  in let bin_el_27 = toErl 61
  in let bin_el_28 = toErl 32
  in let bin_el_29 = toErl 117
  in let bin_el_30 = toErl 110
  in let bin_el_31 = toErl 105
  in let bin_el_32 = toErl 116
  in let bin_el_33 = toErl 10
  in let bin_el_34 = toErl 32
  in let bin_el_35 = toErl 32
  in let bin_el_36 = toErl 100
  in let bin_el_37 = toErl 97
  in let bin_el_38 = toErl 116
  in let bin_el_39 = toErl 97
  in let bin_el_40 = toErl 116
  in let bin_el_41 = toErl 121
  in let bin_el_42 = toErl 112
  in let bin_el_43 = toErl 101
  in let bin_el_44 = toErl 32
  in let bin_el_45 = toErl 101
  in let bin_el_46 = toErl 118
  in let bin_el_47 = toErl 101
  in let bin_el_48 = toErl 110
  in let bin_el_49 = toErl 116
  in let bin_el_50 = toErl 32
  in let bin_el_51 = toErl 61
  in let bin_el_52 = toErl 32
  in let bin_el_53 = toErl 83
  in let bin_el_54 = toErl 105
  in let bin_el_55 = toErl 110
  in let bin_el_56 = toErl 103
  in let bin_el_57 = toErl 108
  in let bin_el_58 = toErl 101
  in let bin_el_59 = toErl 69
  in let bin_el_60 = toErl 118
  in let bin_el_61 = toErl 101
  in let bin_el_62 = toErl 110
  in let bin_el_63 = toErl 116
  in let bin_el_64 = toErl 68
  in let bin_el_65 = toErl 101
  in let bin_el_66 = toErl 102
  in let bin_el_67 = toErl 105
  in let bin_el_68 = toErl 110
  in let bin_el_69 = toErl 101
  in let bin_el_70 = toErl 100
  in let bin_el_71 = toErl 10
  in let bin_el_72 = toErl 32
  in let bin_el_73 = toErl 32
  in let bin_el_74 = toErl 100
  in let bin_el_75 = toErl 97
  in let bin_el_76 = toErl 116
  in let bin_el_77 = toErl 97
  in let bin_el_78 = toErl 116
  in let bin_el_79 = toErl 121
  in let bin_el_80 = toErl 112
  in let bin_el_81 = toErl 101
  in let bin_el_82 = toErl 32
  in let bin_el_83 = toErl 98
  in let bin_el_84 = toErl 101
  in let bin_el_85 = toErl 114
  in let bin_el_86 = toErl 116
  in let bin_el_87 = toErl 40
  in let bin_el_88 = toErl 39
  in let bin_el_89 = toErl 97
  in let bin_el_90 = toErl 41
  in let bin_el_91 = toErl 32
  in let bin_el_92 = toErl 61
  in let bin_el_93 = toErl 32
  in let bin_el_94 = toErl 66
  in let bin_el_95 = toErl 105
  in let bin_el_96 = toErl 110
  in let bin_el_97 = toErl 40
  in let bin_el_98 = toErl 39
  in let bin_el_99 = toErl 97
  in let bin_el_100 = toErl 41
  in let bin_el_101 = toErl 10
  in let bin_el_102 = toErl 32
  in let bin_el_103 = toErl 32
  in let bin_el_104 = toErl 101
  in let bin_el_105 = toErl 110
  in let bin_el_106 = toErl 116
  in let bin_el_107 = toErl 114
  in let bin_el_108 = toErl 121
  in let bin_el_109 = toErl 112
  in let bin_el_110 = toErl 111
  in let bin_el_111 = toErl 105
  in let bin_el_112 = toErl 110
  in let bin_el_113 = toErl 116
  in let bin_el_114 = toErl 32
  in let bin_el_115 = toErl 97
  in let bin_el_116 = toErl 40
  in let bin_el_117 = toErl 105
  in let bin_el_118 = toErl 32
  in let bin_el_119 = toErl 58
  in let bin_el_120 = toErl 32
  in let bin_el_121 = toErl 98
  in let bin_el_122 = toErl 101
  in let bin_el_123 = toErl 114
  in let bin_el_124 = toErl 116
  in let bin_el_125 = toErl 40
  in let bin_el_126 = toErl 115
  in let bin_el_127 = toErl 116
  in let bin_el_128 = toErl 114
  in let bin_el_129 = toErl 105
  in let bin_el_130 = toErl 110
  in let bin_el_131 = toErl 103
  in let bin_el_132 = toErl 41
  in let bin_el_133 = toErl 41
  in let bin_el_134 = toErl 32
  in let bin_el_135 = toErl 61
  in let bin_el_136 = toErl 32
  in let bin_el_137 = toErl 49
  in let bin_el_138 = toErl 10
  in let
    contract_139 =
      ErlangBinary
        (BIN.concat
           [BIN.fromInt bin_el_1 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_2 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_3 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_4 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_5 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_6 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_7 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_8 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_9 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_10 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_11 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_12 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_13 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_14 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_15 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_16 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_17 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_18 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_19 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_20 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_21 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_22 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_23 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_24 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_25 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_26 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_27 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_28 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_29 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_30 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_31 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_32 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_33 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_34 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_35 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_36 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_37 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_38 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_39 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_40 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_41 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_42 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_43 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_44 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_45 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_46 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_47 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_48 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_49 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_50 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_51 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_52 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_53 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_54 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_55 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_56 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_57 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_58 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_59 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_60 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_61 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_62 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_63 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_64 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_65 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_66 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_67 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_68 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_69 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_70 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_71 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_72 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_73 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_74 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_75 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_76 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_77 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_78 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_79 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_80 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_81 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_82 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_83 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_84 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_85 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_86 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_87 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_88 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_89 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_90 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_91 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_92 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_93 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_94 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_95 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_96 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_97 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_98 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_99 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_100 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_101 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_102 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_103 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_104 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_105 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_106 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_107 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_108 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_109 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_110 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_111 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_112 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_113 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_114 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_115 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_116 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_117 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_118 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_119 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_120 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_121 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_122 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_123 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_124 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_125 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_126 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_127 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_128 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_129 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_130 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_131 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_132 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_133 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_134 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_135 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_136 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_137 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_138 (toErl 8) 1 BIN.Big])
  in let bin_el_160 = toErl 105
  in let
    val_159 =
      ErlangBinary (BIN.fromInt bin_el_160 (toErl 8) 1 BIN.Big)
  in let bin_el_163 = toErl 67
  in let bin_el_164 = toErl 46
  in let bin_el_165 = toErl 98
  in let bin_el_166 = toErl 101
  in let bin_el_167 = toErl 114
  in let bin_el_168 = toErl 116
  in let
    key_162 =
      ErlangBinary
        (BIN.concat
           [BIN.fromInt bin_el_163 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_164 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_165 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_166 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_167 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_168 (toErl 8) 1 BIN.Big])
  in let bin_el_171 = toErl 115
  in let bin_el_172 = toErl 116
  in let bin_el_173 = toErl 114
  in let bin_el_174 = toErl 105
  in let bin_el_175 = toErl 110
  in let bin_el_176 = toErl 103
  in let
    head_170 =
      ErlangBinary
        (BIN.concat
           [BIN.fromInt bin_el_171 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_172 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_173 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_174 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_175 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_176 (toErl 8) 1 BIN.Big])
  in let
    val_161 =
      ErlangMap
        (Map.singleton key_162 (ErlangCons head_170 ErlangEmptyList))
  in let
    head_156 =
      ErlangMap
        (Map.fromFoldable
           [DT.Tuple (ErlangAtom "name") val_159,
            DT.Tuple (ErlangAtom "type") val_161])
  in let bin_el_180 = toErl 97
  in let
    val_179 =
      ErlangBinary (BIN.fromInt bin_el_180 (toErl 8) 1 BIN.Big)
  in let bin_el_182 = toErl 105
  in let bin_el_183 = toErl 110
  in let bin_el_184 = toErl 116
  in let
    val_181 =
      ErlangBinary
        (BIN.concat
           [BIN.fromInt bin_el_182 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_183 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_184 (toErl 8) 1 BIN.Big])
  in let
    head_149 =
      ErlangMap
        (Map.fromFoldable
           [DT.Tuple (ErlangAtom "arguments")
              (ErlangCons head_156 ErlangEmptyList),
            DT.Tuple (ErlangAtom "name") val_179,
            DT.Tuple (ErlangAtom "returns") val_181,
            DT.Tuple (ErlangAtom "stateful") (ErlangAtom "false"),
            DT.Tuple (ErlangAtom "payable") (ErlangAtom "false")])
  in let bin_el_189 = toErl 67
  in let
    val_188 =
      ErlangBinary (BIN.fromInt bin_el_189 (toErl 8) 1 BIN.Big)
  in let bin_el_196 = toErl 83
  in let bin_el_197 = toErl 105
  in let bin_el_198 = toErl 110
  in let bin_el_199 = toErl 103
  in let bin_el_200 = toErl 108
  in let bin_el_201 = toErl 101
  in let bin_el_202 = toErl 69
  in let bin_el_203 = toErl 118
  in let bin_el_204 = toErl 101
  in let bin_el_205 = toErl 110
  in let bin_el_206 = toErl 116
  in let bin_el_207 = toErl 68
  in let bin_el_208 = toErl 101
  in let bin_el_209 = toErl 102
  in let bin_el_210 = toErl 105
  in let bin_el_211 = toErl 110
  in let bin_el_212 = toErl 101
  in let bin_el_213 = toErl 100
  in let
    key_195 =
      ErlangBinary
        (BIN.concat
           [BIN.fromInt bin_el_196 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_197 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_198 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_199 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_200 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_201 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_202 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_203 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_204 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_205 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_206 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_207 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_208 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_209 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_210 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_211 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_212 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_213 (toErl 8) 1 BIN.Big])
  in let
    head_194 = ErlangMap (Map.singleton key_195 ErlangEmptyList)
  in let
    val_191 =
      ErlangMap
        (Map.singleton (ErlangAtom "variant")
           (ErlangCons head_194 ErlangEmptyList))
  in let bin_el_217 = toErl 117
  in let bin_el_218 = toErl 110
  in let bin_el_219 = toErl 105
  in let bin_el_220 = toErl 116
  in let
    val_216 =
      ErlangBinary
        (BIN.concat
           [BIN.fromInt bin_el_217 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_218 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_219 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_220 (toErl 8) 1 BIN.Big])
  in let bin_el_227 = toErl 98
  in let bin_el_228 = toErl 101
  in let bin_el_229 = toErl 114
  in let bin_el_230 = toErl 116
  in let
    val_226 =
      ErlangBinary
        (BIN.concat
           [BIN.fromInt bin_el_227 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_228 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_229 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_230 (toErl 8) 1 BIN.Big])
  in let bin_el_236 = toErl 66
  in let bin_el_237 = toErl 105
  in let bin_el_238 = toErl 110
  in let
    key_235 =
      ErlangBinary
        (BIN.concat
           [BIN.fromInt bin_el_236 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_237 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_238 (toErl 8) 1 BIN.Big])
  in let bin_el_241 = toErl 39
  in let bin_el_242 = toErl 97
  in let
    head_240 =
      ErlangBinary
        (BIN.concat
           [BIN.fromInt bin_el_241 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_242 (toErl 8) 1 BIN.Big])
  in let
    head_234 =
      ErlangMap
        (Map.singleton key_235 (ErlangCons head_240 ErlangEmptyList))
  in let
    val_231 =
      ErlangMap
        (Map.singleton (ErlangAtom "variant")
           (ErlangCons head_234 ErlangEmptyList))
  in let bin_el_249 = toErl 39
  in let bin_el_250 = toErl 97
  in let
    val_248 =
      ErlangBinary
        (BIN.concat
           [BIN.fromInt bin_el_249 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_250 (toErl 8) 1 BIN.Big])
  in let
    head_246 = ErlangMap (Map.singleton (ErlangAtom "name") val_248)
  in let
    head_222 =
      ErlangMap
        (Map.fromFoldable
           [DT.Tuple (ErlangAtom "name") val_226,
            DT.Tuple (ErlangAtom "typedef") val_231,
            DT.Tuple (ErlangAtom "vars")
              (ErlangCons head_246 ErlangEmptyList)])
  in let
    val_141 =
      ErlangMap
        (Map.fromFoldable
           [DT.Tuple (ErlangAtom "functions")
              (ErlangCons head_149 ErlangEmptyList),
            DT.Tuple (ErlangAtom "name") val_188,
            DT.Tuple (ErlangAtom "payable") (ErlangAtom "false"),
            DT.Tuple (ErlangAtom "event") val_191,
            DT.Tuple (ErlangAtom "state") val_216,
            DT.Tuple (ErlangAtom "type_defs")
              (ErlangCons head_222 ErlangEmptyList)])
  in let
    mapaci_253 =
      ErlangMap (Map.singleton (ErlangAtom "contract") val_141)
  in let bin_el_254 = toErl 99
  in let bin_el_255 = toErl 111
  in let bin_el_256 = toErl 110
  in let bin_el_257 = toErl 116
  in let bin_el_258 = toErl 114
  in let bin_el_259 = toErl 97
  in let bin_el_260 = toErl 99
  in let bin_el_261 = toErl 116
  in let bin_el_262 = toErl 32
  in let bin_el_263 = toErl 67
  in let bin_el_264 = toErl 32
  in let bin_el_265 = toErl 61
  in let bin_el_266 = toErl 10
  in let bin_el_267 = toErl 32
  in let bin_el_268 = toErl 32
  in let bin_el_269 = toErl 116
  in let bin_el_270 = toErl 121
  in let bin_el_271 = toErl 112
  in let bin_el_272 = toErl 101
  in let bin_el_273 = toErl 32
  in let bin_el_274 = toErl 115
  in let bin_el_275 = toErl 116
  in let bin_el_276 = toErl 97
  in let bin_el_277 = toErl 116
  in let bin_el_278 = toErl 101
  in let bin_el_279 = toErl 32
  in let bin_el_280 = toErl 61
  in let bin_el_281 = toErl 32
  in let bin_el_282 = toErl 117
  in let bin_el_283 = toErl 110
  in let bin_el_284 = toErl 105
  in let bin_el_285 = toErl 116
  in let bin_el_286 = toErl 10
  in let bin_el_287 = toErl 32
  in let bin_el_288 = toErl 32
  in let bin_el_289 = toErl 100
  in let bin_el_290 = toErl 97
  in let bin_el_291 = toErl 116
  in let bin_el_292 = toErl 97
  in let bin_el_293 = toErl 116
  in let bin_el_294 = toErl 121
  in let bin_el_295 = toErl 112
  in let bin_el_296 = toErl 101
  in let bin_el_297 = toErl 32
  in let bin_el_298 = toErl 101
  in let bin_el_299 = toErl 118
  in let bin_el_300 = toErl 101
  in let bin_el_301 = toErl 110
  in let bin_el_302 = toErl 116
  in let bin_el_303 = toErl 32
  in let bin_el_304 = toErl 61
  in let bin_el_305 = toErl 32
  in let bin_el_306 = toErl 83
  in let bin_el_307 = toErl 105
  in let bin_el_308 = toErl 110
  in let bin_el_309 = toErl 103
  in let bin_el_310 = toErl 108
  in let bin_el_311 = toErl 101
  in let bin_el_312 = toErl 69
  in let bin_el_313 = toErl 118
  in let bin_el_314 = toErl 101
  in let bin_el_315 = toErl 110
  in let bin_el_316 = toErl 116
  in let bin_el_317 = toErl 68
  in let bin_el_318 = toErl 101
  in let bin_el_319 = toErl 102
  in let bin_el_320 = toErl 105
  in let bin_el_321 = toErl 110
  in let bin_el_322 = toErl 101
  in let bin_el_323 = toErl 100
  in let bin_el_324 = toErl 10
  in let bin_el_325 = toErl 32
  in let bin_el_326 = toErl 32
  in let bin_el_327 = toErl 100
  in let bin_el_328 = toErl 97
  in let bin_el_329 = toErl 116
  in let bin_el_330 = toErl 97
  in let bin_el_331 = toErl 116
  in let bin_el_332 = toErl 121
  in let bin_el_333 = toErl 112
  in let bin_el_334 = toErl 101
  in let bin_el_335 = toErl 32
  in let bin_el_336 = toErl 98
  in let bin_el_337 = toErl 101
  in let bin_el_338 = toErl 114
  in let bin_el_339 = toErl 116
  in let bin_el_340 = toErl 40
  in let bin_el_341 = toErl 39
  in let bin_el_342 = toErl 97
  in let bin_el_343 = toErl 41
  in let bin_el_344 = toErl 32
  in let bin_el_345 = toErl 61
  in let bin_el_346 = toErl 32
  in let bin_el_347 = toErl 66
  in let bin_el_348 = toErl 105
  in let bin_el_349 = toErl 110
  in let bin_el_350 = toErl 40
  in let bin_el_351 = toErl 39
  in let bin_el_352 = toErl 97
  in let bin_el_353 = toErl 41
  in let bin_el_354 = toErl 10
  in let bin_el_355 = toErl 32
  in let bin_el_356 = toErl 32
  in let bin_el_357 = toErl 101
  in let bin_el_358 = toErl 110
  in let bin_el_359 = toErl 116
  in let bin_el_360 = toErl 114
  in let bin_el_361 = toErl 121
  in let bin_el_362 = toErl 112
  in let bin_el_363 = toErl 111
  in let bin_el_364 = toErl 105
  in let bin_el_365 = toErl 110
  in let bin_el_366 = toErl 116
  in let bin_el_367 = toErl 32
  in let bin_el_368 = toErl 97
  in let bin_el_369 = toErl 32
  in let bin_el_370 = toErl 58
  in let bin_el_371 = toErl 32
  in let bin_el_372 = toErl 40
  in let bin_el_373 = toErl 67
  in let bin_el_374 = toErl 46
  in let bin_el_375 = toErl 98
  in let bin_el_376 = toErl 101
  in let bin_el_377 = toErl 114
  in let bin_el_378 = toErl 116
  in let bin_el_379 = toErl 40
  in let bin_el_380 = toErl 115
  in let bin_el_381 = toErl 116
  in let bin_el_382 = toErl 114
  in let bin_el_383 = toErl 105
  in let bin_el_384 = toErl 110
  in let bin_el_385 = toErl 103
  in let bin_el_386 = toErl 41
  in let bin_el_387 = toErl 41
  in let bin_el_388 = toErl 32
  in let bin_el_389 = toErl 61
  in let bin_el_390 = toErl 62
  in let bin_el_391 = toErl 32
  in let bin_el_392 = toErl 105
  in let bin_el_393 = toErl 110
  in let bin_el_394 = toErl 116
  in let bin_el_395 = toErl 10
  in let
    decaci_396 =
      ErlangBinary
        (BIN.concat
           [BIN.fromInt bin_el_254 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_255 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_256 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_257 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_258 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_259 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_260 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_261 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_262 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_263 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_264 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_265 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_266 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_267 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_268 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_269 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_270 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_271 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_272 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_273 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_274 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_275 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_276 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_277 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_278 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_279 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_280 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_281 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_282 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_283 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_284 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_285 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_286 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_287 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_288 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_289 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_290 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_291 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_292 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_293 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_294 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_295 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_296 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_297 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_298 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_299 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_300 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_301 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_302 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_303 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_304 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_305 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_306 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_307 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_308 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_309 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_310 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_311 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_312 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_313 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_314 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_315 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_316 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_317 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_318 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_319 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_320 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_321 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_322 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_323 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_324 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_325 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_326 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_327 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_328 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_329 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_330 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_331 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_332 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_333 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_334 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_335 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_336 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_337 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_338 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_339 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_340 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_341 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_342 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_343 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_344 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_345 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_346 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_347 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_348 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_349 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_350 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_351 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_352 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_353 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_354 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_355 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_356 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_357 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_358 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_359 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_360 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_361 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_362 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_363 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_364 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_365 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_366 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_367 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_368 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_369 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_370 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_371 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_372 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_373 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_374 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_375 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_376 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_377 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_378 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_379 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_380 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_381 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_382 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_383 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_384 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_385 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_386 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_387 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_388 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_389 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_390 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_391 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_392 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_393 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_394 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_395 (toErl 8) 1 BIN.Big])
  in ErlangTuple [contract_139, mapaci_253, decaci_396]
erlps__test_cases__1 [arg_400] = EXC.function_clause unit
erlps__test_cases__1 args =
  EXC.badarity (ErlangFun 1 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__aci_test___0 :: ErlangFun
erlps__aci_test___0 [] =
  let lcSrc_0 = erlps__all_contracts__0 []
  in
    flmap
      (\ lc_2 ->
         let    lop_5 = toErl "Testing ACI generation for "
         in let tup_el_4 = BIF.erlang__op_append [lop_5, lc_2]
         in let
           tup_el_7 =
             ErlangFun 0
               (let
                  lambda_8 [] = erlps__aci_test_contract__1 [lc_2]
                  lambda_8 [] = EXC.function_clause unit
                  lambda_8 args = EXC.badarity (ErlangFun 0 lambda_8) args
                in lambda_8)
         in let lcRet_3 = ErlangTuple [tup_el_4, tup_el_7]
         in ErlangCons lcRet_3 ErlangEmptyList)
      lcSrc_0
erlps__aci_test___0 args =
  EXC.badarity (ErlangFun 0 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__all_contracts__0 :: ErlangFun
erlps__all_contracts__0 [] =
  BIF.do_remote_fun_call "Aeso.Compiler.Tests"
    "erlps__compilable_contracts__0" []
erlps__all_contracts__0 args =
  EXC.badarity (ErlangFun 0 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__aci_test_contract__1 :: ErlangFun
erlps__aci_test_contract__1 [name_0] =
  let   
    string_2 =
      BIF.do_remote_fun_call "Aeso.Test.Utils"
        "erlps__read_contract__1" [name_0]
  in let
    arg_6 =
      BIF.do_remote_fun_call "Aeso.Compiler.Tests"
        "erlps__debug_mode_contracts__0" []
  in let case_4 = BIF.lists__member__2 [name_0, arg_6]
  in let
    lop_3 =
      case case_4 of
        (ErlangAtom "true") ->
          ErlangCons (ErlangAtom "debug_mode") ErlangEmptyList
        (ErlangAtom "false") -> ErlangEmptyList
        something_else -> EXC.case_clause something_else
  in let
    head_15 =
      BIF.do_remote_fun_call "Aeso.Test.Utils"
        "erlps__contract_path__0" []
  in let
    tup_el_12 =
      ErlangTuple
        [ErlangAtom "file_system", ErlangCons head_15 ErlangEmptyList]
  in let head_10 = ErlangTuple [ErlangAtom "include", tup_el_12]
  in let
    opts_18 =
      BIF.erlang__op_append [lop_3, ErlangCons head_10 ErlangEmptyList]
  in let
    matchExpr_23 =
      BIF.do_remote_fun_call "Aeso.Aci" "erlps__contract_interface__3"
        [ErlangAtom "json", string_2, opts_18]
  in
    case matchExpr_23 of
      (ErlangTuple [(ErlangAtom "ok"), json_22]) ->
        let   
          head_26 = ErlangTuple [ErlangAtom "aci", ErlangAtom "json"]
        in let
          head_30 = ErlangTuple [ErlangAtom "backend", ErlangAtom "fate"]
        in let
          matchExpr_36 =
            BIF.do_remote_fun_call "Aeso.Compiler" "erlps__from_string__2"
              [string_2, ErlangCons head_26 (ErlangCons head_30 opts_18)]
        in
          case matchExpr_36 of
            (ErlangTuple [(ErlangAtom "ok"),
                          (ErlangMap map_34)]) | (DM.Just json1_35) <-
                                                   (Map.lookup
                                                      (ErlangAtom "aci")
                                                      map_34) ->
              let   
                fun_37 =
                  ErlangFun 0
                    (let
                       lambda_38 [] =
                         case json1_35 of
                           __x_41 | (__x_41 == json_22) -> ErlangAtom "ok"
                           __v_42 ->
                             let   
                               head_46 =
                                 ErlangTuple
                                   [ErlangAtom "module",
                                    ErlangAtom "aeso_aci_tests"]
                             in let tup_el_52 = toErl 106
                             in let
                               head_50 =
                                 ErlangTuple [ErlangAtom "line", tup_el_52]
                             in let tup_el_56 = toErl "JSON1"
                             in let
                               head_54 =
                                 ErlangTuple
                                   [ErlangAtom "expression", tup_el_56]
                             in let
                               head_58 =
                                 ErlangTuple [ErlangAtom "expected", json_22]
                             in let
                               head_62 =
                                 ErlangTuple [ErlangAtom "value", __v_42]
                             in let
                               arg_43 =
                                 ErlangTuple
                                   [ErlangAtom "assertEqual",
                                    ErlangCons head_46
                                      (ErlangCons head_50
                                         (ErlangCons head_54
                                            (ErlangCons head_58
                                               (ErlangCons head_62
                                                  ErlangEmptyList))))]
                             in BIF.erlang__error__1 [arg_43]
                       lambda_38 [] = EXC.function_clause unit
                       lambda_38 args =
                         EXC.badarity (ErlangFun 0 lambda_38) args
                     in lambda_38)
                _ = BIF.erlang__apply__2 [fun_37, ErlangEmptyList]
              in let arg_66 = toErl "JSON:\n~p\n"
              in let
                _ =
                  BIF.do_remote_fun_call "Erlang.Io" "erlps__format__2"
                    [arg_66, ErlangCons json_22 ErlangEmptyList]
              in let
                matchExpr_72 =
                  BIF.do_remote_fun_call "Aeso.Aci" "erlps__render_aci_json__1"
                    [json_22]
              in
                case matchExpr_72 of
                  (ErlangTuple [(ErlangAtom "ok"), contractstub_71]) ->
                    let    arg_73 = toErl "STUB:\n~s\n"
                    in let
                      _ =
                        BIF.do_remote_fun_call "Erlang.Io" "erlps__format__2"
                          [arg_73, ErlangCons contractstub_71 ErlangEmptyList]
                    in let head_79 = ErlangTuple [ErlangAtom "src_file", name_0]
                    in let
                      _ =
                        erlps__check_stub__2
                          [contractstub_71, ErlangCons head_79 ErlangEmptyList]
                    in ErlangAtom "ok"
                  _ -> EXC.badmatch matchExpr_72
            _ -> EXC.badmatch matchExpr_36
      _ -> EXC.badmatch matchExpr_23
erlps__aci_test_contract__1 [arg_83] = EXC.function_clause unit
erlps__aci_test_contract__1 args =
  EXC.badarity (ErlangFun 1 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__check_stub__2 :: ErlangFun
erlps__check_stub__2 [stub_0, options_1] =
  EXC.tryOfCatch
    (\ _ ->
       let arg_2 = BIF.erlang__binary_to_list__1 [stub_0]
       in
         BIF.do_remote_fun_call "Aeso.Parser" "erlps__string__2"
           [arg_2, options_1])
    (\ of_5 ->
       EXC.tryCatch
         (\ _ ->
            BIF.do_remote_fun_call "Aeso.Ast.Infer.Types" "erlps__infer__2"
              [of_5, ErlangEmptyList])
         (\ ex_12 ->
            case ex_12 of
              (ErlangTuple [(ErlangAtom "throw"),
                            (ErlangTuple [(ErlangAtom "type_errors"), te_14]),
                            _]) ->
                let    arg_15 = toErl "Type error:\n~s\n"
                in let
                  _ =
                    BIF.do_remote_fun_call "Erlang.Io" "erlps__format__2"
                      [arg_15, ErlangCons te_14 ErlangEmptyList]
                in BIF.erlang__error__1 [te_14]
              (ErlangTuple [_, r_20, _]) ->
                let    arg_21 = toErl "Error: ~p\n"
                in let
                  _ =
                    BIF.do_remote_fun_call "Erlang.Io" "erlps__format__2"
                      [arg_21, ErlangCons r_20 ErlangEmptyList]
                in BIF.erlang__error__1 [r_20]
              ex_13 -> EXC.raise ex_13))
    (\ ex_6 ->
       case ex_6 of
         (ErlangTuple [(ErlangAtom "throw"),
                       (ErlangTuple [(ErlangAtom "error"), errs_26]), _]) ->
           let   
             matchExpr_36 =
               flmap
                 (\ lc_29 ->
                    let    arg_31 = toErl "~s\n"
                    in let
                      head_33 =
                        BIF.do_remote_fun_call "Aeso.Errors" "erlps__pp__1"
                          [lc_29]
                    in let
                      lcRet_30 =
                        BIF.do_remote_fun_call "Erlang.Io" "erlps__format__2"
                          [arg_31, ErlangCons head_33 ErlangEmptyList]
                    in ErlangCons lcRet_30 ErlangEmptyList)
                 errs_26
           in let arg_37 = ErlangTuple [ErlangAtom "parse_errors", errs_26]
           in BIF.erlang__error__1 [arg_37]
         ex_7 -> EXC.raise ex_7)
erlps__check_stub__2 [arg_40, arg_41] = EXC.function_clause unit
erlps__check_stub__2 args =
  EXC.badarity (ErlangFun 2 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__test__0 :: ErlangFun
erlps__test__0 [] =
  BIF.do_remote_fun_call "Eunit" "erlps__test__1"
    [ErlangAtom "aeso_aci_tests"]
erlps__test__0 args =
  EXC.badarity (ErlangFun 0 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args