module Aeso.Parser.Tests(erlps__test__0,
                         erlps__simple_contracts_test___0,
                         erlps__parse_contract__1) where
{-
This file has been autogenerated
DO NOT EDIT - Your changes WILL be overwritten
Use this code at your own risk - the authors are just a mischievous raccoon and a haskell devote
Erlscripten v0.2.0
-}

import Prelude
import Data.BigInt as DBI
import Data.Array as DA
import Data.Maybe as DM
import Data.Map as Map
import Data.Tuple as DT
import Erlang.Builtins as BIF
import Erlang.Binary as BIN
import Erlang.Helpers
import Erlang.Exception as EXC
import Erlang.Type
import Partial.Unsafe (unsafePartial)


erlps__id__1 :: ErlangFun
erlps__id__1 [x_0] = x_0
erlps__id__1 [arg_1] = EXC.function_clause unit
erlps__id__1 args = EXC.badarity (ErlangFun 1 erlps__id__1) args

erlps__simple_contracts_test___0 :: ErlangFun
erlps__simple_contracts_test___0 [] =
  let   
    tup_el_1 =
      ErlangFun 0
        (let
           lambda_2 [] = ErlangAtom "ok"
           lambda_2 [] = EXC.function_clause unit
           lambda_2 args = EXC.badarity (ErlangFun 0 lambda_2) args
         in lambda_2)
  in let
    tup_el_3 =
      ErlangFun 1
        (let
           lambda_4 [_] = ErlangAtom "ok"
           lambda_4 [arg_5] = EXC.function_clause unit
           lambda_4 args = EXC.badarity (ErlangFun 1 lambda_4) args
         in lambda_4)
  in let
    tup_el_9 = toErl "Parse a contract with an identity function."
  in let
    tup_el_10 =
      ErlangFun 0
        (let
           lambda_11 [] =
             let   
               text_12 = toErl "contract Identity =\n  function id(x) = x\n"
             in let
               fun_13 =
                 ErlangFun 0
                   (let
                      lambda_14 [] =
                        let case_15 = erlps__parse_string__1 [text_12]
                        in
                          case case_15 of
                            (ErlangCons (ErlangTuple [(ErlangAtom "contract"),
                                                      _,
                                                      (ErlangTuple [(ErlangAtom "con"),
                                                                    _,
                                                                    (ErlangCons (ErlangInt num_17) (ErlangCons (ErlangInt num_18) (ErlangCons (ErlangInt num_19) (ErlangCons (ErlangInt num_20) (ErlangCons (ErlangInt num_21) (ErlangCons (ErlangInt num_22) (ErlangCons (ErlangInt num_23) (ErlangCons (ErlangInt num_24) (ErlangEmptyList)))))))))]),
                                                      (ErlangCons (ErlangTuple [(ErlangAtom "letfun"),
                                                                                _,
                                                                                (ErlangTuple [(ErlangAtom "id"),
                                                                                              _,
                                                                                              (ErlangCons (ErlangInt num_25) (ErlangCons (ErlangInt num_26) (ErlangEmptyList)))]),
                                                                                (ErlangCons (ErlangTuple [(ErlangAtom "id"),
                                                                                                          _,
                                                                                                          (ErlangCons (ErlangInt num_27) (ErlangEmptyList))]) (ErlangEmptyList)),
                                                                                (ErlangTuple [(ErlangAtom "id"),
                                                                                              _,
                                                                                              (ErlangCons (ErlangInt num_28) (ErlangEmptyList))]),
                                                                                (ErlangTuple [(ErlangAtom "id"),
                                                                                              _,
                                                                                              (ErlangCons (ErlangInt num_29) (ErlangEmptyList))])]) (ErlangEmptyList))]) (ErlangEmptyList)) | (ErlangInt
                                                                                                                                                                                                 num_17) ==
                                                                                                                                                                                                (toErl
                                                                                                                                                                                                   73)
                                                                                                                                                                                            , (ErlangInt
                                                                                                                                                                                                 num_18) ==
                                                                                                                                                                                                (toErl
                                                                                                                                                                                                   100)
                                                                                                                                                                                            , (ErlangInt
                                                                                                                                                                                                 num_19) ==
                                                                                                                                                                                                (toErl
                                                                                                                                                                                                   101)
                                                                                                                                                                                            , (ErlangInt
                                                                                                                                                                                                 num_20) ==
                                                                                                                                                                                                (toErl
                                                                                                                                                                                                   110)
                                                                                                                                                                                            , (ErlangInt
                                                                                                                                                                                                 num_21) ==
                                                                                                                                                                                                (toErl
                                                                                                                                                                                                   116)
                                                                                                                                                                                            , (ErlangInt
                                                                                                                                                                                                 num_22) ==
                                                                                                                                                                                                (toErl
                                                                                                                                                                                                   105)
                                                                                                                                                                                            , (ErlangInt
                                                                                                                                                                                                 num_23) ==
                                                                                                                                                                                                (toErl
                                                                                                                                                                                                   116)
                                                                                                                                                                                            , (ErlangInt
                                                                                                                                                                                                 num_24) ==
                                                                                                                                                                                                (toErl
                                                                                                                                                                                                   121)
                                                                                                                                                                                            , (ErlangInt
                                                                                                                                                                                                 num_25) ==
                                                                                                                                                                                                (toErl
                                                                                                                                                                                                   105)
                                                                                                                                                                                            , (ErlangInt
                                                                                                                                                                                                 num_26) ==
                                                                                                                                                                                                (toErl
                                                                                                                                                                                                   100)
                                                                                                                                                                                            , (ErlangInt
                                                                                                                                                                                                 num_27) ==
                                                                                                                                                                                                (toErl
                                                                                                                                                                                                   120)
                                                                                                                                                                                            , (ErlangInt
                                                                                                                                                                                                 num_28) ==
                                                                                                                                                                                                (toErl
                                                                                                                                                                                                   95)
                                                                                                                                                                                            , (ErlangInt
                                                                                                                                                                                                 num_29) ==
                                                                                                                                                                                                (toErl
                                                                                                                                                                                                   120) ->
                              ErlangAtom "ok"
                            __v_30 ->
                              let   
                                head_34 =
                                  ErlangTuple
                                    [ErlangAtom "module",
                                     ErlangAtom "aeso_parser_tests"]
                              in let tup_el_40 = toErl 20
                              in let
                                head_38 =
                                  ErlangTuple [ErlangAtom "line", tup_el_40]
                              in let tup_el_44 = toErl "parse_string ( Text )"
                              in let
                                head_42 =
                                  ErlangTuple
                                    [ErlangAtom "expression", tup_el_44]
                              in let
                                tup_el_48 =
                                  toErl
                                    "[ { contract , _ , { con , _ , \"Identity\" } , [ { letfun , _ , { id , _ , \"id\" } , [ { id , _ , \"x\" } ] , { id , _ , \"_\" } , { id , _ , \"x\" } } ] } ]"
                              in let
                                head_46 =
                                  ErlangTuple [ErlangAtom "pattern", tup_el_48]
                              in let
                                head_50 =
                                  ErlangTuple [ErlangAtom "value", __v_30]
                              in let
                                arg_31 =
                                  ErlangTuple
                                    [ErlangAtom "assertMatch",
                                     ErlangCons head_34
                                       (ErlangCons head_38
                                          (ErlangCons head_42
                                             (ErlangCons head_46
                                                (ErlangCons head_50
                                                   ErlangEmptyList))))]
                              in BIF.erlang__error__1 [arg_31]
                      lambda_14 [] = EXC.function_clause unit
                      lambda_14 args = EXC.badarity (ErlangFun 0 lambda_14) args
                    in lambda_14)
               _ = BIF.erlang__apply__2 [fun_13, ErlangEmptyList]
             in ErlangAtom "ok"
           lambda_11 [] = EXC.function_clause unit
           lambda_11 args = EXC.badarity (ErlangFun 0 lambda_11) args
         in lambda_11)
  in let head_8 = ErlangTuple [tup_el_9, tup_el_10]
  in let tup_el_56 = toErl "Operator precedence test."
  in let
    tup_el_57 =
      ErlangFun 0
        (let
           lambda_58 [] =
             let   
               nopar_92 =
                 ErlangFun 1
                   (let
                      nopar_59 [x_61] | isEAtom x_61 =
                        BIF.erlang__atom_to_list__1 [x_61]
                      nopar_59 [(ErlangTuple [a_63, op_64, b_65])] =
                        let    head_67 = nopar_59 [a_63]
                        in let head_71 = toErl " "
                        in let head_75 = toErl " "
                        in let head_77 = nopar_59 [b_65]
                        in
                          BIF.do_remote_fun_call "Lists" "erlps__concat__1"
                            [ErlangCons head_67
                               (ErlangCons head_71
                                  (ErlangCons op_64
                                     (ErlangCons head_75
                                        (ErlangCons head_77 ErlangEmptyList))))]
                      nopar_59 [(ErlangTuple [op_81, a_82])] =
                        let    head_86 = toErl " "
                        in let head_88 = nopar_59 [a_82]
                        in
                          BIF.do_remote_fun_call "Lists" "erlps__concat__1"
                            [ErlangCons op_81
                               (ErlangCons head_86
                                  (ErlangCons head_88 ErlangEmptyList))]
                      nopar_59 [arg_60] = EXC.function_clause unit
                      nopar_59 args = EXC.badarity (ErlangFun 1 nopar_59) args
                    in nopar_59)
             in let
               par_134 =
                 ErlangFun 1
                   (let
                      par_93 [x_95] | isEAtom x_95 =
                        BIF.erlang__atom_to_list__1 [x_95]
                      par_93 [(ErlangTuple [a_97, op_98, b_99])] =
                        let    head_101 = toErl "("
                        in let head_103 = par_93 [a_97]
                        in let head_107 = toErl " "
                        in let head_111 = toErl " "
                        in let head_113 = par_93 [b_99]
                        in let head_117 = toErl ")"
                        in
                          BIF.do_remote_fun_call "Lists" "erlps__concat__1"
                            [ErlangCons head_101
                               (ErlangCons head_103
                                  (ErlangCons head_107
                                     (ErlangCons op_98
                                        (ErlangCons head_111
                                           (ErlangCons head_113
                                              (ErlangCons head_117
                                                 ErlangEmptyList))))))]
                      par_93 [(ErlangTuple [op_119, a_120])] =
                        let    head_122 = toErl "("
                        in let head_126 = toErl " "
                        in let head_128 = par_93 [a_120]
                        in let head_132 = toErl ")"
                        in
                          BIF.do_remote_fun_call "Lists" "erlps__concat__1"
                            [ErlangCons head_122
                               (ErlangCons op_119
                                  (ErlangCons head_126
                                     (ErlangCons head_128
                                        (ErlangCons head_132
                                           ErlangEmptyList))))]
                      par_93 [arg_94] = EXC.function_clause unit
                      par_93 args = EXC.badarity (ErlangFun 1 par_93) args
                    in par_93)
             in let
               parse_173 =
                 ErlangFun 1
                   (let
                      lambda_135 [s_137] =
                        EXC.tryCatch
                          (\ _ ->
                             let arg_138 = erlps__parse_expr__1 [s_137]
                             in erlps__remove_line_numbers__1 [arg_138])
                          (\ ex_141 ->
                             case ex_141 of
                               (ErlangTuple [_, _, _]) ->
                                 let
                                   fun_143 =
                                     ErlangFun 0
                                       (let
                                          lambda_144 [] =
                                            let   
                                              arg_146 =
                                                ErlangTuple
                                                  [ErlangAtom "parse_fail",
                                                   s_137]
                                            in let
                                              case_145 = erlps__id__1 [arg_146]
                                            in
                                              case case_145 of
                                                (ErlangAtom "ok") ->
                                                  ErlangAtom "ok"
                                                __v_149 ->
                                                  let   
                                                    head_153 =
                                                      ErlangTuple
                                                        [ErlangAtom "module",
                                                         ErlangAtom
                                                           "aeso_parser_tests"]
                                                  in let tup_el_159 = toErl 35
                                                  in let
                                                    head_157 =
                                                      ErlangTuple
                                                        [ErlangAtom "line",
                                                         tup_el_159]
                                                  in let
                                                    tup_el_163 =
                                                      toErl
                                                        "id ( { parse_fail , S } )"
                                                  in let
                                                    head_161 =
                                                      ErlangTuple
                                                        [ErlangAtom
                                                           "expression",
                                                         tup_el_163]
                                                  in let tup_el_167 = toErl "ok"
                                                  in let
                                                    head_165 =
                                                      ErlangTuple
                                                        [ErlangAtom "pattern",
                                                         tup_el_167]
                                                  in let
                                                    head_169 =
                                                      ErlangTuple
                                                        [ErlangAtom "value",
                                                         __v_149]
                                                  in let
                                                    arg_150 =
                                                      ErlangTuple
                                                        [ErlangAtom
                                                           "assertMatch",
                                                         ErlangCons head_153
                                                           (ErlangCons head_157
                                                              (ErlangCons
                                                                 head_161
                                                                 (ErlangCons
                                                                    head_165
                                                                    (ErlangCons
                                                                       head_169
                                                                       ErlangEmptyList))))]
                                                  in
                                                    BIF.erlang__error__1
                                                      [arg_150]
                                          lambda_144 [] =
                                            EXC.function_clause unit
                                          lambda_144 args =
                                            EXC.badarity
                                              (ErlangFun 0 lambda_144) args
                                        in lambda_144)
                                 in
                                   BIF.erlang__apply__2
                                     [fun_143, ErlangEmptyList]
                               ex_142 -> EXC.raise ex_142)
                      lambda_135 [arg_136] = EXC.function_clause unit
                      lambda_135 args =
                        EXC.badarity (ErlangFun 1 lambda_135) args
                    in lambda_135)
             in let
               checkparens_214 =
                 ErlangFun 1
                   (let
                      lambda_174 [expr_176] =
                        let
                          fun_177 =
                            ErlangFun 0
                              (let
                                 lambda_178 [] =
                                   let   
                                     arg_179 =
                                       BIF.erlang__apply__2
                                         [nopar_92,
                                          ErlangCons expr_176 ErlangEmptyList]
                                   in let
                                     __x_183 =
                                       BIF.erlang__apply__2
                                         [parse_173,
                                          ErlangCons arg_179 ErlangEmptyList]
                                   in let
                                     arg_185 =
                                       BIF.erlang__apply__2
                                         [par_134,
                                          ErlangCons expr_176 ErlangEmptyList]
                                   in let
                                     case_184 =
                                       BIF.erlang__apply__2
                                         [parse_173,
                                          ErlangCons arg_185 ErlangEmptyList]
                                   in
                                     case case_184 of
                                       __x_189 | __x_189 == __x_183 ->
                                         ErlangAtom "ok"
                                       __v_190 ->
                                         let   
                                           head_194 =
                                             ErlangTuple
                                               [ErlangAtom "module",
                                                ErlangAtom "aeso_parser_tests"]
                                         in let tup_el_200 = toErl 38
                                         in let
                                           head_198 =
                                             ErlangTuple
                                               [ErlangAtom "line", tup_el_200]
                                         in let
                                           tup_el_204 =
                                             toErl "Parse ( Par ( Expr ) )"
                                         in let
                                           head_202 =
                                             ErlangTuple
                                               [ErlangAtom "expression",
                                                tup_el_204]
                                         in let
                                           head_206 =
                                             ErlangTuple
                                               [ErlangAtom "expected", __x_183]
                                         in let
                                           head_210 =
                                             ErlangTuple
                                               [ErlangAtom "value", __v_190]
                                         in let
                                           arg_191 =
                                             ErlangTuple
                                               [ErlangAtom "assertEqual",
                                                ErlangCons head_194
                                                  (ErlangCons head_198
                                                     (ErlangCons head_202
                                                        (ErlangCons head_206
                                                           (ErlangCons head_210
                                                              ErlangEmptyList))))]
                                         in BIF.erlang__error__1 [arg_191]
                                 lambda_178 [] = EXC.function_clause unit
                                 lambda_178 args =
                                   EXC.badarity (ErlangFun 0 lambda_178) args
                               in lambda_178)
                        in BIF.erlang__apply__2 [fun_177, ErlangEmptyList]
                      lambda_174 [arg_175] = EXC.function_clause unit
                      lambda_174 args =
                        EXC.badarity (ErlangFun 1 lambda_174) args
                    in lambda_174)
             in let
               leftassoc_226 =
                 ErlangFun 1
                   (let
                      lambda_215 [op_217] =
                        let   
                          tup_el_219 =
                            ErlangTuple [ErlangAtom "a", op_217, ErlangAtom "b"]
                        in let
                          arg_218 =
                            ErlangTuple [tup_el_219, op_217, ErlangAtom "c"]
                        in
                          BIF.erlang__apply__2
                            [checkparens_214,
                             ErlangCons arg_218 ErlangEmptyList]
                      lambda_215 [arg_216] = EXC.function_clause unit
                      lambda_215 args =
                        EXC.badarity (ErlangFun 1 lambda_215) args
                    in lambda_215)
             in let
               rightassoc_238 =
                 ErlangFun 1
                   (let
                      lambda_227 [op_229] =
                        let   
                          tup_el_233 =
                            ErlangTuple [ErlangAtom "b", op_229, ErlangAtom "c"]
                        in let
                          arg_230 =
                            ErlangTuple [ErlangAtom "a", op_229, tup_el_233]
                        in
                          BIF.erlang__apply__2
                            [checkparens_214,
                             ErlangCons arg_230 ErlangEmptyList]
                      lambda_227 [arg_228] = EXC.function_clause unit
                      lambda_227 args =
                        EXC.badarity (ErlangFun 1 lambda_227) args
                    in lambda_227)
             in let
               nonassoc_325 =
                 ErlangFun 1
                   (let
                      lambda_239 [op_241] =
                        let
                          fun_242 =
                            ErlangFun 0
                              (let
                                 lambda_243 [] =
                                   EXC.tryOfCatch
                                     (\ _ ->
                                        let   
                                          tup_el_248 =
                                            ErlangTuple
                                              [ErlangAtom "b", op_241,
                                               ErlangAtom "c"]
                                        in let
                                          arg_245 =
                                            ErlangTuple
                                              [ErlangAtom "a", op_241,
                                               tup_el_248]
                                        in let
                                          arg_244 =
                                            BIF.erlang__apply__2
                                              [nopar_92,
                                               ErlangCons arg_245
                                                 ErlangEmptyList]
                                        in erlps__parse_expr__1 [arg_244])
                                     (\ of_253 ->
                                        let   
                                          head_260 =
                                            ErlangTuple
                                              [ErlangAtom "module",
                                               ErlangAtom "aeso_parser_tests"]
                                        in let tup_el_266 = toErl 44
                                        in let
                                          head_264 =
                                            ErlangTuple
                                              [ErlangAtom "line", tup_el_266]
                                        in let
                                          tup_el_270 =
                                            toErl
                                              "parse_expr ( NoPar ( { a , Op , { b , Op , c } } ) )"
                                        in let
                                          head_268 =
                                            ErlangTuple
                                              [ErlangAtom "expression",
                                               tup_el_270]
                                        in let lop_275 = toErl "{ "
                                        in let lop_277 = toErl "throw"
                                        in let lop_279 = toErl " , "
                                        in let
                                          lop_281 = toErl "{ error , [ _ ] }"
                                        in let rop_282 = toErl " , [...] }"
                                        in let
                                          rop_280 =
                                            BIF.erlang__op_append
                                              [lop_281, rop_282]
                                        in let
                                          rop_278 =
                                            BIF.erlang__op_append
                                              [lop_279, rop_280]
                                        in let
                                          rop_276 =
                                            BIF.erlang__op_append
                                              [lop_277, rop_278]
                                        in let
                                          tup_el_274 =
                                            BIF.erlang__op_append
                                              [lop_275, rop_276]
                                        in let
                                          head_272 =
                                            ErlangTuple
                                              [ErlangAtom "pattern", tup_el_274]
                                        in let
                                          head_284 =
                                            ErlangTuple
                                              [ErlangAtom "unexpected_success",
                                               of_253]
                                        in let
                                          arg_257 =
                                            ErlangTuple
                                              [ErlangAtom "assertException",
                                               ErlangCons head_260
                                                 (ErlangCons head_264
                                                    (ErlangCons head_268
                                                       (ErlangCons head_272
                                                          (ErlangCons head_284
                                                             ErlangEmptyList))))]
                                        in BIF.erlang__error__1 [arg_257])
                                     (\ ex_254 ->
                                        case ex_254 of
                                          (ErlangTuple [(ErlangAtom "throw"),
                                                        (ErlangTuple [(ErlangAtom "error"),
                                                                      (ErlangCons _ (ErlangEmptyList))]),
                                                        _]) ->
                                            ErlangAtom "ok"
                                          (ErlangTuple [__c_288, __t_289,
                                                        __s_290]) ->
                                            let   
                                              head_294 =
                                                ErlangTuple
                                                  [ErlangAtom "module",
                                                   ErlangAtom
                                                     "aeso_parser_tests"]
                                            in let tup_el_300 = toErl 43
                                            in let
                                              head_298 =
                                                ErlangTuple
                                                  [ErlangAtom "line",
                                                   tup_el_300]
                                            in let
                                              tup_el_304 =
                                                toErl
                                                  "parse_expr ( NoPar ( { a , Op , { b , Op , c } } ) )"
                                            in let
                                              head_302 =
                                                ErlangTuple
                                                  [ErlangAtom "expression",
                                                   tup_el_304]
                                            in let lop_309 = toErl "{ "
                                            in let lop_311 = toErl "throw"
                                            in let lop_313 = toErl " , "
                                            in let
                                              lop_315 =
                                                toErl "{ error , [ _ ] }"
                                            in let rop_316 = toErl " , [...] }"
                                            in let
                                              rop_314 =
                                                BIF.erlang__op_append
                                                  [lop_315, rop_316]
                                            in let
                                              rop_312 =
                                                BIF.erlang__op_append
                                                  [lop_313, rop_314]
                                            in let
                                              rop_310 =
                                                BIF.erlang__op_append
                                                  [lop_311, rop_312]
                                            in let
                                              tup_el_308 =
                                                BIF.erlang__op_append
                                                  [lop_309, rop_310]
                                            in let
                                              head_306 =
                                                ErlangTuple
                                                  [ErlangAtom "pattern",
                                                   tup_el_308]
                                            in let
                                              tup_el_320 =
                                                ErlangTuple
                                                  [__c_288, __t_289, __s_290]
                                            in let
                                              head_318 =
                                                ErlangTuple
                                                  [ErlangAtom
                                                     "unexpected_exception",
                                                   tup_el_320]
                                            in let
                                              arg_291 =
                                                ErlangTuple
                                                  [ErlangAtom "assertException",
                                                   ErlangCons head_294
                                                     (ErlangCons head_298
                                                        (ErlangCons head_302
                                                           (ErlangCons head_306
                                                              (ErlangCons
                                                                 head_318
                                                                 ErlangEmptyList))))]
                                            in BIF.erlang__error__1 [arg_291]
                                          ex_255 -> EXC.raise ex_255)
                                 lambda_243 [] = EXC.function_clause unit
                                 lambda_243 args =
                                   EXC.badarity (ErlangFun 0 lambda_243) args
                               in lambda_243)
                        in BIF.erlang__apply__2 [fun_242, ErlangEmptyList]
                      lambda_239 [arg_240] = EXC.function_clause unit
                      lambda_239 args =
                        EXC.badarity (ErlangFun 1 lambda_239) args
                    in lambda_239)
             in let
               stronger_347 =
                 ErlangFun 2
                   (let
                      lambda_326 [op1_329, op2_330] =
                        let   
                          tup_el_332 =
                            ErlangTuple
                              [ErlangAtom "a", op1_329, ErlangAtom "b"]
                        in let
                          arg_331 =
                            ErlangTuple [tup_el_332, op2_330, ErlangAtom "c"]
                        in let
                          _ =
                            BIF.erlang__apply__2
                              [checkparens_214,
                               ErlangCons arg_331 ErlangEmptyList]
                        in let
                          tup_el_342 =
                            ErlangTuple
                              [ErlangAtom "b", op1_329, ErlangAtom "c"]
                        in let
                          arg_339 =
                            ErlangTuple [ErlangAtom "a", op2_330, tup_el_342]
                        in
                          BIF.erlang__apply__2
                            [checkparens_214,
                             ErlangCons arg_339 ErlangEmptyList]
                      lambda_326 [arg_327, arg_328] = EXC.function_clause unit
                      lambda_326 args =
                        EXC.badarity (ErlangFun 2 lambda_326) args
                    in lambda_326)
             in let head_349 = toErl "||"
             in let head_353 = toErl "&&"
             in let head_357 = toErl "=="
             in let head_359 = toErl "!="
             in let head_361 = toErl "<"
             in let head_363 = toErl ">"
             in let head_365 = toErl "=<"
             in let head_367 = toErl ">="
             in let head_371 = toErl "::"
             in let head_373 = toErl "++"
             in let head_377 = toErl "+"
             in let head_379 = toErl "-"
             in let head_383 = toErl "*"
             in let head_385 = toErl "/"
             in let head_387 = toErl "mod"
             in let head_392 = toErl "||"
             in let head_394 = toErl "&&"
             in let head_396 = toErl "::"
             in let head_398 = toErl "++"
             in let
               _ =
                 flmap
                   (\ lc_401 ->
                      let
                        lcRet_402 =
                          BIF.erlang__apply__2
                            [rightassoc_238, ErlangCons lc_401 ErlangEmptyList]
                      in ErlangCons lcRet_402 ErlangEmptyList)
                   (ErlangCons head_392
                      (ErlangCons head_394
                         (ErlangCons head_396
                            (ErlangCons head_398 ErlangEmptyList))))
             in let head_406 = toErl "=="
             in let head_408 = toErl "!="
             in let head_410 = toErl "<"
             in let head_412 = toErl ">"
             in let head_414 = toErl "=<"
             in let head_416 = toErl ">="
             in let
               _ =
                 flmap
                   (\ lc_419 ->
                      let
                        lcRet_420 =
                          BIF.erlang__apply__2
                            [nonassoc_325, ErlangCons lc_419 ErlangEmptyList]
                      in ErlangCons lcRet_420 ErlangEmptyList)
                   (ErlangCons head_406
                      (ErlangCons head_408
                         (ErlangCons head_410
                            (ErlangCons head_412
                               (ErlangCons head_414
                                  (ErlangCons head_416 ErlangEmptyList))))))
             in let head_424 = toErl "+"
             in let head_426 = toErl "-"
             in let head_428 = toErl "*"
             in let head_430 = toErl "/"
             in let head_432 = toErl "mod"
             in let
               _ =
                 flmap
                   (\ lc_435 ->
                      let
                        lcRet_436 =
                          BIF.erlang__apply__2
                            [leftassoc_226, ErlangCons lc_435 ErlangEmptyList]
                      in ErlangCons lcRet_436 ErlangEmptyList)
                   (ErlangCons head_424
                      (ErlangCons head_426
                         (ErlangCons head_428
                            (ErlangCons head_430
                               (ErlangCons head_432 ErlangEmptyList)))))
             in let
               lcSrc_439 =
                 erlps__tails__1
                   [ErlangCons (ErlangCons head_349 ErlangEmptyList)
                      (ErlangCons (ErlangCons head_353 ErlangEmptyList)
                         (ErlangCons
                            (ErlangCons head_357
                               (ErlangCons head_359
                                  (ErlangCons head_361
                                     (ErlangCons head_363
                                        (ErlangCons head_365
                                           (ErlangCons head_367
                                              ErlangEmptyList))))))
                            (ErlangCons
                               (ErlangCons head_371
                                  (ErlangCons head_373 ErlangEmptyList))
                               (ErlangCons
                                  (ErlangCons head_377
                                     (ErlangCons head_379 ErlangEmptyList))
                                  (ErlangCons
                                     (ErlangCons head_383
                                        (ErlangCons head_385
                                           (ErlangCons head_387
                                              ErlangEmptyList)))
                                     ErlangEmptyList)))))]
             in let
               _ =
                 flmap
                   (\ lc_443 ->
                      case lc_443 of
                        (ErlangCons t1_441 (ErlangCons t2_442 _)) ->
                          flmap
                            (\ lc_446 ->
                               flmap
                                 (\ lc_449 ->
                                    let
                                      lcRet_450 =
                                        BIF.erlang__apply__2
                                          [stronger_347,
                                           ErlangCons lc_449
                                             (ErlangCons lc_446
                                                ErlangEmptyList)]
                                    in ErlangCons lcRet_450 ErlangEmptyList)
                                 t2_442)
                            t1_441
                        _ -> ErlangEmptyList)
                   lcSrc_439
             in ErlangAtom "ok"
           lambda_58 [] = EXC.function_clause unit
           lambda_58 args = EXC.badarity (ErlangFun 0 lambda_58) args
         in lambda_58)
  in let head_55 = ErlangTuple [tup_el_56, tup_el_57]
  in let
    rop_455 =
      flmap
        (\ lc_476 ->
           let    head_480 = toErl "Parse the "
           in let head_484 = toErl " contract."
           in let
             tup_el_478 =
               BIF.do_remote_fun_call "Lists" "erlps__concat__1"
                 [ErlangCons head_480
                    (ErlangCons lc_476 (ErlangCons head_484 ErlangEmptyList))]
           in let
             tup_el_486 =
               ErlangFun 0
                 (let
                    lambda_487 [] = erlps__roundtrip_contract__1 [lc_476]
                    lambda_487 [] = EXC.function_clause unit
                    lambda_487 args = EXC.badarity (ErlangFun 0 lambda_487) args
                  in lambda_487)
           in let lcRet_477 = ErlangTuple [tup_el_478, tup_el_486]
           in ErlangCons lcRet_477 ErlangEmptyList)
        (ErlangCons (ErlangAtom "counter")
           (ErlangCons (ErlangAtom "voting")
              (ErlangCons (ErlangAtom "all_syntax")
                 (ErlangCons (ErlangAtom "05_greeter")
                    (ErlangCons (ErlangAtom "aeproof")
                       (ErlangCons (ErlangAtom "multi_sig")
                          (ErlangCons (ErlangAtom "simple_storage")
                             (ErlangCons (ErlangAtom "fundme")
                                (ErlangCons (ErlangAtom "dutch_auction")
                                   ErlangEmptyList)))))))))
  in let
    tup_el_6 =
      BIF.erlang__op_append
        [ErlangCons head_8 (ErlangCons head_55 ErlangEmptyList), rop_455]
  in
    ErlangTuple [ErlangAtom "foreach", tup_el_1, tup_el_3, tup_el_6]
erlps__simple_contracts_test___0 args =
  EXC.badarity (ErlangFun 0 erlps__simple_contracts_test___0) args

erlps__parse_contract__1 :: ErlangFun
erlps__parse_contract__1 [name_0] =
  let
    arg_1 =
      BIF.do_remote_fun_call "Aeso.Test.Utils"
        "erlps__read_contract__1" [name_0]
  in erlps__parse_string__1 [arg_1]
erlps__parse_contract__1 [arg_3] = EXC.function_clause unit
erlps__parse_contract__1 args =
  EXC.badarity (ErlangFun 1 erlps__parse_contract__1) args

erlps__roundtrip_contract__1 :: ErlangFun
erlps__roundtrip_contract__1 [name_0] =
  let
    arg_1 =
      BIF.do_remote_fun_call "Aeso.Test.Utils"
        "erlps__read_contract__1" [name_0]
  in erlps__round_trip__1 [arg_1]
erlps__roundtrip_contract__1 [arg_3] = EXC.function_clause unit
erlps__roundtrip_contract__1 args =
  EXC.badarity (ErlangFun 1 erlps__roundtrip_contract__1) args

erlps__parse_string__1 :: ErlangFun
erlps__parse_string__1 [text_0] =
  erlps__parse_string__2 [text_0, ErlangEmptyList]
erlps__parse_string__1 [arg_3] = EXC.function_clause unit
erlps__parse_string__1 args =
  EXC.badarity (ErlangFun 1 erlps__parse_string__1) args

erlps__parse_string__2 :: ErlangFun
erlps__parse_string__2 [text_0, opts_1] =
  BIF.do_remote_fun_call "Aeso.Parser" "erlps__string__2"
    [text_0, opts_1]
erlps__parse_string__2 [arg_4, arg_5] = EXC.function_clause unit
erlps__parse_string__2 args =
  EXC.badarity (ErlangFun 2 erlps__parse_string__2) args

erlps__parse_expr__1 :: ErlangFun
erlps__parse_expr__1 [text_0] =
  let    lop_2 = toErl "let _ = "
  in let arg_1 = BIF.erlang__op_append [lop_2, text_0]
  in let matchExpr_5 = erlps__parse_string__1 [arg_1]
  in
    case matchExpr_5 of
      (ErlangCons (ErlangTuple [(ErlangAtom "letval"), _, _,
                                expr_4]) (ErlangEmptyList)) ->
        expr_4
      _ -> EXC.badmatch matchExpr_5
erlps__parse_expr__1 [arg_6] = EXC.function_clause unit
erlps__parse_expr__1 args =
  EXC.badarity (ErlangFun 1 erlps__parse_expr__1) args

erlps__round_trip__1 :: ErlangFun
erlps__round_trip__1 [text_0] =
  let    contract_2 = erlps__parse_string__1 [text_0]
  in let arg_4 = erlps__strip_stdlib__1 [contract_2]
  in let
    arg_3 =
      BIF.do_remote_fun_call "Aeso.Pretty" "erlps__decls__1" [arg_4]
  in let
    text1_6 =
      BIF.do_remote_fun_call "Prettypr" "erlps__format__1" [arg_3]
  in let contract1_8 = erlps__parse_string__1 [text1_6]
  in let nosrcloc_10 = erlps__remove_line_numbers__1 [contract_2]
  in let nosrcloc1_12 = erlps__remove_line_numbers__1 [contract1_8]
  in let
    fun_13 =
      ErlangFun 0
        (let
           lambda_14 [] =
             let case_15 = erlps__diff__2 [nosrcloc_10, nosrcloc1_12]
             in
               case case_15 of
                 nosrcloc_18 | nosrcloc_18 == nosrcloc_10 -> ErlangAtom "ok"
                 __v_19 ->
                   let   
                     head_23 =
                       ErlangTuple
                         [ErlangAtom "module", ErlangAtom "aeso_parser_tests"]
                   in let tup_el_29 = toErl 91
                   in let head_27 = ErlangTuple [ErlangAtom "line", tup_el_29]
                   in let tup_el_33 = toErl "diff ( NoSrcLoc , NoSrcLoc1 )"
                   in let
                     head_31 = ErlangTuple [ErlangAtom "expression", tup_el_33]
                   in let tup_el_37 = toErl "NoSrcLoc"
                   in let
                     head_35 = ErlangTuple [ErlangAtom "pattern", tup_el_37]
                   in let head_39 = ErlangTuple [ErlangAtom "value", __v_19]
                   in let
                     arg_20 =
                       ErlangTuple
                         [ErlangAtom "assertMatch",
                          ErlangCons head_23
                            (ErlangCons head_27
                               (ErlangCons head_31
                                  (ErlangCons head_35
                                     (ErlangCons head_39 ErlangEmptyList))))]
                   in BIF.erlang__error__1 [arg_20]
           lambda_14 [] = EXC.function_clause unit
           lambda_14 args = EXC.badarity (ErlangFun 0 lambda_14) args
         in lambda_14)
  in BIF.erlang__apply__2 [fun_13, ErlangEmptyList]
erlps__round_trip__1 [arg_43] = EXC.function_clause unit
erlps__round_trip__1 args =
  EXC.badarity (ErlangFun 1 erlps__round_trip__1) args

erlps__strip_stdlib__1 :: ErlangFun
erlps__strip_stdlib__1 [(ErlangCons (ErlangTuple [(ErlangAtom "namespace"),
                                                  _,
                                                  (ErlangTuple [(ErlangAtom "con"),
                                                                _,
                                                                (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangCons (ErlangInt num_10) (ErlangCons (ErlangInt num_11) (ErlangEmptyList)))))))))))))]),
                                                  _]) decls_12)]
  | (ErlangInt num_0) == (toErl 76)
  , (ErlangInt num_1) == (toErl 105)
  , (ErlangInt num_2) == (toErl 115)
  , (ErlangInt num_3) == (toErl 116)
  , (ErlangInt num_4) == (toErl 73)
  , (ErlangInt num_5) == (toErl 110)
  , (ErlangInt num_6) == (toErl 116)
  , (ErlangInt num_7) == (toErl 101)
  , (ErlangInt num_8) == (toErl 114)
  , (ErlangInt num_9) == (toErl 110)
  , (ErlangInt num_10) == (toErl 97)
  , (ErlangInt num_11) == (toErl 108) =
  erlps__strip_stdlib__1 [decls_12]
erlps__strip_stdlib__1 [decls_0] = decls_0
erlps__strip_stdlib__1 [arg_1] = EXC.function_clause unit
erlps__strip_stdlib__1 args =
  EXC.badarity (ErlangFun 1 erlps__strip_stdlib__1) args

erlps__remove_line_numbers__1 :: ErlangFun
erlps__remove_line_numbers__1 [(ErlangTuple [(ErlangAtom "line"),
                                             _l_0])]
  =
  let tup_el_2 = toErl 0
  in ErlangTuple [ErlangAtom "line", tup_el_2]
erlps__remove_line_numbers__1 [(ErlangTuple [(ErlangAtom "col"),
                                             _c_0])]
  =
  let tup_el_2 = toErl 0
  in ErlangTuple [ErlangAtom "col", tup_el_2]
erlps__remove_line_numbers__1 [(ErlangCons h_0 t_1)] =
  let    head_2 = erlps__remove_line_numbers__1 [h_0]
  in let tail_4 = erlps__remove_line_numbers__1 [t_1]
  in ErlangCons head_2 tail_4
erlps__remove_line_numbers__1 [t_0] | isETuple t_0 =
  let    arg_2 = BIF.erlang__tuple_to_list__1 [t_0]
  in let arg_1 = erlps__remove_line_numbers__1 [arg_2]
  in BIF.erlang__list_to_tuple__1 [arg_1]
erlps__remove_line_numbers__1 [m_0] | isEMap m_0 =
  let    arg_2 = BIF.maps__to_list__1 [m_0]
  in let arg_1 = erlps__remove_line_numbers__1 [arg_2]
  in BIF.maps__from_list__1 [arg_1]
erlps__remove_line_numbers__1 [x_0] = x_0
erlps__remove_line_numbers__1 [arg_1] = EXC.function_clause unit
erlps__remove_line_numbers__1 args =
  EXC.badarity (ErlangFun 1 erlps__remove_line_numbers__1) args

erlps__diff__2 :: ErlangFun
erlps__diff__2 [x_0, x_1] | x_1 == x_0 = x_0
erlps__diff__2 [(ErlangCons h_0 t_1), (ErlangCons h1_2 t1_3)] =
  let    head_4 = erlps__diff__2 [h_0, h1_2]
  in let tail_7 = erlps__diff__2 [t_1, t1_3]
  in ErlangCons head_4 tail_7
erlps__diff__2 [t_0, t1_1]
  | (ErlangAtom "true") ==
      (falsifyErrors
         (\ _ ->
            let    lop_7 = BIF.erlang__tuple_size__1 [t_0]
            in let rop_9 = BIF.erlang__tuple_size__1 [t1_1]
            in BIF.erlang__op_eq [lop_7, rop_9])) =
  let    arg_3 = BIF.erlang__tuple_to_list__1 [t_0]
  in let arg_5 = BIF.erlang__tuple_to_list__1 [t1_1]
  in let arg_2 = erlps__diff__2 [arg_3, arg_5]
  in BIF.erlang__list_to_tuple__1 [arg_2]
erlps__diff__2 [x_0, y_1] =
  ErlangTuple [x_0, ErlangAtom "/=", y_1]
erlps__diff__2 [arg_5, arg_6] = EXC.function_clause unit
erlps__diff__2 args =
  EXC.badarity (ErlangFun 2 erlps__diff__2) args

erlps__tails__1 :: ErlangFun
erlps__tails__1 [zs_0] =
  let
    arg_1 =
      ErlangFun 2
        (let
           lambda_2 [x_5, (ErlangCons xs_6 xss_7)] =
             ErlangCons (ErlangCons x_5 xs_6) (ErlangCons xs_6 xss_7)
           lambda_2 [arg_3, arg_4] = EXC.function_clause unit
           lambda_2 args = EXC.badarity (ErlangFun 2 lambda_2) args
         in lambda_2)
  in
    BIF.do_remote_fun_call "Lists" "erlps__foldr__3"
      [arg_1, ErlangCons ErlangEmptyList ErlangEmptyList, zs_0]
erlps__tails__1 [arg_18] = EXC.function_clause unit
erlps__tails__1 args =
  EXC.badarity (ErlangFun 1 erlps__tails__1) args

erlps__test__0 :: ErlangFun
erlps__test__0 [] =
  BIF.do_remote_fun_call "Eunit" "erlps__test__1"
    [ErlangAtom "aeso_parser_tests"]
erlps__test__0 args =
  EXC.badarity (ErlangFun 0 erlps__test__0) args