module Aeso.Builtins(erlps__builtin_function__1,
                     erlps__bytes_to_raw_string__2, erlps__check_event_type__1,
                     erlps__used_builtins__1) where
{-
This file has been autogenerated
DO NOT EDIT - Your changes WILL be overwritten
Use this code at your own risk - the authors are just a mischievous raccoon and a haskell devote
Erlscripten v0.1.0
-}

import Prelude
import Data.Array as DA
import Data.List as DL
import Data.Maybe as DM
import Data.Map as Map
import Data.Tuple as Tup
import Data.BigInt as DBI
import Erlang.Builtins as BIF
import Erlang.Binary as BIN
import Erlang.Helpers as H
import Erlang.Exception as EXC
import Erlang.Type (ErlangFun, ErlangTerm(..), weakCmp, weakEq,
                    weakNEq, weakLt, weakLeq, weakGeq, weakGt)
import Effect (Effect)
import Effect.Unsafe (unsafePerformEffect)
import Effect.Exception (throw)
import Partial.Unsafe (unsafePartial)


erlps__used_builtins__1 :: ErlangFun
erlps__used_builtins__1 [(ErlangTuple [(ErlangAtom "funcall"),
                                       (ErlangTuple [(ErlangAtom "var_ref"),
                                                     (ErlangTuple [(ErlangAtom "builtin"),
                                                                   builtin_0])]),
                                       args_1])]
  =
  let   
    arg_2 =
      (erlps__dep_closure__1 [(ErlangCons builtin_0 ErlangEmptyList)])
  in let arg_6 = (erlps__used_builtins__1 [args_1])
  in
    (BIF.do_remote_fun_call "Lists" "erlps__umerge__2"
       [arg_2, arg_6])
erlps__used_builtins__1 [(ErlangCons h_0 t_1)] =
  let    arg_2 = (erlps__used_builtins__1 [h_0])
  in let arg_4 = (erlps__used_builtins__1 [t_1])
  in
    (BIF.do_remote_fun_call "Lists" "erlps__umerge__2"
       [arg_2, arg_4])
erlps__used_builtins__1 [t_0] | (H.isETuple t_0) =
  let arg_1 = (BIF.erlang__tuple_to_list__1 [t_0])
  in (erlps__used_builtins__1 [arg_1])
erlps__used_builtins__1 [m_0] | (H.isEMap m_0) =
  let arg_1 = (BIF.maps__to_list__1 [m_0])
  in (erlps__used_builtins__1 [arg_1])
erlps__used_builtins__1 [_] = ErlangEmptyList
erlps__used_builtins__1 [arg_0] = (EXC.function_clause unit)
erlps__used_builtins__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__builtin_deps__1 :: ErlangFun
erlps__builtin_deps__1 [builtin_0] =
  let arg_1 = (erlps__builtin_deps1__1 [builtin_0])
  in (BIF.do_remote_fun_call "Lists" "erlps__usort__1" [arg_1])
erlps__builtin_deps__1 [arg_3] = (EXC.function_clause unit)
erlps__builtin_deps__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__builtin_deps1__1 :: ErlangFun
erlps__builtin_deps1__1 [(ErlangTuple [(ErlangAtom "map_lookup_default"),
                                       type_0])]
  =
  let head_1 = (ErlangTuple [(ErlangAtom "map_lookup"), type_0])
  in (ErlangCons head_1 ErlangEmptyList)
erlps__builtin_deps1__1 [(ErlangTuple [(ErlangAtom "map_get"),
                                       type_0])]
  =
  let head_1 = (ErlangTuple [(ErlangAtom "map_lookup"), type_0])
  in (ErlangCons head_1 ErlangEmptyList)
erlps__builtin_deps1__1 [(ErlangAtom "map_member")] =
  let
    head_0 =
      (ErlangTuple [(ErlangAtom "map_lookup"), (ErlangAtom "word")])
  in (ErlangCons head_0 ErlangEmptyList)
erlps__builtin_deps1__1 [(ErlangTuple [(ErlangAtom "map_upd"),
                                       type_0])]
  =
  let head_1 = (ErlangTuple [(ErlangAtom "map_get"), type_0])
  in
    (ErlangCons head_1
       (ErlangCons (ErlangAtom "map_put") ErlangEmptyList))
erlps__builtin_deps1__1 [(ErlangTuple [(ErlangAtom "map_upd_default"),
                                       type_0])]
  =
  let
    head_1 =
      (ErlangTuple [(ErlangAtom "map_lookup_default"), type_0])
  in
    (ErlangCons head_1
       (ErlangCons (ErlangAtom "map_put") ErlangEmptyList))
erlps__builtin_deps1__1 [(ErlangAtom "map_from_list")] =
  (ErlangCons (ErlangAtom "map_put") ErlangEmptyList)
erlps__builtin_deps1__1 [(ErlangAtom "str_equal")] =
  (ErlangCons (ErlangAtom "str_equal_p") ErlangEmptyList)
erlps__builtin_deps1__1 [(ErlangAtom "string_concat")] =
  (ErlangCons (ErlangAtom "string_concat_inner1")
     (ErlangCons (ErlangAtom "string_copy")
        (ErlangCons (ErlangAtom "string_shift_copy") ErlangEmptyList)))
erlps__builtin_deps1__1 [(ErlangAtom "int_to_str")] =
  let
    head_0 =
      (ErlangTuple
         [(ErlangAtom "baseX_int"), (ErlangInt (DBI.fromInt 10))])
  in (ErlangCons head_0 ErlangEmptyList)
erlps__builtin_deps1__1 [(ErlangAtom "addr_to_str")] =
  let
    head_0 =
      (ErlangTuple
         [(ErlangAtom "baseX_int"), (ErlangInt (DBI.fromInt 58))])
  in (ErlangCons head_0 ErlangEmptyList)
erlps__builtin_deps1__1 [(ErlangTuple [(ErlangAtom "baseX_int"),
                                       x_0])]
  =
  let head_1 = (ErlangTuple [(ErlangAtom "baseX_int_pad"), x_0])
  in (ErlangCons head_1 ErlangEmptyList)
erlps__builtin_deps1__1 [(ErlangTuple [(ErlangAtom "baseX_int_pad"),
                                       x_0])]
  =
  let head_1 = (ErlangTuple [(ErlangAtom "baseX_int_encode"), x_0])
  in (ErlangCons head_1 ErlangEmptyList)
erlps__builtin_deps1__1 [(ErlangTuple [(ErlangAtom "baseX_int_encode"),
                                       x_0])]
  =
  let   
    head_1 = (ErlangTuple [(ErlangAtom "baseX_int_encode_"), x_0])
  in let head_5 = (ErlangTuple [(ErlangAtom "baseX_tab"), x_0])
  in let head_9 = (ErlangTuple [(ErlangAtom "baseX_digits"), x_0])
  in
    (ErlangCons head_1
       (ErlangCons head_5 (ErlangCons head_9 ErlangEmptyList)))
erlps__builtin_deps1__1 [(ErlangTuple [(ErlangAtom "bytes_to_str"),
                                       _])]
  =
  (ErlangCons (ErlangAtom "bytes_to_str_worker")
     (ErlangCons (ErlangAtom "bytes_to_str_worker_x")
        ErlangEmptyList))
erlps__builtin_deps1__1 [(ErlangAtom "string_reverse")] =
  (ErlangCons (ErlangAtom "string_reverse_") ErlangEmptyList)
erlps__builtin_deps1__1 [(ErlangAtom "require")] =
  (ErlangCons (ErlangAtom "abort") ErlangEmptyList)
erlps__builtin_deps1__1 [_] = ErlangEmptyList
erlps__builtin_deps1__1 [arg_0] = (EXC.function_clause unit)
erlps__builtin_deps1__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__dep_closure__1 :: ErlangFun
erlps__dep_closure__1 [deps_0] =
  let    arg_3 = (ErlangFun 1 erlps__builtin_deps__1)
  in let
    arg_2 =
      (BIF.do_remote_fun_call "Lists" "erlps__map__2" [arg_3, deps_0])
  in let
    case_1 =
      (BIF.do_remote_fun_call "Lists" "erlps__umerge__1" [arg_2])
  in
    case case_1 of
      (ErlangEmptyList) -> deps_0
      deps1_5 ->
        let arg_7 = (erlps__dep_closure__1 [deps1_5])
        in
          (BIF.do_remote_fun_call "Lists" "erlps__umerge__2"
             [deps_0, arg_7])
erlps__dep_closure__1 [arg_9] = (EXC.function_clause unit)
erlps__dep_closure__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__v__1 :: ErlangFun
erlps__v__1 [x_0] | (H.isEAtom x_0) =
  let arg_1 = (BIF.erlang__atom_to_list__1 [x_0])
  in (erlps__v__1 [arg_1])
erlps__v__1 [x_0] | (H.isEList x_0) =
  (ErlangTuple [(ErlangAtom "var_ref"), x_0])
erlps__v__1 [arg_3] = (EXC.function_clause unit)
erlps__v__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__option_none__0 :: ErlangFun
erlps__option_none__0 [] =
  let
    head_2 =
      (ErlangTuple
         [(ErlangAtom "integer"), (ErlangInt (DBI.fromInt 0))])
  in
    (ErlangTuple
       [(ErlangAtom "tuple"), (ErlangCons head_2 ErlangEmptyList)])
erlps__option_none__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__option_some__1 :: ErlangFun
erlps__option_some__1 [x_0] =
  let
    head_3 =
      (ErlangTuple
         [(ErlangAtom "integer"), (ErlangInt (DBI.fromInt 1))])
  in
    (ErlangTuple
       [(ErlangAtom "tuple"),
        (ErlangCons head_3 (ErlangCons x_0 ErlangEmptyList))])
erlps__option_some__1 [arg_9] = (EXC.function_clause unit)
erlps__option_some__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__op__3 :: ErlangFun
erlps__op__3 [op_0, a_1, b_2] =
  let    tup_el_6 = (erlps__operand__1 [a_1])
  in let tup_el_8 = (erlps__operand__1 [b_2])
  in let
    arg_3 =
      (ErlangTuple [(ErlangAtom "binop"), op_0, tup_el_6, tup_el_8])
  in (erlps__simpl__1 [arg_3])
erlps__op__3 [arg_10, arg_11, arg_12] =
  (EXC.function_clause unit)
erlps__op__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__simpl__1 :: ErlangFun
erlps__simpl__1 [(ErlangTuple [(ErlangAtom "binop"),
                               (ErlangAtom "*"),
                               (ErlangTuple [(ErlangAtom "integer"), a_0]),
                               (ErlangTuple [(ErlangAtom "integer"), b_1])])]
  | ((ErlangAtom "true") ==
       (H.falsifyErrors
          (\ _ ->
             let   
               lop_7 =
                 (BIF.erlang__op_greaterEq [a_0, (ErlangInt (DBI.fromInt 0))])
             in let
               lop_6 =
                 case lop_7 of
                   (ErlangAtom "false") -> (ErlangAtom "false")
                   (ErlangAtom "true") ->
                     (BIF.erlang__op_greaterEq
                        [b_1, (ErlangInt (DBI.fromInt 0))])
                   _ -> (EXC.badarg1 lop_7)
             in
               case lop_6 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") ->
                   let    lop_12 = (BIF.erlang__op_mult [a_0, b_1])
                   in let
                     rop_15 =
                       (BIF.erlang__bsl__2
                          [(ErlangInt (DBI.fromInt 1)),
                           (ErlangInt (DBI.fromInt 256))])
                   in (BIF.erlang__op_lesser [lop_12, rop_15])
                 _ -> (EXC.badarg1 lop_6)))) =
  let tup_el_3 = (BIF.erlang__op_mult [a_0, b_1])
  in (ErlangTuple [(ErlangAtom "integer"), tup_el_3])
erlps__simpl__1 [op_0] = op_0
erlps__simpl__1 [arg_1] = (EXC.function_clause unit)
erlps__simpl__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__operand__1 :: ErlangFun
erlps__operand__1 [a_0] | (H.isEAtom a_0) = (erlps__v__1 [a_0])
erlps__operand__1 [i_0] | (H.isEInt i_0) =
  (ErlangTuple [(ErlangAtom "integer"), i_0])
erlps__operand__1 [t_0] = t_0
erlps__operand__1 [arg_1] = (EXC.function_clause unit)
erlps__operand__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__check_event_type__1 :: ErlangFun
erlps__check_event_type__1 [icode_0] =
  let
    case_1 = (BIF.maps__get__2 [(ErlangAtom "event_type"), icode_0])
  in
    case case_1 of
      (ErlangTuple [(ErlangAtom "variant_t"), cons_4]) ->
        (erlps__check_event_type__2 [cons_4, icode_0])
      _ ->
        let
          arg_7 =
            (ErlangTuple [(ErlangAtom "event_should_be_variant_type")])
        in (BIF.erlang__error__1 [arg_7])
erlps__check_event_type__1 [arg_9] = (EXC.function_clause unit)
erlps__check_event_type__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__check_event_type__2 :: ErlangFun
erlps__check_event_type__2 [evts_0, icode_1] =
  (H.flmap
     (\ lc_6 ->
        case lc_6 of
          (ErlangTuple [(ErlangAtom "constr_t"), ann_3,
                        (ErlangTuple [(ErlangAtom "con"), _, name_4]),
                        types_5]) ->
            let   
              arg_8 =
                (BIF.do_remote_fun_call "Aeso.Syntax" "erlps__get_ann__2"
                   [(ErlangAtom "indices"), ann_3])
            in let
              lc_src_7 =
                (BIF.do_remote_fun_call "Lists" "erlps__zip__2"
                   [arg_8, types_5])
            in
              (H.flmap
                 (\ lc_14 ->
                    case lc_14 of
                      (ErlangTuple [ix_12, t_13]) ->
                        let
                          lc_ret_15 =
                            (erlps__check_event_type__4
                               [name_4, ix_12, t_13, icode_1])
                        in (ErlangCons lc_ret_15 ErlangEmptyList)
                      _ -> ErlangEmptyList)
                 lc_src_7)
          _ -> ErlangEmptyList)
     evts_0)
erlps__check_event_type__2 [arg_20, arg_21] =
  (EXC.function_clause unit)
erlps__check_event_type__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__check_event_type__4 :: ErlangFun
erlps__check_event_type__4 [evtname_0, ix_1, type_2, icode_3] =
  let   
    vmtype_13 =
      (EXC.tryCatch
         (\ _ ->
            (BIF.do_remote_fun_call "Aeso.Ast.To.Icode"
               "erlps__ast_typerep__2" [type_2, icode_3]))
         (\ ex_7 ->
            case ex_7 of
              (ErlangTuple [_, _, _]) ->
                let
                  arg_9 =
                    (ErlangTuple
                       [evtname_0, (ErlangAtom "could_not_resolve_type"),
                        type_2])
                in (BIF.erlang__error__1 [arg_9])
              ex_8 -> (EXC.raise ex_8)))
  in let case_14 = (ErlangTuple [ix_1, vmtype_13, type_2])
  in
    case case_14 of
      (ErlangTuple [(ErlangAtom "indexed"), (ErlangAtom "word"), _]) ->
        (ErlangAtom "ok")
      (ErlangTuple [(ErlangAtom "notindexed"), (ErlangAtom "string"),
                    _]) ->
        (ErlangAtom "ok")
      (ErlangTuple [(ErlangAtom "notindexed"), _,
                    (ErlangTuple [(ErlangAtom "bytes_t"), _, n_18])]) | (weakGt
                                                                           n_18
                                                                           (ErlangInt
                                                                              (DBI.fromInt
                                                                                 32))) ->
        (ErlangAtom "ok")
      (ErlangTuple [(ErlangAtom "indexed"), _, _]) ->
        let
          arg_19 =
            (ErlangTuple
               [evtname_0, (ErlangAtom "indexed_field_should_be_word"),
                (ErlangAtom "is"), vmtype_13])
        in (BIF.erlang__error__1 [arg_19])
      (ErlangTuple [(ErlangAtom "notindexed"), _, _]) ->
        let
          arg_24 =
            (ErlangTuple
               [evtname_0, (ErlangAtom "payload_should_be_string"),
                (ErlangAtom "is"), vmtype_13])
        in (BIF.erlang__error__1 [arg_24])
      something_else -> (EXC.case_clause something_else)
erlps__check_event_type__4 [arg_29, arg_30, arg_31, arg_32] =
  (EXC.function_clause unit)
erlps__check_event_type__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__bfun__2 :: ErlangFun
erlps__bfun__2 [b_0, (ErlangTuple [iargs_1, iexpr_2, iret_3])] =
  let tup_el_4 = (ErlangTuple [(ErlangAtom "builtin"), b_0])
  in
    (ErlangTuple
       [tup_el_4, (ErlangCons (ErlangAtom "private") ErlangEmptyList),
        iargs_1, iexpr_2, iret_3])
erlps__bfun__2 [arg_13, arg_14] = (EXC.function_clause unit)
erlps__bfun__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__builtin_function__1 :: ErlangFun
erlps__builtin_function__1 [bf_0] =
  case bf_0 of
    (ErlangTuple [(ErlangAtom "event"), eventt_2]) ->
      let arg_4 = (erlps__builtin_event__1 [eventt_2])
      in (erlps__bfun__2 [bf_0, arg_4])
    (ErlangAtom "abort") ->
      let arg_7 = (erlps__builtin_abort__0 [])
      in (erlps__bfun__2 [bf_0, arg_7])
    (ErlangAtom "block_hash") ->
      let arg_9 = (erlps__builtin_block_hash__0 [])
      in (erlps__bfun__2 [bf_0, arg_9])
    (ErlangAtom "require") ->
      let arg_11 = (erlps__builtin_require__0 [])
      in (erlps__bfun__2 [bf_0, arg_11])
    (ErlangTuple [(ErlangAtom "map_lookup"), type_12]) ->
      let arg_14 = (erlps__builtin_map_lookup__1 [type_12])
      in (erlps__bfun__2 [bf_0, arg_14])
    (ErlangAtom "map_put") ->
      let arg_17 = (erlps__builtin_map_put__0 [])
      in (erlps__bfun__2 [bf_0, arg_17])
    (ErlangAtom "map_delete") ->
      let arg_19 = (erlps__builtin_map_delete__0 [])
      in (erlps__bfun__2 [bf_0, arg_19])
    (ErlangAtom "map_size") ->
      let arg_21 = (erlps__builtin_map_size__0 [])
      in (erlps__bfun__2 [bf_0, arg_21])
    (ErlangTuple [(ErlangAtom "map_get"), type_22]) ->
      let arg_24 = (erlps__builtin_map_get__1 [type_22])
      in (erlps__bfun__2 [bf_0, arg_24])
    (ErlangTuple [(ErlangAtom "map_lookup_default"), type_26]) ->
      let arg_28 = (erlps__builtin_map_lookup_default__1 [type_26])
      in (erlps__bfun__2 [bf_0, arg_28])
    (ErlangAtom "map_member") ->
      let arg_31 = (erlps__builtin_map_member__0 [])
      in (erlps__bfun__2 [bf_0, arg_31])
    (ErlangTuple [(ErlangAtom "map_upd"), type_32]) ->
      let arg_34 = (erlps__builtin_map_upd__1 [type_32])
      in (erlps__bfun__2 [bf_0, arg_34])
    (ErlangTuple [(ErlangAtom "map_upd_default"), type_36]) ->
      let arg_38 = (erlps__builtin_map_upd_default__1 [type_36])
      in (erlps__bfun__2 [bf_0, arg_38])
    (ErlangAtom "map_from_list") ->
      let arg_41 = (erlps__builtin_map_from_list__0 [])
      in (erlps__bfun__2 [bf_0, arg_41])
    (ErlangAtom "list_concat") ->
      let arg_43 = (erlps__builtin_list_concat__0 [])
      in (erlps__bfun__2 [bf_0, arg_43])
    (ErlangAtom "string_length") ->
      let arg_45 = (erlps__builtin_string_length__0 [])
      in (erlps__bfun__2 [bf_0, arg_45])
    (ErlangAtom "string_concat") ->
      let arg_47 = (erlps__builtin_string_concat__0 [])
      in (erlps__bfun__2 [bf_0, arg_47])
    (ErlangAtom "string_concat_inner1") ->
      let arg_49 = (erlps__builtin_string_concat_inner1__0 [])
      in (erlps__bfun__2 [bf_0, arg_49])
    (ErlangAtom "string_copy") ->
      let arg_51 = (erlps__builtin_string_copy__0 [])
      in (erlps__bfun__2 [bf_0, arg_51])
    (ErlangAtom "string_shift_copy") ->
      let arg_53 = (erlps__builtin_string_shift_copy__0 [])
      in (erlps__bfun__2 [bf_0, arg_53])
    (ErlangAtom "str_equal_p") ->
      let arg_55 = (erlps__builtin_str_equal_p__0 [])
      in (erlps__bfun__2 [bf_0, arg_55])
    (ErlangAtom "str_equal") ->
      let arg_57 = (erlps__builtin_str_equal__0 [])
      in (erlps__bfun__2 [bf_0, arg_57])
    (ErlangAtom "popcount") ->
      let arg_59 = (erlps__builtin_popcount__0 [])
      in (erlps__bfun__2 [bf_0, arg_59])
    (ErlangAtom "int_to_str") ->
      let arg_61 = (erlps__builtin_int_to_str__0 [])
      in (erlps__bfun__2 [bf_0, arg_61])
    (ErlangAtom "addr_to_str") ->
      let arg_63 = (erlps__builtin_addr_to_str__0 [])
      in (erlps__bfun__2 [bf_0, arg_63])
    (ErlangTuple [(ErlangAtom "baseX_int"), x_64]) ->
      let arg_66 = (erlps__builtin_baseX_int__1 [x_64])
      in (erlps__bfun__2 [bf_0, arg_66])
    (ErlangTuple [(ErlangAtom "baseX_digits"), x_68]) ->
      let arg_70 = (erlps__builtin_baseX_digits__1 [x_68])
      in (erlps__bfun__2 [bf_0, arg_70])
    (ErlangTuple [(ErlangAtom "baseX_tab"), x_72]) ->
      let arg_74 = (erlps__builtin_baseX_tab__1 [x_72])
      in (erlps__bfun__2 [bf_0, arg_74])
    (ErlangTuple [(ErlangAtom "baseX_int_pad"), x_76]) ->
      let arg_78 = (erlps__builtin_baseX_int_pad__1 [x_76])
      in (erlps__bfun__2 [bf_0, arg_78])
    (ErlangTuple [(ErlangAtom "baseX_int_encode"), x_80]) ->
      let arg_82 = (erlps__builtin_baseX_int_encode__1 [x_80])
      in (erlps__bfun__2 [bf_0, arg_82])
    (ErlangTuple [(ErlangAtom "baseX_int_encode_"), x_84]) ->
      let arg_86 = (erlps__builtin_baseX_int_encode___1 [x_84])
      in (erlps__bfun__2 [bf_0, arg_86])
    (ErlangTuple [(ErlangAtom "bytes_to_int"), n_88]) ->
      let arg_90 = (erlps__builtin_bytes_to_int__1 [n_88])
      in (erlps__bfun__2 [bf_0, arg_90])
    (ErlangTuple [(ErlangAtom "bytes_to_str"), n_92]) ->
      let arg_94 = (erlps__builtin_bytes_to_str__1 [n_92])
      in (erlps__bfun__2 [bf_0, arg_94])
    (ErlangTuple [(ErlangAtom "bytes_concat"), a_96, b_97]) ->
      let arg_99 = (erlps__builtin_bytes_concat__2 [a_96, b_97])
      in (erlps__bfun__2 [bf_0, arg_99])
    (ErlangTuple [(ErlangAtom "bytes_split"), a_102, b_103]) ->
      let arg_105 = (erlps__builtin_bytes_split__2 [a_102, b_103])
      in (erlps__bfun__2 [bf_0, arg_105])
    (ErlangAtom "bytes_to_str_worker") ->
      let arg_109 = (erlps__builtin_bytes_to_str_worker__0 [])
      in (erlps__bfun__2 [bf_0, arg_109])
    (ErlangAtom "bytes_to_str_worker_x") ->
      let arg_111 = (erlps__builtin_bytes_to_str_worker_x__0 [])
      in (erlps__bfun__2 [bf_0, arg_111])
    (ErlangAtom "string_reverse") ->
      let arg_113 = (erlps__builtin_string_reverse__0 [])
      in (erlps__bfun__2 [bf_0, arg_113])
    (ErlangAtom "string_reverse_") ->
      let arg_115 = (erlps__builtin_string_reverse___0 [])
      in (erlps__bfun__2 [bf_0, arg_115])
    something_else -> (EXC.case_clause something_else)
erlps__builtin_function__1 [arg_116] = (EXC.function_clause unit)
erlps__builtin_function__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__builtin_event__1 :: ErlangFun
erlps__builtin_event__1 [eventt_0] =
  let   
    a_5 =
      (ErlangFun 1
         let
           lambda_1 [x_3] =
             (BIF.do_remote_fun_call "Aeb.Opcodes" "erlps__mnemonic__1" [x_3])
           lambda_1 [arg_2] = (EXC.function_clause unit)
           lambda_1 args = (EXC.badarity (ErlangFun 1 lambda_1) args)
         in lambda_1)
  in let
    vix_15 =
      (ErlangFun 1
         let
           lambda_6 [ix_8] =
             let    head_11 = (H.make_string "v")
             in let
               arg_9 =
                 (BIF.do_remote_fun_call "Lists" "erlps__concat__1"
                    [(ErlangCons head_11 (ErlangCons ix_8 ErlangEmptyList))])
             in (erlps__v__1 [arg_9])
           lambda_6 [arg_7] = (EXC.function_clause unit)
           lambda_6 args = (EXC.badarity (ErlangFun 1 lambda_6) args)
         in lambda_6)
  in let
    argpats_30 =
      (ErlangFun 1
         let
           lambda_16 [ts_18] =
             let    lop_22 = (BIF.erlang__length__1 [ts_18])
             in let
               arg_21 =
                 (BIF.erlang__op_minus [lop_22, (ErlangInt (DBI.fromInt 1))])
             in let
               lc_src_19 =
                 (BIF.do_remote_fun_call "Lists" "erlps__seq__2"
                    [(ErlangInt (DBI.fromInt 0)), arg_21])
             in
               (H.flmap
                  (\ lc_26 ->
                     let
                       lc_ret_27 =
                         (BIF.erlang__apply__2
                            [vix_15, (ErlangCons lc_26 ErlangEmptyList)])
                     in (ErlangCons lc_ret_27 ErlangEmptyList))
                  lc_src_19)
           lambda_16 [arg_17] = (EXC.function_clause unit)
           lambda_16 args = (EXC.badarity (ErlangFun 1 lambda_16) args)
         in lambda_16)
  in let
    payload_100 =
      (ErlangFun 1
         let
           lambda_31 [(ErlangEmptyList)] =
             let   
               head_35 =
                 (BIF.erlang__apply__2
                    [a_5,
                     (ErlangCons (ErlangInt (DBI.fromInt 96)) ErlangEmptyList)])
             in let
               head_41 =
                 (BIF.erlang__apply__2
                    [a_5,
                     (ErlangCons (ErlangInt (DBI.fromInt 96)) ErlangEmptyList)])
             in
               (ErlangTuple
                  [(ErlangAtom "inline_asm"),
                   (ErlangCons head_35
                      (ErlangCons (ErlangInt (DBI.fromInt 0))
                         (ErlangCons head_41
                            (ErlangCons (ErlangInt (DBI.fromInt 0))
                               ErlangEmptyList))))])
           lambda_31 [(ErlangCons (ErlangTuple [(ErlangTuple [(ErlangAtom "id"),
                                                              _,
                                                              (ErlangCons (ErlangInt num_47) (ErlangCons (ErlangInt num_48) (ErlangCons (ErlangInt num_49) (ErlangCons (ErlangInt num_50) (ErlangCons (ErlangInt num_51) (ErlangCons (ErlangInt num_52) (ErlangEmptyList)))))))]),
                                                v_53]) (ErlangEmptyList))]
             | ((ErlangInt num_47) == (ErlangInt (DBI.fromInt 115)))
             , ((ErlangInt num_48) == (ErlangInt (DBI.fromInt 116)))
             , ((ErlangInt num_49) == (ErlangInt (DBI.fromInt 114)))
             , ((ErlangInt num_50) == (ErlangInt (DBI.fromInt 105)))
             , ((ErlangInt num_51) == (ErlangInt (DBI.fromInt 110)))
             , ((ErlangInt num_52) == (ErlangInt (DBI.fromInt 103))) =
             let   
               head_61 =
                 (BIF.erlang__apply__2
                    [a_5,
                     (ErlangCons (ErlangInt (DBI.fromInt 128))
                        ErlangEmptyList)])
             in let
               head_65 =
                 (BIF.erlang__apply__2
                    [a_5,
                     (ErlangCons (ErlangInt (DBI.fromInt 81)) ErlangEmptyList)])
             in let
               head_69 =
                 (BIF.erlang__apply__2
                    [a_5,
                     (ErlangCons (ErlangInt (DBI.fromInt 144))
                        ErlangEmptyList)])
             in let
               head_73 =
                 (BIF.erlang__apply__2
                    [a_5,
                     (ErlangCons (ErlangInt (DBI.fromInt 96)) ErlangEmptyList)])
             in let
               head_79 =
                 (BIF.erlang__apply__2
                    [a_5,
                     (ErlangCons (ErlangInt (DBI.fromInt 1)) ErlangEmptyList)])
             in let
               head_58 =
                 (ErlangTuple
                    [(ErlangAtom "inline_asm"),
                     (ErlangCons head_61
                        (ErlangCons head_65
                           (ErlangCons head_69
                              (ErlangCons head_73
                                 (ErlangCons (ErlangInt (DBI.fromInt 32))
                                    (ErlangCons head_79 ErlangEmptyList))))))])
             in
               (ErlangTuple
                  [(ErlangAtom "seq"),
                   (ErlangCons v_53 (ErlangCons head_58 ErlangEmptyList))])
           lambda_31 [(ErlangCons (ErlangTuple [(ErlangTuple [(ErlangAtom "bytes_t"),
                                                              _, n_84]),
                                                v_85]) (ErlangEmptyList))]
             =
             let    head_90 = (ErlangTuple [(ErlangAtom "integer"), n_84])
             in let
               tup_el_96 =
                 (BIF.erlang__apply__2
                    [a_5,
                     (ErlangCons (ErlangInt (DBI.fromInt 144))
                        ErlangEmptyList)])
             in let
               head_94 = (ErlangTuple [(ErlangAtom "inline_asm"), tup_el_96])
             in
               (ErlangTuple
                  [(ErlangAtom "seq"),
                   (ErlangCons v_85
                      (ErlangCons head_90
                         (ErlangCons head_94 ErlangEmptyList)))])
           lambda_31 [arg_32] = (EXC.function_clause unit)
           lambda_31 args = (EXC.badarity (ErlangFun 1 lambda_31) args)
         in lambda_31)
  in let
    ix_115 =
      (ErlangFun 2
         let
           lambda_101 [(ErlangTuple [(ErlangAtom "bytes_t"), _, n_104]),
                       v_105]
             | (weakLt n_104 (ErlangInt (DBI.fromInt 32))) =
             let   
               arg_109 =
                 (BIF.erlang__op_minus [(ErlangInt (DBI.fromInt 32)), n_104])
             in let
               arg_107 =
                 (erlps__op__3
                    [(ErlangAtom "*"), arg_109, (ErlangInt (DBI.fromInt 8))])
             in (erlps__op__3 [(ErlangAtom "bsr"), arg_107, v_105])
           lambda_101 [_, v_114] = v_114
           lambda_101 [arg_102, arg_103] = (EXC.function_clause unit)
           lambda_101 args = (EXC.badarity (ErlangFun 2 lambda_101) args)
         in lambda_101)
  in let
    clause_175 =
      (ErlangFun 3
         let
           lambda_116 [_tag_120,
                       (ErlangTuple [(ErlangAtom "con"), _, con_121]),
                       ixtypes_122]
             =
             let   
               types_128 =
                 (H.flmap
                    (\ lc_126 ->
                       case lc_126 of
                         (ErlangTuple [_ix_124, t_125]) ->
                           (ErlangCons t_125 ErlangEmptyList)
                         _ -> ErlangEmptyList)
                    ixtypes_122)
             in let
               arg_130 =
                 (BIF.erlang__apply__2
                    [argpats_30, (ErlangCons types_128 ErlangEmptyList)])
             in let
               lc_src_129 =
                 (BIF.do_remote_fun_call "Lists" "erlps__zip__2"
                    [arg_130, ixtypes_122])
             in let
               indexed_141 =
                 (H.flmap
                    (\ lc_136 ->
                       case lc_136 of
                         (ErlangTuple [var_134,
                                       (ErlangTuple [(ErlangAtom "indexed"),
                                                     type_135])]) ->
                           let
                             lc_ret_137 =
                               (BIF.erlang__apply__2
                                  [ix_115,
                                   (ErlangCons type_135
                                      (ErlangCons var_134 ErlangEmptyList))])
                           in (ErlangCons lc_ret_137 ErlangEmptyList)
                         _ -> ErlangEmptyList)
                    lc_src_129)
             in let
               arg_143 =
                 (BIF.erlang__apply__2
                    [argpats_30, (ErlangCons types_128 ErlangEmptyList)])
             in let
               lc_src_142 =
                 (BIF.do_remote_fun_call "Lists" "erlps__zip__2"
                    [arg_143, ixtypes_122])
             in let
               data_153 =
                 (H.flmap
                    (\ lc_149 ->
                       case lc_149 of
                         (ErlangTuple [var_147,
                                       (ErlangTuple [(ErlangAtom "notindexed"),
                                                     type_148])]) ->
                           let lc_ret_150 = (ErlangTuple [type_148, var_147])
                           in (ErlangCons lc_ret_150 ErlangEmptyList)
                         _ -> ErlangEmptyList)
                    lc_src_142)
             in let arg_155 = (BIF.erlang__list_to_binary__1 [con_121])
             in let
               match_expr_161 =
                 (BIF.do_remote_fun_call "Eblake2" "erlps__blake2b__2"
                    [(ErlangInt (DBI.fromInt 32)), arg_155])
             in
               case match_expr_161 of
                 (ErlangTuple [(ErlangAtom "ok"),
                               (ErlangBinary bin_c_157)]) | size_158 <-
                                                              ((DBI.fromInt
                                                                  256))
                                                          , (BIN.Ok evtindexn_160 bin_159) <-
                                                              ((BIN.chop_int
                                                                  bin_c_157
                                                                  size_158 1
                                                                  BIN.Big
                                                                  BIN.Unsigned))
                                                          , (BIN.empty
                                                               bin_159) ->
                   let   
                     evtindex_164 =
                       (ErlangTuple [(ErlangAtom "integer"), evtindexn_160])
                   in let
                     lop_167 =
                       (BIF.do_remote_fun_call "Lists" "erlps__reverse__1"
                          [indexed_141])
                   in let
                     tup_el_166 =
                       (BIF.erlang__op_append
                          [lop_167, (ErlangCons evtindex_164 ErlangEmptyList)])
                   in let
                     tup_el_172 =
                       (BIF.erlang__apply__2
                          [payload_100, (ErlangCons data_153 ErlangEmptyList)])
                   in
                     (ErlangTuple
                        [(ErlangAtom "event"), tup_el_166, tup_el_172])
                 _ -> (EXC.badmatch match_expr_161)
           lambda_116 [arg_117, arg_118, arg_119] =
             (EXC.function_clause unit)
           lambda_116 args = (EXC.badarity (ErlangFun 3 lambda_116) args)
         in lambda_116)
  in let
    pat_189 =
      (ErlangFun 2
         let
           lambda_176 [tag_179, types_180] =
             let    head_183 = (ErlangTuple [(ErlangAtom "integer"), tag_179])
             in let
               tail_186 =
                 (BIF.erlang__apply__2
                    [argpats_30, (ErlangCons types_180 ErlangEmptyList)])
             in
               (ErlangTuple
                  [(ErlangAtom "tuple"), (ErlangCons head_183 tail_186)])
           lambda_176 [arg_177, arg_178] = (EXC.function_clause unit)
           lambda_176 args = (EXC.badarity (ErlangFun 2 lambda_176) args)
         in lambda_176)
  in
    case eventt_0 of
      (ErlangTuple [(ErlangAtom "variant_t"), cons_190]) ->
        let    lop_194 = (BIF.erlang__length__1 [cons_190])
        in let
          arg_193 =
            (BIF.erlang__op_minus [lop_194, (ErlangInt (DBI.fromInt 1))])
        in let
          tags_197 =
            (BIF.do_remote_fun_call "Lists" "erlps__seq__2"
               [(ErlangInt (DBI.fromInt 0)), arg_193])
        in let tup_el_200 = (H.make_string "e")
        in let
          head_199 = (ErlangTuple [tup_el_200, (ErlangAtom "event")])
        in let tup_el_205 = (erlps__v__1 [(ErlangAtom "e")])
        in let
          lc_src_208 =
            (BIF.do_remote_fun_call "Lists" "erlps__zip__2"
               [tags_197, cons_190])
        in let
          tup_el_207 =
            (H.flmap
               (\ lc_215 ->
                  case lc_215 of
                    (ErlangTuple [tag_211,
                                  (ErlangTuple [(ErlangAtom "constr_t"),
                                                ann_212, con_213,
                                                types_214])]) ->
                      let   
                        tup_el_217 =
                          (BIF.erlang__apply__2
                             [pat_189,
                              (ErlangCons tag_211
                                 (ErlangCons types_214 ErlangEmptyList))])
                      in let
                        arg_225 =
                          (BIF.do_remote_fun_call "Aeso.Syntax"
                             "erlps__get_ann__2"
                             [(ErlangAtom "indices"), ann_212])
                      in let
                        arg_224 =
                          (BIF.do_remote_fun_call "Lists" "erlps__zip__2"
                             [arg_225, types_214])
                      in let
                        tup_el_221 =
                          (BIF.erlang__apply__2
                             [clause_175,
                              (ErlangCons tag_211
                                 (ErlangCons con_213
                                    (ErlangCons arg_224 ErlangEmptyList)))])
                      in let lc_ret_216 = (ErlangTuple [tup_el_217, tup_el_221])
                      in (ErlangCons lc_ret_216 ErlangEmptyList)
                    _ -> ErlangEmptyList)
               lc_src_208)
        in let
          tup_el_203 =
            (ErlangTuple [(ErlangAtom "switch"), tup_el_205, tup_el_207])
        in let
          tup_el_230 =
            (ErlangTuple [(ErlangAtom "tuple"), ErlangEmptyList])
        in
          (ErlangTuple
             [(ErlangCons head_199 ErlangEmptyList), tup_el_203, tup_el_230])
      _ -> (EXC.badmatch eventt_0)
erlps__builtin_event__1 [arg_233] = (EXC.function_clause unit)
erlps__builtin_event__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__builtin_abort__0 :: ErlangFun
erlps__builtin_abort__0 [] =
  let   
    a_4 =
      (ErlangFun 1
         let
           lambda_0 [x_2] =
             (BIF.do_remote_fun_call "Aeb.Opcodes" "erlps__mnemonic__1" [x_2])
           lambda_0 [arg_1] = (EXC.function_clause unit)
           lambda_0 args = (EXC.badarity (ErlangFun 1 lambda_0) args)
         in lambda_0)
  in let tup_el_7 = (H.make_string "s")
  in let head_6 = (ErlangTuple [tup_el_7, (ErlangAtom "string")])
  in let
    head_13 =
      (BIF.erlang__apply__2
         [a_4, (ErlangCons (ErlangInt (DBI.fromInt 96)) ErlangEmptyList)])
  in let
    head_19 =
      (BIF.erlang__apply__2
         [a_4,
          (ErlangCons (ErlangInt (DBI.fromInt 253)) ErlangEmptyList)])
  in let
    tup_el_10 =
      (ErlangTuple
         [(ErlangAtom "inline_asm"),
          (ErlangCons head_13
             (ErlangCons (ErlangInt (DBI.fromInt 0))
                (ErlangCons head_19 ErlangEmptyList)))])
  in let
    tup_el_23 = (ErlangTuple [(ErlangAtom "tuple"), ErlangEmptyList])
  in
    (ErlangTuple
       [(ErlangCons head_6 ErlangEmptyList), tup_el_10, tup_el_23])
erlps__builtin_abort__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__builtin_block_hash__0 :: ErlangFun
erlps__builtin_block_hash__0 [] =
  let    tup_el_2 = (H.make_string "height")
  in let head_1 = (ErlangTuple [tup_el_2, (ErlangAtom "word")])
  in let tup_el_9 = (erlps__v__1 [(ErlangAtom "height")])
  in let
    tup_el_7 =
      (ErlangTuple [(ErlangAtom "prim_block_hash"), tup_el_9])
  in let tup_el_13 = (erlps__v__1 [(ErlangAtom "hash")])
  in let
    tup_el_17 =
      (erlps__op__3
         [(ErlangAtom "=="), (ErlangAtom "hash"),
          (ErlangInt (DBI.fromInt 0))])
  in let tup_el_21 = (erlps__option_none__0 [])
  in let arg_23 = (erlps__v__1 [(ErlangAtom "hash")])
  in let tup_el_22 = (erlps__option_some__1 [arg_23])
  in let
    tup_el_15 =
      (ErlangTuple
         [(ErlangAtom "ifte"), tup_el_17, tup_el_21, tup_el_22])
  in let head_12 = (ErlangTuple [tup_el_13, tup_el_15])
  in let
    tup_el_5 =
      (ErlangTuple
         [(ErlangAtom "switch"), tup_el_7,
          (ErlangCons head_12 ErlangEmptyList)])
  in let
    tup_el_26 =
      (BIF.do_remote_fun_call "Aeso.Icode" "erlps__option_typerep__1"
         [(ErlangAtom "word")])
  in
    (ErlangTuple
       [(ErlangCons head_1 ErlangEmptyList), tup_el_5, tup_el_26])
erlps__builtin_block_hash__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__builtin_require__0 :: ErlangFun
erlps__builtin_require__0 [] =
  let    tup_el_2 = (H.make_string "c")
  in let head_1 = (ErlangTuple [tup_el_2, (ErlangAtom "word")])
  in let tup_el_6 = (H.make_string "msg")
  in let head_5 = (ErlangTuple [tup_el_6, (ErlangAtom "string")])
  in let tup_el_11 = (erlps__v__1 [(ErlangAtom "c")])
  in let
    tup_el_13 = (ErlangTuple [(ErlangAtom "tuple"), ErlangEmptyList])
  in let
    tup_el_20 =
      (ErlangTuple [(ErlangAtom "builtin"), (ErlangAtom "abort")])
  in let
    tup_el_18 = (ErlangTuple [(ErlangAtom "var_ref"), tup_el_20])
  in let head_24 = (erlps__v__1 [(ErlangAtom "msg")])
  in let
    tup_el_16 =
      (ErlangTuple
         [(ErlangAtom "funcall"), tup_el_18,
          (ErlangCons head_24 ErlangEmptyList)])
  in let
    tup_el_9 =
      (ErlangTuple
         [(ErlangAtom "ifte"), tup_el_11, tup_el_13, tup_el_16])
  in let
    tup_el_27 = (ErlangTuple [(ErlangAtom "tuple"), ErlangEmptyList])
  in
    (ErlangTuple
       [(ErlangCons head_1 (ErlangCons head_5 ErlangEmptyList)),
        tup_el_9, tup_el_27])
erlps__builtin_require__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__builtin_map_lookup__1 :: ErlangFun
erlps__builtin_map_lookup__1 [type_0] =
  let   
    ret_2 =
      (BIF.do_remote_fun_call "Aeso.Icode" "erlps__option_typerep__1"
         [type_0])
  in let tup_el_5 = (H.make_string "m")
  in let head_4 = (ErlangTuple [tup_el_5, (ErlangAtom "word")])
  in let tup_el_9 = (H.make_string "k")
  in let head_8 = (ErlangTuple [tup_el_9, (ErlangAtom "word")])
  in let
    arg_14 =
      (ErlangTuple
         [(ErlangAtom "integer"), (ErlangInt (DBI.fromInt 0))])
  in let tup_el_20 = (H.make_string "m")
  in let
    head_18 = (ErlangTuple [(ErlangAtom "var_ref"), tup_el_20])
  in let tup_el_24 = (H.make_string "k")
  in let
    head_22 = (ErlangTuple [(ErlangAtom "var_ref"), tup_el_24])
  in let
    tup_el_12 =
      (BIF.do_remote_fun_call "Aeso.Ast.To.Icode" "erlps__prim_call__5"
         [(ErlangInt (DBI.fromInt 301)), arg_14,
          (ErlangCons head_18 (ErlangCons head_22 ErlangEmptyList)),
          (ErlangCons (ErlangAtom "word")
             (ErlangCons (ErlangAtom "word") ErlangEmptyList)),
          ret_2])
  in
    (ErlangTuple
       [(ErlangCons head_4 (ErlangCons head_8 ErlangEmptyList)),
        tup_el_12, ret_2])
erlps__builtin_map_lookup__1 [arg_33] =
  (EXC.function_clause unit)
erlps__builtin_map_lookup__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__builtin_map_put__0 :: ErlangFun
erlps__builtin_map_put__0 [] =
  let    tup_el_2 = (H.make_string "m")
  in let head_1 = (ErlangTuple [tup_el_2, (ErlangAtom "word")])
  in let tup_el_6 = (H.make_string "k")
  in let head_5 = (ErlangTuple [tup_el_6, (ErlangAtom "word")])
  in let tup_el_10 = (H.make_string "v")
  in let head_9 = (ErlangTuple [tup_el_10, (ErlangAtom "word")])
  in let
    arg_15 =
      (ErlangTuple
         [(ErlangAtom "integer"), (ErlangInt (DBI.fromInt 0))])
  in let head_19 = (erlps__v__1 [(ErlangAtom "m")])
  in let head_22 = (erlps__v__1 [(ErlangAtom "k")])
  in let head_25 = (erlps__v__1 [(ErlangAtom "v")])
  in let
    tup_el_13 =
      (BIF.do_remote_fun_call "Aeso.Ast.To.Icode" "erlps__prim_call__5"
         [(ErlangInt (DBI.fromInt 302)), arg_15,
          (ErlangCons head_19
             (ErlangCons head_22 (ErlangCons head_25 ErlangEmptyList))),
          (ErlangCons (ErlangAtom "word")
             (ErlangCons (ErlangAtom "word")
                (ErlangCons (ErlangAtom "word") ErlangEmptyList))),
          (ErlangAtom "word")])
  in
    (ErlangTuple
       [(ErlangCons head_1
           (ErlangCons head_5 (ErlangCons head_9 ErlangEmptyList))),
        tup_el_13, (ErlangAtom "word")])
erlps__builtin_map_put__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__builtin_map_delete__0 :: ErlangFun
erlps__builtin_map_delete__0 [] =
  let    tup_el_2 = (H.make_string "m")
  in let head_1 = (ErlangTuple [tup_el_2, (ErlangAtom "word")])
  in let tup_el_6 = (H.make_string "k")
  in let head_5 = (ErlangTuple [tup_el_6, (ErlangAtom "word")])
  in let
    arg_11 =
      (ErlangTuple
         [(ErlangAtom "integer"), (ErlangInt (DBI.fromInt 0))])
  in let head_15 = (erlps__v__1 [(ErlangAtom "m")])
  in let head_18 = (erlps__v__1 [(ErlangAtom "k")])
  in let
    tup_el_9 =
      (BIF.do_remote_fun_call "Aeso.Ast.To.Icode" "erlps__prim_call__5"
         [(ErlangInt (DBI.fromInt 303)), arg_11,
          (ErlangCons head_15 (ErlangCons head_18 ErlangEmptyList)),
          (ErlangCons (ErlangAtom "word")
             (ErlangCons (ErlangAtom "word") ErlangEmptyList)),
          (ErlangAtom "word")])
  in
    (ErlangTuple
       [(ErlangCons head_1 (ErlangCons head_5 ErlangEmptyList)),
        tup_el_9, (ErlangAtom "word")])
erlps__builtin_map_delete__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__builtin_map_size__0 :: ErlangFun
erlps__builtin_map_size__0 [] =
  let    tup_el_2 = (H.make_string "m")
  in let head_1 = (ErlangTuple [tup_el_2, (ErlangAtom "word")])
  in let
    arg_7 =
      (ErlangTuple
         [(ErlangAtom "integer"), (ErlangInt (DBI.fromInt 0))])
  in let head_11 = (erlps__v__1 [(ErlangAtom "m")])
  in let
    tup_el_5 =
      (BIF.do_remote_fun_call "Aeso.Ast.To.Icode" "erlps__prim_call__5"
         [(ErlangInt (DBI.fromInt 304)), arg_7,
          (ErlangCons head_11 ErlangEmptyList),
          (ErlangCons (ErlangAtom "word") ErlangEmptyList),
          (ErlangAtom "word")])
  in
    (ErlangTuple
       [(ErlangCons head_1 ErlangEmptyList), tup_el_5,
        (ErlangAtom "word")])
erlps__builtin_map_size__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__builtin_map_get__1 :: ErlangFun
erlps__builtin_map_get__1 [type_0] =
  let    tup_el_3 = (H.make_string "m")
  in let head_2 = (ErlangTuple [tup_el_3, (ErlangAtom "word")])
  in let tup_el_7 = (H.make_string "k")
  in let head_6 = (ErlangTuple [tup_el_7, (ErlangAtom "word")])
  in let
    tup_el_18 = (ErlangTuple [(ErlangAtom "map_lookup"), type_0])
  in let
    tup_el_16 = (ErlangTuple [(ErlangAtom "builtin"), tup_el_18])
  in let
    tup_el_14 = (ErlangTuple [(ErlangAtom "var_ref"), tup_el_16])
  in let head_22 = (erlps__v__1 [(ErlangAtom "m")])
  in let head_25 = (erlps__v__1 [(ErlangAtom "k")])
  in let
    tup_el_12 =
      (ErlangTuple
         [(ErlangAtom "funcall"), tup_el_14,
          (ErlangCons head_22 (ErlangCons head_25 ErlangEmptyList))])
  in let arg_31 = (erlps__v__1 [(ErlangAtom "v")])
  in let tup_el_30 = (erlps__option_some__1 [arg_31])
  in let tup_el_33 = (erlps__v__1 [(ErlangAtom "v")])
  in let head_29 = (ErlangTuple [tup_el_30, tup_el_33])
  in let
    tup_el_10 =
      (ErlangTuple
         [(ErlangAtom "switch"), tup_el_12,
          (ErlangCons head_29 ErlangEmptyList)])
  in
    (ErlangTuple
       [(ErlangCons head_2 (ErlangCons head_6 ErlangEmptyList)),
        tup_el_10, type_0])
erlps__builtin_map_get__1 [arg_37] = (EXC.function_clause unit)
erlps__builtin_map_get__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__builtin_map_lookup_default__1 :: ErlangFun
erlps__builtin_map_lookup_default__1 [type_0] =
  let    tup_el_3 = (H.make_string "m")
  in let head_2 = (ErlangTuple [tup_el_3, (ErlangAtom "word")])
  in let tup_el_7 = (H.make_string "k")
  in let head_6 = (ErlangTuple [tup_el_7, (ErlangAtom "word")])
  in let tup_el_11 = (H.make_string "default")
  in let head_10 = (ErlangTuple [tup_el_11, type_0])
  in let
    tup_el_22 = (ErlangTuple [(ErlangAtom "map_lookup"), type_0])
  in let
    tup_el_20 = (ErlangTuple [(ErlangAtom "builtin"), tup_el_22])
  in let
    tup_el_18 = (ErlangTuple [(ErlangAtom "var_ref"), tup_el_20])
  in let head_26 = (erlps__v__1 [(ErlangAtom "m")])
  in let head_29 = (erlps__v__1 [(ErlangAtom "k")])
  in let
    tup_el_16 =
      (ErlangTuple
         [(ErlangAtom "funcall"), tup_el_18,
          (ErlangCons head_26 (ErlangCons head_29 ErlangEmptyList))])
  in let tup_el_34 = (erlps__option_none__0 [])
  in let tup_el_35 = (erlps__v__1 [(ErlangAtom "default")])
  in let head_33 = (ErlangTuple [tup_el_34, tup_el_35])
  in let arg_40 = (erlps__v__1 [(ErlangAtom "v")])
  in let tup_el_39 = (erlps__option_some__1 [arg_40])
  in let tup_el_42 = (erlps__v__1 [(ErlangAtom "v")])
  in let head_38 = (ErlangTuple [tup_el_39, tup_el_42])
  in let
    tup_el_14 =
      (ErlangTuple
         [(ErlangAtom "switch"), tup_el_16,
          (ErlangCons head_33 (ErlangCons head_38 ErlangEmptyList))])
  in
    (ErlangTuple
       [(ErlangCons head_2
           (ErlangCons head_6 (ErlangCons head_10 ErlangEmptyList))),
        tup_el_14, type_0])
erlps__builtin_map_lookup_default__1 [arg_46] =
  (EXC.function_clause unit)
erlps__builtin_map_lookup_default__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__builtin_map_member__0 :: ErlangFun
erlps__builtin_map_member__0 [] =
  let    tup_el_2 = (H.make_string "m")
  in let head_1 = (ErlangTuple [tup_el_2, (ErlangAtom "word")])
  in let tup_el_6 = (H.make_string "k")
  in let head_5 = (ErlangTuple [tup_el_6, (ErlangAtom "word")])
  in let
    tup_el_17 =
      (ErlangTuple [(ErlangAtom "map_lookup"), (ErlangAtom "word")])
  in let
    tup_el_15 = (ErlangTuple [(ErlangAtom "builtin"), tup_el_17])
  in let
    tup_el_13 = (ErlangTuple [(ErlangAtom "var_ref"), tup_el_15])
  in let head_21 = (erlps__v__1 [(ErlangAtom "m")])
  in let head_24 = (erlps__v__1 [(ErlangAtom "k")])
  in let
    tup_el_11 =
      (ErlangTuple
         [(ErlangAtom "funcall"), tup_el_13,
          (ErlangCons head_21 (ErlangCons head_24 ErlangEmptyList))])
  in let tup_el_29 = (erlps__option_none__0 [])
  in let
    tup_el_30 =
      (ErlangTuple
         [(ErlangAtom "integer"), (ErlangInt (DBI.fromInt 0))])
  in let head_28 = (ErlangTuple [tup_el_29, tup_el_30])
  in let tup_el_37 = (H.make_string "_")
  in let
    tup_el_35 = (ErlangTuple [(ErlangAtom "var_ref"), tup_el_37])
  in let
    tup_el_38 =
      (ErlangTuple
         [(ErlangAtom "integer"), (ErlangInt (DBI.fromInt 1))])
  in let head_34 = (ErlangTuple [tup_el_35, tup_el_38])
  in let
    tup_el_9 =
      (ErlangTuple
         [(ErlangAtom "switch"), tup_el_11,
          (ErlangCons head_28 (ErlangCons head_34 ErlangEmptyList))])
  in
    (ErlangTuple
       [(ErlangCons head_1 (ErlangCons head_5 ErlangEmptyList)),
        tup_el_9, (ErlangAtom "word")])
erlps__builtin_map_member__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__builtin_map_upd__1 :: ErlangFun
erlps__builtin_map_upd__1 [type_0] =
  let    tup_el_3 = (H.make_string "map")
  in let head_2 = (ErlangTuple [tup_el_3, (ErlangAtom "word")])
  in let tup_el_7 = (H.make_string "key")
  in let head_6 = (ErlangTuple [tup_el_7, (ErlangAtom "word")])
  in let tup_el_11 = (H.make_string "valfun")
  in let head_10 = (ErlangTuple [tup_el_11, (ErlangAtom "word")])
  in let
    tup_el_18 =
      (ErlangTuple [(ErlangAtom "builtin"), (ErlangAtom "map_put")])
  in let
    tup_el_16 = (ErlangTuple [(ErlangAtom "var_ref"), tup_el_18])
  in let head_22 = (erlps__v__1 [(ErlangAtom "map")])
  in let head_25 = (erlps__v__1 [(ErlangAtom "key")])
  in let tup_el_30 = (erlps__v__1 [(ErlangAtom "valfun")])
  in let tup_el_39 = (ErlangTuple [(ErlangAtom "map_get"), type_0])
  in let
    tup_el_37 = (ErlangTuple [(ErlangAtom "builtin"), tup_el_39])
  in let
    tup_el_35 = (ErlangTuple [(ErlangAtom "var_ref"), tup_el_37])
  in let head_43 = (erlps__v__1 [(ErlangAtom "map")])
  in let head_46 = (erlps__v__1 [(ErlangAtom "key")])
  in let
    head_33 =
      (ErlangTuple
         [(ErlangAtom "funcall"), tup_el_35,
          (ErlangCons head_43 (ErlangCons head_46 ErlangEmptyList))])
  in let
    head_28 =
      (ErlangTuple
         [(ErlangAtom "funcall"), tup_el_30,
          (ErlangCons head_33 ErlangEmptyList)])
  in let
    tup_el_14 =
      (ErlangTuple
         [(ErlangAtom "funcall"), tup_el_16,
          (ErlangCons head_22
             (ErlangCons head_25 (ErlangCons head_28 ErlangEmptyList)))])
  in
    (ErlangTuple
       [(ErlangCons head_2
           (ErlangCons head_6 (ErlangCons head_10 ErlangEmptyList))),
        tup_el_14, (ErlangAtom "word")])
erlps__builtin_map_upd__1 [arg_52] = (EXC.function_clause unit)
erlps__builtin_map_upd__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__builtin_map_upd_default__1 :: ErlangFun
erlps__builtin_map_upd_default__1 [type_0] =
  let    tup_el_3 = (H.make_string "map")
  in let head_2 = (ErlangTuple [tup_el_3, (ErlangAtom "word")])
  in let tup_el_7 = (H.make_string "key")
  in let head_6 = (ErlangTuple [tup_el_7, (ErlangAtom "word")])
  in let tup_el_11 = (H.make_string "val")
  in let head_10 = (ErlangTuple [tup_el_11, (ErlangAtom "word")])
  in let tup_el_15 = (H.make_string "valfun")
  in let head_14 = (ErlangTuple [tup_el_15, (ErlangAtom "word")])
  in let
    tup_el_22 =
      (ErlangTuple [(ErlangAtom "builtin"), (ErlangAtom "map_put")])
  in let
    tup_el_20 = (ErlangTuple [(ErlangAtom "var_ref"), tup_el_22])
  in let head_26 = (erlps__v__1 [(ErlangAtom "map")])
  in let head_29 = (erlps__v__1 [(ErlangAtom "key")])
  in let tup_el_34 = (erlps__v__1 [(ErlangAtom "valfun")])
  in let
    tup_el_43 =
      (ErlangTuple [(ErlangAtom "map_lookup_default"), type_0])
  in let
    tup_el_41 = (ErlangTuple [(ErlangAtom "builtin"), tup_el_43])
  in let
    tup_el_39 = (ErlangTuple [(ErlangAtom "var_ref"), tup_el_41])
  in let head_47 = (erlps__v__1 [(ErlangAtom "map")])
  in let head_50 = (erlps__v__1 [(ErlangAtom "key")])
  in let head_53 = (erlps__v__1 [(ErlangAtom "val")])
  in let
    head_37 =
      (ErlangTuple
         [(ErlangAtom "funcall"), tup_el_39,
          (ErlangCons head_47
             (ErlangCons head_50 (ErlangCons head_53 ErlangEmptyList)))])
  in let
    head_32 =
      (ErlangTuple
         [(ErlangAtom "funcall"), tup_el_34,
          (ErlangCons head_37 ErlangEmptyList)])
  in let
    tup_el_18 =
      (ErlangTuple
         [(ErlangAtom "funcall"), tup_el_20,
          (ErlangCons head_26
             (ErlangCons head_29 (ErlangCons head_32 ErlangEmptyList)))])
  in
    (ErlangTuple
       [(ErlangCons head_2
           (ErlangCons head_6
              (ErlangCons head_10 (ErlangCons head_14 ErlangEmptyList)))),
        tup_el_18, (ErlangAtom "word")])
erlps__builtin_map_upd_default__1 [arg_59] =
  (EXC.function_clause unit)
erlps__builtin_map_upd_default__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__builtin_map_from_list__0 :: ErlangFun
erlps__builtin_map_from_list__0 [] =
  let    tup_el_2 = (H.make_string "xs")
  in let
    tup_el_5 =
      (ErlangTuple
         [(ErlangAtom "tuple"),
          (ErlangCons (ErlangAtom "word")
             (ErlangCons (ErlangAtom "word") ErlangEmptyList))])
  in let tup_el_3 = (ErlangTuple [(ErlangAtom "list"), tup_el_5])
  in let head_1 = (ErlangTuple [tup_el_2, tup_el_3])
  in let tup_el_14 = (H.make_string "acc")
  in let head_13 = (ErlangTuple [tup_el_14, (ErlangAtom "word")])
  in let tup_el_19 = (erlps__v__1 [(ErlangAtom "xs")])
  in let
    tup_el_23 = (ErlangTuple [(ErlangAtom "list"), ErlangEmptyList])
  in let tup_el_26 = (erlps__v__1 [(ErlangAtom "acc")])
  in let head_22 = (ErlangTuple [tup_el_23, tup_el_26])
  in let head_36 = (erlps__v__1 [(ErlangAtom "k")])
  in let head_39 = (erlps__v__1 [(ErlangAtom "v")])
  in let
    tup_el_33 =
      (ErlangTuple
         [(ErlangAtom "tuple"),
          (ErlangCons head_36 (ErlangCons head_39 ErlangEmptyList))])
  in let tup_el_42 = (erlps__v__1 [(ErlangAtom "ys")])
  in let
    tup_el_30 =
      (ErlangTuple
         [(ErlangAtom "binop"), (ErlangAtom "::"), tup_el_33, tup_el_42])
  in let
    tup_el_48 =
      (ErlangTuple
         [(ErlangAtom "builtin"), (ErlangAtom "map_from_list")])
  in let
    tup_el_46 = (ErlangTuple [(ErlangAtom "var_ref"), tup_el_48])
  in let head_52 = (erlps__v__1 [(ErlangAtom "ys")])
  in let
    tup_el_59 =
      (ErlangTuple [(ErlangAtom "builtin"), (ErlangAtom "map_put")])
  in let
    tup_el_57 = (ErlangTuple [(ErlangAtom "var_ref"), tup_el_59])
  in let head_63 = (erlps__v__1 [(ErlangAtom "acc")])
  in let head_66 = (erlps__v__1 [(ErlangAtom "k")])
  in let head_69 = (erlps__v__1 [(ErlangAtom "v")])
  in let
    head_55 =
      (ErlangTuple
         [(ErlangAtom "funcall"), tup_el_57,
          (ErlangCons head_63
             (ErlangCons head_66 (ErlangCons head_69 ErlangEmptyList)))])
  in let
    tup_el_44 =
      (ErlangTuple
         [(ErlangAtom "funcall"), tup_el_46,
          (ErlangCons head_52 (ErlangCons head_55 ErlangEmptyList))])
  in let head_29 = (ErlangTuple [tup_el_30, tup_el_44])
  in let
    tup_el_17 =
      (ErlangTuple
         [(ErlangAtom "switch"), tup_el_19,
          (ErlangCons head_22 (ErlangCons head_29 ErlangEmptyList))])
  in
    (ErlangTuple
       [(ErlangCons head_1 (ErlangCons head_13 ErlangEmptyList)),
        tup_el_17, (ErlangAtom "word")])
erlps__builtin_map_from_list__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__builtin_list_concat__0 :: ErlangFun
erlps__builtin_list_concat__0 [] =
  let    tup_el_2 = (H.make_string "l1")
  in let
    tup_el_3 =
      (ErlangTuple [(ErlangAtom "list"), (ErlangAtom "word")])
  in let head_1 = (ErlangTuple [tup_el_2, tup_el_3])
  in let tup_el_8 = (H.make_string "l2")
  in let
    tup_el_9 =
      (ErlangTuple [(ErlangAtom "list"), (ErlangAtom "word")])
  in let head_7 = (ErlangTuple [tup_el_8, tup_el_9])
  in let tup_el_15 = (erlps__v__1 [(ErlangAtom "l1")])
  in let
    tup_el_19 = (ErlangTuple [(ErlangAtom "list"), ErlangEmptyList])
  in let tup_el_22 = (erlps__v__1 [(ErlangAtom "l2")])
  in let head_18 = (ErlangTuple [tup_el_19, tup_el_22])
  in let tup_el_29 = (erlps__v__1 [(ErlangAtom "hd")])
  in let tup_el_31 = (erlps__v__1 [(ErlangAtom "tl")])
  in let
    tup_el_26 =
      (ErlangTuple
         [(ErlangAtom "binop"), (ErlangAtom "::"), tup_el_29, tup_el_31])
  in let tup_el_36 = (erlps__v__1 [(ErlangAtom "hd")])
  in let
    tup_el_42 =
      (ErlangTuple
         [(ErlangAtom "builtin"), (ErlangAtom "list_concat")])
  in let
    tup_el_40 = (ErlangTuple [(ErlangAtom "var_ref"), tup_el_42])
  in let head_46 = (erlps__v__1 [(ErlangAtom "tl")])
  in let head_49 = (erlps__v__1 [(ErlangAtom "l2")])
  in let
    tup_el_38 =
      (ErlangTuple
         [(ErlangAtom "funcall"), tup_el_40,
          (ErlangCons head_46 (ErlangCons head_49 ErlangEmptyList))])
  in let
    tup_el_33 =
      (ErlangTuple
         [(ErlangAtom "binop"), (ErlangAtom "::"), tup_el_36, tup_el_38])
  in let head_25 = (ErlangTuple [tup_el_26, tup_el_33])
  in let
    tup_el_13 =
      (ErlangTuple
         [(ErlangAtom "switch"), tup_el_15,
          (ErlangCons head_18 (ErlangCons head_25 ErlangEmptyList))])
  in
    (ErlangTuple
       [(ErlangCons head_1 (ErlangCons head_7 ErlangEmptyList)),
        tup_el_13, (ErlangAtom "word")])
erlps__builtin_list_concat__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__builtin_string_length__0 :: ErlangFun
erlps__builtin_string_length__0 [] =
  let    tup_el_2 = (H.make_string "s")
  in let head_1 = (ErlangTuple [tup_el_2, (ErlangAtom "string")])
  in let tup_el_7 = (erlps__operand__1 [(ErlangAtom "s")])
  in let head_14 = (erlps__v__1 [(ErlangAtom "n")])
  in let
    tup_el_11 =
      (ErlangTuple
         [(ErlangAtom "tuple"), (ErlangCons head_14 ErlangEmptyList)])
  in let tup_el_17 = (erlps__v__1 [(ErlangAtom "n")])
  in let head_10 = (ErlangTuple [tup_el_11, tup_el_17])
  in let
    tup_el_5 =
      (ErlangTuple
         [(ErlangAtom "switch"), tup_el_7,
          (ErlangCons head_10 ErlangEmptyList)])
  in
    (ErlangTuple
       [(ErlangCons head_1 ErlangEmptyList), tup_el_5,
        (ErlangAtom "word")])
erlps__builtin_string_length__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__builtin_string_concat__0 :: ErlangFun
erlps__builtin_string_concat__0 [] =
  let    tup_el_2 = (H.make_string "s1")
  in let head_1 = (ErlangTuple [tup_el_2, (ErlangAtom "string")])
  in let tup_el_6 = (H.make_string "s2")
  in let head_5 = (ErlangTuple [tup_el_6, (ErlangAtom "string")])
  in let tup_el_11 = (erlps__operand__1 [(ErlangAtom "s1")])
  in let head_18 = (erlps__v__1 [(ErlangAtom "n1")])
  in let
    tup_el_15 =
      (ErlangTuple
         [(ErlangAtom "tuple"), (ErlangCons head_18 ErlangEmptyList)])
  in let tup_el_23 = (erlps__operand__1 [(ErlangAtom "s2")])
  in let head_30 = (erlps__v__1 [(ErlangAtom "n2")])
  in let
    tup_el_27 =
      (ErlangTuple
         [(ErlangAtom "tuple"), (ErlangCons head_30 ErlangEmptyList)])
  in let
    tup_el_35 =
      (erlps__op__3
         [(ErlangAtom "=="), (ErlangAtom "n1"),
          (ErlangInt (DBI.fromInt 0))])
  in let tup_el_39 = (erlps__v__1 [(ErlangAtom "s2")])
  in let
    tup_el_43 =
      (erlps__op__3
         [(ErlangAtom "=="), (ErlangAtom "n2"),
          (ErlangInt (DBI.fromInt 0))])
  in let tup_el_47 = (erlps__v__1 [(ErlangAtom "s1")])
  in let
    head_54 =
      (BIF.do_remote_fun_call "Aeb.Opcodes" "erlps__mnemonic__1"
         [(ErlangInt (DBI.fromInt 89))])
  in let
    tup_el_51 =
      (ErlangTuple
         [(ErlangAtom "inline_asm"),
          (ErlangCons head_54 ErlangEmptyList)])
  in let tup_el_59 = (erlps__v__1 [(ErlangAtom "ret")])
  in let
    head_64 =
      (erlps__op__3
         [(ErlangAtom "+"), (ErlangAtom "n1"), (ErlangAtom "n2")])
  in let
    head_72 =
      (BIF.do_remote_fun_call "Aeb.Opcodes" "erlps__mnemonic__1"
         [(ErlangInt (DBI.fromInt 89))])
  in let
    head_75 =
      (BIF.do_remote_fun_call "Aeb.Opcodes" "erlps__mnemonic__1"
         [(ErlangInt (DBI.fromInt 82))])
  in let
    head_69 =
      (ErlangTuple
         [(ErlangAtom "inline_asm"),
          (ErlangCons head_72 (ErlangCons head_75 ErlangEmptyList))])
  in let
    tup_el_83 =
      (ErlangTuple
         [(ErlangAtom "builtin"), (ErlangAtom "string_concat_inner1")])
  in let
    tup_el_81 = (ErlangTuple [(ErlangAtom "var_ref"), tup_el_83])
  in let head_87 = (erlps__v__1 [(ErlangAtom "n1")])
  in let
    head_90 =
      (erlps__op__3
         [(ErlangAtom "+"), (ErlangAtom "s1"),
          (ErlangInt (DBI.fromInt 32))])
  in let head_95 = (erlps__v__1 [(ErlangAtom "n2")])
  in let
    head_98 =
      (erlps__op__3
         [(ErlangAtom "+"), (ErlangAtom "s2"),
          (ErlangInt (DBI.fromInt 32))])
  in let
    head_79 =
      (ErlangTuple
         [(ErlangAtom "funcall"), tup_el_81,
          (ErlangCons head_87
             (ErlangCons head_90
                (ErlangCons head_95 (ErlangCons head_98 ErlangEmptyList))))])
  in let
    head_107 =
      (BIF.do_remote_fun_call "Aeb.Opcodes" "erlps__mnemonic__1"
         [(ErlangInt (DBI.fromInt 80))])
  in let
    head_104 =
      (ErlangTuple
         [(ErlangAtom "inline_asm"),
          (ErlangCons head_107 ErlangEmptyList)])
  in let head_111 = (erlps__v__1 [(ErlangAtom "ret")])
  in let
    tup_el_61 =
      (ErlangTuple
         [(ErlangAtom "seq"),
          (ErlangCons head_64
             (ErlangCons head_69
                (ErlangCons head_79
                   (ErlangCons head_104
                      (ErlangCons head_111 ErlangEmptyList)))))])
  in let head_58 = (ErlangTuple [tup_el_59, tup_el_61])
  in let
    tup_el_49 =
      (ErlangTuple
         [(ErlangAtom "switch"), tup_el_51,
          (ErlangCons head_58 ErlangEmptyList)])
  in let
    tup_el_41 =
      (ErlangTuple
         [(ErlangAtom "ifte"), tup_el_43, tup_el_47, tup_el_49])
  in let
    tup_el_33 =
      (ErlangTuple
         [(ErlangAtom "ifte"), tup_el_35, tup_el_39, tup_el_41])
  in let head_26 = (ErlangTuple [tup_el_27, tup_el_33])
  in let
    tup_el_21 =
      (ErlangTuple
         [(ErlangAtom "switch"), tup_el_23,
          (ErlangCons head_26 ErlangEmptyList)])
  in let head_14 = (ErlangTuple [tup_el_15, tup_el_21])
  in let
    tup_el_9 =
      (ErlangTuple
         [(ErlangAtom "switch"), tup_el_11,
          (ErlangCons head_14 ErlangEmptyList)])
  in
    (ErlangTuple
       [(ErlangCons head_1 (ErlangCons head_5 ErlangEmptyList)),
        tup_el_9, (ErlangAtom "word")])
erlps__builtin_string_concat__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__builtin_string_concat_inner1__0 :: ErlangFun
erlps__builtin_string_concat_inner1__0 [] =
  let    tup_el_2 = (H.make_string "n1")
  in let head_1 = (ErlangTuple [tup_el_2, (ErlangAtom "word")])
  in let tup_el_6 = (H.make_string "p1")
  in let head_5 = (ErlangTuple [tup_el_6, (ErlangAtom "pointer")])
  in let tup_el_10 = (H.make_string "n2")
  in let head_9 = (ErlangTuple [tup_el_10, (ErlangAtom "word")])
  in let tup_el_14 = (H.make_string "p2")
  in let
    head_13 = (ErlangTuple [tup_el_14, (ErlangAtom "pointer")])
  in let
    tup_el_23 =
      (ErlangTuple
         [(ErlangAtom "builtin"), (ErlangAtom "string_copy")])
  in let
    tup_el_21 = (ErlangTuple [(ErlangAtom "var_ref"), tup_el_23])
  in let head_27 = (erlps__v__1 [(ErlangAtom "n1")])
  in let head_30 = (erlps__v__1 [(ErlangAtom "p1")])
  in let
    tup_el_19 =
      (ErlangTuple
         [(ErlangAtom "funcall"), tup_el_21,
          (ErlangCons head_27 (ErlangCons head_30 ErlangEmptyList))])
  in let tup_el_35 = (erlps__v__1 [(ErlangAtom "w1")])
  in let
    tup_el_39 =
      (erlps__op__3
         [(ErlangAtom "mod"), (ErlangAtom "n1"),
          (ErlangInt (DBI.fromInt 32))])
  in let tup_el_45 = (erlps__v__1 [(ErlangAtom "nx")])
  in let
    tup_el_49 =
      (erlps__op__3
         [(ErlangAtom "=="), (ErlangAtom "nx"),
          (ErlangInt (DBI.fromInt 0))])
  in let
    tup_el_59 =
      (ErlangTuple
         [(ErlangAtom "builtin"), (ErlangAtom "string_copy")])
  in let
    tup_el_57 = (ErlangTuple [(ErlangAtom "var_ref"), tup_el_59])
  in let head_63 = (erlps__v__1 [(ErlangAtom "n2")])
  in let head_66 = (erlps__v__1 [(ErlangAtom "p2")])
  in let
    tup_el_55 =
      (ErlangTuple
         [(ErlangAtom "funcall"), tup_el_57,
          (ErlangCons head_63 (ErlangCons head_66 ErlangEmptyList))])
  in let tup_el_71 = (erlps__v__1 [(ErlangAtom "w2")])
  in let head_76 = (erlps__v__1 [(ErlangAtom "w2")])
  in let
    head_82 =
      (BIF.do_remote_fun_call "Aeb.Opcodes" "erlps__mnemonic__1"
         [(ErlangInt (DBI.fromInt 89))])
  in let
    head_85 =
      (BIF.do_remote_fun_call "Aeb.Opcodes" "erlps__mnemonic__1"
         [(ErlangInt (DBI.fromInt 82))])
  in let
    head_88 =
      (BIF.do_remote_fun_call "Aeb.Opcodes" "erlps__mnemonic__1"
         [(ErlangInt (DBI.fromInt 89))])
  in let
    head_79 =
      (ErlangTuple
         [(ErlangAtom "inline_asm"),
          (ErlangCons head_82
             (ErlangCons head_85 (ErlangCons head_88 ErlangEmptyList)))])
  in let
    tup_el_73 =
      (ErlangTuple
         [(ErlangAtom "seq"),
          (ErlangCons head_76 (ErlangCons head_79 ErlangEmptyList))])
  in let head_70 = (ErlangTuple [tup_el_71, tup_el_73])
  in let
    tup_el_53 =
      (ErlangTuple
         [(ErlangAtom "switch"), tup_el_55,
          (ErlangCons head_70 ErlangEmptyList)])
  in let
    tup_el_97 =
      (ErlangTuple
         [(ErlangAtom "builtin"), (ErlangAtom "string_shift_copy")])
  in let
    tup_el_95 = (ErlangTuple [(ErlangAtom "var_ref"), tup_el_97])
  in let head_101 = (erlps__v__1 [(ErlangAtom "nx")])
  in let head_104 = (erlps__v__1 [(ErlangAtom "w1")])
  in let head_107 = (erlps__v__1 [(ErlangAtom "n2")])
  in let head_110 = (erlps__v__1 [(ErlangAtom "p2")])
  in let
    tup_el_93 =
      (ErlangTuple
         [(ErlangAtom "funcall"), tup_el_95,
          (ErlangCons head_101
             (ErlangCons head_104
                (ErlangCons head_107 (ErlangCons head_110 ErlangEmptyList))))])
  in let
    tup_el_47 =
      (ErlangTuple
         [(ErlangAtom "ifte"), tup_el_49, tup_el_53, tup_el_93])
  in let head_44 = (ErlangTuple [tup_el_45, tup_el_47])
  in let
    tup_el_37 =
      (ErlangTuple
         [(ErlangAtom "switch"), tup_el_39,
          (ErlangCons head_44 ErlangEmptyList)])
  in let head_34 = (ErlangTuple [tup_el_35, tup_el_37])
  in let
    tup_el_17 =
      (ErlangTuple
         [(ErlangAtom "switch"), tup_el_19,
          (ErlangCons head_34 ErlangEmptyList)])
  in
    (ErlangTuple
       [(ErlangCons head_1
           (ErlangCons head_5
              (ErlangCons head_9 (ErlangCons head_13 ErlangEmptyList)))),
        tup_el_17, (ErlangAtom "word")])
erlps__builtin_string_concat_inner1__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__builtin_string_copy__0 :: ErlangFun
erlps__builtin_string_copy__0 [] =
  let    tup_el_2 = (H.make_string "n")
  in let head_1 = (ErlangTuple [tup_el_2, (ErlangAtom "word")])
  in let tup_el_6 = (H.make_string "p")
  in let head_5 = (ErlangTuple [tup_el_6, (ErlangAtom "pointer")])
  in let tup_el_11 = (erlps__operand__1 [(ErlangAtom "p")])
  in let head_18 = (erlps__v__1 [(ErlangAtom "w")])
  in let
    tup_el_15 =
      (ErlangTuple
         [(ErlangAtom "tuple"), (ErlangCons head_18 ErlangEmptyList)])
  in let
    tup_el_23 =
      (erlps__op__3
         [(ErlangAtom ">"), (ErlangAtom "n"),
          (ErlangInt (DBI.fromInt 31))])
  in let head_30 = (erlps__v__1 [(ErlangAtom "w")])
  in let
    head_36 =
      (BIF.do_remote_fun_call "Aeb.Opcodes" "erlps__mnemonic__1"
         [(ErlangInt (DBI.fromInt 89))])
  in let
    head_39 =
      (BIF.do_remote_fun_call "Aeb.Opcodes" "erlps__mnemonic__1"
         [(ErlangInt (DBI.fromInt 82))])
  in let
    head_33 =
      (ErlangTuple
         [(ErlangAtom "inline_asm"),
          (ErlangCons head_36 (ErlangCons head_39 ErlangEmptyList))])
  in let
    tup_el_47 =
      (ErlangTuple
         [(ErlangAtom "builtin"), (ErlangAtom "string_copy")])
  in let
    tup_el_45 = (ErlangTuple [(ErlangAtom "var_ref"), tup_el_47])
  in let
    head_51 =
      (erlps__op__3
         [(ErlangAtom "-"), (ErlangAtom "n"),
          (ErlangInt (DBI.fromInt 32))])
  in let
    head_56 =
      (erlps__op__3
         [(ErlangAtom "+"), (ErlangAtom "p"),
          (ErlangInt (DBI.fromInt 32))])
  in let
    head_43 =
      (ErlangTuple
         [(ErlangAtom "funcall"), tup_el_45,
          (ErlangCons head_51 (ErlangCons head_56 ErlangEmptyList))])
  in let
    tup_el_27 =
      (ErlangTuple
         [(ErlangAtom "seq"),
          (ErlangCons head_30
             (ErlangCons head_33 (ErlangCons head_43 ErlangEmptyList)))])
  in let tup_el_62 = (erlps__v__1 [(ErlangAtom "w")])
  in let
    tup_el_21 =
      (ErlangTuple
         [(ErlangAtom "ifte"), tup_el_23, tup_el_27, tup_el_62])
  in let head_14 = (ErlangTuple [tup_el_15, tup_el_21])
  in let
    tup_el_9 =
      (ErlangTuple
         [(ErlangAtom "switch"), tup_el_11,
          (ErlangCons head_14 ErlangEmptyList)])
  in
    (ErlangTuple
       [(ErlangCons head_1 (ErlangCons head_5 ErlangEmptyList)),
        tup_el_9, (ErlangAtom "word")])
erlps__builtin_string_copy__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__builtin_string_shift_copy__0 :: ErlangFun
erlps__builtin_string_shift_copy__0 [] =
  let    tup_el_2 = (H.make_string "off")
  in let head_1 = (ErlangTuple [tup_el_2, (ErlangAtom "word")])
  in let tup_el_6 = (H.make_string "dst")
  in let head_5 = (ErlangTuple [tup_el_6, (ErlangAtom "word")])
  in let tup_el_10 = (H.make_string "n")
  in let head_9 = (ErlangTuple [tup_el_10, (ErlangAtom "word")])
  in let tup_el_14 = (H.make_string "p")
  in let
    head_13 = (ErlangTuple [tup_el_14, (ErlangAtom "pointer")])
  in let tup_el_19 = (erlps__operand__1 [(ErlangAtom "p")])
  in let head_26 = (erlps__v__1 [(ErlangAtom "w")])
  in let
    tup_el_23 =
      (ErlangTuple
         [(ErlangAtom "tuple"), (ErlangCons head_26 ErlangEmptyList)])
  in let
    arg_37 =
      (erlps__op__3
         [(ErlangAtom "*"), (ErlangAtom "off"),
          (ErlangInt (DBI.fromInt 8))])
  in let
    arg_35 =
      (erlps__op__3 [(ErlangAtom "bsr"), arg_37, (ErlangAtom "w")])
  in let
    head_32 =
      (erlps__op__3 [(ErlangAtom "+"), (ErlangAtom "dst"), arg_35])
  in let
    head_46 =
      (BIF.do_remote_fun_call "Aeb.Opcodes" "erlps__mnemonic__1"
         [(ErlangInt (DBI.fromInt 89))])
  in let
    head_49 =
      (BIF.do_remote_fun_call "Aeb.Opcodes" "erlps__mnemonic__1"
         [(ErlangInt (DBI.fromInt 82))])
  in let
    head_43 =
      (ErlangTuple
         [(ErlangAtom "inline_asm"),
          (ErlangCons head_46 (ErlangCons head_49 ErlangEmptyList))])
  in let
    arg_58 =
      (erlps__op__3
         [(ErlangAtom "-"), (ErlangInt (DBI.fromInt 32)),
          (ErlangAtom "off")])
  in let
    tup_el_55 =
      (erlps__op__3 [(ErlangAtom ">"), (ErlangAtom "n"), arg_58])
  in let
    tup_el_66 =
      (ErlangTuple
         [(ErlangAtom "builtin"), (ErlangAtom "string_shift_copy")])
  in let
    tup_el_64 = (ErlangTuple [(ErlangAtom "var_ref"), tup_el_66])
  in let head_70 = (erlps__v__1 [(ErlangAtom "off")])
  in let
    arg_77 =
      (erlps__op__3
         [(ErlangAtom "-"), (ErlangInt (DBI.fromInt 32)),
          (ErlangAtom "off")])
  in let
    arg_75 =
      (erlps__op__3
         [(ErlangAtom "*"), arg_77, (ErlangInt (DBI.fromInt 8))])
  in let
    head_73 =
      (erlps__op__3 [(ErlangAtom "bsl"), arg_75, (ErlangAtom "w")])
  in let
    head_84 =
      (erlps__op__3
         [(ErlangAtom "-"), (ErlangAtom "n"),
          (ErlangInt (DBI.fromInt 32))])
  in let
    head_89 =
      (erlps__op__3
         [(ErlangAtom "+"), (ErlangAtom "p"),
          (ErlangInt (DBI.fromInt 32))])
  in let
    tup_el_62 =
      (ErlangTuple
         [(ErlangAtom "funcall"), tup_el_64,
          (ErlangCons head_70
             (ErlangCons head_73
                (ErlangCons head_84 (ErlangCons head_89 ErlangEmptyList))))])
  in let
    head_97 =
      (BIF.do_remote_fun_call "Aeb.Opcodes" "erlps__mnemonic__1"
         [(ErlangInt (DBI.fromInt 89))])
  in let
    tup_el_94 =
      (ErlangTuple
         [(ErlangAtom "inline_asm"),
          (ErlangCons head_97 ErlangEmptyList)])
  in let
    head_53 =
      (ErlangTuple
         [(ErlangAtom "ifte"), tup_el_55, tup_el_62, tup_el_94])
  in let
    tup_el_29 =
      (ErlangTuple
         [(ErlangAtom "seq"),
          (ErlangCons head_32
             (ErlangCons head_43 (ErlangCons head_53 ErlangEmptyList)))])
  in let head_22 = (ErlangTuple [tup_el_23, tup_el_29])
  in let
    tup_el_17 =
      (ErlangTuple
         [(ErlangAtom "switch"), tup_el_19,
          (ErlangCons head_22 ErlangEmptyList)])
  in
    (ErlangTuple
       [(ErlangCons head_1
           (ErlangCons head_5
              (ErlangCons head_9 (ErlangCons head_13 ErlangEmptyList)))),
        tup_el_17, (ErlangAtom "word")])
erlps__builtin_string_shift_copy__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__builtin_str_equal_p__0 :: ErlangFun
erlps__builtin_str_equal_p__0 [] =
  let    tup_el_2 = (H.make_string "n")
  in let head_1 = (ErlangTuple [tup_el_2, (ErlangAtom "word")])
  in let tup_el_6 = (H.make_string "p1")
  in let head_5 = (ErlangTuple [tup_el_6, (ErlangAtom "pointer")])
  in let tup_el_10 = (H.make_string "p2")
  in let head_9 = (ErlangTuple [tup_el_10, (ErlangAtom "pointer")])
  in let
    tup_el_15 =
      (erlps__op__3
         [(ErlangAtom "<"), (ErlangAtom "n"),
          (ErlangInt (DBI.fromInt 1))])
  in let
    tup_el_19 =
      (ErlangTuple
         [(ErlangAtom "integer"), (ErlangInt (DBI.fromInt 1))])
  in let tup_el_24 = (erlps__operand__1 [(ErlangAtom "p1")])
  in let head_31 = (erlps__v__1 [(ErlangAtom "w1")])
  in let
    tup_el_28 =
      (ErlangTuple
         [(ErlangAtom "tuple"), (ErlangCons head_31 ErlangEmptyList)])
  in let tup_el_36 = (erlps__operand__1 [(ErlangAtom "p2")])
  in let head_43 = (erlps__v__1 [(ErlangAtom "w2")])
  in let
    tup_el_40 =
      (ErlangTuple
         [(ErlangAtom "tuple"), (ErlangCons head_43 ErlangEmptyList)])
  in let
    arg_48 =
      (erlps__op__3
         [(ErlangAtom "=="), (ErlangAtom "w1"), (ErlangAtom "w2")])
  in let
    tup_el_56 =
      (ErlangTuple
         [(ErlangAtom "builtin"), (ErlangAtom "str_equal_p")])
  in let
    tup_el_54 = (ErlangTuple [(ErlangAtom "var_ref"), tup_el_56])
  in let
    head_60 =
      (erlps__op__3
         [(ErlangAtom "-"), (ErlangAtom "n"),
          (ErlangInt (DBI.fromInt 32))])
  in let
    head_65 =
      (erlps__op__3
         [(ErlangAtom "+"), (ErlangAtom "p1"),
          (ErlangInt (DBI.fromInt 32))])
  in let
    head_70 =
      (erlps__op__3
         [(ErlangAtom "+"), (ErlangAtom "p2"),
          (ErlangInt (DBI.fromInt 32))])
  in let
    arg_52 =
      (ErlangTuple
         [(ErlangAtom "funcall"), tup_el_54,
          (ErlangCons head_60
             (ErlangCons head_65 (ErlangCons head_70 ErlangEmptyList)))])
  in let
    tup_el_46 = (erlps__op__3 [(ErlangAtom "&&"), arg_48, arg_52])
  in let head_39 = (ErlangTuple [tup_el_40, tup_el_46])
  in let
    tup_el_34 =
      (ErlangTuple
         [(ErlangAtom "switch"), tup_el_36,
          (ErlangCons head_39 ErlangEmptyList)])
  in let head_27 = (ErlangTuple [tup_el_28, tup_el_34])
  in let
    tup_el_22 =
      (ErlangTuple
         [(ErlangAtom "switch"), tup_el_24,
          (ErlangCons head_27 ErlangEmptyList)])
  in let
    tup_el_13 =
      (ErlangTuple
         [(ErlangAtom "ifte"), tup_el_15, tup_el_19, tup_el_22])
  in
    (ErlangTuple
       [(ErlangCons head_1
           (ErlangCons head_5 (ErlangCons head_9 ErlangEmptyList))),
        tup_el_13, (ErlangAtom "word")])
erlps__builtin_str_equal_p__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__builtin_str_equal__0 :: ErlangFun
erlps__builtin_str_equal__0 [] =
  let    tup_el_2 = (H.make_string "s1")
  in let head_1 = (ErlangTuple [tup_el_2, (ErlangAtom "string")])
  in let tup_el_6 = (H.make_string "s2")
  in let head_5 = (ErlangTuple [tup_el_6, (ErlangAtom "string")])
  in let tup_el_11 = (erlps__operand__1 [(ErlangAtom "s1")])
  in let head_18 = (erlps__v__1 [(ErlangAtom "n1")])
  in let
    tup_el_15 =
      (ErlangTuple
         [(ErlangAtom "tuple"), (ErlangCons head_18 ErlangEmptyList)])
  in let tup_el_23 = (erlps__operand__1 [(ErlangAtom "s2")])
  in let head_30 = (erlps__v__1 [(ErlangAtom "n2")])
  in let
    tup_el_27 =
      (ErlangTuple
         [(ErlangAtom "tuple"), (ErlangCons head_30 ErlangEmptyList)])
  in let
    arg_35 =
      (erlps__op__3
         [(ErlangAtom "=="), (ErlangAtom "n1"), (ErlangAtom "n2")])
  in let
    tup_el_43 =
      (ErlangTuple
         [(ErlangAtom "builtin"), (ErlangAtom "str_equal_p")])
  in let
    tup_el_41 = (ErlangTuple [(ErlangAtom "var_ref"), tup_el_43])
  in let head_47 = (erlps__v__1 [(ErlangAtom "n1")])
  in let
    head_50 =
      (erlps__op__3
         [(ErlangAtom "+"), (ErlangAtom "s1"),
          (ErlangInt (DBI.fromInt 32))])
  in let
    head_55 =
      (erlps__op__3
         [(ErlangAtom "+"), (ErlangAtom "s2"),
          (ErlangInt (DBI.fromInt 32))])
  in let
    arg_39 =
      (ErlangTuple
         [(ErlangAtom "funcall"), tup_el_41,
          (ErlangCons head_47
             (ErlangCons head_50 (ErlangCons head_55 ErlangEmptyList)))])
  in let
    tup_el_33 = (erlps__op__3 [(ErlangAtom "&&"), arg_35, arg_39])
  in let head_26 = (ErlangTuple [tup_el_27, tup_el_33])
  in let
    tup_el_21 =
      (ErlangTuple
         [(ErlangAtom "switch"), tup_el_23,
          (ErlangCons head_26 ErlangEmptyList)])
  in let head_14 = (ErlangTuple [tup_el_15, tup_el_21])
  in let
    tup_el_9 =
      (ErlangTuple
         [(ErlangAtom "switch"), tup_el_11,
          (ErlangCons head_14 ErlangEmptyList)])
  in
    (ErlangTuple
       [(ErlangCons head_1 (ErlangCons head_5 ErlangEmptyList)),
        tup_el_9, (ErlangAtom "word")])
erlps__builtin_str_equal__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__builtin_popcount__0 :: ErlangFun
erlps__builtin_popcount__0 [] =
  let    tup_el_2 = (H.make_string "bits")
  in let head_1 = (ErlangTuple [tup_el_2, (ErlangAtom "word")])
  in let tup_el_6 = (H.make_string "acc")
  in let head_5 = (ErlangTuple [tup_el_6, (ErlangAtom "word")])
  in let
    tup_el_11 =
      (erlps__op__3
         [(ErlangAtom "=="), (ErlangAtom "bits"),
          (ErlangInt (DBI.fromInt 0))])
  in let tup_el_15 = (erlps__v__1 [(ErlangAtom "acc")])
  in let
    tup_el_21 =
      (ErlangTuple [(ErlangAtom "builtin"), (ErlangAtom "popcount")])
  in let
    tup_el_19 = (ErlangTuple [(ErlangAtom "var_ref"), tup_el_21])
  in let
    head_25 =
      (erlps__op__3
         [(ErlangAtom "bsr"), (ErlangInt (DBI.fromInt 1)),
          (ErlangAtom "bits")])
  in let
    arg_33 =
      (erlps__op__3
         [(ErlangAtom "band"), (ErlangAtom "bits"),
          (ErlangInt (DBI.fromInt 1))])
  in let
    head_30 =
      (erlps__op__3 [(ErlangAtom "+"), (ErlangAtom "acc"), arg_33])
  in let
    tup_el_17 =
      (ErlangTuple
         [(ErlangAtom "funcall"), tup_el_19,
          (ErlangCons head_25 (ErlangCons head_30 ErlangEmptyList))])
  in let
    tup_el_9 =
      (ErlangTuple
         [(ErlangAtom "ifte"), tup_el_11, tup_el_15, tup_el_17])
  in
    (ErlangTuple
       [(ErlangCons head_1 (ErlangCons head_5 ErlangEmptyList)),
        tup_el_9, (ErlangAtom "word")])
erlps__builtin_popcount__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__builtin_int_to_str__0 :: ErlangFun
erlps__builtin_int_to_str__0 [] =
  let    tup_el_2 = (H.make_string "i")
  in let head_1 = (ErlangTuple [tup_el_2, (ErlangAtom "word")])
  in let
    tup_el_11 =
      (ErlangTuple
         [(ErlangAtom "baseX_int"), (ErlangInt (DBI.fromInt 10))])
  in let
    tup_el_9 = (ErlangTuple [(ErlangAtom "builtin"), tup_el_11])
  in let
    tup_el_7 = (ErlangTuple [(ErlangAtom "var_ref"), tup_el_9])
  in let head_15 = (erlps__v__1 [(ErlangAtom "i")])
  in let
    tup_el_5 =
      (ErlangTuple
         [(ErlangAtom "funcall"), tup_el_7,
          (ErlangCons head_15 ErlangEmptyList)])
  in
    (ErlangTuple
       [(ErlangCons head_1 ErlangEmptyList), tup_el_5,
        (ErlangAtom "word")])
erlps__builtin_int_to_str__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__builtin_baseX_tab__1 :: ErlangFun
erlps__builtin_baseX_tab__1 [_x_1@(ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 10))) =
  let    tup_el_4 = (H.make_string "ix")
  in let head_3 = (ErlangTuple [tup_el_4, (ErlangAtom "word")])
  in let
    tup_el_7 =
      (erlps__op__3
         [(ErlangAtom "+"), (ErlangInt (DBI.fromInt 48)),
          (ErlangAtom "ix")])
  in
    (ErlangTuple
       [(ErlangCons head_3 ErlangEmptyList), tup_el_7,
        (ErlangAtom "word")])
erlps__builtin_baseX_tab__1 [_x_1@(ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 58))) =
  let
    match_expr_38 =
      (ErlangBinary
         (BIN.concat
            [(BIN.from_int (ErlangInt (DBI.fromInt 49))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 50))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 51))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 52))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 53))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 54))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 55))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 56))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 57))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 65))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 66))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 67))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 68))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 69))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 70))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 71))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 72))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 74))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 75))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 76))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 77))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 78))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 80))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 81))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 82))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 83))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 84))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 85))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 86))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 87))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 88))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 89))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big)]))
  in
    case match_expr_38 of
      (ErlangBinary bin_c_34) | size_35 <- ((DBI.fromInt 256))
                              , (BIN.Ok fst32_37 bin_36) <-
                                  ((BIN.chop_int bin_c_34 size_35 1 BIN.Big
                                      BIN.Unsigned))
                              , (BIN.empty bin_36) ->
        let
          match_expr_70 =
            (ErlangBinary
               (BIN.concat
                  [(BIN.from_int (ErlangInt (DBI.fromInt 90))
                      (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
                   (BIN.from_int (ErlangInt (DBI.fromInt 97))
                      (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
                   (BIN.from_int (ErlangInt (DBI.fromInt 98))
                      (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
                   (BIN.from_int (ErlangInt (DBI.fromInt 99))
                      (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
                   (BIN.from_int (ErlangInt (DBI.fromInt 100))
                      (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
                   (BIN.from_int (ErlangInt (DBI.fromInt 101))
                      (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
                   (BIN.from_int (ErlangInt (DBI.fromInt 102))
                      (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
                   (BIN.from_int (ErlangInt (DBI.fromInt 103))
                      (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
                   (BIN.from_int (ErlangInt (DBI.fromInt 104))
                      (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
                   (BIN.from_int (ErlangInt (DBI.fromInt 105))
                      (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
                   (BIN.from_int (ErlangInt (DBI.fromInt 106))
                      (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
                   (BIN.from_int (ErlangInt (DBI.fromInt 107))
                      (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
                   (BIN.from_int (ErlangInt (DBI.fromInt 109))
                      (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
                   (BIN.from_int (ErlangInt (DBI.fromInt 110))
                      (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
                   (BIN.from_int (ErlangInt (DBI.fromInt 111))
                      (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
                   (BIN.from_int (ErlangInt (DBI.fromInt 112))
                      (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
                   (BIN.from_int (ErlangInt (DBI.fromInt 113))
                      (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
                   (BIN.from_int (ErlangInt (DBI.fromInt 114))
                      (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
                   (BIN.from_int (ErlangInt (DBI.fromInt 115))
                      (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
                   (BIN.from_int (ErlangInt (DBI.fromInt 116))
                      (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
                   (BIN.from_int (ErlangInt (DBI.fromInt 117))
                      (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
                   (BIN.from_int (ErlangInt (DBI.fromInt 118))
                      (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
                   (BIN.from_int (ErlangInt (DBI.fromInt 119))
                      (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
                   (BIN.from_int (ErlangInt (DBI.fromInt 120))
                      (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
                   (BIN.from_int (ErlangInt (DBI.fromInt 121))
                      (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
                   (BIN.from_int (ErlangInt (DBI.fromInt 122))
                      (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
                   (BIN.from_int (ErlangInt (DBI.fromInt 0))
                      (ErlangInt (DBI.fromInt 48)) 1 BIN.Big)]))
        in
          case match_expr_70 of
            (ErlangBinary bin_c_66) | size_67 <- ((DBI.fromInt 256))
                                    , (BIN.Ok lst26_69 bin_68) <-
                                        ((BIN.chop_int bin_c_66 size_67 1
                                            BIN.Big BIN.Unsigned))
                                    , (BIN.empty bin_68) ->
              let    tup_el_73 = (H.make_string "ix")
              in let head_72 = (ErlangTuple [tup_el_73, (ErlangAtom "word")])
              in let
                tup_el_78 =
                  (erlps__op__3
                     [(ErlangAtom "<"), (ErlangAtom "ix"),
                      (ErlangInt (DBI.fromInt 32))])
              in let
                tup_el_82 =
                  (erlps__op__3
                     [(ErlangAtom "byte"), (ErlangAtom "ix"), fst32_37])
              in let
                arg_88 =
                  (erlps__op__3
                     [(ErlangAtom "-"), (ErlangAtom "ix"),
                      (ErlangInt (DBI.fromInt 32))])
              in let
                tup_el_86 =
                  (erlps__op__3 [(ErlangAtom "byte"), arg_88, lst26_69])
              in let
                tup_el_76 =
                  (ErlangTuple
                     [(ErlangAtom "ifte"), tup_el_78, tup_el_82, tup_el_86])
              in
                (ErlangTuple
                   [(ErlangCons head_72 ErlangEmptyList), tup_el_76,
                    (ErlangAtom "word")])
            _ -> (EXC.badmatch match_expr_70)
      _ -> (EXC.badmatch match_expr_38)
erlps__builtin_baseX_tab__1 [arg_94] = (EXC.function_clause unit)
erlps__builtin_baseX_tab__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__builtin_baseX_int__1 :: ErlangFun
erlps__builtin_baseX_int__1 [x_0] =
  let    tup_el_3 = (H.make_string "w")
  in let head_2 = (ErlangTuple [tup_el_3, (ErlangAtom "word")])
  in let
    head_11 =
      (BIF.do_remote_fun_call "Aeb.Opcodes" "erlps__mnemonic__1"
         [(ErlangInt (DBI.fromInt 89))])
  in let
    tup_el_8 =
      (ErlangTuple
         [(ErlangAtom "inline_asm"),
          (ErlangCons head_11 ErlangEmptyList)])
  in let tup_el_16 = (erlps__v__1 [(ErlangAtom "ret")])
  in let
    tup_el_27 = (ErlangTuple [(ErlangAtom "baseX_int_pad"), x_0])
  in let
    tup_el_25 = (ErlangTuple [(ErlangAtom "builtin"), tup_el_27])
  in let
    tup_el_23 = (ErlangTuple [(ErlangAtom "var_ref"), tup_el_25])
  in let head_31 = (erlps__v__1 [(ErlangAtom "w")])
  in let
    head_34 =
      (ErlangTuple
         [(ErlangAtom "integer"), (ErlangInt (DBI.fromInt 0))])
  in let
    head_38 =
      (ErlangTuple
         [(ErlangAtom "integer"), (ErlangInt (DBI.fromInt 0))])
  in let
    head_21 =
      (ErlangTuple
         [(ErlangAtom "funcall"), tup_el_23,
          (ErlangCons head_31
             (ErlangCons head_34 (ErlangCons head_38 ErlangEmptyList)))])
  in let
    head_46 =
      (BIF.do_remote_fun_call "Aeb.Opcodes" "erlps__mnemonic__1"
         [(ErlangInt (DBI.fromInt 80))])
  in let
    head_43 =
      (ErlangTuple
         [(ErlangAtom "inline_asm"),
          (ErlangCons head_46 ErlangEmptyList)])
  in let head_50 = (erlps__v__1 [(ErlangAtom "ret")])
  in let
    tup_el_18 =
      (ErlangTuple
         [(ErlangAtom "seq"),
          (ErlangCons head_21
             (ErlangCons head_43 (ErlangCons head_50 ErlangEmptyList)))])
  in let head_15 = (ErlangTuple [tup_el_16, tup_el_18])
  in let
    tup_el_6 =
      (ErlangTuple
         [(ErlangAtom "switch"), tup_el_8,
          (ErlangCons head_15 ErlangEmptyList)])
  in
    (ErlangTuple
       [(ErlangCons head_2 ErlangEmptyList), tup_el_6,
        (ErlangAtom "word")])
erlps__builtin_baseX_int__1 [arg_55] = (EXC.function_clause unit)
erlps__builtin_baseX_int__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__builtin_baseX_int_pad__1 :: ErlangFun
erlps__builtin_baseX_int_pad__1 [x_1@(ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 10))) =
  let    tup_el_4 = (H.make_string "src")
  in let head_3 = (ErlangTuple [tup_el_4, (ErlangAtom "word")])
  in let tup_el_8 = (H.make_string "ix")
  in let head_7 = (ErlangTuple [tup_el_8, (ErlangAtom "word")])
  in let tup_el_12 = (H.make_string "dst")
  in let head_11 = (ErlangTuple [tup_el_12, (ErlangAtom "word")])
  in let
    tup_el_17 =
      (erlps__op__3
         [(ErlangAtom "<"), (ErlangAtom "src"),
          (ErlangInt (DBI.fromInt 0))])
  in let
    tup_el_27 = (ErlangTuple [(ErlangAtom "baseX_int_encode"), x_1])
  in let
    tup_el_25 = (ErlangTuple [(ErlangAtom "builtin"), tup_el_27])
  in let
    tup_el_23 = (ErlangTuple [(ErlangAtom "var_ref"), tup_el_25])
  in let
    tup_el_37 =
      (ErlangTuple
         [(ErlangAtom "integer"), (ErlangInt (DBI.fromInt 1))])
  in let
    arg_34 =
      (ErlangTuple [(ErlangAtom "unop"), (ErlangAtom "-"), tup_el_37])
  in let
    head_31 =
      (erlps__op__3 [(ErlangAtom "/"), (ErlangAtom "src"), arg_34])
  in let
    head_41 =
      (ErlangTuple
         [(ErlangAtom "integer"), (ErlangInt (DBI.fromInt 1))])
  in let
    arg_47 =
      (erlps__op__3
         [(ErlangAtom "*"), (ErlangInt (DBI.fromInt 31)),
          (ErlangInt (DBI.fromInt 8))])
  in let
    head_45 =
      (erlps__op__3
         [(ErlangAtom "bsl"), arg_47, (ErlangInt (DBI.fromInt 45))])
  in let
    tup_el_21 =
      (ErlangTuple
         [(ErlangAtom "funcall"), tup_el_23,
          (ErlangCons head_31
             (ErlangCons head_41 (ErlangCons head_45 ErlangEmptyList)))])
  in let
    tup_el_59 = (ErlangTuple [(ErlangAtom "baseX_int_encode"), x_1])
  in let
    tup_el_57 = (ErlangTuple [(ErlangAtom "builtin"), tup_el_59])
  in let
    tup_el_55 = (ErlangTuple [(ErlangAtom "var_ref"), tup_el_57])
  in let head_63 = (erlps__v__1 [(ErlangAtom "src")])
  in let head_66 = (erlps__v__1 [(ErlangAtom "ix")])
  in let head_69 = (erlps__v__1 [(ErlangAtom "dst")])
  in let
    tup_el_53 =
      (ErlangTuple
         [(ErlangAtom "funcall"), tup_el_55,
          (ErlangCons head_63
             (ErlangCons head_66 (ErlangCons head_69 ErlangEmptyList)))])
  in let
    tup_el_15 =
      (ErlangTuple
         [(ErlangAtom "ifte"), tup_el_17, tup_el_21, tup_el_53])
  in
    (ErlangTuple
       [(ErlangCons head_3
           (ErlangCons head_7 (ErlangCons head_11 ErlangEmptyList))),
        tup_el_15, (ErlangAtom "word")])
erlps__builtin_baseX_int_pad__1 [x_1@(ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 16))) =
  let    tup_el_4 = (H.make_string "src")
  in let head_3 = (ErlangTuple [tup_el_4, (ErlangAtom "word")])
  in let tup_el_8 = (H.make_string "ix")
  in let head_7 = (ErlangTuple [tup_el_8, (ErlangAtom "word")])
  in let tup_el_12 = (H.make_string "dst")
  in let head_11 = (ErlangTuple [tup_el_12, (ErlangAtom "word")])
  in let
    tup_el_21 = (ErlangTuple [(ErlangAtom "baseX_int_encode"), x_1])
  in let
    tup_el_19 = (ErlangTuple [(ErlangAtom "builtin"), tup_el_21])
  in let
    tup_el_17 = (ErlangTuple [(ErlangAtom "var_ref"), tup_el_19])
  in let head_25 = (erlps__v__1 [(ErlangAtom "src")])
  in let head_28 = (erlps__v__1 [(ErlangAtom "ix")])
  in let head_31 = (erlps__v__1 [(ErlangAtom "dst")])
  in let
    tup_el_15 =
      (ErlangTuple
         [(ErlangAtom "funcall"), tup_el_17,
          (ErlangCons head_25
             (ErlangCons head_28 (ErlangCons head_31 ErlangEmptyList)))])
  in
    (ErlangTuple
       [(ErlangCons head_3
           (ErlangCons head_7 (ErlangCons head_11 ErlangEmptyList))),
        tup_el_15, (ErlangAtom "word")])
erlps__builtin_baseX_int_pad__1 [x_1@(ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 58))) =
  let    tup_el_4 = (H.make_string "src")
  in let head_3 = (ErlangTuple [tup_el_4, (ErlangAtom "word")])
  in let tup_el_8 = (H.make_string "ix")
  in let head_7 = (ErlangTuple [tup_el_8, (ErlangAtom "word")])
  in let tup_el_12 = (H.make_string "dst")
  in let head_11 = (ErlangTuple [tup_el_12, (ErlangAtom "word")])
  in let
    arg_21 =
      (erlps__op__3
         [(ErlangAtom "div"), (ErlangAtom "ix"),
          (ErlangInt (DBI.fromInt 31))])
  in let
    arg_25 =
      (erlps__op__3
         [(ErlangAtom "byte"), (ErlangAtom "ix"), (ErlangAtom "src")])
  in let arg_19 = (erlps__op__3 [(ErlangAtom "+"), arg_21, arg_25])
  in let
    tup_el_17 =
      (erlps__op__3
         [(ErlangAtom ">"), arg_19, (ErlangInt (DBI.fromInt 0))])
  in let
    tup_el_36 = (ErlangTuple [(ErlangAtom "baseX_int_encode"), x_1])
  in let
    tup_el_34 = (ErlangTuple [(ErlangAtom "builtin"), tup_el_36])
  in let
    tup_el_32 = (ErlangTuple [(ErlangAtom "var_ref"), tup_el_34])
  in let head_40 = (erlps__v__1 [(ErlangAtom "src")])
  in let head_43 = (erlps__v__1 [(ErlangAtom "ix")])
  in let head_46 = (erlps__v__1 [(ErlangAtom "dst")])
  in let
    tup_el_30 =
      (ErlangTuple
         [(ErlangAtom "funcall"), tup_el_32,
          (ErlangCons head_40
             (ErlangCons head_43 (ErlangCons head_46 ErlangEmptyList)))])
  in let
    tup_el_55 = (ErlangTuple [(ErlangAtom "baseX_int_pad"), x_1])
  in let
    tup_el_53 = (ErlangTuple [(ErlangAtom "builtin"), tup_el_55])
  in let
    tup_el_51 = (ErlangTuple [(ErlangAtom "var_ref"), tup_el_53])
  in let head_59 = (erlps__v__1 [(ErlangAtom "src")])
  in let
    head_62 =
      (erlps__op__3
         [(ErlangAtom "+"), (ErlangAtom "ix"),
          (ErlangInt (DBI.fromInt 1))])
  in let
    arg_74 =
      (erlps__op__3
         [(ErlangAtom "-"), (ErlangInt (DBI.fromInt 31)),
          (ErlangAtom "ix")])
  in let
    arg_72 =
      (erlps__op__3
         [(ErlangAtom "*"), arg_74, (ErlangInt (DBI.fromInt 8))])
  in let
    arg_70 =
      (erlps__op__3
         [(ErlangAtom "bsl"), arg_72, (ErlangInt (DBI.fromInt 49))])
  in let
    head_67 =
      (erlps__op__3 [(ErlangAtom "+"), (ErlangAtom "dst"), arg_70])
  in let
    tup_el_49 =
      (ErlangTuple
         [(ErlangAtom "funcall"), tup_el_51,
          (ErlangCons head_59
             (ErlangCons head_62 (ErlangCons head_67 ErlangEmptyList)))])
  in let
    tup_el_15 =
      (ErlangTuple
         [(ErlangAtom "ifte"), tup_el_17, tup_el_30, tup_el_49])
  in
    (ErlangTuple
       [(ErlangCons head_3
           (ErlangCons head_7 (ErlangCons head_11 ErlangEmptyList))),
        tup_el_15, (ErlangAtom "word")])
erlps__builtin_baseX_int_pad__1 [arg_82] =
  (EXC.function_clause unit)
erlps__builtin_baseX_int_pad__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__builtin_baseX_int_encode__1 :: ErlangFun
erlps__builtin_baseX_int_encode__1 [x_0] =
  let    tup_el_3 = (H.make_string "src")
  in let head_2 = (ErlangTuple [tup_el_3, (ErlangAtom "word")])
  in let tup_el_7 = (H.make_string "ix")
  in let head_6 = (ErlangTuple [tup_el_7, (ErlangAtom "word")])
  in let tup_el_11 = (H.make_string "dst")
  in let head_10 = (ErlangTuple [tup_el_11, (ErlangAtom "word")])
  in let
    tup_el_22 = (ErlangTuple [(ErlangAtom "baseX_digits"), x_0])
  in let
    tup_el_20 = (ErlangTuple [(ErlangAtom "builtin"), tup_el_22])
  in let
    tup_el_18 = (ErlangTuple [(ErlangAtom "var_ref"), tup_el_20])
  in let head_26 = (erlps__v__1 [(ErlangAtom "src")])
  in let
    head_29 =
      (ErlangTuple
         [(ErlangAtom "integer"), (ErlangInt (DBI.fromInt 0))])
  in let
    tup_el_16 =
      (ErlangTuple
         [(ErlangAtom "funcall"), tup_el_18,
          (ErlangCons head_26 (ErlangCons head_29 ErlangEmptyList))])
  in let tup_el_35 = (erlps__v__1 [(ErlangAtom "n")])
  in let
    arg_43 =
      (erlps__op__3
         [(ErlangAtom "+"), (ErlangAtom "ix"),
          (ErlangInt (DBI.fromInt 1))])
  in let
    head_40 =
      (erlps__op__3 [(ErlangAtom "+"), (ErlangAtom "n"), arg_43])
  in let
    head_51 =
      (BIF.do_remote_fun_call "Aeb.Opcodes" "erlps__mnemonic__1"
         [(ErlangInt (DBI.fromInt 89))])
  in let
    head_54 =
      (BIF.do_remote_fun_call "Aeb.Opcodes" "erlps__mnemonic__1"
         [(ErlangInt (DBI.fromInt 82))])
  in let
    head_48 =
      (ErlangTuple
         [(ErlangAtom "inline_asm"),
          (ErlangCons head_51 (ErlangCons head_54 ErlangEmptyList))])
  in let
    tup_el_64 = (ErlangTuple [(ErlangAtom "baseX_int_encode_"), x_0])
  in let
    tup_el_62 = (ErlangTuple [(ErlangAtom "builtin"), tup_el_64])
  in let
    tup_el_60 = (ErlangTuple [(ErlangAtom "var_ref"), tup_el_62])
  in let head_68 = (erlps__v__1 [(ErlangAtom "src")])
  in let head_71 = (erlps__v__1 [(ErlangAtom "dst")])
  in let
    head_74 =
      (erlps__op__3 [(ErlangAtom "^"), x_0, (ErlangAtom "n")])
  in let head_79 = (erlps__v__1 [(ErlangAtom "ix")])
  in let
    head_58 =
      (ErlangTuple
         [(ErlangAtom "funcall"), tup_el_60,
          (ErlangCons head_68
             (ErlangCons head_71
                (ErlangCons head_74 (ErlangCons head_79 ErlangEmptyList))))])
  in let
    tup_el_37 =
      (ErlangTuple
         [(ErlangAtom "seq"),
          (ErlangCons head_40
             (ErlangCons head_48 (ErlangCons head_58 ErlangEmptyList)))])
  in let head_34 = (ErlangTuple [tup_el_35, tup_el_37])
  in let
    tup_el_14 =
      (ErlangTuple
         [(ErlangAtom "switch"), tup_el_16,
          (ErlangCons head_34 ErlangEmptyList)])
  in
    (ErlangTuple
       [(ErlangCons head_2
           (ErlangCons head_6 (ErlangCons head_10 ErlangEmptyList))),
        tup_el_14, (ErlangAtom "word")])
erlps__builtin_baseX_int_encode__1 [arg_85] =
  (EXC.function_clause unit)
erlps__builtin_baseX_int_encode__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__builtin_baseX_int_encode___1 :: ErlangFun
erlps__builtin_baseX_int_encode___1 [x_0] =
  let    tup_el_3 = (H.make_string "src")
  in let head_2 = (ErlangTuple [tup_el_3, (ErlangAtom "word")])
  in let tup_el_7 = (H.make_string "dst")
  in let head_6 = (ErlangTuple [tup_el_7, (ErlangAtom "word")])
  in let tup_el_11 = (H.make_string "fac")
  in let head_10 = (ErlangTuple [tup_el_11, (ErlangAtom "word")])
  in let tup_el_15 = (H.make_string "ix")
  in let head_14 = (ErlangTuple [tup_el_15, (ErlangAtom "word")])
  in let
    tup_el_20 =
      (erlps__op__3
         [(ErlangAtom "=="), (ErlangAtom "fac"),
          (ErlangInt (DBI.fromInt 0))])
  in let head_27 = (erlps__v__1 [(ErlangAtom "dst")])
  in let
    head_33 =
      (BIF.do_remote_fun_call "Aeb.Opcodes" "erlps__mnemonic__1"
         [(ErlangInt (DBI.fromInt 89))])
  in let
    head_36 =
      (BIF.do_remote_fun_call "Aeb.Opcodes" "erlps__mnemonic__1"
         [(ErlangInt (DBI.fromInt 82))])
  in let
    head_39 =
      (BIF.do_remote_fun_call "Aeb.Opcodes" "erlps__mnemonic__1"
         [(ErlangInt (DBI.fromInt 89))])
  in let
    head_30 =
      (ErlangTuple
         [(ErlangAtom "inline_asm"),
          (ErlangCons head_33
             (ErlangCons head_36 (ErlangCons head_39 ErlangEmptyList)))])
  in let
    tup_el_24 =
      (ErlangTuple
         [(ErlangAtom "seq"),
          (ErlangCons head_27 (ErlangCons head_30 ErlangEmptyList))])
  in let
    tup_el_45 =
      (erlps__op__3
         [(ErlangAtom "=="), (ErlangAtom "ix"),
          (ErlangInt (DBI.fromInt 32))])
  in let head_52 = (erlps__v__1 [(ErlangAtom "dst")])
  in let
    head_58 =
      (BIF.do_remote_fun_call "Aeb.Opcodes" "erlps__mnemonic__1"
         [(ErlangInt (DBI.fromInt 89))])
  in let
    head_61 =
      (BIF.do_remote_fun_call "Aeb.Opcodes" "erlps__mnemonic__1"
         [(ErlangInt (DBI.fromInt 82))])
  in let
    head_55 =
      (ErlangTuple
         [(ErlangAtom "inline_asm"),
          (ErlangCons head_58 (ErlangCons head_61 ErlangEmptyList))])
  in let
    tup_el_71 = (ErlangTuple [(ErlangAtom "baseX_int_encode_"), x_0])
  in let
    tup_el_69 = (ErlangTuple [(ErlangAtom "builtin"), tup_el_71])
  in let
    tup_el_67 = (ErlangTuple [(ErlangAtom "var_ref"), tup_el_69])
  in let head_75 = (erlps__v__1 [(ErlangAtom "src")])
  in let
    head_78 =
      (ErlangTuple
         [(ErlangAtom "integer"), (ErlangInt (DBI.fromInt 0))])
  in let head_82 = (erlps__v__1 [(ErlangAtom "fac")])
  in let
    head_85 =
      (ErlangTuple
         [(ErlangAtom "integer"), (ErlangInt (DBI.fromInt 0))])
  in let
    head_65 =
      (ErlangTuple
         [(ErlangAtom "funcall"), tup_el_67,
          (ErlangCons head_75
             (ErlangCons head_78
                (ErlangCons head_82 (ErlangCons head_85 ErlangEmptyList))))])
  in let
    tup_el_49 =
      (ErlangTuple
         [(ErlangAtom "seq"),
          (ErlangCons head_52
             (ErlangCons head_55 (ErlangCons head_65 ErlangEmptyList)))])
  in let
    tup_el_96 = (ErlangTuple [(ErlangAtom "baseX_int_encode_"), x_0])
  in let
    tup_el_94 = (ErlangTuple [(ErlangAtom "builtin"), tup_el_96])
  in let
    tup_el_92 = (ErlangTuple [(ErlangAtom "var_ref"), tup_el_94])
  in let
    head_100 =
      (erlps__op__3
         [(ErlangAtom "mod"), (ErlangAtom "src"), (ErlangAtom "fac")])
  in let
    arg_112 =
      (erlps__op__3
         [(ErlangAtom "-"), (ErlangInt (DBI.fromInt 31)),
          (ErlangAtom "ix")])
  in let
    arg_110 =
      (erlps__op__3
         [(ErlangAtom "*"), arg_112, (ErlangInt (DBI.fromInt 8))])
  in let tup_el_123 = (ErlangTuple [(ErlangAtom "baseX_tab"), x_0])
  in let
    tup_el_121 = (ErlangTuple [(ErlangAtom "builtin"), tup_el_123])
  in let
    tup_el_119 = (ErlangTuple [(ErlangAtom "var_ref"), tup_el_121])
  in let
    head_127 =
      (erlps__op__3
         [(ErlangAtom "div"), (ErlangAtom "src"), (ErlangAtom "fac")])
  in let
    arg_117 =
      (ErlangTuple
         [(ErlangAtom "funcall"), tup_el_119,
          (ErlangCons head_127 ErlangEmptyList)])
  in let
    arg_108 = (erlps__op__3 [(ErlangAtom "bsl"), arg_110, arg_117])
  in let
    head_105 =
      (erlps__op__3 [(ErlangAtom "+"), (ErlangAtom "dst"), arg_108])
  in let
    head_133 =
      (erlps__op__3 [(ErlangAtom "div"), (ErlangAtom "fac"), x_0])
  in let
    head_138 =
      (erlps__op__3
         [(ErlangAtom "+"), (ErlangAtom "ix"),
          (ErlangInt (DBI.fromInt 1))])
  in let
    tup_el_90 =
      (ErlangTuple
         [(ErlangAtom "funcall"), tup_el_92,
          (ErlangCons head_100
             (ErlangCons head_105
                (ErlangCons head_133 (ErlangCons head_138 ErlangEmptyList))))])
  in let
    tup_el_43 =
      (ErlangTuple
         [(ErlangAtom "ifte"), tup_el_45, tup_el_49, tup_el_90])
  in let
    tup_el_18 =
      (ErlangTuple
         [(ErlangAtom "ifte"), tup_el_20, tup_el_24, tup_el_43])
  in
    (ErlangTuple
       [(ErlangCons head_2
           (ErlangCons head_6
              (ErlangCons head_10 (ErlangCons head_14 ErlangEmptyList)))),
        tup_el_18, (ErlangAtom "word")])
erlps__builtin_baseX_int_encode___1 [arg_144] =
  (EXC.function_clause unit)
erlps__builtin_baseX_int_encode___1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__builtin_baseX_digits__1 :: ErlangFun
erlps__builtin_baseX_digits__1 [x_0] =
  let    tup_el_3 = (H.make_string "x0")
  in let head_2 = (ErlangTuple [tup_el_3, (ErlangAtom "word")])
  in let tup_el_7 = (H.make_string "dgts")
  in let head_6 = (ErlangTuple [tup_el_7, (ErlangAtom "word")])
  in let
    tup_el_12 =
      (erlps__op__3 [(ErlangAtom "div"), (ErlangAtom "x0"), x_0])
  in let tup_el_18 = (erlps__v__1 [(ErlangAtom "x1")])
  in let
    tup_el_22 =
      (erlps__op__3
         [(ErlangAtom "=="), (ErlangAtom "x1"),
          (ErlangInt (DBI.fromInt 0))])
  in let tup_el_26 = (erlps__v__1 [(ErlangAtom "dgts")])
  in let
    tup_el_34 = (ErlangTuple [(ErlangAtom "baseX_digits"), x_0])
  in let
    tup_el_32 = (ErlangTuple [(ErlangAtom "builtin"), tup_el_34])
  in let
    tup_el_30 = (ErlangTuple [(ErlangAtom "var_ref"), tup_el_32])
  in let head_38 = (erlps__v__1 [(ErlangAtom "x1")])
  in let
    head_41 =
      (erlps__op__3
         [(ErlangAtom "+"), (ErlangAtom "dgts"),
          (ErlangInt (DBI.fromInt 1))])
  in let
    tup_el_28 =
      (ErlangTuple
         [(ErlangAtom "funcall"), tup_el_30,
          (ErlangCons head_38 (ErlangCons head_41 ErlangEmptyList))])
  in let
    tup_el_20 =
      (ErlangTuple
         [(ErlangAtom "ifte"), tup_el_22, tup_el_26, tup_el_28])
  in let head_17 = (ErlangTuple [tup_el_18, tup_el_20])
  in let
    tup_el_10 =
      (ErlangTuple
         [(ErlangAtom "switch"), tup_el_12,
          (ErlangCons head_17 ErlangEmptyList)])
  in
    (ErlangTuple
       [(ErlangCons head_2 (ErlangCons head_6 ErlangEmptyList)),
        tup_el_10, (ErlangAtom "word")])
erlps__builtin_baseX_digits__1 [arg_48] =
  (EXC.function_clause unit)
erlps__builtin_baseX_digits__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__builtin_bytes_to_int__1 :: ErlangFun
erlps__builtin_bytes_to_int__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 32))) =
  let    tup_el_3 = (H.make_string "w")
  in let head_2 = (ErlangTuple [tup_el_3, (ErlangAtom "word")])
  in let tup_el_6 = (erlps__v__1 [(ErlangAtom "w")])
  in
    (ErlangTuple
       [(ErlangCons head_2 ErlangEmptyList), tup_el_6,
        (ErlangAtom "word")])
erlps__builtin_bytes_to_int__1 [n_0]
  | (weakLt n_0 (ErlangInt (DBI.fromInt 32))) =
  let    tup_el_3 = (H.make_string "w")
  in let head_2 = (ErlangTuple [tup_el_3, (ErlangAtom "word")])
  in let
    arg_10 =
      (BIF.erlang__op_minus [(ErlangInt (DBI.fromInt 32)), n_0])
  in let
    arg_8 =
      (erlps__op__3
         [(ErlangAtom "*"), arg_10, (ErlangInt (DBI.fromInt 8))])
  in let
    tup_el_6 =
      (erlps__op__3 [(ErlangAtom "bsr"), arg_8, (ErlangAtom "w")])
  in
    (ErlangTuple
       [(ErlangCons head_2 ErlangEmptyList), tup_el_6,
        (ErlangAtom "word")])
erlps__builtin_bytes_to_int__1 [n_0]
  | (weakGt n_0 (ErlangInt (DBI.fromInt 32))) =
  let   
    lop_1 =
      (BIF.erlang__op_div_strict [n_0, (ErlangInt (DBI.fromInt 32))])
  in let
    lastfullword_5 =
      (BIF.erlang__op_minus [lop_1, (ErlangInt (DBI.fromInt 1))])
  in let
    case_6 =
      (BIF.erlang__op_rem_strict [n_0, (ErlangInt (DBI.fromInt 32))])
  in let
    body_85 =
      case case_6 of
        (ErlangInt num_9) | ((ErlangInt num_9) ==
                               (ErlangInt (DBI.fromInt 0))) ->
          let   
            arg_15 =
              (BIF.erlang__op_mult
                 [lastfullword_5, (ErlangInt (DBI.fromInt 32))])
          in let
            arg_12 =
              (erlps__op__3 [(ErlangAtom "+"), (ErlangAtom "b"), arg_15])
          in let tup_el_11 = (erlps__operand__1 [arg_12])
          in let head_23 = (erlps__v__1 [(ErlangAtom "n")])
          in let
            tup_el_20 =
              (ErlangTuple
                 [(ErlangAtom "tuple"), (ErlangCons head_23 ErlangEmptyList)])
          in let tup_el_26 = (erlps__v__1 [(ErlangAtom "n")])
          in let head_19 = (ErlangTuple [tup_el_20, tup_el_26])
          in
            (ErlangTuple
               [(ErlangAtom "switch"), tup_el_11,
                (ErlangCons head_19 ErlangEmptyList)])
        r_29 ->
          let   
            arg_35 =
              (BIF.erlang__op_mult
                 [lastfullword_5, (ErlangInt (DBI.fromInt 32))])
          in let
            arg_32 =
              (erlps__op__3 [(ErlangAtom "+"), (ErlangAtom "b"), arg_35])
          in let tup_el_31 = (erlps__operand__1 [arg_32])
          in let head_43 = (erlps__v__1 [(ErlangAtom "hi")])
          in let
            tup_el_40 =
              (ErlangTuple
                 [(ErlangAtom "tuple"), (ErlangCons head_43 ErlangEmptyList)])
          in let
            lop_53 =
              (BIF.erlang__op_plus
                 [lastfullword_5, (ErlangInt (DBI.fromInt 1))])
          in let
            arg_52 =
              (BIF.erlang__op_mult [lop_53, (ErlangInt (DBI.fromInt 32))])
          in let
            arg_49 =
              (erlps__op__3 [(ErlangAtom "+"), (ErlangAtom "b"), arg_52])
          in let tup_el_48 = (erlps__operand__1 [arg_49])
          in let head_62 = (erlps__v__1 [(ErlangAtom "lo")])
          in let
            tup_el_59 =
              (ErlangTuple
                 [(ErlangAtom "tuple"), (ErlangCons head_62 ErlangEmptyList)])
          in let
            arg_71 =
              (BIF.erlang__op_minus [(ErlangInt (DBI.fromInt 32)), r_29])
          in let
            arg_69 =
              (erlps__op__3
                 [(ErlangAtom "*"), arg_71, (ErlangInt (DBI.fromInt 8))])
          in let
            arg_67 =
              (erlps__op__3 [(ErlangAtom "bsr"), arg_69, (ErlangAtom "lo")])
          in let
            arg_78 =
              (erlps__op__3
                 [(ErlangAtom "*"), r_29, (ErlangInt (DBI.fromInt 8))])
          in let
            arg_76 =
              (erlps__op__3 [(ErlangAtom "bsl"), arg_78, (ErlangAtom "hi")])
          in let
            tup_el_65 = (erlps__op__3 [(ErlangAtom "+"), arg_67, arg_76])
          in let head_58 = (ErlangTuple [tup_el_59, tup_el_65])
          in let
            tup_el_46 =
              (ErlangTuple
                 [(ErlangAtom "switch"), tup_el_48,
                  (ErlangCons head_58 ErlangEmptyList)])
          in let head_39 = (ErlangTuple [tup_el_40, tup_el_46])
          in
            (ErlangTuple
               [(ErlangAtom "switch"), tup_el_31,
                (ErlangCons head_39 ErlangEmptyList)])
  in let tup_el_88 = (H.make_string "b")
  in let
    head_87 = (ErlangTuple [tup_el_88, (ErlangAtom "pointer")])
  in
    (ErlangTuple
       [(ErlangCons head_87 ErlangEmptyList), body_85,
        (ErlangAtom "word")])
erlps__builtin_bytes_to_int__1 [arg_93] =
  (EXC.function_clause unit)
erlps__builtin_bytes_to_int__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__builtin_bytes_to_str_worker_x__0 :: ErlangFun
erlps__builtin_bytes_to_str_worker_x__0 [] =
  let
    match_expr_36 =
      (ErlangBinary
         (BIN.concat
            [(BIN.from_int (ErlangInt (DBI.fromInt 48))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 49))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 50))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 51))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 52))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 53))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 54))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 55))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 56))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 57))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 65))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 66))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 67))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 68))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 69))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 70))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 95))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 95))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 95))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 95))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 95))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 95))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 95))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 95))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 95))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 95))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 95))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 95))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 95))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 95))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 95))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 95))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big)]))
  in
    case match_expr_36 of
      (ErlangBinary bin_c_32) | size_33 <- ((DBI.fromInt 256))
                              , (BIN.Ok tab_35 bin_34) <-
                                  ((BIN.chop_int bin_c_32 size_33 1 BIN.Big
                                      BIN.Unsigned))
                              , (BIN.empty bin_34) ->
        let    tup_el_39 = (H.make_string "w")
        in let head_38 = (ErlangTuple [tup_el_39, (ErlangAtom "word")])
        in let tup_el_43 = (H.make_string "offs")
        in let head_42 = (ErlangTuple [tup_el_43, (ErlangAtom "word")])
        in let tup_el_47 = (H.make_string "acc")
        in let head_46 = (ErlangTuple [tup_el_47, (ErlangAtom "word")])
        in let
          tup_el_52 =
            (erlps__op__3
               [(ErlangAtom "=="), (ErlangAtom "offs"),
                (ErlangInt (DBI.fromInt 16))])
        in let head_59 = (erlps__v__1 [(ErlangAtom "acc")])
        in let
          head_65 =
            (BIF.do_remote_fun_call "Aeb.Opcodes" "erlps__mnemonic__1"
               [(ErlangInt (DBI.fromInt 89))])
        in let
          head_68 =
            (BIF.do_remote_fun_call "Aeb.Opcodes" "erlps__mnemonic__1"
               [(ErlangInt (DBI.fromInt 82))])
        in let
          head_71 =
            (BIF.do_remote_fun_call "Aeb.Opcodes" "erlps__mnemonic__1"
               [(ErlangInt (DBI.fromInt 89))])
        in let
          head_62 =
            (ErlangTuple
               [(ErlangAtom "inline_asm"),
                (ErlangCons head_65
                   (ErlangCons head_68 (ErlangCons head_71 ErlangEmptyList)))])
        in let
          tup_el_56 =
            (ErlangTuple
               [(ErlangAtom "seq"),
                (ErlangCons head_59 (ErlangCons head_62 ErlangEmptyList))])
        in let
          tup_el_77 =
            (erlps__op__3
               [(ErlangAtom "byte"), (ErlangAtom "offs"), (ErlangAtom "w")])
        in let tup_el_83 = (erlps__v__1 [(ErlangAtom "b")])
        in let
          arg_89 =
            (erlps__op__3
               [(ErlangAtom "mod"), (ErlangAtom "b"),
                (ErlangInt (DBI.fromInt 16))])
        in let
          tup_el_87 = (erlps__op__3 [(ErlangAtom "byte"), arg_89, tab_35])
        in let tup_el_96 = (erlps__v__1 [(ErlangAtom "lo")])
        in let
          arg_102 =
            (erlps__op__3
               [(ErlangAtom "bsr"), (ErlangInt (DBI.fromInt 4)),
                (ErlangAtom "b")])
        in let
          tup_el_100 =
            (erlps__op__3 [(ErlangAtom "byte"), arg_102, tab_35])
        in let tup_el_109 = (erlps__v__1 [(ErlangAtom "hi")])
        in let
          tup_el_115 =
            (ErlangTuple
               [(ErlangAtom "builtin"), (ErlangAtom "bytes_to_str_worker_x")])
        in let
          tup_el_113 = (ErlangTuple [(ErlangAtom "var_ref"), tup_el_115])
        in let head_119 = (erlps__v__1 [(ErlangAtom "w")])
        in let
          head_122 =
            (erlps__op__3
               [(ErlangAtom "+"), (ErlangAtom "offs"),
                (ErlangInt (DBI.fromInt 1))])
        in let
          arg_131 =
            (erlps__op__3
               [(ErlangAtom "*"), (ErlangInt (DBI.fromInt 2)),
                (ErlangInt (DBI.fromInt 8))])
        in let
          arg_129 =
            (erlps__op__3 [(ErlangAtom "bsl"), arg_131, (ErlangAtom "acc")])
        in let
          arg_140 =
            (erlps__op__3
               [(ErlangAtom "*"), (ErlangInt (DBI.fromInt 1)),
                (ErlangInt (DBI.fromInt 8))])
        in let
          arg_138 =
            (erlps__op__3 [(ErlangAtom "bsl"), arg_140, (ErlangAtom "hi")])
        in let
          arg_136 =
            (erlps__op__3 [(ErlangAtom "+"), arg_138, (ErlangAtom "lo")])
        in let
          head_127 = (erlps__op__3 [(ErlangAtom "+"), arg_129, arg_136])
        in let
          tup_el_111 =
            (ErlangTuple
               [(ErlangAtom "funcall"), tup_el_113,
                (ErlangCons head_119
                   (ErlangCons head_122
                      (ErlangCons head_127 ErlangEmptyList)))])
        in let head_108 = (ErlangTuple [tup_el_109, tup_el_111])
        in let
          tup_el_98 =
            (ErlangTuple
               [(ErlangAtom "switch"), tup_el_100,
                (ErlangCons head_108 ErlangEmptyList)])
        in let head_95 = (ErlangTuple [tup_el_96, tup_el_98])
        in let
          tup_el_85 =
            (ErlangTuple
               [(ErlangAtom "switch"), tup_el_87,
                (ErlangCons head_95 ErlangEmptyList)])
        in let head_82 = (ErlangTuple [tup_el_83, tup_el_85])
        in let
          tup_el_75 =
            (ErlangTuple
               [(ErlangAtom "switch"), tup_el_77,
                (ErlangCons head_82 ErlangEmptyList)])
        in let
          tup_el_50 =
            (ErlangTuple
               [(ErlangAtom "ifte"), tup_el_52, tup_el_56, tup_el_75])
        in
          (ErlangTuple
             [(ErlangCons head_38
                 (ErlangCons head_42 (ErlangCons head_46 ErlangEmptyList))),
              tup_el_50, (ErlangAtom "word")])
      _ -> (EXC.badmatch match_expr_36)
erlps__builtin_bytes_to_str_worker_x__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__builtin_bytes_to_str_worker__0 :: ErlangFun
erlps__builtin_bytes_to_str_worker__0 [] =
  let
    match_expr_36 =
      (ErlangBinary
         (BIN.concat
            [(BIN.from_int (ErlangInt (DBI.fromInt 48))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 49))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 50))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 51))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 52))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 53))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 54))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 55))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 56))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 57))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 65))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 66))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 67))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 68))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 69))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 70))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 95))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 95))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 95))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 95))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 95))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 95))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 95))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 95))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 95))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 95))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 95))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 95))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 95))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 95))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 95))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 95))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big)]))
  in
    case match_expr_36 of
      (ErlangBinary bin_c_32) | size_33 <- ((DBI.fromInt 256))
                              , (BIN.Ok tab_35 bin_34) <-
                                  ((BIN.chop_int bin_c_32 size_33 1 BIN.Big
                                      BIN.Unsigned))
                              , (BIN.empty bin_34) ->
        let    tup_el_39 = (H.make_string "w")
        in let head_38 = (ErlangTuple [tup_el_39, (ErlangAtom "word")])
        in let tup_el_43 = (H.make_string "offs")
        in let head_42 = (ErlangTuple [tup_el_43, (ErlangAtom "word")])
        in let tup_el_47 = (H.make_string "acc")
        in let head_46 = (ErlangTuple [tup_el_47, (ErlangAtom "word")])
        in let tup_el_51 = (H.make_string "stop")
        in let head_50 = (ErlangTuple [tup_el_51, (ErlangAtom "word")])
        in let
          tup_el_56 =
            (erlps__op__3
               [(ErlangAtom "=="), (ErlangAtom "stop"), (ErlangAtom "offs")])
        in let
          arg_70 =
            (erlps__op__3
               [(ErlangAtom "-"), (ErlangInt (DBI.fromInt 16)),
                (ErlangAtom "offs")])
        in let
          arg_67 =
            (erlps__op__3
               [(ErlangAtom "*"), (ErlangInt (DBI.fromInt 2)), arg_70])
        in let
          arg_65 =
            (erlps__op__3
               [(ErlangAtom "*"), arg_67, (ErlangInt (DBI.fromInt 8))])
        in let
          head_63 =
            (erlps__op__3 [(ErlangAtom "bsl"), arg_65, (ErlangAtom "acc")])
        in let
          head_80 =
            (BIF.do_remote_fun_call "Aeb.Opcodes" "erlps__mnemonic__1"
               [(ErlangInt (DBI.fromInt 89))])
        in let
          head_83 =
            (BIF.do_remote_fun_call "Aeb.Opcodes" "erlps__mnemonic__1"
               [(ErlangInt (DBI.fromInt 82))])
        in let
          head_86 =
            (BIF.do_remote_fun_call "Aeb.Opcodes" "erlps__mnemonic__1"
               [(ErlangInt (DBI.fromInt 89))])
        in let
          head_77 =
            (ErlangTuple
               [(ErlangAtom "inline_asm"),
                (ErlangCons head_80
                   (ErlangCons head_83 (ErlangCons head_86 ErlangEmptyList)))])
        in let
          tup_el_60 =
            (ErlangTuple
               [(ErlangAtom "seq"),
                (ErlangCons head_63 (ErlangCons head_77 ErlangEmptyList))])
        in let
          tup_el_92 =
            (erlps__op__3
               [(ErlangAtom "byte"), (ErlangAtom "offs"), (ErlangAtom "w")])
        in let tup_el_98 = (erlps__v__1 [(ErlangAtom "b")])
        in let
          arg_104 =
            (erlps__op__3
               [(ErlangAtom "mod"), (ErlangAtom "b"),
                (ErlangInt (DBI.fromInt 16))])
        in let
          tup_el_102 =
            (erlps__op__3 [(ErlangAtom "byte"), arg_104, tab_35])
        in let tup_el_111 = (erlps__v__1 [(ErlangAtom "lo")])
        in let
          arg_117 =
            (erlps__op__3
               [(ErlangAtom "bsr"), (ErlangInt (DBI.fromInt 4)),
                (ErlangAtom "b")])
        in let
          tup_el_115 =
            (erlps__op__3 [(ErlangAtom "byte"), arg_117, tab_35])
        in let tup_el_124 = (erlps__v__1 [(ErlangAtom "hi")])
        in let
          tup_el_130 =
            (ErlangTuple
               [(ErlangAtom "builtin"), (ErlangAtom "bytes_to_str_worker")])
        in let
          tup_el_128 = (ErlangTuple [(ErlangAtom "var_ref"), tup_el_130])
        in let head_134 = (erlps__v__1 [(ErlangAtom "w")])
        in let
          head_137 =
            (erlps__op__3
               [(ErlangAtom "+"), (ErlangAtom "offs"),
                (ErlangInt (DBI.fromInt 1))])
        in let
          arg_146 =
            (erlps__op__3
               [(ErlangAtom "*"), (ErlangInt (DBI.fromInt 2)),
                (ErlangInt (DBI.fromInt 8))])
        in let
          arg_144 =
            (erlps__op__3 [(ErlangAtom "bsl"), arg_146, (ErlangAtom "acc")])
        in let
          arg_155 =
            (erlps__op__3
               [(ErlangAtom "*"), (ErlangInt (DBI.fromInt 1)),
                (ErlangInt (DBI.fromInt 8))])
        in let
          arg_153 =
            (erlps__op__3 [(ErlangAtom "bsl"), arg_155, (ErlangAtom "hi")])
        in let
          arg_151 =
            (erlps__op__3 [(ErlangAtom "+"), arg_153, (ErlangAtom "lo")])
        in let
          head_142 = (erlps__op__3 [(ErlangAtom "+"), arg_144, arg_151])
        in let head_162 = (erlps__v__1 [(ErlangAtom "stop")])
        in let
          tup_el_126 =
            (ErlangTuple
               [(ErlangAtom "funcall"), tup_el_128,
                (ErlangCons head_134
                   (ErlangCons head_137
                      (ErlangCons head_142
                         (ErlangCons head_162 ErlangEmptyList))))])
        in let head_123 = (ErlangTuple [tup_el_124, tup_el_126])
        in let
          tup_el_113 =
            (ErlangTuple
               [(ErlangAtom "switch"), tup_el_115,
                (ErlangCons head_123 ErlangEmptyList)])
        in let head_110 = (ErlangTuple [tup_el_111, tup_el_113])
        in let
          tup_el_100 =
            (ErlangTuple
               [(ErlangAtom "switch"), tup_el_102,
                (ErlangCons head_110 ErlangEmptyList)])
        in let head_97 = (ErlangTuple [tup_el_98, tup_el_100])
        in let
          tup_el_90 =
            (ErlangTuple
               [(ErlangAtom "switch"), tup_el_92,
                (ErlangCons head_97 ErlangEmptyList)])
        in let
          tup_el_54 =
            (ErlangTuple
               [(ErlangAtom "ifte"), tup_el_56, tup_el_60, tup_el_90])
        in
          (ErlangTuple
             [(ErlangCons head_38
                 (ErlangCons head_42
                    (ErlangCons head_46 (ErlangCons head_50 ErlangEmptyList)))),
              tup_el_54, (ErlangAtom "word")])
      _ -> (EXC.badmatch match_expr_36)
erlps__builtin_bytes_to_str_worker__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__builtin_bytes_to_str_body__2 :: ErlangFun
erlps__builtin_bytes_to_str_body__2 [var_0, n_1]
  | (weakLt n_1 (ErlangInt (DBI.fromInt 16))) =
  let   
    tup_el_6 =
      (ErlangTuple
         [(ErlangAtom "builtin"), (ErlangAtom "bytes_to_str_worker")])
  in let
    tup_el_4 = (ErlangTuple [(ErlangAtom "var_ref"), tup_el_6])
  in let head_10 = (erlps__v__1 [var_0])
  in let
    head_13 =
      (ErlangTuple
         [(ErlangAtom "integer"), (ErlangInt (DBI.fromInt 0))])
  in let
    head_17 =
      (ErlangTuple
         [(ErlangAtom "integer"), (ErlangInt (DBI.fromInt 0))])
  in let head_21 = (ErlangTuple [(ErlangAtom "integer"), n_1])
  in let
    head_2 =
      (ErlangTuple
         [(ErlangAtom "funcall"), tup_el_4,
          (ErlangCons head_10
             (ErlangCons head_13
                (ErlangCons head_17 (ErlangCons head_21 ErlangEmptyList))))])
  in (ErlangCons head_2 ErlangEmptyList)
erlps__builtin_bytes_to_str_body__2 [var_0, (ErlangInt num_1)]
  | ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 16))) =
  let   
    tup_el_6 =
      (ErlangTuple
         [(ErlangAtom "builtin"), (ErlangAtom "bytes_to_str_worker_x")])
  in let
    tup_el_4 = (ErlangTuple [(ErlangAtom "var_ref"), tup_el_6])
  in let head_10 = (erlps__v__1 [var_0])
  in let
    head_13 =
      (ErlangTuple
         [(ErlangAtom "integer"), (ErlangInt (DBI.fromInt 0))])
  in let
    head_17 =
      (ErlangTuple
         [(ErlangAtom "integer"), (ErlangInt (DBI.fromInt 0))])
  in let
    head_2 =
      (ErlangTuple
         [(ErlangAtom "funcall"), tup_el_4,
          (ErlangCons head_10
             (ErlangCons head_13 (ErlangCons head_17 ErlangEmptyList)))])
  in (ErlangCons head_2 ErlangEmptyList)
erlps__builtin_bytes_to_str_body__2 [var_0, n_1]
  | (weakLt n_1 (ErlangInt (DBI.fromInt 32))) =
  let   
    lop_2 =
      (erlps__builtin_bytes_to_str_body__2
         [var_0, (ErlangInt (DBI.fromInt 16))])
  in let
    head_10 =
      (BIF.do_remote_fun_call "Aeb.Opcodes" "erlps__mnemonic__1"
         [(ErlangInt (DBI.fromInt 80))])
  in let
    head_7 =
      (ErlangTuple
         [(ErlangAtom "inline_asm"),
          (ErlangCons head_10 ErlangEmptyList)])
  in let
    tup_el_19 =
      (ErlangTuple
         [(ErlangAtom "builtin"), (ErlangAtom "bytes_to_str_worker")])
  in let
    tup_el_17 = (ErlangTuple [(ErlangAtom "var_ref"), tup_el_19])
  in let
    arg_25 =
      (erlps__op__3
         [(ErlangAtom "*"), (ErlangInt (DBI.fromInt 16)),
          (ErlangInt (DBI.fromInt 8))])
  in let
    head_23 = (erlps__op__3 [(ErlangAtom "bsl"), arg_25, var_0])
  in let
    head_31 =
      (ErlangTuple
         [(ErlangAtom "integer"), (ErlangInt (DBI.fromInt 0))])
  in let
    head_35 =
      (ErlangTuple
         [(ErlangAtom "integer"), (ErlangInt (DBI.fromInt 0))])
  in let
    tup_el_41 =
      (BIF.erlang__op_minus [n_1, (ErlangInt (DBI.fromInt 16))])
  in let
    head_39 = (ErlangTuple [(ErlangAtom "integer"), tup_el_41])
  in let
    head_15 =
      (ErlangTuple
         [(ErlangAtom "funcall"), tup_el_17,
          (ErlangCons head_23
             (ErlangCons head_31
                (ErlangCons head_35 (ErlangCons head_39 ErlangEmptyList))))])
  in let
    rop_5 =
      (BIF.erlang__op_append
         [(ErlangCons head_7 ErlangEmptyList),
          (ErlangCons head_15 ErlangEmptyList)])
  in (BIF.erlang__op_append [lop_2, rop_5])
erlps__builtin_bytes_to_str_body__2 [var_0, (ErlangInt num_1)]
  | ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 32))) =
  let   
    lop_2 =
      (erlps__builtin_bytes_to_str_body__2
         [var_0, (ErlangInt (DBI.fromInt 16))])
  in let
    head_10 =
      (BIF.do_remote_fun_call "Aeb.Opcodes" "erlps__mnemonic__1"
         [(ErlangInt (DBI.fromInt 80))])
  in let
    head_7 =
      (ErlangTuple
         [(ErlangAtom "inline_asm"),
          (ErlangCons head_10 ErlangEmptyList)])
  in let
    tup_el_19 =
      (ErlangTuple
         [(ErlangAtom "builtin"), (ErlangAtom "bytes_to_str_worker_x")])
  in let
    tup_el_17 = (ErlangTuple [(ErlangAtom "var_ref"), tup_el_19])
  in let
    arg_25 =
      (erlps__op__3
         [(ErlangAtom "*"), (ErlangInt (DBI.fromInt 16)),
          (ErlangInt (DBI.fromInt 8))])
  in let
    head_23 = (erlps__op__3 [(ErlangAtom "bsl"), arg_25, var_0])
  in let
    head_31 =
      (ErlangTuple
         [(ErlangAtom "integer"), (ErlangInt (DBI.fromInt 0))])
  in let
    head_35 =
      (ErlangTuple
         [(ErlangAtom "integer"), (ErlangInt (DBI.fromInt 0))])
  in let
    head_15 =
      (ErlangTuple
         [(ErlangAtom "funcall"), tup_el_17,
          (ErlangCons head_23
             (ErlangCons head_31 (ErlangCons head_35 ErlangEmptyList)))])
  in let
    rop_5 =
      (BIF.erlang__op_append
         [(ErlangCons head_7 ErlangEmptyList),
          (ErlangCons head_15 ErlangEmptyList)])
  in (BIF.erlang__op_append [lop_2, rop_5])
erlps__builtin_bytes_to_str_body__2 [var_0, n_1]
  | (weakGt n_1 (ErlangInt (DBI.fromInt 32))) =
  let   
    lop_3 = (BIF.erlang__op_plus [n_1, (ErlangInt (DBI.fromInt 31))])
  in let
    lop_2 =
      (BIF.erlang__op_div_strict [lop_3, (ErlangInt (DBI.fromInt 32))])
  in let
    wholewords_8 =
      (BIF.erlang__op_minus [lop_2, (ErlangInt (DBI.fromInt 1))])
  in let
    arg_13 =
      (BIF.erlang__op_minus
         [wholewords_8, (ErlangInt (DBI.fromInt 1))])
  in let
    lc_src_11 =
      (BIF.do_remote_fun_call "Lists" "erlps__seq__2"
         [(ErlangInt (DBI.fromInt 0)), arg_13])
  in let
    arg_10 =
      (H.flmap
         (\ lc_17 ->
            let   
              arg_25 =
                (BIF.erlang__op_mult [(ErlangInt (DBI.fromInt 32)), lc_17])
            in let arg_22 = (erlps__op__3 [(ErlangAtom "+"), var_0, arg_25])
            in let tup_el_21 = (erlps__operand__1 [arg_22])
            in let head_33 = (erlps__v__1 [(ErlangAtom "w")])
            in let
              tup_el_30 =
                (ErlangTuple
                   [(ErlangAtom "tuple"), (ErlangCons head_33 ErlangEmptyList)])
            in let
              tup_el_38 =
                (erlps__builtin_bytes_to_str_body__2
                   [(ErlangAtom "w"), (ErlangInt (DBI.fromInt 32))])
            in let tup_el_36 = (ErlangTuple [(ErlangAtom "seq"), tup_el_38])
            in let head_29 = (ErlangTuple [tup_el_30, tup_el_36])
            in let
              head_19 =
                (ErlangTuple
                   [(ErlangAtom "switch"), tup_el_21,
                    (ErlangCons head_29 ErlangEmptyList)])
            in let
              head_46 =
                (BIF.do_remote_fun_call "Aeb.Opcodes" "erlps__mnemonic__1"
                   [(ErlangInt (DBI.fromInt 80))])
            in let
              head_43 =
                (ErlangTuple
                   [(ErlangAtom "inline_asm"),
                    (ErlangCons head_46 ErlangEmptyList)])
            in
              (ErlangCons
                 (ErlangCons head_19 (ErlangCons head_43 ErlangEmptyList))
                 ErlangEmptyList))
         lc_src_11)
  in let
    lop_9 =
      (BIF.do_remote_fun_call "Lists" "erlps__append__1" [arg_10])
  in let
    arg_57 =
      (BIF.erlang__op_mult
         [(ErlangInt (DBI.fromInt 32)), wholewords_8])
  in let arg_54 = (erlps__op__3 [(ErlangAtom "+"), var_0, arg_57])
  in let tup_el_53 = (erlps__operand__1 [arg_54])
  in let head_65 = (erlps__v__1 [(ErlangAtom "w")])
  in let
    tup_el_62 =
      (ErlangTuple
         [(ErlangAtom "tuple"), (ErlangCons head_65 ErlangEmptyList)])
  in let
    rop_74 =
      (BIF.erlang__op_mult
         [wholewords_8, (ErlangInt (DBI.fromInt 32))])
  in let arg_72 = (BIF.erlang__op_minus [n_1, rop_74])
  in let
    tup_el_70 =
      (erlps__builtin_bytes_to_str_body__2 [(ErlangAtom "w"), arg_72])
  in let tup_el_68 = (ErlangTuple [(ErlangAtom "seq"), tup_el_70])
  in let head_61 = (ErlangTuple [tup_el_62, tup_el_68])
  in let
    head_51 =
      (ErlangTuple
         [(ErlangAtom "switch"), tup_el_53,
          (ErlangCons head_61 ErlangEmptyList)])
  in
    (BIF.erlang__op_append
       [lop_9, (ErlangCons head_51 ErlangEmptyList)])
erlps__builtin_bytes_to_str_body__2 [arg_79, arg_80] =
  (EXC.function_clause unit)
erlps__builtin_bytes_to_str_body__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__builtin_bytes_to_str__1 :: ErlangFun
erlps__builtin_bytes_to_str__1 [n_0]
  | (weakLeq n_0 (ErlangInt (DBI.fromInt 32))) =
  let    tup_el_3 = (H.make_string "w")
  in let head_2 = (ErlangTuple [tup_el_3, (ErlangAtom "word")])
  in let
    head_11 =
      (BIF.do_remote_fun_call "Aeb.Opcodes" "erlps__mnemonic__1"
         [(ErlangInt (DBI.fromInt 89))])
  in let
    tup_el_8 =
      (ErlangTuple
         [(ErlangAtom "inline_asm"),
          (ErlangCons head_11 ErlangEmptyList)])
  in let tup_el_16 = (erlps__v__1 [(ErlangAtom "ret")])
  in let
    tup_el_24 =
      (BIF.erlang__op_mult [n_0, (ErlangInt (DBI.fromInt 2))])
  in let
    head_22 = (ErlangTuple [(ErlangAtom "integer"), tup_el_24])
  in let
    head_31 =
      (BIF.do_remote_fun_call "Aeb.Opcodes" "erlps__mnemonic__1"
         [(ErlangInt (DBI.fromInt 89))])
  in let
    head_34 =
      (BIF.do_remote_fun_call "Aeb.Opcodes" "erlps__mnemonic__1"
         [(ErlangInt (DBI.fromInt 82))])
  in let
    head_28 =
      (ErlangTuple
         [(ErlangAtom "inline_asm"),
          (ErlangCons head_31 (ErlangCons head_34 ErlangEmptyList))])
  in let
    lop_39 =
      (erlps__builtin_bytes_to_str_body__2 [(ErlangAtom "w"), n_0])
  in let
    head_46 =
      (BIF.do_remote_fun_call "Aeb.Opcodes" "erlps__mnemonic__1"
         [(ErlangInt (DBI.fromInt 80))])
  in let
    head_43 =
      (ErlangTuple
         [(ErlangAtom "inline_asm"),
          (ErlangCons head_46 ErlangEmptyList)])
  in let head_50 = (erlps__v__1 [(ErlangAtom "ret")])
  in let
    rop_38 =
      (BIF.erlang__op_append
         [lop_39,
          (ErlangCons head_43 (ErlangCons head_50 ErlangEmptyList))])
  in let
    tup_el_20 =
      (BIF.erlang__op_append
         [(ErlangCons head_22 (ErlangCons head_28 ErlangEmptyList)),
          rop_38])
  in let tup_el_18 = (ErlangTuple [(ErlangAtom "seq"), tup_el_20])
  in let head_15 = (ErlangTuple [tup_el_16, tup_el_18])
  in let
    tup_el_6 =
      (ErlangTuple
         [(ErlangAtom "switch"), tup_el_8,
          (ErlangCons head_15 ErlangEmptyList)])
  in
    (ErlangTuple
       [(ErlangCons head_2 ErlangEmptyList), tup_el_6,
        (ErlangAtom "string")])
erlps__builtin_bytes_to_str__1 [n_0]
  | (weakGt n_0 (ErlangInt (DBI.fromInt 32))) =
  let    tup_el_3 = (H.make_string "p")
  in let head_2 = (ErlangTuple [tup_el_3, (ErlangAtom "pointer")])
  in let
    head_11 =
      (BIF.do_remote_fun_call "Aeb.Opcodes" "erlps__mnemonic__1"
         [(ErlangInt (DBI.fromInt 89))])
  in let
    tup_el_8 =
      (ErlangTuple
         [(ErlangAtom "inline_asm"),
          (ErlangCons head_11 ErlangEmptyList)])
  in let tup_el_16 = (erlps__v__1 [(ErlangAtom "ret")])
  in let
    tup_el_24 =
      (BIF.erlang__op_mult [n_0, (ErlangInt (DBI.fromInt 2))])
  in let
    head_22 = (ErlangTuple [(ErlangAtom "integer"), tup_el_24])
  in let
    head_31 =
      (BIF.do_remote_fun_call "Aeb.Opcodes" "erlps__mnemonic__1"
         [(ErlangInt (DBI.fromInt 89))])
  in let
    head_34 =
      (BIF.do_remote_fun_call "Aeb.Opcodes" "erlps__mnemonic__1"
         [(ErlangInt (DBI.fromInt 82))])
  in let
    head_28 =
      (ErlangTuple
         [(ErlangAtom "inline_asm"),
          (ErlangCons head_31 (ErlangCons head_34 ErlangEmptyList))])
  in let
    lop_39 =
      (erlps__builtin_bytes_to_str_body__2 [(ErlangAtom "p"), n_0])
  in let
    head_46 =
      (BIF.do_remote_fun_call "Aeb.Opcodes" "erlps__mnemonic__1"
         [(ErlangInt (DBI.fromInt 80))])
  in let
    head_43 =
      (ErlangTuple
         [(ErlangAtom "inline_asm"),
          (ErlangCons head_46 ErlangEmptyList)])
  in let head_50 = (erlps__v__1 [(ErlangAtom "ret")])
  in let
    rop_38 =
      (BIF.erlang__op_append
         [lop_39,
          (ErlangCons head_43 (ErlangCons head_50 ErlangEmptyList))])
  in let
    tup_el_20 =
      (BIF.erlang__op_append
         [(ErlangCons head_22 (ErlangCons head_28 ErlangEmptyList)),
          rop_38])
  in let tup_el_18 = (ErlangTuple [(ErlangAtom "seq"), tup_el_20])
  in let head_15 = (ErlangTuple [tup_el_16, tup_el_18])
  in let
    tup_el_6 =
      (ErlangTuple
         [(ErlangAtom "switch"), tup_el_8,
          (ErlangCons head_15 ErlangEmptyList)])
  in
    (ErlangTuple
       [(ErlangCons head_2 ErlangEmptyList), tup_el_6,
        (ErlangAtom "string")])
erlps__builtin_bytes_to_str__1 [arg_55] =
  (EXC.function_clause unit)
erlps__builtin_bytes_to_str__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__builtin_string_reverse__0 :: ErlangFun
erlps__builtin_string_reverse__0 [] =
  let    tup_el_2 = (H.make_string "s")
  in let head_1 = (ErlangTuple [tup_el_2, (ErlangAtom "string")])
  in let tup_el_7 = (erlps__operand__1 [(ErlangAtom "s")])
  in let head_14 = (erlps__v__1 [(ErlangAtom "n")])
  in let
    tup_el_11 =
      (ErlangTuple
         [(ErlangAtom "tuple"), (ErlangCons head_14 ErlangEmptyList)])
  in let
    head_22 =
      (BIF.do_remote_fun_call "Aeb.Opcodes" "erlps__mnemonic__1"
         [(ErlangInt (DBI.fromInt 89))])
  in let
    tup_el_19 =
      (ErlangTuple
         [(ErlangAtom "inline_asm"),
          (ErlangCons head_22 ErlangEmptyList)])
  in let tup_el_27 = (erlps__v__1 [(ErlangAtom "ret")])
  in let head_32 = (erlps__v__1 [(ErlangAtom "n")])
  in let
    head_38 =
      (BIF.do_remote_fun_call "Aeb.Opcodes" "erlps__mnemonic__1"
         [(ErlangInt (DBI.fromInt 89))])
  in let
    head_41 =
      (BIF.do_remote_fun_call "Aeb.Opcodes" "erlps__mnemonic__1"
         [(ErlangInt (DBI.fromInt 82))])
  in let
    head_35 =
      (ErlangTuple
         [(ErlangAtom "inline_asm"),
          (ErlangCons head_38 (ErlangCons head_41 ErlangEmptyList))])
  in let
    tup_el_49 =
      (ErlangTuple
         [(ErlangAtom "builtin"), (ErlangAtom "string_reverse_")])
  in let
    tup_el_47 = (ErlangTuple [(ErlangAtom "var_ref"), tup_el_49])
  in let
    head_53 =
      (erlps__op__3
         [(ErlangAtom "+"), (ErlangAtom "s"),
          (ErlangInt (DBI.fromInt 32))])
  in let
    head_58 =
      (ErlangTuple
         [(ErlangAtom "integer"), (ErlangInt (DBI.fromInt 0))])
  in let
    head_62 =
      (ErlangTuple
         [(ErlangAtom "integer"), (ErlangInt (DBI.fromInt 31))])
  in let arg_68 = (erlps__v__1 [(ErlangAtom "n")])
  in let
    head_66 =
      (erlps__op__3
         [(ErlangAtom "-"), arg_68, (ErlangInt (DBI.fromInt 1))])
  in let
    head_45 =
      (ErlangTuple
         [(ErlangAtom "funcall"), tup_el_47,
          (ErlangCons head_53
             (ErlangCons head_58
                (ErlangCons head_62 (ErlangCons head_66 ErlangEmptyList))))])
  in let
    head_76 =
      (BIF.do_remote_fun_call "Aeb.Opcodes" "erlps__mnemonic__1"
         [(ErlangInt (DBI.fromInt 80))])
  in let
    head_73 =
      (ErlangTuple
         [(ErlangAtom "inline_asm"),
          (ErlangCons head_76 ErlangEmptyList)])
  in let head_80 = (erlps__v__1 [(ErlangAtom "ret")])
  in let
    tup_el_29 =
      (ErlangTuple
         [(ErlangAtom "seq"),
          (ErlangCons head_32
             (ErlangCons head_35
                (ErlangCons head_45
                   (ErlangCons head_73
                      (ErlangCons head_80 ErlangEmptyList)))))])
  in let head_26 = (ErlangTuple [tup_el_27, tup_el_29])
  in let
    tup_el_17 =
      (ErlangTuple
         [(ErlangAtom "switch"), tup_el_19,
          (ErlangCons head_26 ErlangEmptyList)])
  in let head_10 = (ErlangTuple [tup_el_11, tup_el_17])
  in let
    tup_el_5 =
      (ErlangTuple
         [(ErlangAtom "switch"), tup_el_7,
          (ErlangCons head_10 ErlangEmptyList)])
  in
    (ErlangTuple
       [(ErlangCons head_1 ErlangEmptyList), tup_el_5,
        (ErlangAtom "word")])
erlps__builtin_string_reverse__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__builtin_string_reverse___0 :: ErlangFun
erlps__builtin_string_reverse___0 [] =
  let    tup_el_2 = (H.make_string "p")
  in let head_1 = (ErlangTuple [tup_el_2, (ErlangAtom "pointer")])
  in let tup_el_6 = (H.make_string "x")
  in let head_5 = (ErlangTuple [tup_el_6, (ErlangAtom "word")])
  in let tup_el_10 = (H.make_string "i1")
  in let head_9 = (ErlangTuple [tup_el_10, (ErlangAtom "word")])
  in let tup_el_14 = (H.make_string "i2")
  in let head_13 = (ErlangTuple [tup_el_14, (ErlangAtom "word")])
  in let
    tup_el_19 =
      (erlps__op__3
         [(ErlangAtom "<"), (ErlangAtom "i2"),
          (ErlangInt (DBI.fromInt 0))])
  in let head_26 = (erlps__v__1 [(ErlangAtom "x")])
  in let
    head_32 =
      (BIF.do_remote_fun_call "Aeb.Opcodes" "erlps__mnemonic__1"
         [(ErlangInt (DBI.fromInt 89))])
  in let
    head_35 =
      (BIF.do_remote_fun_call "Aeb.Opcodes" "erlps__mnemonic__1"
         [(ErlangInt (DBI.fromInt 82))])
  in let
    head_38 =
      (BIF.do_remote_fun_call "Aeb.Opcodes" "erlps__mnemonic__1"
         [(ErlangInt (DBI.fromInt 89))])
  in let
    head_29 =
      (ErlangTuple
         [(ErlangAtom "inline_asm"),
          (ErlangCons head_32
             (ErlangCons head_35 (ErlangCons head_38 ErlangEmptyList)))])
  in let
    tup_el_23 =
      (ErlangTuple
         [(ErlangAtom "seq"),
          (ErlangCons head_26 (ErlangCons head_29 ErlangEmptyList))])
  in let
    arg_49 =
      (erlps__op__3
         [(ErlangAtom "div"), (ErlangAtom "i2"),
          (ErlangInt (DBI.fromInt 32))])
  in let
    arg_47 =
      (erlps__op__3
         [(ErlangAtom "*"), arg_49, (ErlangInt (DBI.fromInt 32))])
  in let
    tup_el_44 =
      (erlps__op__3 [(ErlangAtom "+"), (ErlangAtom "p"), arg_47])
  in let tup_el_56 = (erlps__v__1 [(ErlangAtom "p1")])
  in let tup_el_60 = (erlps__operand__1 [(ErlangAtom "p1")])
  in let head_67 = (erlps__v__1 [(ErlangAtom "w")])
  in let
    tup_el_64 =
      (ErlangTuple
         [(ErlangAtom "tuple"), (ErlangCons head_67 ErlangEmptyList)])
  in let
    arg_74 =
      (erlps__op__3
         [(ErlangAtom "mod"), (ErlangAtom "i2"),
          (ErlangInt (DBI.fromInt 32))])
  in let
    tup_el_72 =
      (erlps__op__3 [(ErlangAtom "byte"), arg_74, (ErlangAtom "w")])
  in let tup_el_81 = (erlps__v__1 [(ErlangAtom "b")])
  in let
    tup_el_85 =
      (erlps__op__3
         [(ErlangAtom "<"), (ErlangAtom "i1"),
          (ErlangInt (DBI.fromInt 0))])
  in let head_92 = (erlps__v__1 [(ErlangAtom "x")])
  in let
    head_98 =
      (BIF.do_remote_fun_call "Aeb.Opcodes" "erlps__mnemonic__1"
         [(ErlangInt (DBI.fromInt 89))])
  in let
    head_101 =
      (BIF.do_remote_fun_call "Aeb.Opcodes" "erlps__mnemonic__1"
         [(ErlangInt (DBI.fromInt 82))])
  in let
    head_95 =
      (ErlangTuple
         [(ErlangAtom "inline_asm"),
          (ErlangCons head_98 (ErlangCons head_101 ErlangEmptyList))])
  in let
    tup_el_109 =
      (ErlangTuple
         [(ErlangAtom "builtin"), (ErlangAtom "string_reverse_")])
  in let
    tup_el_107 = (ErlangTuple [(ErlangAtom "var_ref"), tup_el_109])
  in let head_113 = (erlps__v__1 [(ErlangAtom "p")])
  in let
    arg_118 =
      (erlps__op__3
         [(ErlangAtom "*"), (ErlangInt (DBI.fromInt 31)),
          (ErlangInt (DBI.fromInt 8))])
  in let
    head_116 =
      (erlps__op__3 [(ErlangAtom "bsl"), arg_118, (ErlangAtom "b")])
  in let
    head_124 =
      (ErlangTuple
         [(ErlangAtom "integer"), (ErlangInt (DBI.fromInt 30))])
  in let
    head_128 =
      (erlps__op__3
         [(ErlangAtom "-"), (ErlangAtom "i2"),
          (ErlangInt (DBI.fromInt 1))])
  in let
    head_105 =
      (ErlangTuple
         [(ErlangAtom "funcall"), tup_el_107,
          (ErlangCons head_113
             (ErlangCons head_116
                (ErlangCons head_124 (ErlangCons head_128 ErlangEmptyList))))])
  in let
    tup_el_89 =
      (ErlangTuple
         [(ErlangAtom "seq"),
          (ErlangCons head_92
             (ErlangCons head_95 (ErlangCons head_105 ErlangEmptyList)))])
  in let
    tup_el_138 =
      (ErlangTuple
         [(ErlangAtom "builtin"), (ErlangAtom "string_reverse_")])
  in let
    tup_el_136 = (ErlangTuple [(ErlangAtom "var_ref"), tup_el_138])
  in let head_142 = (erlps__v__1 [(ErlangAtom "p")])
  in let
    arg_150 =
      (erlps__op__3
         [(ErlangAtom "*"), (ErlangAtom "i1"),
          (ErlangInt (DBI.fromInt 8))])
  in let
    arg_148 =
      (erlps__op__3 [(ErlangAtom "bsl"), arg_150, (ErlangAtom "b")])
  in let
    head_145 =
      (erlps__op__3 [(ErlangAtom "+"), (ErlangAtom "x"), arg_148])
  in let
    head_156 =
      (erlps__op__3
         [(ErlangAtom "-"), (ErlangAtom "i1"),
          (ErlangInt (DBI.fromInt 1))])
  in let
    head_161 =
      (erlps__op__3
         [(ErlangAtom "-"), (ErlangAtom "i2"),
          (ErlangInt (DBI.fromInt 1))])
  in let
    tup_el_134 =
      (ErlangTuple
         [(ErlangAtom "funcall"), tup_el_136,
          (ErlangCons head_142
             (ErlangCons head_145
                (ErlangCons head_156 (ErlangCons head_161 ErlangEmptyList))))])
  in let
    tup_el_83 =
      (ErlangTuple
         [(ErlangAtom "ifte"), tup_el_85, tup_el_89, tup_el_134])
  in let head_80 = (ErlangTuple [tup_el_81, tup_el_83])
  in let
    tup_el_70 =
      (ErlangTuple
         [(ErlangAtom "switch"), tup_el_72,
          (ErlangCons head_80 ErlangEmptyList)])
  in let head_63 = (ErlangTuple [tup_el_64, tup_el_70])
  in let
    tup_el_58 =
      (ErlangTuple
         [(ErlangAtom "switch"), tup_el_60,
          (ErlangCons head_63 ErlangEmptyList)])
  in let head_55 = (ErlangTuple [tup_el_56, tup_el_58])
  in let
    tup_el_42 =
      (ErlangTuple
         [(ErlangAtom "switch"), tup_el_44,
          (ErlangCons head_55 ErlangEmptyList)])
  in let
    tup_el_17 =
      (ErlangTuple
         [(ErlangAtom "ifte"), tup_el_19, tup_el_23, tup_el_42])
  in
    (ErlangTuple
       [(ErlangCons head_1
           (ErlangCons head_5
              (ErlangCons head_9 (ErlangCons head_13 ErlangEmptyList)))),
        tup_el_17, (ErlangAtom "word")])
erlps__builtin_string_reverse___0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__builtin_addr_to_str__0 :: ErlangFun
erlps__builtin_addr_to_str__0 [] =
  let    tup_el_2 = (H.make_string "a")
  in let head_1 = (ErlangTuple [tup_el_2, (ErlangAtom "word")])
  in let
    tup_el_11 =
      (ErlangTuple
         [(ErlangAtom "baseX_int"), (ErlangInt (DBI.fromInt 58))])
  in let
    tup_el_9 = (ErlangTuple [(ErlangAtom "builtin"), tup_el_11])
  in let
    tup_el_7 = (ErlangTuple [(ErlangAtom "var_ref"), tup_el_9])
  in let head_15 = (erlps__v__1 [(ErlangAtom "a")])
  in let
    tup_el_5 =
      (ErlangTuple
         [(ErlangAtom "funcall"), tup_el_7,
          (ErlangCons head_15 ErlangEmptyList)])
  in
    (ErlangTuple
       [(ErlangCons head_1 ErlangEmptyList), tup_el_5,
        (ErlangAtom "word")])
erlps__builtin_addr_to_str__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__bytes_slice__4 :: ErlangFun
erlps__bytes_slice__4 [offs_0, len_1, totallen_2, bytes_3]
  | (weakLeq totallen_2 (ErlangInt (DBI.fromInt 32))) =
  let   
    masked_15 =
      case offs_0 of
        (ErlangInt num_5) | ((ErlangInt num_5) ==
                               (ErlangInt (DBI.fromInt 0))) ->
          bytes_3
        _ ->
          let   
            lop_11 =
              (BIF.erlang__op_minus [(ErlangInt (DBI.fromInt 32)), offs_0])
          in let
            rop_10 =
              (BIF.erlang__op_mult [lop_11, (ErlangInt (DBI.fromInt 8))])
          in let
            arg_8 =
              (BIF.erlang__bsl__2 [(ErlangInt (DBI.fromInt 1)), rop_10])
          in (erlps__op__3 [(ErlangAtom "mod"), bytes_3, arg_8])
  in let rop_18 = (BIF.erlang__op_plus [offs_0, len_1])
  in let
    case_16 =
      (BIF.erlang__op_minus [(ErlangInt (DBI.fromInt 32)), rop_18])
  in let
    unpadded_29 =
      case case_16 of
        (ErlangInt num_21) | ((ErlangInt num_21) ==
                                (ErlangInt (DBI.fromInt 0))) ->
          masked_15
        n_22 ->
          let
            arg_24 =
              (erlps__op__3
                 [(ErlangAtom "*"), n_22, (ErlangInt (DBI.fromInt 8))])
          in (erlps__op__3 [(ErlangAtom "bsr"), arg_24, masked_15])
  in
    case len_1 of
      (ErlangInt num_31) | ((ErlangInt num_31) ==
                              (ErlangInt (DBI.fromInt 32))) ->
        unpadded_29
      _ ->
        let   
          arg_35 =
            (BIF.erlang__op_minus [(ErlangInt (DBI.fromInt 32)), len_1])
        in let
          arg_33 =
            (erlps__op__3
               [(ErlangAtom "*"), arg_35, (ErlangInt (DBI.fromInt 8))])
        in (erlps__op__3 [(ErlangAtom "bsl"), arg_33, unpadded_29])
erlps__bytes_slice__4 [offs_0, len_1, totallen_2, bytes_3]
  | (weakGt totallen_2 (ErlangInt (DBI.fromInt 32))) =
  let   
    word_7 = (erlps__op__3 [(ErlangAtom "!"), offs_0, bytes_3])
  in let
    case_8 =
      (BIF.erlang__op_eq [len_1, (ErlangInt (DBI.fromInt 32))])
  in
    case case_8 of
      (ErlangAtom "true") -> word_7
      _ ->
        let   
          arg_14 =
            (BIF.erlang__op_minus [(ErlangInt (DBI.fromInt 32)), len_1])
        in let
          arg_12 =
            (erlps__op__3
               [(ErlangAtom "*"), arg_14, (ErlangInt (DBI.fromInt 8))])
        in let
          arg_22 =
            (BIF.erlang__op_minus [(ErlangInt (DBI.fromInt 32)), len_1])
        in let
          arg_20 =
            (erlps__op__3
               [(ErlangAtom "*"), arg_22, (ErlangInt (DBI.fromInt 8))])
        in let
          arg_18 = (erlps__op__3 [(ErlangAtom "bsr"), arg_20, word_7])
        in (erlps__op__3 [(ErlangAtom "bsl"), arg_12, arg_18])
erlps__bytes_slice__4 [arg_27, arg_28, arg_29, arg_30] =
  (EXC.function_clause unit)
erlps__bytes_slice__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__builtin_bytes_concat__2 :: ErlangFun
erlps__builtin_bytes_concat__2 [a_0, b_1] =
  let   
    type_5 =
      (ErlangFun 1
         let
           lambda_2 [n_4] | (weakLeq n_4 (ErlangInt (DBI.fromInt 32))) =
             (ErlangAtom "word")
           lambda_2 [_] = (ErlangAtom "pointer")
           lambda_2 [arg_3] = (EXC.function_clause unit)
           lambda_2 args = (EXC.badarity (ErlangFun 1 lambda_2) args)
         in lambda_2)
  in let
    mkbytes_12 =
      (ErlangFun 1
         let
           lambda_6 [(ErlangCons w_8 (ErlangEmptyList))] = w_8
           lambda_6 [ws_9] = (ErlangTuple [(ErlangAtom "tuple"), ws_9])
           lambda_6 [arg_7] = (EXC.function_clause unit)
           lambda_6 args = (EXC.badarity (ErlangFun 1 lambda_6) args)
         in lambda_6)
  in let
    words_20 =
      (ErlangFun 1
         let
           lambda_13 [n_15] =
             let
               lop_16 =
                 (BIF.erlang__op_plus [n_15, (ErlangInt (DBI.fromInt 31))])
             in
               (BIF.erlang__op_div_strict
                  [lop_16, (ErlangInt (DBI.fromInt 32))])
           lambda_13 [arg_14] = (EXC.function_clause unit)
           lambda_13 args = (EXC.badarity (ErlangFun 1 lambda_13) args)
         in lambda_13)
  in let arg_21 = (BIF.erlang__op_plus [a_0, b_1])
  in let
    wordsres_25 =
      (BIF.erlang__apply__2
         [words_20, (ErlangCons arg_21 ErlangEmptyList)])
  in let
    word_93 =
      (ErlangFun 1
         let
           lambda_26 [i_28]
             | ((ErlangAtom "true") ==
                  (H.falsifyErrors
                     (\ _ ->
                        let   
                          rop_31 =
                            (BIF.erlang__op_plus
                               [i_28, (ErlangInt (DBI.fromInt 1))])
                        in let
                          lop_29 =
                            (BIF.erlang__op_mult
                               [(ErlangInt (DBI.fromInt 32)), rop_31])
                        in (BIF.erlang__op_lesserEq [lop_29, a_0])))) =
             let   
               arg_35 =
                 (BIF.erlang__op_mult [i_28, (ErlangInt (DBI.fromInt 32))])
             in let arg_40 = (erlps__v__1 [(ErlangAtom "a")])
             in
               (erlps__bytes_slice__4
                  [arg_35, (ErlangInt (DBI.fromInt 32)), a_0, arg_40])
           lambda_26 [i_42]
             | ((ErlangAtom "true") ==
                  (H.falsifyErrors
                     (\ _ ->
                        let
                          lop_43 =
                            (BIF.erlang__op_mult
                               [(ErlangInt (DBI.fromInt 32)), i_42])
                        in (BIF.erlang__op_lesser [lop_43, a_0])))) =
             let   
               len_49 =
                 (BIF.erlang__op_rem_strict [a_0, (ErlangInt (DBI.fromInt 32))])
             in let
               arg_50 =
                 (BIF.erlang__op_mult [(ErlangInt (DBI.fromInt 32)), i_42])
             in let arg_55 = (erlps__v__1 [(ErlangAtom "a")])
             in let
               hi_57 = (erlps__bytes_slice__4 [arg_50, len_49, a_0, arg_55])
             in let
               arg_60 =
                 (BIF.erlang__op_minus [(ErlangInt (DBI.fromInt 32)), len_49])
             in let arg_59 = (BIF.erlang__min__2 [arg_60, b_1])
             in let arg_65 = (erlps__v__1 [(ErlangAtom "b")])
             in let
               lo_67 =
                 (erlps__bytes_slice__4
                    [(ErlangInt (DBI.fromInt 0)), arg_59, b_1, arg_65])
             in let
               arg_72 =
                 (erlps__op__3
                    [(ErlangAtom "*"), len_49, (ErlangInt (DBI.fromInt 8))])
             in let
               arg_70 = (erlps__op__3 [(ErlangAtom "bsr"), arg_72, lo_67])
             in (erlps__op__3 [(ErlangAtom "+"), hi_57, arg_70])
           lambda_26 [i_77] =
             let   
               lop_78 =
                 (BIF.erlang__op_mult [(ErlangInt (DBI.fromInt 32)), i_77])
             in let offs_82 = (BIF.erlang__op_minus [lop_78, a_0])
             in let arg_84 = (BIF.erlang__op_minus [b_1, offs_82])
             in let
               len_87 =
                 (BIF.erlang__min__2 [(ErlangInt (DBI.fromInt 32)), arg_84])
             in let arg_91 = (erlps__v__1 [(ErlangAtom "b")])
             in (erlps__bytes_slice__4 [offs_82, len_87, b_1, arg_91])
           lambda_26 [arg_27] = (EXC.function_clause unit)
           lambda_26 args = (EXC.badarity (ErlangFun 1 lambda_26) args)
         in lambda_26)
  in let case_94 = (ErlangTuple [a_0, b_1])
  in let
    body_113 =
      case case_94 of
        (ErlangTuple [(ErlangInt num_97), _]) | ((ErlangInt num_97) ==
                                                   (ErlangInt
                                                      (DBI.fromInt 0))) ->
          (erlps__v__1 [(ErlangAtom "b")])
        (ErlangTuple [_, (ErlangInt num_99)]) | ((ErlangInt num_99) ==
                                                   (ErlangInt
                                                      (DBI.fromInt 0))) ->
          (erlps__v__1 [(ErlangAtom "a")])
        _ ->
          let   
            arg_104 =
              (BIF.erlang__op_minus [wordsres_25, (ErlangInt (DBI.fromInt 1))])
          in let
            lc_src_102 =
              (BIF.do_remote_fun_call "Lists" "erlps__seq__2"
                 [(ErlangInt (DBI.fromInt 0)), arg_104])
          in let
            arg_101 =
              (H.flmap
                 (\ lc_108 ->
                    let
                      lc_ret_109 =
                        (BIF.erlang__apply__2
                           [word_93, (ErlangCons lc_108 ErlangEmptyList)])
                    in (ErlangCons lc_ret_109 ErlangEmptyList))
                 lc_src_102)
          in
            (BIF.erlang__apply__2
               [mkbytes_12, (ErlangCons arg_101 ErlangEmptyList)])
  in let tup_el_116 = (H.make_string "a")
  in let
    tup_el_117 =
      (BIF.erlang__apply__2 [type_5, (ErlangCons a_0 ErlangEmptyList)])
  in let head_115 = (ErlangTuple [tup_el_116, tup_el_117])
  in let tup_el_122 = (H.make_string "b")
  in let
    tup_el_123 =
      (BIF.erlang__apply__2 [type_5, (ErlangCons b_1 ErlangEmptyList)])
  in let head_121 = (ErlangTuple [tup_el_122, tup_el_123])
  in let arg_129 = (BIF.erlang__op_plus [a_0, b_1])
  in let
    tup_el_128 =
      (BIF.erlang__apply__2
         [type_5, (ErlangCons arg_129 ErlangEmptyList)])
  in
    (ErlangTuple
       [(ErlangCons head_115 (ErlangCons head_121 ErlangEmptyList)),
        body_113, tup_el_128])
erlps__builtin_bytes_concat__2 [arg_133, arg_134] =
  (EXC.function_clause unit)
erlps__builtin_bytes_concat__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__builtin_bytes_split__2 :: ErlangFun
erlps__builtin_bytes_split__2 [a_0, b_1] =
  let   
    type_5 =
      (ErlangFun 1
         let
           lambda_2 [n_4] | (weakLeq n_4 (ErlangInt (DBI.fromInt 32))) =
             (ErlangAtom "word")
           lambda_2 [_] = (ErlangAtom "pointer")
           lambda_2 [arg_3] = (EXC.function_clause unit)
           lambda_2 args = (EXC.badarity (ErlangFun 1 lambda_2) args)
         in lambda_2)
  in let
    mkbytes_12 =
      (ErlangFun 1
         let
           lambda_6 [(ErlangCons w_8 (ErlangEmptyList))] = w_8
           lambda_6 [ws_9] = (ErlangTuple [(ErlangAtom "tuple"), ws_9])
           lambda_6 [arg_7] = (EXC.function_clause unit)
           lambda_6 args = (EXC.badarity (ErlangFun 1 lambda_6) args)
         in lambda_6)
  in let
    word_29 =
      (ErlangFun 2
         let
           lambda_13 [i_16, max_17] =
             let    arg_21 = (BIF.erlang__op_minus [max_17, i_16])
             in let
               arg_19 =
                 (BIF.erlang__min__2 [(ErlangInt (DBI.fromInt 32)), arg_21])
             in let arg_24 = (BIF.erlang__op_plus [a_0, b_1])
             in let arg_27 = (erlps__v__1 [(ErlangAtom "c")])
             in (erlps__bytes_slice__4 [i_16, arg_19, arg_24, arg_27])
           lambda_13 [arg_14, arg_15] = (EXC.function_clause unit)
           lambda_13 args = (EXC.badarity (ErlangFun 2 lambda_13) args)
         in lambda_13)
  in let case_30 = (ErlangTuple [a_0, b_1])
  in let
    body_85 =
      case case_30 of
        (ErlangTuple [(ErlangInt num_33), _]) | ((ErlangInt num_33) ==
                                                   (ErlangInt
                                                      (DBI.fromInt 0))) ->
          let   
            head_34 =
              (ErlangTuple
                 [(ErlangAtom "integer"), (ErlangInt (DBI.fromInt 0))])
          in let head_38 = (erlps__v__1 [(ErlangAtom "c")])
          in (ErlangCons head_34 (ErlangCons head_38 ErlangEmptyList))
        (ErlangTuple [_, (ErlangInt num_41)]) | ((ErlangInt num_41) ==
                                                   (ErlangInt
                                                      (DBI.fromInt 0))) ->
          let    head_42 = (erlps__v__1 [(ErlangAtom "c")])
          in let
            head_45 =
              (ErlangTuple
                 [(ErlangAtom "integer"), (ErlangInt (DBI.fromInt 0))])
          in (ErlangCons head_42 (ErlangCons head_45 ErlangEmptyList))
        _ ->
          let   
            arg_53 =
              (BIF.erlang__op_minus [a_0, (ErlangInt (DBI.fromInt 1))])
          in let
            lc_src_51 =
              (BIF.do_remote_fun_call "Lists" "erlps__seq__3"
                 [(ErlangInt (DBI.fromInt 0)), arg_53,
                  (ErlangInt (DBI.fromInt 32))])
          in let
            arg_50 =
              (H.flmap
                 (\ lc_58 ->
                    let
                      lc_ret_59 =
                        (BIF.erlang__apply__2
                           [word_29,
                            (ErlangCons lc_58
                               (ErlangCons a_0 ErlangEmptyList))])
                    in (ErlangCons lc_ret_59 ErlangEmptyList))
                 lc_src_51)
          in let
            head_49 =
              (BIF.erlang__apply__2
                 [mkbytes_12, (ErlangCons arg_50 ErlangEmptyList)])
          in let lop_70 = (BIF.erlang__op_plus [a_0, b_1])
          in let
            arg_69 =
              (BIF.erlang__op_minus [lop_70, (ErlangInt (DBI.fromInt 1))])
          in let
            lc_src_67 =
              (BIF.do_remote_fun_call "Lists" "erlps__seq__3"
                 [a_0, arg_69, (ErlangInt (DBI.fromInt 32))])
          in let
            arg_66 =
              (H.flmap
                 (\ lc_76 ->
                    let    arg_79 = (BIF.erlang__op_plus [a_0, b_1])
                    in let
                      lc_ret_77 =
                        (BIF.erlang__apply__2
                           [word_29,
                            (ErlangCons lc_76
                               (ErlangCons arg_79 ErlangEmptyList))])
                    in (ErlangCons lc_ret_77 ErlangEmptyList))
                 lc_src_67)
          in let
            head_65 =
              (BIF.erlang__apply__2
                 [mkbytes_12, (ErlangCons arg_66 ErlangEmptyList)])
          in (ErlangCons head_49 (ErlangCons head_65 ErlangEmptyList))
  in let tup_el_88 = (H.make_string "c")
  in let arg_90 = (BIF.erlang__op_plus [a_0, b_1])
  in let
    tup_el_89 =
      (BIF.erlang__apply__2
         [type_5, (ErlangCons arg_90 ErlangEmptyList)])
  in let head_87 = (ErlangTuple [tup_el_88, tup_el_89])
  in let tup_el_95 = (ErlangTuple [(ErlangAtom "tuple"), body_85])
  in let
    head_101 =
      (BIF.erlang__apply__2 [type_5, (ErlangCons a_0 ErlangEmptyList)])
  in let
    head_105 =
      (BIF.erlang__apply__2 [type_5, (ErlangCons b_1 ErlangEmptyList)])
  in let
    tup_el_98 =
      (ErlangTuple
         [(ErlangAtom "tuple"),
          (ErlangCons head_101 (ErlangCons head_105 ErlangEmptyList))])
  in
    (ErlangTuple
       [(ErlangCons head_87 ErlangEmptyList), tup_el_95, tup_el_98])
erlps__builtin_bytes_split__2 [arg_109, arg_110] =
  (EXC.function_clause unit)
erlps__builtin_bytes_split__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__bytes_to_raw_string__2 :: ErlangFun
erlps__bytes_to_raw_string__2 [n_0, term_1]
  | (weakLeq n_0 (ErlangInt (DBI.fromInt 32))) =
  let head_4 = (ErlangTuple [(ErlangAtom "integer"), n_0])
  in
    (ErlangTuple
       [(ErlangAtom "tuple"),
        (ErlangCons head_4 (ErlangCons term_1 ErlangEmptyList))])
erlps__bytes_to_raw_string__2 [n_0, term_1]
  | (weakGt n_0 (ErlangInt (DBI.fromInt 32))) =
  let   
    elem_14 =
      (ErlangFun 1
         let
           lambda_2 [i_4] =
             let   
               tup_el_9 =
                 (BIF.erlang__op_mult [(ErlangInt (DBI.fromInt 32)), i_4])
             in let
               tup_el_7 = (ErlangTuple [(ErlangAtom "integer"), tup_el_9])
             in let tup_el_12 = (erlps__v__1 [(ErlangAtom "bin")])
             in
               (ErlangTuple
                  [(ErlangAtom "binop"), (ErlangAtom "!"), tup_el_7, tup_el_12])
           lambda_2 [arg_3] = (EXC.function_clause unit)
           lambda_2 args = (EXC.badarity (ErlangFun 1 lambda_2) args)
         in lambda_2)
  in let
    lop_15 =
      (BIF.erlang__op_plus [n_0, (ErlangInt (DBI.fromInt 31))])
  in let
    words_19 =
      (BIF.erlang__op_div_strict
         [lop_15, (ErlangInt (DBI.fromInt 32))])
  in let tup_el_24 = (erlps__v__1 [(ErlangAtom "bin")])
  in let head_29 = (ErlangTuple [(ErlangAtom "integer"), n_0])
  in let
    arg_35 =
      (BIF.erlang__op_minus [words_19, (ErlangInt (DBI.fromInt 1))])
  in let
    lc_src_33 =
      (BIF.do_remote_fun_call "Lists" "erlps__seq__2"
         [(ErlangInt (DBI.fromInt 0)), arg_35])
  in let
    tail_32 =
      (H.flmap
         (\ lc_39 ->
            let
              lc_ret_40 =
                (BIF.erlang__apply__2
                   [elem_14, (ErlangCons lc_39 ErlangEmptyList)])
            in (ErlangCons lc_ret_40 ErlangEmptyList))
         lc_src_33)
  in let
    tup_el_26 =
      (ErlangTuple
         [(ErlangAtom "tuple"), (ErlangCons head_29 tail_32)])
  in let head_23 = (ErlangTuple [tup_el_24, tup_el_26])
  in
    (ErlangTuple
       [(ErlangAtom "switch"), term_1,
        (ErlangCons head_23 ErlangEmptyList)])
erlps__bytes_to_raw_string__2 [arg_44, arg_45] =
  (EXC.function_clause unit)
erlps__bytes_to_raw_string__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)