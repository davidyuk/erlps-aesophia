module Aeso.Pretty(erlps__decls__1, erlps__decls__2,
                   erlps__decl__1, erlps__decl__2, erlps__expr__1,
                   erlps__expr__2, erlps__type__1, erlps__type__2) where
{-
This file has been autogenerated
DO NOT EDIT - Your changes WILL be overwritten
Use this code at your own risk - the authors are just a mischievous raccoon and a haskell devote
Erlscripten v0.1.0
-}

import Prelude
import Data.Array as DA
import Data.List as DL
import Data.Maybe as DM
import Data.Map as Map
import Data.Tuple as Tup
import Data.BigInt as DBI
import Erlang.Builtins as BIF
import Erlang.Binary as BIN
import Erlang.Helpers as H
import Erlang.Exception as EXC
import Erlang.Type (ErlangFun, ErlangTerm(..), weakCmp, weakEq,
                    weakNEq, weakLt, weakLeq, weakGeq, weakGt)
import Effect (Effect)
import Effect.Unsafe (unsafePerformEffect)
import Effect.Exception (throw)
import Partial.Unsafe (unsafePartial)


erlps__options__0 :: ErlangFun
erlps__options__0 [] =
  let
    case_0 = (BIF.erlang__get__1 [(ErlangAtom "aeso_pretty_opts")])
  in
    case case_0 of
      (ErlangAtom "undefined") -> ErlangEmptyList
      opts_2 -> opts_2
erlps__options__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__option__2 :: ErlangFun
erlps__option__2 [key_0, default_1] =
  let arg_3 = (erlps__options__0 [])
  in
    (BIF.do_remote_fun_call "Proplists" "erlps__get_value__3"
       [key_0, arg_3, default_1])
erlps__option__2 [arg_5, arg_6] = (EXC.function_clause unit)
erlps__option__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__show_generated__0 :: ErlangFun
erlps__show_generated__0 [] =
  (erlps__option__2
     [(ErlangAtom "show_generated"), (ErlangAtom "false")])
erlps__show_generated__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__indent__0 :: ErlangFun
erlps__indent__0 [] =
  (erlps__option__2
     [(ErlangAtom "indent"), (ErlangInt (DBI.fromInt 2))])
erlps__indent__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__with_options__2 :: ErlangFun
erlps__with_options__2 [options_0, fun_1] =
  let   
    _ =
      (BIF.erlang__put__2 [(ErlangAtom "aeso_pretty_opts"), options_0])
  in let res_5 = (BIF.erlang__apply__2 [fun_1, ErlangEmptyList])
  in let
    _ = (BIF.erlang__erase__1 [(ErlangAtom "aeso_pretty_opts")])
  in res_5
erlps__with_options__2 [arg_7, arg_8] =
  (EXC.function_clause unit)
erlps__with_options__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__par__1 :: ErlangFun
erlps__par__1 [ds_0] =
  let arg_2 = (erlps__indent__0 [])
  in (erlps__par__2 [ds_0, arg_2])
erlps__par__1 [arg_3] = (EXC.function_clause unit)
erlps__par__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__par__2 :: ErlangFun
erlps__par__2 [(ErlangEmptyList), _] =
  (BIF.do_remote_fun_call "Prettypr" "erlps__empty__0" [])
erlps__par__2 [ds_0, n_1] =
  (BIF.do_remote_fun_call "Prettypr" "erlps__par__2" [ds_0, n_1])
erlps__par__2 [arg_4, arg_5] = (EXC.function_clause unit)
erlps__par__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__follow__3 :: ErlangFun
erlps__follow__3 [a_0, b_1, n_2] =
  let
    head_6 =
      (BIF.do_remote_fun_call "Prettypr" "erlps__nest__2" [n_2, b_1])
  in
    (BIF.do_remote_fun_call "Prettypr" "erlps__sep__1"
       [(ErlangCons a_0 (ErlangCons head_6 ErlangEmptyList))])
erlps__follow__3 [arg_10, arg_11, arg_12] =
  (EXC.function_clause unit)
erlps__follow__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__follow__2 :: ErlangFun
erlps__follow__2 [a_0, b_1] =
  let arg_4 = (erlps__indent__0 [])
  in (erlps__follow__3 [a_0, b_1, arg_4])
erlps__follow__2 [arg_5, arg_6] = (EXC.function_clause unit)
erlps__follow__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__above__1 :: ErlangFun
erlps__above__1 [(ErlangEmptyList)] =
  (BIF.do_remote_fun_call "Prettypr" "erlps__empty__0" [])
erlps__above__1 [(ErlangCons d_0 (ErlangEmptyList))] = d_0
erlps__above__1 [(ErlangCons d_0 ds_1)] =
  let
    arg_2 =
      (ErlangFun 2
         let
           lambda_3 [x_6, y_7] =
             (BIF.do_remote_fun_call "Prettypr" "erlps__above__2" [y_7, x_6])
           lambda_3 [arg_4, arg_5] = (EXC.function_clause unit)
           lambda_3 args = (EXC.badarity (ErlangFun 2 lambda_3) args)
         in lambda_3)
  in
    (BIF.do_remote_fun_call "Lists" "erlps__foldl__3"
       [arg_2, d_0, ds_1])
erlps__above__1 [arg_12] = (EXC.function_clause unit)
erlps__above__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__beside__1 :: ErlangFun
erlps__beside__1 [(ErlangEmptyList)] =
  (BIF.do_remote_fun_call "Prettypr" "erlps__empty__0" [])
erlps__beside__1 [(ErlangCons d_0 (ErlangEmptyList))] = d_0
erlps__beside__1 [(ErlangCons d_0 ds_1)] =
  let
    arg_2 =
      (ErlangFun 2
         let
           lambda_3 [x_6, y_7] =
             (BIF.do_remote_fun_call "Prettypr" "erlps__beside__2" [y_7, x_6])
           lambda_3 [arg_4, arg_5] = (EXC.function_clause unit)
           lambda_3 args = (EXC.badarity (ErlangFun 2 lambda_3) args)
         in lambda_3)
  in
    (BIF.do_remote_fun_call "Lists" "erlps__foldl__3"
       [arg_2, d_0, ds_1])
erlps__beside__1 [arg_12] = (EXC.function_clause unit)
erlps__beside__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__hsep__1 :: ErlangFun
erlps__hsep__1 [ds_0] =
  let    arg_3 = (H.make_string " ")
  in let
    arg_2 =
      (BIF.do_remote_fun_call "Prettypr" "erlps__text__1" [arg_3])
  in let
    arg_4 =
      (H.flmap
         (\ lc_7 ->
            let   
              rop_10 = (BIF.do_remote_fun_call "Prettypr" "erlps__empty__0" [])
            in let cond_8 = (BIF.erlang__op_neq [lc_7, rop_10])
            in
              case cond_8 of
                (ErlangAtom "true") -> (ErlangCons lc_7 ErlangEmptyList)
                _ -> ErlangEmptyList)
         ds_0)
  in let arg_1 = (erlps__punctuate__2 [arg_2, arg_4])
  in (erlps__beside__1 [arg_1])
erlps__hsep__1 [arg_12] = (EXC.function_clause unit)
erlps__hsep__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__hsep__2 :: ErlangFun
erlps__hsep__2 [d1_0, d2_1] =
  (erlps__hsep__1
     [(ErlangCons d1_0 (ErlangCons d2_1 ErlangEmptyList))])
erlps__hsep__2 [arg_7, arg_8] = (EXC.function_clause unit)
erlps__hsep__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__punctuate__2 :: ErlangFun
erlps__punctuate__2 [_sep_0, (ErlangEmptyList)] = ErlangEmptyList
erlps__punctuate__2 [_sep_0, (ErlangCons d_1 (ErlangEmptyList))]
  =
  (ErlangCons d_1 ErlangEmptyList)
erlps__punctuate__2 [sep_0, (ErlangCons d_1 ds_2)] =
  let   
    head_3 =
      (BIF.do_remote_fun_call "Prettypr" "erlps__beside__2"
         [d_1, sep_0])
  in let tail_6 = (erlps__punctuate__2 [sep_0, ds_2])
  in (ErlangCons head_3 tail_6)
erlps__punctuate__2 [arg_9, arg_10] = (EXC.function_clause unit)
erlps__punctuate__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__paren__1 :: ErlangFun
erlps__paren__1 [d_0] =
  let    arg_3 = (H.make_string "(")
  in let
    head_2 =
      (BIF.do_remote_fun_call "Prettypr" "erlps__text__1" [arg_3])
  in let arg_8 = (H.make_string ")")
  in let
    head_7 =
      (BIF.do_remote_fun_call "Prettypr" "erlps__text__1" [arg_8])
  in
    (erlps__beside__1
       [(ErlangCons head_2
           (ErlangCons d_0 (ErlangCons head_7 ErlangEmptyList)))])
erlps__paren__1 [arg_10] = (EXC.function_clause unit)
erlps__paren__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__paren__2 :: ErlangFun
erlps__paren__2 [(ErlangAtom "false"), d_0] = d_0
erlps__paren__2 [(ErlangAtom "true"), d_0] =
  (erlps__paren__1 [d_0])
erlps__paren__2 [arg_2, arg_3] = (EXC.function_clause unit)
erlps__paren__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__indent__1 :: ErlangFun
erlps__indent__1 [d_0] =
  let arg_1 = (erlps__indent__0 [])
  in
    (BIF.do_remote_fun_call "Prettypr" "erlps__nest__2" [arg_1, d_0])
erlps__indent__1 [arg_3] = (EXC.function_clause unit)
erlps__indent__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__block__2 :: ErlangFun
erlps__block__2 [header_0, body_1] =
  let head_5 = (erlps__indent__1 [body_1])
  in
    (BIF.do_remote_fun_call "Prettypr" "erlps__sep__1"
       [(ErlangCons header_0 (ErlangCons head_5 ErlangEmptyList))])
erlps__block__2 [arg_8, arg_9] = (EXC.function_clause unit)
erlps__block__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__comma_brackets__3 :: ErlangFun
erlps__comma_brackets__3 [open_0, close_1, ds_2] =
  let   
    head_4 =
      (BIF.do_remote_fun_call "Prettypr" "erlps__text__1" [open_0])
  in let arg_10 = (H.make_string ",")
  in let
    arg_9 =
      (BIF.do_remote_fun_call "Prettypr" "erlps__text__1" [arg_10])
  in let arg_8 = (erlps__punctuate__2 [arg_9, ds_2])
  in let
    head_7 = (erlps__par__2 [arg_8, (ErlangInt (DBI.fromInt 0))])
  in let
    head_14 =
      (BIF.do_remote_fun_call "Prettypr" "erlps__text__1" [close_1])
  in
    (erlps__beside__1
       [(ErlangCons head_4
           (ErlangCons head_7 (ErlangCons head_14 ErlangEmptyList)))])
erlps__comma_brackets__3 [arg_17, arg_18, arg_19] =
  (EXC.function_clause unit)
erlps__comma_brackets__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__tuple__1 :: ErlangFun
erlps__tuple__1 [ds_0] =
  let    arg_1 = (H.make_string "(")
  in let arg_2 = (H.make_string ")")
  in (erlps__comma_brackets__3 [arg_1, arg_2, ds_0])
erlps__tuple__1 [arg_4] = (EXC.function_clause unit)
erlps__tuple__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__list__1 :: ErlangFun
erlps__list__1 [ds_0] =
  let    arg_1 = (H.make_string "[")
  in let arg_2 = (H.make_string "]")
  in (erlps__comma_brackets__3 [arg_1, arg_2, ds_0])
erlps__list__1 [arg_4] = (EXC.function_clause unit)
erlps__list__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__record__1 :: ErlangFun
erlps__record__1 [ds_0] =
  let    arg_1 = (H.make_string "{")
  in let arg_2 = (H.make_string "}")
  in (erlps__comma_brackets__3 [arg_1, arg_2, ds_0])
erlps__record__1 [arg_4] = (EXC.function_clause unit)
erlps__record__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__equals__2 :: ErlangFun
erlps__equals__2 [a_0, b_1] =
  let    arg_5 = (H.make_string "=")
  in let
    arg_4 =
      (BIF.do_remote_fun_call "Prettypr" "erlps__text__1" [arg_5])
  in let arg_2 = (erlps__hsep__2 [a_0, arg_4])
  in (erlps__follow__2 [arg_2, b_1])
erlps__equals__2 [arg_7, arg_8] = (EXC.function_clause unit)
erlps__equals__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__typed__2 :: ErlangFun
erlps__typed__2 [a_0, type_1] =
  let   
    lop_4 =
      (BIF.do_remote_fun_call "Aeso.Syntax" "erlps__get_ann__2"
         [(ErlangAtom "origin"), type_1])
  in let lop_3 = (BIF.erlang__op_eq [lop_4, (ErlangAtom "system")])
  in let
    case_2 =
      case lop_3 of
        (ErlangAtom "false") -> (ErlangAtom "false")
        (ErlangAtom "true") ->
          let op_arg_8 = (erlps__show_generated__0 [])
          in (BIF.erlang__not__1 [op_arg_8])
        _ -> (EXC.badarg1 lop_3)
  in
    case case_2 of
      (ErlangAtom "true") -> a_0
      (ErlangAtom "false") ->
        let    arg_12 = (H.make_string ":")
        in let
          arg_11 =
            (BIF.do_remote_fun_call "Prettypr" "erlps__text__1" [arg_12])
        in let arg_9 = (erlps__hsep__2 [a_0, arg_11])
        in let arg_13 = (erlps__type__1 [type_1])
        in (erlps__follow__2 [arg_9, arg_13])
      something_else -> (EXC.case_clause something_else)
erlps__typed__2 [arg_15, arg_16] = (EXC.function_clause unit)
erlps__typed__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__decls__2 :: ErlangFun
erlps__decls__2 [ds_0, options_1] =
  let
    arg_3 =
      (ErlangFun 0
         let
           lambda_4 [] = (erlps__decls__1 [ds_0])
           lambda_4 [] = (EXC.function_clause unit)
           lambda_4 args = (EXC.badarity (ErlangFun 0 lambda_4) args)
         in lambda_4)
  in (erlps__with_options__2 [options_1, arg_3])
erlps__decls__2 [arg_6, arg_7] = (EXC.function_clause unit)
erlps__decls__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__decls__1 :: ErlangFun
erlps__decls__1 [ds_0] =
  let
    arg_1 =
      (H.flmap
         (\ lc_4 ->
            let lc_ret_5 = (erlps__decl__1 [lc_4])
            in (ErlangCons lc_ret_5 ErlangEmptyList))
         ds_0)
  in (erlps__above__1 [arg_1])
erlps__decls__1 [arg_7] = (EXC.function_clause unit)
erlps__decls__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__decl__2 :: ErlangFun
erlps__decl__2 [d_0, options_1] =
  let
    arg_3 =
      (ErlangFun 0
         let
           lambda_4 [] = (erlps__decl__1 [d_0])
           lambda_4 [] = (EXC.function_clause unit)
           lambda_4 args = (EXC.badarity (ErlangFun 0 lambda_4) args)
         in lambda_4)
  in (erlps__with_options__2 [options_1, arg_3])
erlps__decl__2 [arg_6, arg_7] = (EXC.function_clause unit)
erlps__decl__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__decl__1 :: ErlangFun
erlps__decl__1 [(ErlangTuple [(ErlangAtom "contract"), attrs_0,
                              c_1, ds_2])]
  =
  let   
    mod_8 =
      (ErlangFun 1
         let
           lambda_3 [(ErlangTuple [mod_5, (ErlangAtom "true")])]
             | (weakEq mod_5 (ErlangAtom "payable")) =
             let arg_6 = (BIF.erlang__atom_to_list__1 [mod_5])
             in (BIF.do_remote_fun_call "Prettypr" "erlps__text__1" [arg_6])
           lambda_3 [_] =
             (BIF.do_remote_fun_call "Prettypr" "erlps__empty__0" [])
           lambda_3 [arg_4] = (EXC.function_clause unit)
           lambda_3 args = (EXC.badarity (ErlangFun 1 lambda_3) args)
         in lambda_3)
  in let
    lop_12 =
      (BIF.do_remote_fun_call "Lists" "erlps__map__2" [mod_8, attrs_0])
  in let arg_17 = (H.make_string "contract")
  in let
    head_16 =
      (BIF.do_remote_fun_call "Prettypr" "erlps__text__1" [arg_17])
  in let
    arg_11 =
      (BIF.erlang__op_append
         [lop_12, (ErlangCons head_16 ErlangEmptyList)])
  in let arg_10 = (erlps__hsep__1 [arg_11])
  in let arg_20 = (erlps__name__1 [c_1])
  in let arg_23 = (H.make_string "=")
  in let
    arg_22 =
      (BIF.do_remote_fun_call "Prettypr" "erlps__text__1" [arg_23])
  in let arg_19 = (erlps__hsep__2 [arg_20, arg_22])
  in let arg_9 = (erlps__follow__2 [arg_10, arg_19])
  in let arg_24 = (erlps__decls__1 [ds_2])
  in (erlps__block__2 [arg_9, arg_24])
erlps__decl__1 [(ErlangTuple [(ErlangAtom "namespace"), _, c_0,
                              ds_1])]
  =
  let    arg_4 = (H.make_string "namespace")
  in let
    arg_3 =
      (BIF.do_remote_fun_call "Prettypr" "erlps__text__1" [arg_4])
  in let arg_6 = (erlps__name__1 [c_0])
  in let arg_9 = (H.make_string "=")
  in let
    arg_8 =
      (BIF.do_remote_fun_call "Prettypr" "erlps__text__1" [arg_9])
  in let arg_5 = (erlps__hsep__2 [arg_6, arg_8])
  in let arg_2 = (erlps__follow__2 [arg_3, arg_5])
  in let arg_10 = (erlps__decls__1 [ds_1])
  in (erlps__block__2 [arg_2, arg_10])
erlps__decl__1 [(ErlangTuple [(ErlangAtom "pragma"), _,
                              pragma_0])]
  =
  (erlps__pragma__1 [pragma_0])
erlps__decl__1 [(ErlangTuple [(ErlangAtom "type_decl"), _, t_0,
                              vars_1])]
  =
  (erlps__typedecl__3 [(ErlangAtom "alias_t"), t_0, vars_1])
erlps__decl__1 [(ErlangTuple [(ErlangAtom "type_def"), _, t_0,
                              vars_1, def_2])]
  =
  let   
    kind_5 =
      (BIF.erlang__element__2 [(ErlangInt (DBI.fromInt 1)), def_2])
  in let arg_6 = (erlps__typedecl__3 [kind_5, t_0, vars_1])
  in let arg_10 = (erlps__typedef__1 [def_2])
  in (erlps__equals__2 [arg_6, arg_10])
erlps__decl__1 [(ErlangTuple [(ErlangAtom "fun_decl"), ann_0,
                              f_1, t_2])]
  =
  let   
    mod_16 =
      (ErlangFun 1
         let
           lambda_3 [(ErlangTuple [mod_5, (ErlangAtom "true")])]
             | ((ErlangAtom "true") ==
                  (H.falsifyErrors
                     (\ _ ->
                        let   
                          lop_7 =
                            (BIF.erlang__op_eq [mod_5, (ErlangAtom "private")])
                        in let
                          lop_6 =
                            case lop_7 of
                              (ErlangAtom "true") -> (ErlangAtom "true")
                              (ErlangAtom "false") ->
                                (BIF.erlang__op_eq
                                   [mod_5, (ErlangAtom "stateful")])
                              _ -> (EXC.badarg1 lop_7)
                        in
                          case lop_6 of
                            (ErlangAtom "true") -> (ErlangAtom "true")
                            (ErlangAtom "false") ->
                              (BIF.erlang__op_eq
                                 [mod_5, (ErlangAtom "payable")])
                            _ -> (EXC.badarg1 lop_6)))) =
             let arg_14 = (BIF.erlang__atom_to_list__1 [mod_5])
             in (BIF.do_remote_fun_call "Prettypr" "erlps__text__1" [arg_14])
           lambda_3 [_] =
             (BIF.do_remote_fun_call "Prettypr" "erlps__empty__0" [])
           lambda_3 [arg_4] = (EXC.function_clause unit)
           lambda_3 args = (EXC.badarity (ErlangFun 1 lambda_3) args)
         in lambda_3)
  in let
    case_17 =
      (BIF.do_remote_fun_call "Aeso.Syntax" "erlps__get_ann__3"
         [(ErlangAtom "entrypoint"), ann_0, (ErlangAtom "false")])
  in let
    fun_23 =
      case case_17 of
        (ErlangAtom "true") ->
          let arg_21 = (H.make_string "entrypoint")
          in (BIF.do_remote_fun_call "Prettypr" "erlps__text__1" [arg_21])
        (ErlangAtom "false") ->
          let arg_22 = (H.make_string "function")
          in (BIF.do_remote_fun_call "Prettypr" "erlps__text__1" [arg_22])
        something_else -> (EXC.case_clause something_else)
  in let
    lop_25 =
      (BIF.do_remote_fun_call "Lists" "erlps__map__2" [mod_16, ann_0])
  in let arg_32 = (erlps__name__1 [f_1])
  in let head_31 = (erlps__typed__2 [arg_32, t_2])
  in let
    arg_24 =
      (BIF.erlang__op_append
         [lop_25,
          (ErlangCons fun_23 (ErlangCons head_31 ErlangEmptyList))])
  in (erlps__hsep__1 [arg_24])
erlps__decl__1 [d_1@(ErlangTuple [(ErlangAtom "letfun"), attrs_0,
                                  _, _, _, _])]
  =
  let   
    mod_15 =
      (ErlangFun 1
         let
           lambda_2 [(ErlangTuple [mod_4, (ErlangAtom "true")])]
             | ((ErlangAtom "true") ==
                  (H.falsifyErrors
                     (\ _ ->
                        let   
                          lop_6 =
                            (BIF.erlang__op_eq [mod_4, (ErlangAtom "private")])
                        in let
                          lop_5 =
                            case lop_6 of
                              (ErlangAtom "true") -> (ErlangAtom "true")
                              (ErlangAtom "false") ->
                                (BIF.erlang__op_eq
                                   [mod_4, (ErlangAtom "stateful")])
                              _ -> (EXC.badarg1 lop_6)
                        in
                          case lop_5 of
                            (ErlangAtom "true") -> (ErlangAtom "true")
                            (ErlangAtom "false") ->
                              (BIF.erlang__op_eq
                                 [mod_4, (ErlangAtom "payable")])
                            _ -> (EXC.badarg1 lop_5)))) =
             let arg_13 = (BIF.erlang__atom_to_list__1 [mod_4])
             in (BIF.do_remote_fun_call "Prettypr" "erlps__text__1" [arg_13])
           lambda_2 [_] =
             (BIF.do_remote_fun_call "Prettypr" "erlps__empty__0" [])
           lambda_2 [arg_3] = (EXC.function_clause unit)
           lambda_2 args = (EXC.badarity (ErlangFun 1 lambda_2) args)
         in lambda_2)
  in let
    case_16 =
      (BIF.do_remote_fun_call "Aeso.Syntax" "erlps__get_ann__3"
         [(ErlangAtom "entrypoint"), attrs_0, (ErlangAtom "false")])
  in let
    fun_20 =
      case case_16 of
        (ErlangAtom "true") -> (H.make_string "entrypoint")
        (ErlangAtom "false") -> (H.make_string "function")
        something_else -> (EXC.case_clause something_else)
  in let
    lop_22 =
      (BIF.do_remote_fun_call "Lists" "erlps__map__2"
         [mod_15, attrs_0])
  in let head_26 = (erlps__letdecl__2 [fun_20, d_1])
  in let
    arg_21 =
      (BIF.erlang__op_append
         [lop_22, (ErlangCons head_26 ErlangEmptyList)])
  in (erlps__hsep__1 [arg_21])
erlps__decl__1 [(ErlangTuple [(ErlangAtom "fun_clauses"), ann_0,
                              name_1, type_2, clauses_3])]
  =
  let   
    head_6 =
      (ErlangTuple [(ErlangAtom "fun_decl"), ann_0, name_1, type_2])
  in let
    arg_4 =
      (H.flmap
         (\ lc_13 ->
            let lc_ret_14 = (erlps__decl__1 [lc_13])
            in (ErlangCons lc_ret_14 ErlangEmptyList))
         (ErlangCons head_6 clauses_3))
  in (erlps__above__1 [arg_4])
erlps__decl__1 [d_0@(ErlangTuple [(ErlangAtom "letval"), _, _,
                                  _])]
  =
  let arg_1 = (H.make_string "let")
  in (erlps__letdecl__2 [arg_1, d_0])
erlps__decl__1 [(ErlangTuple [(ErlangAtom "block"), _, ds_0])] =
  let
    arg_1 =
      (H.flmap
         (\ lc_4 ->
            let lc_ret_5 = (erlps__decl__1 [lc_4])
            in (ErlangCons lc_ret_5 ErlangEmptyList))
         ds_0)
  in (erlps__above__1 [arg_1])
erlps__decl__1 [arg_7] = (EXC.function_clause unit)
erlps__decl__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__pragma__1 :: ErlangFun
erlps__pragma__1 [(ErlangTuple [(ErlangAtom "compiler"), op_0,
                                ver_1])]
  =
  let    lop_3 = (H.make_string "@compiler ")
  in let lop_5 = (BIF.erlang__atom_to_list__1 [op_0])
  in let lop_8 = (H.make_string " ")
  in let
    arg_10 =
      (H.flmap
         (\ lc_13 ->
            let lc_ret_14 = (BIF.erlang__integer_to_list__1 [lc_13])
            in (ErlangCons lc_ret_14 ErlangEmptyList))
         ver_1)
  in let arg_16 = (H.make_string ".")
  in let
    rop_9 =
      (BIF.do_remote_fun_call "String" "erlps__join__2"
         [arg_10, arg_16])
  in let rop_7 = (BIF.erlang__op_append [lop_8, rop_9])
  in let rop_4 = (BIF.erlang__op_append [lop_5, rop_7])
  in let arg_2 = (BIF.erlang__op_append [lop_3, rop_4])
  in (BIF.do_remote_fun_call "Prettypr" "erlps__text__1" [arg_2])
erlps__pragma__1 [arg_17] = (EXC.function_clause unit)
erlps__pragma__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__expr__2 :: ErlangFun
erlps__expr__2 [e_0, options_1] =
  let
    arg_3 =
      (ErlangFun 0
         let
           lambda_4 [] = (erlps__expr__1 [e_0])
           lambda_4 [] = (EXC.function_clause unit)
           lambda_4 args = (EXC.badarity (ErlangFun 0 lambda_4) args)
         in lambda_4)
  in (erlps__with_options__2 [options_1, arg_3])
erlps__expr__2 [arg_6, arg_7] = (EXC.function_clause unit)
erlps__expr__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__expr__1 :: ErlangFun
erlps__expr__1 [e_0] =
  (erlps__expr_p__2 [(ErlangInt (DBI.fromInt 0)), e_0])
erlps__expr__1 [arg_3] = (EXC.function_clause unit)
erlps__expr__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__name__1 :: ErlangFun
erlps__name__1 [(ErlangTuple [(ErlangAtom "id"), _, name_0])] =
  (BIF.do_remote_fun_call "Prettypr" "erlps__text__1" [name_0])
erlps__name__1 [(ErlangTuple [(ErlangAtom "con"), _, name_0])] =
  (BIF.do_remote_fun_call "Prettypr" "erlps__text__1" [name_0])
erlps__name__1 [(ErlangTuple [(ErlangAtom "qid"), _, names_0])] =
  let    arg_3 = (H.make_string ".")
  in let
    arg_1 =
      (BIF.do_remote_fun_call "String" "erlps__join__2"
         [names_0, arg_3])
  in (BIF.do_remote_fun_call "Prettypr" "erlps__text__1" [arg_1])
erlps__name__1 [(ErlangTuple [(ErlangAtom "qcon"), _, names_0])]
  =
  let    arg_3 = (H.make_string ".")
  in let
    arg_1 =
      (BIF.do_remote_fun_call "String" "erlps__join__2"
         [names_0, arg_3])
  in (BIF.do_remote_fun_call "Prettypr" "erlps__text__1" [arg_1])
erlps__name__1 [(ErlangTuple [(ErlangAtom "tvar"), _, name_0])] =
  (BIF.do_remote_fun_call "Prettypr" "erlps__text__1" [name_0])
erlps__name__1 [(ErlangTuple [(ErlangAtom "typed"), _, name_0,
                              _])]
  =
  (erlps__name__1 [name_0])
erlps__name__1 [arg_2] = (EXC.function_clause unit)
erlps__name__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__letdecl__2 :: ErlangFun
erlps__letdecl__2 [let_0,
                   (ErlangTuple [(ErlangAtom "letval"), _, p_1, e_2])]
  =
  let   
    head_6 =
      (BIF.do_remote_fun_call "Prettypr" "erlps__text__1" [let_0])
  in let head_9 = (erlps__expr__1 [p_1])
  in let arg_13 = (H.make_string "=")
  in let
    head_12 =
      (BIF.do_remote_fun_call "Prettypr" "erlps__text__1" [arg_13])
  in let
    arg_4 =
      (erlps__hsep__1
         [(ErlangCons head_6
             (ErlangCons head_9 (ErlangCons head_12 ErlangEmptyList)))])
  in
    (erlps__block_expr__3 [(ErlangInt (DBI.fromInt 0)), arg_4, e_2])
erlps__letdecl__2 [let_0,
                   (ErlangTuple [(ErlangAtom "letfun"), _, f_1, args_2, t_3,
                                 e_4])]
  =
  let   
    head_8 =
      (BIF.do_remote_fun_call "Prettypr" "erlps__text__1" [let_0])
  in let arg_13 = (erlps__name__1 [f_1])
  in let
    arg_16 =
      (ErlangTuple [(ErlangAtom "tuple"), ErlangEmptyList, args_2])
  in let arg_15 = (erlps__expr__1 [arg_16])
  in let
    arg_12 =
      (BIF.do_remote_fun_call "Prettypr" "erlps__beside__2"
         [arg_13, arg_15])
  in let head_11 = (erlps__typed__2 [arg_12, t_3])
  in let arg_23 = (H.make_string "=")
  in let
    head_22 =
      (BIF.do_remote_fun_call "Prettypr" "erlps__text__1" [arg_23])
  in let
    arg_6 =
      (erlps__hsep__1
         [(ErlangCons head_8
             (ErlangCons head_11 (ErlangCons head_22 ErlangEmptyList)))])
  in
    (erlps__block_expr__3 [(ErlangInt (DBI.fromInt 0)), arg_6, e_4])
erlps__letdecl__2 [arg_26, arg_27] = (EXC.function_clause unit)
erlps__letdecl__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__args__1 :: ErlangFun
erlps__args__1 [args_0] =
  let    arg_2 = (ErlangFun 1 erlps__arg__1)
  in let
    arg_1 =
      (BIF.do_remote_fun_call "Lists" "erlps__map__2" [arg_2, args_0])
  in (erlps__tuple__1 [arg_1])
erlps__args__1 [arg_4] = (EXC.function_clause unit)
erlps__args__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__arg__1 :: ErlangFun
erlps__arg__1 [(ErlangTuple [(ErlangAtom "arg"), _, x_0, t_1])] =
  let arg_2 = (erlps__name__1 [x_0])
  in (erlps__typed__2 [arg_2, t_1])
erlps__arg__1 [arg_5] = (EXC.function_clause unit)
erlps__arg__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__typedecl__3 :: ErlangFun
erlps__typedecl__3 [kind_0, t_1, vars_2] =
  let
    kw_7 =
      case kind_0 of
        (ErlangAtom "alias_t") ->
          let arg_4 = (H.make_string "type")
          in (BIF.do_remote_fun_call "Prettypr" "erlps__text__1" [arg_4])
        (ErlangAtom "record_t") ->
          let arg_5 = (H.make_string "record")
          in (BIF.do_remote_fun_call "Prettypr" "erlps__text__1" [arg_5])
        (ErlangAtom "variant_t") ->
          let arg_6 = (H.make_string "datatype")
          in (BIF.do_remote_fun_call "Prettypr" "erlps__text__1" [arg_6])
        something_else -> (EXC.case_clause something_else)
  in
    case vars_2 of
      (ErlangEmptyList) ->
        let arg_10 = (erlps__name__1 [t_1])
        in (erlps__hsep__2 [kw_7, arg_10])
      _ ->
        let    arg_14 = (erlps__name__1 [t_1])
        in let arg_12 = (erlps__hsep__2 [kw_7, arg_14])
        in let arg_18 = (ErlangFun 1 erlps__name__1)
        in let
          arg_17 =
            (BIF.do_remote_fun_call "Lists" "erlps__map__2" [arg_18, vars_2])
        in let arg_16 = (erlps__tuple__1 [arg_17])
        in
          (BIF.do_remote_fun_call "Prettypr" "erlps__beside__2"
             [arg_12, arg_16])
erlps__typedecl__3 [arg_20, arg_21, arg_22] =
  (EXC.function_clause unit)
erlps__typedecl__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__typedef__1 :: ErlangFun
erlps__typedef__1 [(ErlangTuple [(ErlangAtom "alias_t"),
                                 type_0])]
  =
  (erlps__type__1 [type_0])
erlps__typedef__1 [(ErlangTuple [(ErlangAtom "record_t"),
                                 fields_0])]
  =
  let    arg_2 = (ErlangFun 1 erlps__field_t__1)
  in let
    arg_1 =
      (BIF.do_remote_fun_call "Lists" "erlps__map__2"
         [arg_2, fields_0])
  in (erlps__record__1 [arg_1])
erlps__typedef__1 [(ErlangTuple [(ErlangAtom "variant_t"),
                                 constructors_0])]
  =
  let    arg_3 = (H.make_string " |")
  in let
    arg_2 =
      (BIF.do_remote_fun_call "Prettypr" "erlps__text__1" [arg_3])
  in let arg_5 = (ErlangFun 1 erlps__constructor_t__1)
  in let
    arg_4 =
      (BIF.do_remote_fun_call "Lists" "erlps__map__2"
         [arg_5, constructors_0])
  in let arg_1 = (erlps__punctuate__2 [arg_2, arg_4])
  in (erlps__par__1 [arg_1])
erlps__typedef__1 [arg_7] = (EXC.function_clause unit)
erlps__typedef__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__constructor_t__1 :: ErlangFun
erlps__constructor_t__1 [(ErlangTuple [(ErlangAtom "constr_t"),
                                       _, c_0, (ErlangEmptyList)])]
  =
  (erlps__name__1 [c_0])
erlps__constructor_t__1 [(ErlangTuple [(ErlangAtom "constr_t"),
                                       _, c_0, args_1])]
  =
  let    arg_2 = (erlps__name__1 [c_0])
  in let arg_4 = (erlps__args_type__1 [args_1])
  in
    (BIF.do_remote_fun_call "Prettypr" "erlps__beside__2"
       [arg_2, arg_4])
erlps__constructor_t__1 [arg_6] = (EXC.function_clause unit)
erlps__constructor_t__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__field_t__1 :: ErlangFun
erlps__field_t__1 [(ErlangTuple [(ErlangAtom "field_t"), _,
                                 name_0, type_1])]
  =
  let arg_2 = (erlps__name__1 [name_0])
  in (erlps__typed__2 [arg_2, type_1])
erlps__field_t__1 [arg_5] = (EXC.function_clause unit)
erlps__field_t__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__type__2 :: ErlangFun
erlps__type__2 [type_0, options_1] =
  let
    arg_3 =
      (ErlangFun 0
         let
           lambda_4 [] = (erlps__type__1 [type_0])
           lambda_4 [] = (EXC.function_clause unit)
           lambda_4 args = (EXC.badarity (ErlangFun 0 lambda_4) args)
         in lambda_4)
  in (erlps__with_options__2 [options_1, arg_3])
erlps__type__2 [arg_6, arg_7] = (EXC.function_clause unit)
erlps__type__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__type__1 :: ErlangFun
erlps__type__1 [(ErlangTuple [(ErlangAtom "fun_t"), _, named_0,
                              args_1, ret_2])]
  =
  let    arg_5 = (BIF.erlang__op_append [named_0, args_1])
  in let arg_4 = (erlps__args_type__1 [arg_5])
  in let arg_9 = (H.make_string "=>")
  in let
    arg_8 =
      (BIF.do_remote_fun_call "Prettypr" "erlps__text__1" [arg_9])
  in let arg_3 = (erlps__hsep__2 [arg_4, arg_8])
  in let arg_10 = (erlps__type__1 [ret_2])
  in (erlps__follow__2 [arg_3, arg_10])
erlps__type__1 [(ErlangTuple [(ErlangAtom "type_sig"), _,
                              named_0, args_1, ret_2])]
  =
  let    arg_5 = (BIF.erlang__op_append [named_0, args_1])
  in let arg_4 = (erlps__tuple_type__1 [arg_5])
  in let arg_9 = (H.make_string "=>")
  in let
    arg_8 =
      (BIF.do_remote_fun_call "Prettypr" "erlps__text__1" [arg_9])
  in let arg_3 = (erlps__hsep__2 [arg_4, arg_8])
  in let arg_10 = (erlps__type__1 [ret_2])
  in (erlps__follow__2 [arg_3, arg_10])
erlps__type__1 [(ErlangTuple [(ErlangAtom "app_t"), _, type_0,
                              (ErlangEmptyList)])]
  =
  (erlps__type__1 [type_0])
erlps__type__1 [(ErlangTuple [(ErlangAtom "app_t"), _, type_0,
                              args_1])]
  =
  let    arg_2 = (erlps__type__1 [type_0])
  in let arg_4 = (erlps__args_type__1 [args_1])
  in
    (BIF.do_remote_fun_call "Prettypr" "erlps__beside__2"
       [arg_2, arg_4])
erlps__type__1 [(ErlangTuple [(ErlangAtom "tuple_t"), _,
                              args_0])]
  =
  (erlps__tuple_type__1 [args_0])
erlps__type__1 [(ErlangTuple [(ErlangAtom "args_t"), _, args_0])]
  =
  (erlps__args_type__1 [args_0])
erlps__type__1 [(ErlangTuple [(ErlangAtom "bytes_t"), _,
                              (ErlangAtom "any")])]
  =
  let arg_0 = (H.make_string "bytes(_)")
  in (BIF.do_remote_fun_call "Prettypr" "erlps__text__1" [arg_0])
erlps__type__1 [(ErlangTuple [(ErlangAtom "bytes_t"), _, len_0])]
  =
  let    head_3 = (H.make_string "bytes(")
  in let head_7 = (H.make_string ")")
  in let
    arg_1 =
      (BIF.do_remote_fun_call "Lists" "erlps__concat__1"
         [(ErlangCons head_3
             (ErlangCons len_0 (ErlangCons head_7 ErlangEmptyList)))])
  in (BIF.do_remote_fun_call "Prettypr" "erlps__text__1" [arg_1])
erlps__type__1 [(ErlangTuple [(ErlangAtom "named_arg_t"), _,
                              name_0, type_1, _default_2])]
  =
  let arg_3 = (erlps__name__1 [name_0])
  in (erlps__typed__2 [arg_3, type_1])
erlps__type__1 [r_0@(ErlangTuple [(ErlangAtom "record_t"), _])] =
  (erlps__typedef__1 [r_0])
erlps__type__1 [t_0@(ErlangTuple [(ErlangAtom "id"), _, _])] =
  (erlps__name__1 [t_0])
erlps__type__1 [t_0@(ErlangTuple [(ErlangAtom "qid"), _, _])] =
  (erlps__name__1 [t_0])
erlps__type__1 [t_0@(ErlangTuple [(ErlangAtom "con"), _, _])] =
  (erlps__name__1 [t_0])
erlps__type__1 [t_0@(ErlangTuple [(ErlangAtom "qcon"), _, _])] =
  (erlps__name__1 [t_0])
erlps__type__1 [t_0@(ErlangTuple [(ErlangAtom "tvar"), _, _])] =
  (erlps__name__1 [t_0])
erlps__type__1 [arg_2] = (EXC.function_clause unit)
erlps__type__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__args_type__1 :: ErlangFun
erlps__args_type__1 [args_0] =
  let    arg_2 = (ErlangFun 1 erlps__type__1)
  in let
    arg_1 =
      (BIF.do_remote_fun_call "Lists" "erlps__map__2" [arg_2, args_0])
  in (erlps__tuple__1 [arg_1])
erlps__args_type__1 [arg_4] = (EXC.function_clause unit)
erlps__args_type__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__tuple_type__1 :: ErlangFun
erlps__tuple_type__1 [(ErlangEmptyList)] =
  let arg_0 = (H.make_string "unit")
  in (BIF.do_remote_fun_call "Prettypr" "erlps__text__1" [arg_0])
erlps__tuple_type__1 [factors_0] =
  let    arg_3 = (H.make_string "(")
  in let
    head_2 =
      (BIF.do_remote_fun_call "Prettypr" "erlps__text__1" [arg_3])
  in let arg_8 = (H.make_string " *")
  in let
    arg_7 =
      (BIF.do_remote_fun_call "Prettypr" "erlps__text__1" [arg_8])
  in let arg_10 = (ErlangFun 1 erlps__type__1)
  in let
    arg_9 =
      (BIF.do_remote_fun_call "Lists" "erlps__map__2"
         [arg_10, factors_0])
  in let arg_6 = (erlps__punctuate__2 [arg_7, arg_9])
  in let
    head_5 = (erlps__par__2 [arg_6, (ErlangInt (DBI.fromInt 0))])
  in let arg_15 = (H.make_string ")")
  in let
    head_14 =
      (BIF.do_remote_fun_call "Prettypr" "erlps__text__1" [arg_15])
  in
    (erlps__beside__1
       [(ErlangCons head_2
           (ErlangCons head_5 (ErlangCons head_14 ErlangEmptyList)))])
erlps__tuple_type__1 [arg_17] = (EXC.function_clause unit)
erlps__tuple_type__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__arg_expr__1 :: ErlangFun
erlps__arg_expr__1 [(ErlangTuple [(ErlangAtom "named_arg"), _,
                                  name_0, e_1])]
  =
  let    arg_3 = (erlps__expr__1 [name_0])
  in let arg_6 = (H.make_string "=")
  in let
    arg_5 =
      (BIF.do_remote_fun_call "Prettypr" "erlps__text__1" [arg_6])
  in let arg_2 = (erlps__hsep__2 [arg_3, arg_5])
  in let arg_7 = (erlps__expr__1 [e_1])
  in (erlps__follow__2 [arg_2, arg_7])
erlps__arg_expr__1 [e_0] = (erlps__expr__1 [e_0])
erlps__arg_expr__1 [arg_2] = (EXC.function_clause unit)
erlps__arg_expr__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__expr_p__2 :: ErlangFun
erlps__expr_p__2 [p_0,
                  (ErlangTuple [(ErlangAtom "lam"), _, args_1, e_2])]
  =
  let   
    arg_3 =
      (BIF.erlang__op_greater [p_0, (ErlangInt (DBI.fromInt 100))])
  in let arg_8 = (erlps__args__1 [args_1])
  in let arg_11 = (H.make_string "=>")
  in let
    arg_10 =
      (BIF.do_remote_fun_call "Prettypr" "erlps__text__1" [arg_11])
  in let arg_7 = (erlps__hsep__2 [arg_8, arg_10])
  in let
    arg_12 = (erlps__expr_p__2 [(ErlangInt (DBI.fromInt 100)), e_2])
  in let arg_6 = (erlps__follow__2 [arg_7, arg_12])
  in (erlps__paren__2 [arg_3, arg_6])
erlps__expr_p__2 [p_0,
                  if_5@(ErlangTuple [(ErlangAtom "if"), ann_1, cond_2, then_3,
                                     else_4])]
  =
  let
    format_8 =
      (BIF.do_remote_fun_call "Aeso.Syntax" "erlps__get_ann__2"
         [(ErlangAtom "format"), if_5])
  in
    case (ErlangAtom "true") of
      _ | (weakEq format_8 (ErlangAtom "?:")) ->
        let   
          arg_9 =
            (BIF.erlang__op_greater [p_0, (ErlangInt (DBI.fromInt 100))])
        in let
          arg_13 =
            (erlps__expr_p__2 [(ErlangInt (DBI.fromInt 200)), cond_2])
        in let arg_19 = (H.make_string "?")
        in let
          arg_18 =
            (BIF.do_remote_fun_call "Prettypr" "erlps__text__1" [arg_19])
        in let
          arg_20 =
            (erlps__expr_p__2 [(ErlangInt (DBI.fromInt 100)), then_3])
        in let arg_17 = (erlps__hsep__2 [arg_18, arg_20])
        in let arg_25 = (H.make_string ":")
        in let
          arg_24 =
            (BIF.do_remote_fun_call "Prettypr" "erlps__text__1" [arg_25])
        in let
          arg_26 =
            (erlps__expr_p__2 [(ErlangInt (DBI.fromInt 100)), else_4])
        in let arg_23 = (erlps__hsep__2 [arg_24, arg_26])
        in let
          arg_16 =
            (erlps__follow__3 [arg_17, arg_23, (ErlangInt (DBI.fromInt 0))])
        in let arg_12 = (erlps__follow__2 [arg_13, arg_16])
        in (erlps__paren__2 [arg_9, arg_12])
      _ ->
        let match_expr_33 = (erlps__get_elifs__1 [else_4])
        in
          case match_expr_33 of
            (ErlangTuple [elifs_31, else1_32]) ->
              let   
                head_37 =
                  (ErlangTuple [(ErlangAtom "if"), ann_1, cond_2, then_3])
              in let
                lc_src_35 =
                  (BIF.erlang__op_append
                     [(ErlangCons head_37 elifs_31),
                      (ErlangCons else1_32 ErlangEmptyList)])
              in let
                arg_34 =
                  (H.flmap
                     (\ lc_47 ->
                        let lc_ret_48 = (erlps__stmt_p__1 [lc_47])
                        in (ErlangCons lc_ret_48 ErlangEmptyList))
                     lc_src_35)
              in (erlps__above__1 [arg_34])
            _ -> (EXC.badmatch match_expr_33)
erlps__expr_p__2 [_p_0,
                  (ErlangTuple [(ErlangAtom "switch"), _, e_1, cases_2])]
  =
  let    arg_5 = (H.make_string "switch")
  in let
    arg_4 =
      (BIF.do_remote_fun_call "Prettypr" "erlps__text__1" [arg_5])
  in let arg_7 = (erlps__expr__1 [e_1])
  in let arg_6 = (erlps__paren__1 [arg_7])
  in let
    arg_3 =
      (BIF.do_remote_fun_call "Prettypr" "erlps__beside__2"
         [arg_4, arg_6])
  in let arg_11 = (ErlangFun 1 erlps__alt__1)
  in let
    arg_10 =
      (BIF.do_remote_fun_call "Lists" "erlps__map__2"
         [arg_11, cases_2])
  in let arg_9 = (erlps__above__1 [arg_10])
  in (erlps__block__2 [arg_3, arg_9])
erlps__expr_p__2 [_,
                  (ErlangTuple [(ErlangAtom "tuple"), _, es_0])]
  =
  let    arg_2 = (ErlangFun 1 erlps__expr__1)
  in let
    arg_1 =
      (BIF.do_remote_fun_call "Lists" "erlps__map__2" [arg_2, es_0])
  in (erlps__tuple__1 [arg_1])
erlps__expr_p__2 [_,
                  (ErlangTuple [(ErlangAtom "list"), _, es_0])]
  =
  let    arg_2 = (ErlangFun 1 erlps__expr__1)
  in let
    arg_1 =
      (BIF.do_remote_fun_call "Lists" "erlps__map__2" [arg_2, es_0])
  in (erlps__list__1 [arg_1])
erlps__expr_p__2 [_,
                  (ErlangTuple [(ErlangAtom "list_comp"), _, e_0, binds_1])]
  =
  let    arg_4 = (erlps__expr__1 [e_0])
  in let arg_8 = (H.make_string "|")
  in let
    arg_7 =
      (BIF.do_remote_fun_call "Prettypr" "erlps__text__1" [arg_8])
  in let arg_12 = (H.make_string ",")
  in let
    arg_11 =
      (BIF.do_remote_fun_call "Prettypr" "erlps__text__1" [arg_12])
  in let arg_14 = (ErlangFun 1 erlps__lc_bind__1)
  in let
    arg_13 =
      (BIF.do_remote_fun_call "Lists" "erlps__map__2"
         [arg_14, binds_1])
  in let arg_10 = (erlps__punctuate__2 [arg_11, arg_13])
  in let
    arg_9 = (erlps__par__2 [arg_10, (ErlangInt (DBI.fromInt 0))])
  in let arg_6 = (erlps__hsep__2 [arg_7, arg_9])
  in let
    head_3 =
      (erlps__follow__3 [arg_4, arg_6, (ErlangInt (DBI.fromInt 0))])
  in (erlps__list__1 [(ErlangCons head_3 ErlangEmptyList)])
erlps__expr_p__2 [_,
                  (ErlangTuple [(ErlangAtom "record"), _, fs_0])]
  =
  let    arg_2 = (ErlangFun 1 erlps__field__1)
  in let
    arg_1 =
      (BIF.do_remote_fun_call "Lists" "erlps__map__2" [arg_2, fs_0])
  in (erlps__record__1 [arg_1])
erlps__expr_p__2 [_,
                  (ErlangTuple [(ErlangAtom "map"), ann_0, kvs_1])]
  =
  let
    arg_2 =
      (H.flmap
         (\ lc_6 ->
            case lc_6 of
              (ErlangTuple [k_4, v_5]) ->
                let   
                  head_12 =
                    (ErlangTuple [(ErlangAtom "map_get"), ErlangEmptyList, k_4])
                in let
                  arg_8 =
                    (ErlangTuple
                       [(ErlangAtom "field"), ann_0,
                        (ErlangCons head_12 ErlangEmptyList), v_5])
                in let lc_ret_7 = (erlps__field__1 [arg_8])
                in (ErlangCons lc_ret_7 ErlangEmptyList)
              _ -> ErlangEmptyList)
         kvs_1)
  in (erlps__record__1 [arg_2])
erlps__expr_p__2 [p_0,
                  (ErlangTuple [(ErlangAtom "map"), ann_1, e_2, flds_3])]
  =
  let
    arg_5 = (ErlangTuple [(ErlangAtom "record"), ann_1, e_2, flds_3])
  in (erlps__expr_p__2 [p_0, arg_5])
erlps__expr_p__2 [p_0,
                  (ErlangTuple [(ErlangAtom "record"), ann_1, e_2, fs_3])]
  =
  let   
    arg_4 =
      (BIF.erlang__op_greater [p_0, (ErlangInt (DBI.fromInt 900))])
  in let
    arg_8 = (erlps__expr_p__2 [(ErlangInt (DBI.fromInt 900)), e_2])
  in let
    arg_12 = (ErlangTuple [(ErlangAtom "record"), ann_1, fs_3])
  in let arg_11 = (erlps__expr__1 [arg_12])
  in let arg_7 = (erlps__hsep__2 [arg_8, arg_11])
  in (erlps__paren__2 [arg_4, arg_7])
erlps__expr_p__2 [_,
                  (ErlangTuple [(ErlangAtom "block"), _, ss_0])]
  =
  let   
    arg_1 = (BIF.do_remote_fun_call "Prettypr" "erlps__empty__0" [])
  in let arg_2 = (erlps__statements__1 [ss_0])
  in (erlps__block__2 [arg_1, arg_2])
erlps__expr_p__2 [p_0,
                  (ErlangTuple [(ErlangAtom "proj"), _, e_1, x_2])]
  =
  let   
    arg_3 =
      (BIF.erlang__op_greater [p_0, (ErlangInt (DBI.fromInt 900))])
  in let
    head_8 = (erlps__expr_p__2 [(ErlangInt (DBI.fromInt 900)), e_1])
  in let arg_13 = (H.make_string ".")
  in let
    head_12 =
      (BIF.do_remote_fun_call "Prettypr" "erlps__text__1" [arg_13])
  in let head_15 = (erlps__name__1 [x_2])
  in let
    arg_6 =
      (erlps__beside__1
         [(ErlangCons head_8
             (ErlangCons head_12 (ErlangCons head_15 ErlangEmptyList)))])
  in (erlps__paren__2 [arg_3, arg_6])
erlps__expr_p__2 [p_0,
                  (ErlangTuple [(ErlangAtom "map_get"), _, e_1, key_2])]
  =
  let   
    arg_3 =
      (BIF.erlang__op_greater [p_0, (ErlangInt (DBI.fromInt 900))])
  in let
    head_8 = (erlps__expr_p__2 [(ErlangInt (DBI.fromInt 900)), e_1])
  in let head_14 = (erlps__expr__1 [key_2])
  in let
    head_12 = (erlps__list__1 [(ErlangCons head_14 ErlangEmptyList)])
  in let
    arg_6 =
      (erlps__beside__1
         [(ErlangCons head_8 (ErlangCons head_12 ErlangEmptyList))])
  in (erlps__paren__2 [arg_3, arg_6])
erlps__expr_p__2 [p_0,
                  (ErlangTuple [(ErlangAtom "map_get"), ann_1, e_2, key_3,
                                val_4])]
  =
  let   
    arg_5 =
      (BIF.erlang__op_greater [p_0, (ErlangInt (DBI.fromInt 900))])
  in let
    head_10 = (erlps__expr_p__2 [(ErlangInt (DBI.fromInt 900)), e_2])
  in let arg_17 = (erlps__equals__3 [ann_1, key_3, val_4])
  in let head_16 = (erlps__expr__1 [arg_17])
  in let
    head_14 = (erlps__list__1 [(ErlangCons head_16 ErlangEmptyList)])
  in let
    arg_8 =
      (erlps__beside__1
         [(ErlangCons head_10 (ErlangCons head_14 ErlangEmptyList))])
  in (erlps__paren__2 [arg_5, arg_8])
erlps__expr_p__2 [p_0,
                  (ErlangTuple [(ErlangAtom "typed"), _, e_1, t_2])]
  =
  let   
    arg_3 =
      (BIF.erlang__op_greater [p_0, (ErlangInt (DBI.fromInt 0))])
  in let arg_7 = (erlps__expr__1 [e_1])
  in let arg_6 = (erlps__typed__2 [arg_7, t_2])
  in (erlps__paren__2 [arg_3, arg_6])
erlps__expr_p__2 [p_0,
                  (ErlangTuple [(ErlangAtom "assign"), _, lv_1, e_2])]
  =
  let   
    arg_3 =
      (BIF.erlang__op_greater [p_0, (ErlangInt (DBI.fromInt 0))])
  in let
    arg_7 = (erlps__expr_p__2 [(ErlangInt (DBI.fromInt 900)), lv_1])
  in let arg_10 = (erlps__expr__1 [e_2])
  in let arg_6 = (erlps__equals__2 [arg_7, arg_10])
  in (erlps__paren__2 [arg_3, arg_6])
erlps__expr_p__2 [_,
                  (ErlangTuple [(ErlangAtom "app"), _,
                                (ErlangTuple [(ErlangAtom ".."), _]),
                                (ErlangCons a_0 (ErlangCons b_1 (ErlangEmptyList)))])]
  =
  let
    head_3 =
      (erlps__infix__4
         [(ErlangInt (DBI.fromInt 0)), (ErlangAtom ".."), a_0, b_1])
  in (erlps__list__1 [(ErlangCons head_3 ErlangEmptyList)])
erlps__expr_p__2 [p_0,
                  e_4@(ErlangTuple [(ErlangAtom "app"), _,
                                    f_2@(ErlangTuple [op_1, _]), args_3])]
  | (H.isEAtom op_1) =
  let   
    tup_el_6 =
      (BIF.do_remote_fun_call "Aeso.Syntax" "erlps__get_ann__2"
         [(ErlangAtom "format"), e_4])
  in let case_5 = (ErlangTuple [tup_el_6, args_3])
  in
    case case_5 of
      (ErlangTuple [(ErlangAtom "infix"),
                    (ErlangCons a_10 (ErlangCons b_11 (ErlangEmptyList)))]) ->
        (erlps__infix__4 [p_0, op_1, a_10, b_11])
      (ErlangTuple [(ErlangAtom "prefix"),
                    (ErlangCons a_16 (ErlangEmptyList))]) ->
        (erlps__prefix__3 [p_0, op_1, a_16])
      _ -> (erlps__app__3 [p_0, f_2, args_3])
erlps__expr_p__2 [_,
                  (ErlangTuple [(ErlangAtom "app"), _,
                                c_1@(ErlangTuple [tag_0, _, _]),
                                (ErlangEmptyList)])]
  | ((ErlangAtom "true") ==
       (H.falsifyErrors
          (\ _ ->
             let lop_4 = (BIF.erlang__op_eq [tag_0, (ErlangAtom "con")])
             in
               case lop_4 of
                 (ErlangAtom "true") -> (ErlangAtom "true")
                 (ErlangAtom "false") ->
                   (BIF.erlang__op_eq [tag_0, (ErlangAtom "qcon")])
                 _ -> (EXC.badarg1 lop_4)))) =
  (erlps__expr_p__2 [(ErlangInt (DBI.fromInt 0)), c_1])
erlps__expr_p__2 [p_0,
                  (ErlangTuple [(ErlangAtom "app"), _, f_1, args_2])]
  =
  (erlps__app__3 [p_0, f_1, args_2])
erlps__expr_p__2 [_,
                  e_1@(ErlangTuple [(ErlangAtom "int"), _, n_0])]
  =
  let   
    case_2 =
      (BIF.do_remote_fun_call "Aeso.Syntax" "erlps__get_ann__2"
         [(ErlangAtom "format"), e_1])
  in let
    s_10 =
      case case_2 of
        (ErlangAtom "hex") ->
          let    lop_5 = (H.make_string "0x")
          in let
            rop_6 =
              (BIF.erlang__integer_to_list__2
                 [n_0, (ErlangInt (DBI.fromInt 16))])
          in (BIF.erlang__op_append [lop_5, rop_6])
        _ -> (BIF.erlang__integer_to_list__1 [n_0])
  in (BIF.do_remote_fun_call "Prettypr" "erlps__text__1" [s_10])
erlps__expr_p__2 [_, (ErlangTuple [(ErlangAtom "bool"), _, b_0])]
  =
  let arg_1 = (BIF.erlang__atom_to_list__1 [b_0])
  in (BIF.do_remote_fun_call "Prettypr" "erlps__text__1" [arg_1])
erlps__expr_p__2 [_,
                  (ErlangTuple [(ErlangAtom "bytes"), _, bin_0])]
  =
  let digits_2 = (BIF.erlang__byte_size__1 [bin_0])
  in
    case bin_0 of
      (ErlangBinary bin_c_3) | (ErlangInt size_4) <- (digits_2)
                             , (BIN.Ok n_6 bin_5) <-
                                 ((BIN.chop_int bin_c_3 size_4 8 BIN.Big
                                     BIN.Unsigned))
                             , (BIN.empty bin_5) ->
        let    arg_10 = (H.make_string "#~*.16.0b")
        in let
          head_12 =
            (BIF.erlang__op_mult [digits_2, (ErlangInt (DBI.fromInt 2))])
        in let
          arg_9 =
            (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
               [arg_10, (ErlangCons head_12 (ErlangCons n_6 ErlangEmptyList))])
        in let
          arg_8 =
            (BIF.do_remote_fun_call "Lists" "erlps__flatten__1" [arg_9])
        in (BIF.do_remote_fun_call "Prettypr" "erlps__text__1" [arg_8])
      _ -> (EXC.badmatch bin_0)
erlps__expr_p__2 [_,
                  (ErlangTuple [(ErlangAtom "hash"), _,
                                (ErlangBinary bin_c_0)])]
  | size_1 <- ((DBI.fromInt 512))
  , (BIN.Ok n_3 bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , (BIN.empty bin_2) =
  let    lop_5 = (H.make_string "#")
  in let
    rop_6 =
      (BIF.erlang__integer_to_list__2
         [n_3, (ErlangInt (DBI.fromInt 16))])
  in let arg_4 = (BIF.erlang__op_append [lop_5, rop_6])
  in (BIF.do_remote_fun_call "Prettypr" "erlps__text__1" [arg_4])
erlps__expr_p__2 [_, (ErlangTuple [type_0, _, bin_1])]
  | ((ErlangAtom "true") ==
       (H.falsifyErrors
          (\ _ ->
             let   
               lop_8 =
                 (BIF.erlang__op_eq [type_0, (ErlangAtom "account_pubkey")])
             in let
               lop_7 =
                 case lop_8 of
                   (ErlangAtom "true") -> (ErlangAtom "true")
                   (ErlangAtom "false") ->
                     (BIF.erlang__op_eq
                        [type_0, (ErlangAtom "contract_pubkey")])
                   _ -> (EXC.badarg1 lop_8)
             in let
               lop_6 =
                 case lop_7 of
                   (ErlangAtom "true") -> (ErlangAtom "true")
                   (ErlangAtom "false") ->
                     (BIF.erlang__op_eq [type_0, (ErlangAtom "oracle_pubkey")])
                   _ -> (EXC.badarg1 lop_7)
             in
               case lop_6 of
                 (ErlangAtom "true") -> (ErlangAtom "true")
                 (ErlangAtom "false") ->
                   (BIF.erlang__op_eq [type_0, (ErlangAtom "oracle_query_id")])
                 _ -> (EXC.badarg1 lop_6)))) =
  let   
    arg_3 =
      (BIF.do_remote_fun_call "Aeser.Api.Encoder" "erlps__encode__2"
         [type_0, bin_1])
  in let arg_2 = (BIF.erlang__binary_to_list__1 [arg_3])
  in (BIF.do_remote_fun_call "Prettypr" "erlps__text__1" [arg_2])
erlps__expr_p__2 [_,
                  (ErlangTuple [(ErlangAtom "string"), _,
                                (ErlangBinary bin_e_0)])]
  | (BIN.empty bin_e_0) =
  let arg_1 = (H.make_string "\"\"")
  in (BIF.do_remote_fun_call "Prettypr" "erlps__text__1" [arg_1])
erlps__expr_p__2 [_,
                  (ErlangTuple [(ErlangAtom "string"), _, s_0])]
  =
  let    arg_2 = (H.make_string "\"~s\"")
  in let head_4 = (BIF.erlang__binary_to_list__1 [s_0])
  in let
    arg_1 =
      (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
         [arg_2, (ErlangCons head_4 ErlangEmptyList)])
  in (BIF.do_remote_fun_call "Prettypr" "erlps__text__1" [arg_1])
erlps__expr_p__2 [_, (ErlangTuple [(ErlangAtom "char"), _, c_0])]
  =
  case c_0 of
    (ErlangInt num_2) | ((ErlangInt num_2) ==
                           (ErlangInt (DBI.fromInt 39))) ->
      let arg_3 = (H.make_string "\'\\\'\'")
      in (BIF.do_remote_fun_call "Prettypr" "erlps__text__1" [arg_3])
    (ErlangInt num_4) | ((ErlangInt num_4) ==
                           (ErlangInt (DBI.fromInt 34))) ->
      let arg_5 = (H.make_string "\'\"\'")
      in (BIF.do_remote_fun_call "Prettypr" "erlps__text__1" [arg_5])
    _ ->
      let    arg_7 = (H.make_string "~p")
      in let
        arg_6 =
          (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
             [arg_7,
              (ErlangCons (ErlangCons c_0 ErlangEmptyList) ErlangEmptyList)])
      in let
        s_13 =
          (BIF.do_remote_fun_call "Lists" "erlps__flatten__1" [arg_6])
      in let lop_15 = (H.make_string "\'")
      in let
        arg_18 =
          (BIF.do_remote_fun_call "Lists" "erlps__droplast__1" [s_13])
      in let lop_17 = (BIF.erlang__tl__1 [arg_18])
      in let rop_20 = (H.make_string "\'")
      in let rop_16 = (BIF.erlang__op_append [lop_17, rop_20])
      in let arg_14 = (BIF.erlang__op_append [lop_15, rop_16])
      in (BIF.do_remote_fun_call "Prettypr" "erlps__text__1" [arg_14])
erlps__expr_p__2 [_, e_0@(ErlangTuple [(ErlangAtom "id"), _, _])]
  =
  (erlps__name__1 [e_0])
erlps__expr_p__2 [_,
                  e_0@(ErlangTuple [(ErlangAtom "con"), _, _])]
  =
  (erlps__name__1 [e_0])
erlps__expr_p__2 [_,
                  e_0@(ErlangTuple [(ErlangAtom "qid"), _, _])]
  =
  (erlps__name__1 [e_0])
erlps__expr_p__2 [_,
                  e_0@(ErlangTuple [(ErlangAtom "qcon"), _, _])]
  =
  (erlps__name__1 [e_0])
erlps__expr_p__2 [_, (ErlangTuple [op_0, _])]
  | (H.isEAtom op_0) =
  let    arg_2 = (BIF.erlang__atom_to_list__1 [op_0])
  in let
    arg_1 =
      (BIF.do_remote_fun_call "Prettypr" "erlps__text__1" [arg_2])
  in (erlps__paren__1 [arg_1])
erlps__expr_p__2 [_,
                  (ErlangTuple [(ErlangAtom "lvalue"), _, lv_0])]
  =
  (erlps__lvalue__1 [lv_0])
erlps__expr_p__2 [arg_2, arg_3] = (EXC.function_clause unit)
erlps__expr_p__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__stmt_p__1 :: ErlangFun
erlps__stmt_p__1 [(ErlangTuple [(ErlangAtom "if"), _, cond_0,
                                then_1])]
  =
  let    arg_5 = (H.make_string "if")
  in let
    arg_4 =
      (BIF.do_remote_fun_call "Prettypr" "erlps__text__1" [arg_5])
  in let arg_7 = (erlps__expr__1 [cond_0])
  in let arg_6 = (erlps__paren__1 [arg_7])
  in let
    arg_3 =
      (BIF.do_remote_fun_call "Prettypr" "erlps__beside__2"
         [arg_4, arg_6])
  in
    (erlps__block_expr__3
       [(ErlangInt (DBI.fromInt 200)), arg_3, then_1])
erlps__stmt_p__1 [(ErlangTuple [(ErlangAtom "elif"), _, cond_0,
                                then_1])]
  =
  let    arg_5 = (H.make_string "elif")
  in let
    arg_4 =
      (BIF.do_remote_fun_call "Prettypr" "erlps__text__1" [arg_5])
  in let arg_7 = (erlps__expr__1 [cond_0])
  in let arg_6 = (erlps__paren__1 [arg_7])
  in let
    arg_3 =
      (BIF.do_remote_fun_call "Prettypr" "erlps__beside__2"
         [arg_4, arg_6])
  in
    (erlps__block_expr__3
       [(ErlangInt (DBI.fromInt 200)), arg_3, then_1])
erlps__stmt_p__1 [(ErlangTuple [(ErlangAtom "else"), else_0])] =
  let    op_arg_1 = (erlps__show_generated__0 [])
  in let hidegenerated_2 = (BIF.erlang__not__1 [op_arg_1])
  in let
    case_3 =
      (BIF.do_remote_fun_call "Aeso.Syntax" "erlps__get_ann__2"
         [(ErlangAtom "origin"), else_0])
  in
    case case_3 of
      (ErlangAtom "system") | ((ErlangAtom "true") ==
                                 (H.falsifyErrors (\ _ -> hidegenerated_2))) ->
        (BIF.do_remote_fun_call "Prettypr" "erlps__empty__0" [])
      _ ->
        let    arg_8 = (H.make_string "else")
        in let
          arg_7 =
            (BIF.do_remote_fun_call "Prettypr" "erlps__text__1" [arg_8])
        in
          (erlps__block_expr__3
             [(ErlangInt (DBI.fromInt 200)), arg_7, else_0])
erlps__stmt_p__1 [arg_10] = (EXC.function_clause unit)
erlps__stmt_p__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__lc_bind__1 :: ErlangFun
erlps__lc_bind__1 [(ErlangTuple [(ErlangAtom "comprehension_bind"),
                                 p_0, e_1])]
  =
  let    arg_3 = (erlps__expr__1 [p_0])
  in let arg_6 = (H.make_string "<-")
  in let
    arg_5 =
      (BIF.do_remote_fun_call "Prettypr" "erlps__text__1" [arg_6])
  in let arg_2 = (erlps__hsep__2 [arg_3, arg_5])
  in let arg_7 = (erlps__expr__1 [e_1])
  in (erlps__follow__2 [arg_2, arg_7])
erlps__lc_bind__1 [(ErlangTuple [(ErlangAtom "comprehension_if"),
                                 _, e_0])]
  =
  let    arg_3 = (H.make_string "if(")
  in let
    head_2 =
      (BIF.do_remote_fun_call "Prettypr" "erlps__text__1" [arg_3])
  in let head_5 = (erlps__expr__1 [e_0])
  in let arg_9 = (H.make_string ")")
  in let
    head_8 =
      (BIF.do_remote_fun_call "Prettypr" "erlps__text__1" [arg_9])
  in
    (erlps__beside__1
       [(ErlangCons head_2
           (ErlangCons head_5 (ErlangCons head_8 ErlangEmptyList)))])
erlps__lc_bind__1 [let_0] =
  let arg_1 = (H.make_string "let")
  in (erlps__letdecl__2 [arg_1, let_0])
erlps__lc_bind__1 [arg_3] = (EXC.function_clause unit)
erlps__lc_bind__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__bin_prec__1 :: ErlangFun
erlps__bin_prec__1 [(ErlangAtom "..")] =
  (ErlangTuple
     [(ErlangInt (DBI.fromInt 0)), (ErlangInt (DBI.fromInt 0)),
      (ErlangInt (DBI.fromInt 0))])
erlps__bin_prec__1 [(ErlangAtom "=")] =
  (ErlangTuple
     [(ErlangInt (DBI.fromInt 0)), (ErlangInt (DBI.fromInt 0)),
      (ErlangInt (DBI.fromInt 0))])
erlps__bin_prec__1 [(ErlangAtom "@")] =
  (ErlangTuple
     [(ErlangInt (DBI.fromInt 0)), (ErlangInt (DBI.fromInt 0)),
      (ErlangInt (DBI.fromInt 0))])
erlps__bin_prec__1 [(ErlangAtom "||")] =
  (ErlangTuple
     [(ErlangInt (DBI.fromInt 200)), (ErlangInt (DBI.fromInt 300)),
      (ErlangInt (DBI.fromInt 200))])
erlps__bin_prec__1 [(ErlangAtom "&&")] =
  (ErlangTuple
     [(ErlangInt (DBI.fromInt 300)), (ErlangInt (DBI.fromInt 400)),
      (ErlangInt (DBI.fromInt 300))])
erlps__bin_prec__1 [(ErlangAtom "<")] =
  (ErlangTuple
     [(ErlangInt (DBI.fromInt 400)), (ErlangInt (DBI.fromInt 500)),
      (ErlangInt (DBI.fromInt 500))])
erlps__bin_prec__1 [(ErlangAtom ">")] =
  (ErlangTuple
     [(ErlangInt (DBI.fromInt 400)), (ErlangInt (DBI.fromInt 500)),
      (ErlangInt (DBI.fromInt 500))])
erlps__bin_prec__1 [(ErlangAtom "=<")] =
  (ErlangTuple
     [(ErlangInt (DBI.fromInt 400)), (ErlangInt (DBI.fromInt 500)),
      (ErlangInt (DBI.fromInt 500))])
erlps__bin_prec__1 [(ErlangAtom ">=")] =
  (ErlangTuple
     [(ErlangInt (DBI.fromInt 400)), (ErlangInt (DBI.fromInt 500)),
      (ErlangInt (DBI.fromInt 500))])
erlps__bin_prec__1 [(ErlangAtom "==")] =
  (ErlangTuple
     [(ErlangInt (DBI.fromInt 400)), (ErlangInt (DBI.fromInt 500)),
      (ErlangInt (DBI.fromInt 500))])
erlps__bin_prec__1 [(ErlangAtom "!=")] =
  (ErlangTuple
     [(ErlangInt (DBI.fromInt 400)), (ErlangInt (DBI.fromInt 500)),
      (ErlangInt (DBI.fromInt 500))])
erlps__bin_prec__1 [(ErlangAtom "++")] =
  (ErlangTuple
     [(ErlangInt (DBI.fromInt 500)), (ErlangInt (DBI.fromInt 600)),
      (ErlangInt (DBI.fromInt 500))])
erlps__bin_prec__1 [(ErlangAtom "::")] =
  (ErlangTuple
     [(ErlangInt (DBI.fromInt 500)), (ErlangInt (DBI.fromInt 600)),
      (ErlangInt (DBI.fromInt 500))])
erlps__bin_prec__1 [(ErlangAtom "+")] =
  (ErlangTuple
     [(ErlangInt (DBI.fromInt 600)), (ErlangInt (DBI.fromInt 600)),
      (ErlangInt (DBI.fromInt 650))])
erlps__bin_prec__1 [(ErlangAtom "-")] =
  (ErlangTuple
     [(ErlangInt (DBI.fromInt 600)), (ErlangInt (DBI.fromInt 600)),
      (ErlangInt (DBI.fromInt 650))])
erlps__bin_prec__1 [(ErlangAtom "*")] =
  (ErlangTuple
     [(ErlangInt (DBI.fromInt 700)), (ErlangInt (DBI.fromInt 700)),
      (ErlangInt (DBI.fromInt 750))])
erlps__bin_prec__1 [(ErlangAtom "/")] =
  (ErlangTuple
     [(ErlangInt (DBI.fromInt 700)), (ErlangInt (DBI.fromInt 700)),
      (ErlangInt (DBI.fromInt 750))])
erlps__bin_prec__1 [(ErlangAtom "mod")] =
  (ErlangTuple
     [(ErlangInt (DBI.fromInt 700)), (ErlangInt (DBI.fromInt 700)),
      (ErlangInt (DBI.fromInt 750))])
erlps__bin_prec__1 [(ErlangAtom "^")] =
  (ErlangTuple
     [(ErlangInt (DBI.fromInt 750)), (ErlangInt (DBI.fromInt 750)),
      (ErlangInt (DBI.fromInt 800))])
erlps__bin_prec__1 [arg_3] = (EXC.function_clause unit)
erlps__bin_prec__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__un_prec__1 :: ErlangFun
erlps__un_prec__1 [(ErlangAtom "-")] =
  (ErlangTuple
     [(ErlangInt (DBI.fromInt 650)), (ErlangInt (DBI.fromInt 650))])
erlps__un_prec__1 [(ErlangAtom "!")] =
  (ErlangTuple
     [(ErlangInt (DBI.fromInt 800)), (ErlangInt (DBI.fromInt 800))])
erlps__un_prec__1 [arg_2] = (EXC.function_clause unit)
erlps__un_prec__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__equals__3 :: ErlangFun
erlps__equals__3 [ann_0, a_1, b_2] =
  let   
    head_5 =
      (ErlangTuple [(ErlangAtom "format"), (ErlangAtom "infix")])
  in let tup_el_9 = (ErlangTuple [(ErlangAtom "="), ann_0])
  in
    (ErlangTuple
       [(ErlangAtom "app"), (ErlangCons head_5 ann_0), tup_el_9,
        (ErlangCons a_1 (ErlangCons b_2 ErlangEmptyList))])
erlps__equals__3 [arg_17, arg_18, arg_19] =
  (EXC.function_clause unit)
erlps__equals__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__infix__4 :: ErlangFun
erlps__infix__4 [p_0, op_1, a_2, b_3] =
  let match_expr_8 = (erlps__bin_prec__1 [op_1])
  in
    case match_expr_8 of
      (ErlangTuple [top_5, l_6, r_7]) ->
        let    arg_9 = (BIF.erlang__op_greater [p_0, top_5])
        in let arg_14 = (erlps__expr_p__2 [l_6, a_2])
        in let arg_18 = (BIF.erlang__atom_to_list__1 [op_1])
        in let
          arg_17 =
            (BIF.do_remote_fun_call "Prettypr" "erlps__text__1" [arg_18])
        in let arg_13 = (erlps__hsep__2 [arg_14, arg_17])
        in let arg_20 = (erlps__expr_p__2 [r_7, b_3])
        in let arg_12 = (erlps__follow__2 [arg_13, arg_20])
        in (erlps__paren__2 [arg_9, arg_12])
      _ -> (EXC.badmatch match_expr_8)
erlps__infix__4 [arg_23, arg_24, arg_25, arg_26] =
  (EXC.function_clause unit)
erlps__infix__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__prefix__3 :: ErlangFun
erlps__prefix__3 [p_0, op_1, a_2] =
  let match_expr_6 = (erlps__un_prec__1 [op_1])
  in
    case match_expr_6 of
      (ErlangTuple [top_4, inner_5]) ->
        let    arg_7 = (BIF.erlang__op_greater [p_0, top_4])
        in let arg_12 = (BIF.erlang__atom_to_list__1 [op_1])
        in let
          arg_11 =
            (BIF.do_remote_fun_call "Prettypr" "erlps__text__1" [arg_12])
        in let arg_14 = (erlps__expr_p__2 [inner_5, a_2])
        in let arg_10 = (erlps__hsep__2 [arg_11, arg_14])
        in (erlps__paren__2 [arg_7, arg_10])
      _ -> (EXC.badmatch match_expr_6)
erlps__prefix__3 [arg_17, arg_18, arg_19] =
  (EXC.function_clause unit)
erlps__prefix__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__app__3 :: ErlangFun
erlps__app__3 [p_0, f_1, args_2] =
  let   
    arg_3 =
      (BIF.erlang__op_greater [p_0, (ErlangInt (DBI.fromInt 900))])
  in let
    arg_7 = (erlps__expr_p__2 [(ErlangInt (DBI.fromInt 900)), f_1])
  in let arg_12 = (ErlangFun 1 erlps__arg_expr__1)
  in let
    arg_11 =
      (BIF.do_remote_fun_call "Lists" "erlps__map__2" [arg_12, args_2])
  in let arg_10 = (erlps__tuple__1 [arg_11])
  in let
    arg_6 =
      (BIF.do_remote_fun_call "Prettypr" "erlps__beside__2"
         [arg_7, arg_10])
  in (erlps__paren__2 [arg_3, arg_6])
erlps__app__3 [arg_14, arg_15, arg_16] =
  (EXC.function_clause unit)
erlps__app__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__field__1 :: ErlangFun
erlps__field__1 [(ErlangTuple [(ErlangAtom "field"), _, lv_0,
                               e_1])]
  =
  let    arg_3 = (erlps__lvalue__1 [lv_0])
  in let arg_6 = (H.make_string "=")
  in let
    arg_5 =
      (BIF.do_remote_fun_call "Prettypr" "erlps__text__1" [arg_6])
  in let arg_2 = (erlps__hsep__2 [arg_3, arg_5])
  in let arg_7 = (erlps__expr__1 [e_1])
  in (erlps__follow__2 [arg_2, arg_7])
erlps__field__1 [(ErlangTuple [(ErlangAtom "field"), _, lv_0,
                               id_1, e_2])]
  =
  let    head_5 = (erlps__lvalue__1 [lv_0])
  in let arg_9 = (H.make_string "@")
  in let
    head_8 =
      (BIF.do_remote_fun_call "Prettypr" "erlps__text__1" [arg_9])
  in let head_11 = (erlps__name__1 [id_1])
  in let arg_15 = (H.make_string "=")
  in let
    head_14 =
      (BIF.do_remote_fun_call "Prettypr" "erlps__text__1" [arg_15])
  in let
    arg_3 =
      (erlps__hsep__1
         [(ErlangCons head_5
             (ErlangCons head_8
                (ErlangCons head_11 (ErlangCons head_14 ErlangEmptyList))))])
  in let arg_17 = (erlps__expr__1 [e_2])
  in (erlps__follow__2 [arg_3, arg_17])
erlps__field__1 [(ErlangTuple [(ErlangAtom "field_upd"), _, lv_0,
                               fun_1])]
  =
  let    arg_3 = (erlps__lvalue__1 [lv_0])
  in let arg_6 = (H.make_string "~")
  in let
    arg_5 =
      (BIF.do_remote_fun_call "Prettypr" "erlps__text__1" [arg_6])
  in let arg_2 = (erlps__hsep__2 [arg_3, arg_5])
  in let arg_7 = (erlps__expr__1 [fun_1])
  in (erlps__follow__2 [arg_2, arg_7])
erlps__field__1 [arg_9] = (EXC.function_clause unit)
erlps__field__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__lvalue__1 :: ErlangFun
erlps__lvalue__1 [(ErlangCons e_0 es_1)] =
  let    head_3 = (erlps__elim__1 [e_0])
  in let arg_6 = (ErlangFun 1 erlps__elim1__1)
  in let
    tail_5 =
      (BIF.do_remote_fun_call "Lists" "erlps__map__2" [arg_6, es_1])
  in (erlps__beside__1 [(ErlangCons head_3 tail_5)])
erlps__lvalue__1 [arg_8] = (EXC.function_clause unit)
erlps__lvalue__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__elim__1 :: ErlangFun
erlps__elim__1 [(ErlangTuple [(ErlangAtom "proj"), _, x_0])] =
  (erlps__name__1 [x_0])
erlps__elim__1 [(ErlangTuple [(ErlangAtom "map_get"), ann_0,
                              k_1])]
  =
  let
    arg_3 =
      (ErlangTuple
         [(ErlangAtom "list"), ann_0, (ErlangCons k_1 ErlangEmptyList)])
  in (erlps__expr_p__2 [(ErlangInt (DBI.fromInt 0)), arg_3])
erlps__elim__1 [(ErlangTuple [(ErlangAtom "map_get"), ann_0, k_1,
                              v_2])]
  =
  let    head_8 = (erlps__equals__3 [ann_0, k_1, v_2])
  in let
    arg_4 =
      (ErlangTuple
         [(ErlangAtom "list"), ann_0,
          (ErlangCons head_8 ErlangEmptyList)])
  in (erlps__expr_p__2 [(ErlangInt (DBI.fromInt 0)), arg_4])
erlps__elim__1 [arg_13] = (EXC.function_clause unit)
erlps__elim__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__elim1__1 :: ErlangFun
erlps__elim1__1 [proj_0@(ErlangTuple [(ErlangAtom "proj"), _,
                                      _])]
  =
  let    arg_2 = (H.make_string ".")
  in let
    arg_1 =
      (BIF.do_remote_fun_call "Prettypr" "erlps__text__1" [arg_2])
  in let arg_3 = (erlps__elim__1 [proj_0])
  in
    (BIF.do_remote_fun_call "Prettypr" "erlps__beside__2"
       [arg_1, arg_3])
erlps__elim1__1 [get_0@(ErlangTuple [(ErlangAtom "map_get"), _,
                                     _])]
  =
  (erlps__elim__1 [get_0])
erlps__elim1__1 [get_0@(ErlangTuple [(ErlangAtom "map_get"), _,
                                     _, _])]
  =
  (erlps__elim__1 [get_0])
erlps__elim1__1 [arg_2] = (EXC.function_clause unit)
erlps__elim1__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__alt__1 :: ErlangFun
erlps__alt__1 [(ErlangTuple [(ErlangAtom "case"), _, pat_0,
                             body_1])]
  =
  let    arg_4 = (erlps__expr__1 [pat_0])
  in let arg_7 = (H.make_string "=>")
  in let
    arg_6 =
      (BIF.do_remote_fun_call "Prettypr" "erlps__text__1" [arg_7])
  in let arg_3 = (erlps__hsep__2 [arg_4, arg_6])
  in
    (erlps__block_expr__3
       [(ErlangInt (DBI.fromInt 0)), arg_3, body_1])
erlps__alt__1 [arg_9] = (EXC.function_clause unit)
erlps__alt__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__block_expr__3 :: ErlangFun
erlps__block_expr__3 [_, header_0,
                      (ErlangTuple [(ErlangAtom "block"), _, ss_1])]
  =
  let arg_3 = (erlps__statements__1 [ss_1])
  in (erlps__block__2 [header_0, arg_3])
erlps__block_expr__3 [p_0, header_1, e_2] =
  let arg_4 = (erlps__expr_p__2 [p_0, e_2])
  in (erlps__follow__2 [header_1, arg_4])
erlps__block_expr__3 [arg_7, arg_8, arg_9] =
  (EXC.function_clause unit)
erlps__block_expr__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__statements__1 :: ErlangFun
erlps__statements__1 [stmts_0] =
  let
    arg_1 =
      (H.flmap
         (\ lc_4 ->
            let lc_ret_5 = (erlps__statement__1 [lc_4])
            in (ErlangCons lc_ret_5 ErlangEmptyList))
         stmts_0)
  in (erlps__above__1 [arg_1])
erlps__statements__1 [arg_7] = (EXC.function_clause unit)
erlps__statements__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__statement__1 :: ErlangFun
erlps__statement__1 [s_0@(ErlangTuple [(ErlangAtom "letval"), _,
                                       _, _])]
  =
  let arg_1 = (H.make_string "let")
  in (erlps__letdecl__2 [arg_1, s_0])
erlps__statement__1 [s_0@(ErlangTuple [(ErlangAtom "letfun"), _,
                                       _, _, _, _])]
  =
  let arg_1 = (H.make_string "let")
  in (erlps__letdecl__2 [arg_1, s_0])
erlps__statement__1 [e_0] = (erlps__expr__1 [e_0])
erlps__statement__1 [arg_2] = (EXC.function_clause unit)
erlps__statement__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__get_elifs__1 :: ErlangFun
erlps__get_elifs__1 [expr_0] =
  (erlps__get_elifs__2 [expr_0, ErlangEmptyList])
erlps__get_elifs__1 [arg_3] = (EXC.function_clause unit)
erlps__get_elifs__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__get_elifs__2 :: ErlangFun
erlps__get_elifs__2 [if_4@(ErlangTuple [(ErlangAtom "if"), ann_0,
                                        cond_1, then_2, else_3]),
                     elifs_5]
  =
  let
    case_6 =
      (BIF.do_remote_fun_call "Aeso.Syntax" "erlps__get_ann__2"
         [(ErlangAtom "format"), if_4])
  in
    case case_6 of
      (ErlangAtom "elif") ->
        let
          head_11 =
            (ErlangTuple [(ErlangAtom "elif"), ann_0, cond_1, then_2])
        in (erlps__get_elifs__2 [else_3, (ErlangCons head_11 elifs_5)])
      _ ->
        let
          tup_el_17 =
            (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [elifs_5])
        in (ErlangTuple [tup_el_17, if_4])
erlps__get_elifs__2 [else_0, elifs_1] =
  let   
    tup_el_2 =
      (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [elifs_1])
  in let tup_el_4 = (ErlangTuple [(ErlangAtom "else"), else_0])
  in (ErlangTuple [tup_el_2, tup_el_4])
erlps__get_elifs__2 [arg_7, arg_8] = (EXC.function_clause unit)
erlps__get_elifs__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)