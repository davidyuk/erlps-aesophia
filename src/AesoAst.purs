module Aeso.Ast(erlps__int__2, erlps__line__1, erlps__pp__1,
                erlps__pp_typed__1, erlps__symbol__2,
                erlps__symbol_name__1) where
{-
This file has been autogenerated
DO NOT EDIT - Your changes WILL be overwritten
Use this code at your own risk - the authors are just a mischievous raccoon and a haskell devote
Erlscripten v0.1.0
-}

import Prelude
import Data.Array as DA
import Data.List as DL
import Data.Maybe as DM
import Data.Map as Map
import Data.Tuple as Tup
import Data.BigInt as DBI
import Erlang.Builtins as BIF
import Erlang.Binary as BIN
import Erlang.Helpers as H
import Erlang.Exception as EXC
import Erlang.Type (ErlangFun, ErlangTerm(..), weakCmp, weakEq,
                    weakNEq, weakLt, weakLeq, weakGeq, weakGt)
import Effect (Effect)
import Effect.Unsafe (unsafePerformEffect)
import Effect.Exception (throw)
import Partial.Unsafe (unsafePartial)


erlps__symbol__2 :: ErlangFun
erlps__symbol__2 [line_0, chars_1] =
  (ErlangTuple [(ErlangAtom "symbol"), line_0, chars_1])
erlps__symbol__2 [arg_5, arg_6] = (EXC.function_clause unit)
erlps__symbol__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__int__2 :: ErlangFun
erlps__int__2 [line_0, int_1] =
  (ErlangTuple [(ErlangAtom "Int"), line_0, int_1])
erlps__int__2 [arg_5, arg_6] = (EXC.function_clause unit)
erlps__int__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__line__1 :: ErlangFun
erlps__line__1 [(ErlangTuple [(ErlangAtom "symbol"), line_0, _])]
  =
  line_0
erlps__line__1 [arg_1] = (EXC.function_clause unit)
erlps__line__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__symbol_name__1 :: ErlangFun
erlps__symbol_name__1 [(ErlangTuple [(ErlangAtom "symbol"), _,
                                     name_0])]
  =
  name_0
erlps__symbol_name__1 [arg_1] = (EXC.function_clause unit)
erlps__symbol_name__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__pp__1 :: ErlangFun
erlps__pp__1 [ast_0] =
  let   
    arg_1 =
      (BIF.do_remote_fun_call "Aeso.Pretty" "erlps__decls__2"
         [ast_0, ErlangEmptyList])
  in let
    string_4 =
      (BIF.do_remote_fun_call "Prettypr" "erlps__format__1" [arg_1])
  in let arg_5 = (H.make_string "Ast:\n~s\n")
  in
    (BIF.do_remote_fun_call "Erlang.Io" "erlps__format__2"
       [arg_5, (ErlangCons string_4 ErlangEmptyList)])
erlps__pp__1 [arg_9] = (EXC.function_clause unit)
erlps__pp__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__pp_typed__1 :: ErlangFun
erlps__pp_typed__1 [typedast_0] =
  let   
    arg_1 =
      (BIF.do_remote_fun_call "Aeso.Pretty" "erlps__decls__2"
         [typedast_0,
          (ErlangCons (ErlangAtom "show_generated") ErlangEmptyList)])
  in let
    string_6 =
      (BIF.do_remote_fun_call "Prettypr" "erlps__format__1" [arg_1])
  in let arg_7 = (H.make_string "Type ast:\n~s\n")
  in
    (BIF.do_remote_fun_call "Erlang.Io" "erlps__format__2"
       [arg_7, (ErlangCons string_6 ErlangEmptyList)])
erlps__pp_typed__1 [arg_11] = (EXC.function_clause unit)
erlps__pp_typed__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)