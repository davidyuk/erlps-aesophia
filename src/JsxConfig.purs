module Jsx.Config(erlps__parse_config__1,
                  erlps__config_to_list__1, erlps__extract_config__1,
                  erlps__valid_flags__0) where
{-
This file has been autogenerated
DO NOT EDIT - Your changes WILL be overwritten
Use this code at your own risk - the authors are just a mischievous raccoon and a haskell devote
Erlscripten v0.2.0
-}

import Prelude
import Data.BigInt as DBI
import Data.Array as DA
import Data.Maybe as DM
import Data.Map as Map
import Data.Tuple as DT
import Erlang.Builtins as BIF
import Erlang.Binary as BIN
import Erlang.Helpers
import Erlang.Exception as EXC
import Erlang.Type
import Partial.Unsafe (unsafePartial)


erlps__parse_config__1 :: ErlangFun
erlps__parse_config__1 [config_0] =
  let
    arg_2 =
      ErlangTuple
        [ErlangAtom "config", ErlangAtom "false", ErlangAtom "false",
         ErlangAtom "false", ErlangAtom "false", ErlangAtom "false",
         ErlangAtom "false", ErlangAtom "false", ErlangAtom "false",
         ErlangAtom "false", ErlangAtom "false", ErlangAtom "false",
         ErlangAtom "false", ErlangAtom "false", ErlangAtom "false",
         ErlangAtom "false"]
  in erlps__parse_config__2 [config_0, arg_2]
erlps__parse_config__1 [arg_19] = EXC.function_clause unit
erlps__parse_config__1 args =
  EXC.badarity (ErlangFun 1 erlps__parse_config__1) args

erlps__parse_config__2 :: ErlangFun
erlps__parse_config__2 [(ErlangEmptyList), config_0] = config_0
erlps__parse_config__2 [(ErlangCons (ErlangAtom "escaped_forward_slashes") rest_0),
                        config_1]
  =
  let
    arg_3 =
      case config_1 of
        (ErlangTuple [(ErlangAtom "config"), dirty_strings_6,
                      escaped_forward_slashes_7, escaped_strings_8,
                      multi_term_9, strict_comments_10, strict_commas_11,
                      strict_utf8_12, strict_single_quotes_13,
                      strict_escapes_14, stream_15, return_tail_16, uescape_17,
                      unescaped_jsonp_18, error_handler_19,
                      incomplete_handler_20]) ->
          ErlangTuple
            [ErlangAtom "config", dirty_strings_6, ErlangAtom "true",
             escaped_strings_8, multi_term_9, strict_comments_10,
             strict_commas_11, strict_utf8_12, strict_single_quotes_13,
             strict_escapes_14, stream_15, return_tail_16, uescape_17,
             unescaped_jsonp_18, error_handler_19, incomplete_handler_20]
        _ -> EXC.badrecord (ErlangAtom "config")
  in erlps__parse_config__2 [rest_0, arg_3]
erlps__parse_config__2 [(ErlangCons (ErlangAtom "escaped_strings") rest_0),
                        config_1]
  =
  let
    arg_3 =
      case config_1 of
        (ErlangTuple [(ErlangAtom "config"), dirty_strings_6,
                      escaped_forward_slashes_7, escaped_strings_8,
                      multi_term_9, strict_comments_10, strict_commas_11,
                      strict_utf8_12, strict_single_quotes_13,
                      strict_escapes_14, stream_15, return_tail_16, uescape_17,
                      unescaped_jsonp_18, error_handler_19,
                      incomplete_handler_20]) ->
          ErlangTuple
            [ErlangAtom "config", dirty_strings_6, escaped_forward_slashes_7,
             ErlangAtom "true", multi_term_9, strict_comments_10,
             strict_commas_11, strict_utf8_12, strict_single_quotes_13,
             strict_escapes_14, stream_15, return_tail_16, uescape_17,
             unescaped_jsonp_18, error_handler_19, incomplete_handler_20]
        _ -> EXC.badrecord (ErlangAtom "config")
  in erlps__parse_config__2 [rest_0, arg_3]
erlps__parse_config__2 [(ErlangCons (ErlangAtom "unescaped_jsonp") rest_0),
                        config_1]
  =
  let
    arg_3 =
      case config_1 of
        (ErlangTuple [(ErlangAtom "config"), dirty_strings_6,
                      escaped_forward_slashes_7, escaped_strings_8,
                      multi_term_9, strict_comments_10, strict_commas_11,
                      strict_utf8_12, strict_single_quotes_13,
                      strict_escapes_14, stream_15, return_tail_16, uescape_17,
                      unescaped_jsonp_18, error_handler_19,
                      incomplete_handler_20]) ->
          ErlangTuple
            [ErlangAtom "config", dirty_strings_6, escaped_forward_slashes_7,
             escaped_strings_8, multi_term_9, strict_comments_10,
             strict_commas_11, strict_utf8_12, strict_single_quotes_13,
             strict_escapes_14, stream_15, return_tail_16, uescape_17,
             ErlangAtom "true", error_handler_19, incomplete_handler_20]
        _ -> EXC.badrecord (ErlangAtom "config")
  in erlps__parse_config__2 [rest_0, arg_3]
erlps__parse_config__2 [(ErlangCons (ErlangAtom "dirty_strings") rest_0),
                        config_1]
  =
  let
    arg_3 =
      case config_1 of
        (ErlangTuple [(ErlangAtom "config"), dirty_strings_6,
                      escaped_forward_slashes_7, escaped_strings_8,
                      multi_term_9, strict_comments_10, strict_commas_11,
                      strict_utf8_12, strict_single_quotes_13,
                      strict_escapes_14, stream_15, return_tail_16, uescape_17,
                      unescaped_jsonp_18, error_handler_19,
                      incomplete_handler_20]) ->
          ErlangTuple
            [ErlangAtom "config", ErlangAtom "true",
             escaped_forward_slashes_7, escaped_strings_8, multi_term_9,
             strict_comments_10, strict_commas_11, strict_utf8_12,
             strict_single_quotes_13, strict_escapes_14, stream_15,
             return_tail_16, uescape_17, unescaped_jsonp_18, error_handler_19,
             incomplete_handler_20]
        _ -> EXC.badrecord (ErlangAtom "config")
  in erlps__parse_config__2 [rest_0, arg_3]
erlps__parse_config__2 [(ErlangCons (ErlangAtom "multi_term") rest_0),
                        config_1]
  =
  let
    arg_3 =
      case config_1 of
        (ErlangTuple [(ErlangAtom "config"), dirty_strings_6,
                      escaped_forward_slashes_7, escaped_strings_8,
                      multi_term_9, strict_comments_10, strict_commas_11,
                      strict_utf8_12, strict_single_quotes_13,
                      strict_escapes_14, stream_15, return_tail_16, uescape_17,
                      unescaped_jsonp_18, error_handler_19,
                      incomplete_handler_20]) ->
          ErlangTuple
            [ErlangAtom "config", dirty_strings_6, escaped_forward_slashes_7,
             escaped_strings_8, ErlangAtom "true", strict_comments_10,
             strict_commas_11, strict_utf8_12, strict_single_quotes_13,
             strict_escapes_14, stream_15, return_tail_16, uescape_17,
             unescaped_jsonp_18, error_handler_19, incomplete_handler_20]
        _ -> EXC.badrecord (ErlangAtom "config")
  in erlps__parse_config__2 [rest_0, arg_3]
erlps__parse_config__2 [(ErlangCons (ErlangAtom "return_tail") rest_0),
                        config_1]
  =
  let
    arg_3 =
      case config_1 of
        (ErlangTuple [(ErlangAtom "config"), dirty_strings_6,
                      escaped_forward_slashes_7, escaped_strings_8,
                      multi_term_9, strict_comments_10, strict_commas_11,
                      strict_utf8_12, strict_single_quotes_13,
                      strict_escapes_14, stream_15, return_tail_16, uescape_17,
                      unescaped_jsonp_18, error_handler_19,
                      incomplete_handler_20]) ->
          ErlangTuple
            [ErlangAtom "config", dirty_strings_6, escaped_forward_slashes_7,
             escaped_strings_8, multi_term_9, strict_comments_10,
             strict_commas_11, strict_utf8_12, strict_single_quotes_13,
             strict_escapes_14, stream_15, ErlangAtom "true", uescape_17,
             unescaped_jsonp_18, error_handler_19, incomplete_handler_20]
        _ -> EXC.badrecord (ErlangAtom "config")
  in erlps__parse_config__2 [rest_0, arg_3]
erlps__parse_config__2 [(ErlangCons (ErlangAtom "repeat_keys") rest_0),
                        config_1]
  =
  erlps__parse_config__2 [rest_0, config_1]
erlps__parse_config__2 [(ErlangCons (ErlangAtom "uescape") rest_0),
                        config_1]
  =
  let
    arg_3 =
      case config_1 of
        (ErlangTuple [(ErlangAtom "config"), dirty_strings_6,
                      escaped_forward_slashes_7, escaped_strings_8,
                      multi_term_9, strict_comments_10, strict_commas_11,
                      strict_utf8_12, strict_single_quotes_13,
                      strict_escapes_14, stream_15, return_tail_16, uescape_17,
                      unescaped_jsonp_18, error_handler_19,
                      incomplete_handler_20]) ->
          ErlangTuple
            [ErlangAtom "config", dirty_strings_6, escaped_forward_slashes_7,
             escaped_strings_8, multi_term_9, strict_comments_10,
             strict_commas_11, strict_utf8_12, strict_single_quotes_13,
             strict_escapes_14, stream_15, return_tail_16, ErlangAtom "true",
             unescaped_jsonp_18, error_handler_19, incomplete_handler_20]
        _ -> EXC.badrecord (ErlangAtom "config")
  in erlps__parse_config__2 [rest_0, arg_3]
erlps__parse_config__2 [(ErlangCons (ErlangAtom "strict") rest_0),
                        config_1]
  =
  let
    arg_3 =
      case config_1 of
        (ErlangTuple [(ErlangAtom "config"), dirty_strings_10,
                      escaped_forward_slashes_11, escaped_strings_12,
                      multi_term_13, strict_comments_14, strict_commas_15,
                      strict_utf8_16, strict_single_quotes_17,
                      strict_escapes_18, stream_19, return_tail_20, uescape_21,
                      unescaped_jsonp_22, error_handler_23,
                      incomplete_handler_24]) ->
          ErlangTuple
            [ErlangAtom "config", dirty_strings_10,
             escaped_forward_slashes_11, escaped_strings_12, multi_term_13,
             ErlangAtom "true", ErlangAtom "true", ErlangAtom "true",
             ErlangAtom "true", ErlangAtom "true", stream_19, return_tail_20,
             uescape_21, unescaped_jsonp_22, error_handler_23,
             incomplete_handler_24]
        _ -> EXC.badrecord (ErlangAtom "config")
  in erlps__parse_config__2 [rest_0, arg_3]
erlps__parse_config__2 [(ErlangCons (ErlangTuple [(ErlangAtom "strict"),
                                                  strict_0]) rest_1),
                        config_2]
  =
  erlps__parse_strict__3 [strict_0, rest_1, config_2]
erlps__parse_config__2 [(ErlangCons (ErlangAtom "stream") rest_0),
                        config_1]
  =
  let
    arg_3 =
      case config_1 of
        (ErlangTuple [(ErlangAtom "config"), dirty_strings_6,
                      escaped_forward_slashes_7, escaped_strings_8,
                      multi_term_9, strict_comments_10, strict_commas_11,
                      strict_utf8_12, strict_single_quotes_13,
                      strict_escapes_14, stream_15, return_tail_16, uescape_17,
                      unescaped_jsonp_18, error_handler_19,
                      incomplete_handler_20]) ->
          ErlangTuple
            [ErlangAtom "config", dirty_strings_6, escaped_forward_slashes_7,
             escaped_strings_8, multi_term_9, strict_comments_10,
             strict_commas_11, strict_utf8_12, strict_single_quotes_13,
             strict_escapes_14, ErlangAtom "true", return_tail_16, uescape_17,
             unescaped_jsonp_18, error_handler_19, incomplete_handler_20]
        _ -> EXC.badrecord (ErlangAtom "config")
  in erlps__parse_config__2 [rest_0, arg_3]
erlps__parse_config__2 [options_2@(ErlangCons (ErlangTuple [(ErlangAtom "error_handler"),
                                                            errorhandler_0]) rest_1),
                        config_3]
  | isEFunA errorhandler_0 (toErl 3) =
  let
    case_4 =
      case config_3 of
        (ErlangTuple arr_7) | (DM.Just field_6) <- (arr_7 DA.!! 14) ->
          field_6
        _ -> EXC.badrecord (ErlangAtom "config")
  in
    case case_4 of
      (ErlangAtom "false") ->
        let
          arg_9 =
            case config_3 of
              (ErlangTuple [(ErlangAtom "config"), dirty_strings_12,
                            escaped_forward_slashes_13, escaped_strings_14,
                            multi_term_15, strict_comments_16, strict_commas_17,
                            strict_utf8_18, strict_single_quotes_19,
                            strict_escapes_20, stream_21, return_tail_22,
                            uescape_23, unescaped_jsonp_24, error_handler_25,
                            incomplete_handler_26]) ->
                ErlangTuple
                  [ErlangAtom "config", dirty_strings_12,
                   escaped_forward_slashes_13, escaped_strings_14,
                   multi_term_15, strict_comments_16, strict_commas_17,
                   strict_utf8_18, strict_single_quotes_19, strict_escapes_20,
                   stream_21, return_tail_22, uescape_23, unescaped_jsonp_24,
                   errorhandler_0, incomplete_handler_26]
              _ -> EXC.badrecord (ErlangAtom "config")
        in erlps__parse_config__2 [rest_1, arg_9]
      _ ->
        BIF.erlang__error__2
          [ErlangAtom "badarg",
           ErlangCons options_2 (ErlangCons config_3 ErlangEmptyList)]
erlps__parse_config__2 [options_2@(ErlangCons (ErlangTuple [(ErlangAtom "incomplete_handler"),
                                                            incompletehandler_0]) rest_1),
                        config_3]
  | isEFunA incompletehandler_0 (toErl 3) =
  let
    case_4 =
      case config_3 of
        (ErlangTuple arr_7) | (DM.Just field_6) <- (arr_7 DA.!! 15) ->
          field_6
        _ -> EXC.badrecord (ErlangAtom "config")
  in
    case case_4 of
      (ErlangAtom "false") ->
        let
          arg_9 =
            case config_3 of
              (ErlangTuple [(ErlangAtom "config"), dirty_strings_12,
                            escaped_forward_slashes_13, escaped_strings_14,
                            multi_term_15, strict_comments_16, strict_commas_17,
                            strict_utf8_18, strict_single_quotes_19,
                            strict_escapes_20, stream_21, return_tail_22,
                            uescape_23, unescaped_jsonp_24, error_handler_25,
                            incomplete_handler_26]) ->
                ErlangTuple
                  [ErlangAtom "config", dirty_strings_12,
                   escaped_forward_slashes_13, escaped_strings_14,
                   multi_term_15, strict_comments_16, strict_commas_17,
                   strict_utf8_18, strict_single_quotes_19, strict_escapes_20,
                   stream_21, return_tail_22, uescape_23, unescaped_jsonp_24,
                   error_handler_25, incompletehandler_0]
              _ -> EXC.badrecord (ErlangAtom "config")
        in erlps__parse_config__2 [rest_1, arg_9]
      _ ->
        BIF.erlang__error__2
          [ErlangAtom "badarg",
           ErlangCons options_2 (ErlangCons config_3 ErlangEmptyList)]
erlps__parse_config__2 [_options_0, _config_1] =
  BIF.erlang__error__1 [ErlangAtom "badarg"]
erlps__parse_config__2 [arg_3, arg_4] = EXC.function_clause unit
erlps__parse_config__2 args =
  EXC.badarity (ErlangFun 2 erlps__parse_config__2) args

erlps__parse_strict__3 :: ErlangFun
erlps__parse_strict__3 [(ErlangEmptyList), rest_0, config_1] =
  erlps__parse_config__2 [rest_0, config_1]
erlps__parse_strict__3 [(ErlangCons (ErlangAtom "comments") strict_0),
                        rest_1, config_2]
  =
  let
    arg_5 =
      case config_2 of
        (ErlangTuple [(ErlangAtom "config"), dirty_strings_8,
                      escaped_forward_slashes_9, escaped_strings_10,
                      multi_term_11, strict_comments_12, strict_commas_13,
                      strict_utf8_14, strict_single_quotes_15,
                      strict_escapes_16, stream_17, return_tail_18, uescape_19,
                      unescaped_jsonp_20, error_handler_21,
                      incomplete_handler_22]) ->
          ErlangTuple
            [ErlangAtom "config", dirty_strings_8, escaped_forward_slashes_9,
             escaped_strings_10, multi_term_11, ErlangAtom "true",
             strict_commas_13, strict_utf8_14, strict_single_quotes_15,
             strict_escapes_16, stream_17, return_tail_18, uescape_19,
             unescaped_jsonp_20, error_handler_21, incomplete_handler_22]
        _ -> EXC.badrecord (ErlangAtom "config")
  in erlps__parse_strict__3 [strict_0, rest_1, arg_5]
erlps__parse_strict__3 [(ErlangCons (ErlangAtom "trailing_commas") strict_0),
                        rest_1, config_2]
  =
  let
    arg_5 =
      case config_2 of
        (ErlangTuple [(ErlangAtom "config"), dirty_strings_8,
                      escaped_forward_slashes_9, escaped_strings_10,
                      multi_term_11, strict_comments_12, strict_commas_13,
                      strict_utf8_14, strict_single_quotes_15,
                      strict_escapes_16, stream_17, return_tail_18, uescape_19,
                      unescaped_jsonp_20, error_handler_21,
                      incomplete_handler_22]) ->
          ErlangTuple
            [ErlangAtom "config", dirty_strings_8, escaped_forward_slashes_9,
             escaped_strings_10, multi_term_11, strict_comments_12,
             ErlangAtom "true", strict_utf8_14, strict_single_quotes_15,
             strict_escapes_16, stream_17, return_tail_18, uescape_19,
             unescaped_jsonp_20, error_handler_21, incomplete_handler_22]
        _ -> EXC.badrecord (ErlangAtom "config")
  in erlps__parse_strict__3 [strict_0, rest_1, arg_5]
erlps__parse_strict__3 [(ErlangCons (ErlangAtom "utf8") strict_0),
                        rest_1, config_2]
  =
  let
    arg_5 =
      case config_2 of
        (ErlangTuple [(ErlangAtom "config"), dirty_strings_8,
                      escaped_forward_slashes_9, escaped_strings_10,
                      multi_term_11, strict_comments_12, strict_commas_13,
                      strict_utf8_14, strict_single_quotes_15,
                      strict_escapes_16, stream_17, return_tail_18, uescape_19,
                      unescaped_jsonp_20, error_handler_21,
                      incomplete_handler_22]) ->
          ErlangTuple
            [ErlangAtom "config", dirty_strings_8, escaped_forward_slashes_9,
             escaped_strings_10, multi_term_11, strict_comments_12,
             strict_commas_13, ErlangAtom "true", strict_single_quotes_15,
             strict_escapes_16, stream_17, return_tail_18, uescape_19,
             unescaped_jsonp_20, error_handler_21, incomplete_handler_22]
        _ -> EXC.badrecord (ErlangAtom "config")
  in erlps__parse_strict__3 [strict_0, rest_1, arg_5]
erlps__parse_strict__3 [(ErlangCons (ErlangAtom "single_quotes") strict_0),
                        rest_1, config_2]
  =
  let
    arg_5 =
      case config_2 of
        (ErlangTuple [(ErlangAtom "config"), dirty_strings_8,
                      escaped_forward_slashes_9, escaped_strings_10,
                      multi_term_11, strict_comments_12, strict_commas_13,
                      strict_utf8_14, strict_single_quotes_15,
                      strict_escapes_16, stream_17, return_tail_18, uescape_19,
                      unescaped_jsonp_20, error_handler_21,
                      incomplete_handler_22]) ->
          ErlangTuple
            [ErlangAtom "config", dirty_strings_8, escaped_forward_slashes_9,
             escaped_strings_10, multi_term_11, strict_comments_12,
             strict_commas_13, strict_utf8_14, ErlangAtom "true",
             strict_escapes_16, stream_17, return_tail_18, uescape_19,
             unescaped_jsonp_20, error_handler_21, incomplete_handler_22]
        _ -> EXC.badrecord (ErlangAtom "config")
  in erlps__parse_strict__3 [strict_0, rest_1, arg_5]
erlps__parse_strict__3 [(ErlangCons (ErlangAtom "escapes") strict_0),
                        rest_1, config_2]
  =
  let
    arg_5 =
      case config_2 of
        (ErlangTuple [(ErlangAtom "config"), dirty_strings_8,
                      escaped_forward_slashes_9, escaped_strings_10,
                      multi_term_11, strict_comments_12, strict_commas_13,
                      strict_utf8_14, strict_single_quotes_15,
                      strict_escapes_16, stream_17, return_tail_18, uescape_19,
                      unescaped_jsonp_20, error_handler_21,
                      incomplete_handler_22]) ->
          ErlangTuple
            [ErlangAtom "config", dirty_strings_8, escaped_forward_slashes_9,
             escaped_strings_10, multi_term_11, strict_comments_12,
             strict_commas_13, strict_utf8_14, strict_single_quotes_15,
             ErlangAtom "true", stream_17, return_tail_18, uescape_19,
             unescaped_jsonp_20, error_handler_21, incomplete_handler_22]
        _ -> EXC.badrecord (ErlangAtom "config")
  in erlps__parse_strict__3 [strict_0, rest_1, arg_5]
erlps__parse_strict__3 [_strict_0, _rest_1, _config_2] =
  BIF.erlang__error__1 [ErlangAtom "badarg"]
erlps__parse_strict__3 [arg_4, arg_5, arg_6] =
  EXC.function_clause unit
erlps__parse_strict__3 args =
  EXC.badarity (ErlangFun 3 erlps__parse_strict__3) args

erlps__config_to_list__1 :: ErlangFun
erlps__config_to_list__1 [config_0] =
  let   
    arg_2 =
      ErlangFun 1
        (let
           lambda_3 [(ErlangTuple [(ErlangAtom "error_handler"), f_5])] =
             ErlangTuple [ErlangAtom "error_handler", f_5]
           lambda_3 [(ErlangTuple [(ErlangAtom "incomplete_handler"), f_8])]
             =
             ErlangTuple [ErlangAtom "incomplete_handler", f_8]
           lambda_3 [(ErlangTuple [key_11, (ErlangAtom "true")])] = key_11
           lambda_3 [arg_4] = EXC.function_clause unit
           lambda_3 args = EXC.badarity (ErlangFun 1 lambda_3) args
         in lambda_3)
  in let
    arg_13 =
      ErlangFun 1
        (let
           lambda_14 [(ErlangTuple [_, (ErlangAtom "false")])] =
             ErlangAtom "false"
           lambda_14 [_] = ErlangAtom "true"
           lambda_14 [arg_15] = EXC.function_clause unit
           lambda_14 args = EXC.badarity (ErlangFun 1 lambda_14) args
         in lambda_14)
  in let arg_19 = BIF.erlang__tuple_to_list__1 [config_0]
  in let arg_18 = BIF.erlang__tl__1 [arg_19]
  in let
    arg_16 =
      BIF.do_remote_fun_call "Lists" "erlps__zip__2"
        [ErlangCons (ErlangAtom "dirty_strings")
           (ErlangCons (ErlangAtom "escaped_forward_slashes")
              (ErlangCons (ErlangAtom "escaped_strings")
                 (ErlangCons (ErlangAtom "multi_term")
                    (ErlangCons (ErlangAtom "strict_comments")
                       (ErlangCons (ErlangAtom "strict_commas")
                          (ErlangCons (ErlangAtom "strict_utf8")
                             (ErlangCons (ErlangAtom "strict_single_quotes")
                                (ErlangCons (ErlangAtom "strict_escapes")
                                   (ErlangCons (ErlangAtom "stream")
                                      (ErlangCons (ErlangAtom "return_tail")
                                         (ErlangCons (ErlangAtom "uescape")
                                            (ErlangCons
                                               (ErlangAtom "unescaped_jsonp")
                                               (ErlangCons
                                                  (ErlangAtom "error_handler")
                                                  (ErlangCons
                                                     (ErlangAtom
                                                        "incomplete_handler")
                                                     ErlangEmptyList)))))))))))))),
         arg_18]
  in let
    arg_12 =
      BIF.do_remote_fun_call "Lists" "erlps__filter__2"
        [arg_13, arg_16]
  in let
    arg_1 =
      BIF.do_remote_fun_call "Lists" "erlps__map__2" [arg_2, arg_12]
  in erlps__reduce_config__1 [arg_1]
erlps__config_to_list__1 [arg_21] = EXC.function_clause unit
erlps__config_to_list__1 args =
  EXC.badarity (ErlangFun 1 erlps__config_to_list__1) args

erlps__reduce_config__1 :: ErlangFun
erlps__reduce_config__1 [input_0] =
  erlps__reduce_config__3
    [input_0, ErlangEmptyList, ErlangEmptyList]
erlps__reduce_config__1 [arg_4] = EXC.function_clause unit
erlps__reduce_config__1 args =
  EXC.badarity (ErlangFun 1 erlps__reduce_config__1) args

erlps__reduce_config__3 :: ErlangFun
erlps__reduce_config__3 [(ErlangEmptyList), output_0, strict_1] =
  let case_2 = BIF.erlang__length__1 [strict_1]
  in
    case case_2 of
      (ErlangInt num_4) | (ErlangInt num_4) == (toErl 0) ->
        BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [output_0]
      (ErlangInt num_6) | (ErlangInt num_6) == (toErl 4) ->
        let
          lop_7 =
            BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [output_0]
        in
          BIF.erlang__op_append
            [lop_7, ErlangCons (ErlangAtom "strict") ErlangEmptyList]
      _ ->
        let   
          lop_12 =
            BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [output_0]
        in let
          tup_el_17 =
            BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [strict_1]
        in let head_15 = ErlangTuple [ErlangAtom "strict", tup_el_17]
        in
          BIF.erlang__op_append
            [lop_12, ErlangCons head_15 ErlangEmptyList]
erlps__reduce_config__3 [(ErlangCons (ErlangAtom "strict_comments") input_0),
                         output_1, strict_2]
  =
  let
    arg_5 =
      BIF.erlang__op_append
        [ErlangCons (ErlangAtom "comments") ErlangEmptyList, strict_2]
  in erlps__reduce_config__3 [input_0, output_1, arg_5]
erlps__reduce_config__3 [(ErlangCons (ErlangAtom "strict_utf8") input_0),
                         output_1, strict_2]
  =
  let
    arg_5 =
      BIF.erlang__op_append
        [ErlangCons (ErlangAtom "utf8") ErlangEmptyList, strict_2]
  in erlps__reduce_config__3 [input_0, output_1, arg_5]
erlps__reduce_config__3 [(ErlangCons (ErlangAtom "strict_single_quotes") input_0),
                         output_1, strict_2]
  =
  let
    arg_5 =
      BIF.erlang__op_append
        [ErlangCons (ErlangAtom "single_quotes") ErlangEmptyList,
         strict_2]
  in erlps__reduce_config__3 [input_0, output_1, arg_5]
erlps__reduce_config__3 [(ErlangCons (ErlangAtom "strict_escapes") input_0),
                         output_1, strict_2]
  =
  let
    arg_5 =
      BIF.erlang__op_append
        [ErlangCons (ErlangAtom "escapes") ErlangEmptyList, strict_2]
  in erlps__reduce_config__3 [input_0, output_1, arg_5]
erlps__reduce_config__3 [(ErlangCons else_0 input_1), output_2,
                         strict_3]
  =
  let
    arg_5 =
      BIF.erlang__op_append
        [ErlangCons else_0 ErlangEmptyList, output_2]
  in erlps__reduce_config__3 [input_1, arg_5, strict_3]
erlps__reduce_config__3 [arg_11, arg_12, arg_13] =
  EXC.function_clause unit
erlps__reduce_config__3 args =
  EXC.badarity (ErlangFun 3 erlps__reduce_config__3) args

erlps__valid_flags__0 :: ErlangFun
erlps__valid_flags__0 [] =
  ErlangCons (ErlangAtom "escaped_forward_slashes")
    (ErlangCons (ErlangAtom "escaped_strings")
       (ErlangCons (ErlangAtom "unescaped_jsonp")
          (ErlangCons (ErlangAtom "dirty_strings")
             (ErlangCons (ErlangAtom "multi_term")
                (ErlangCons (ErlangAtom "return_tail")
                   (ErlangCons (ErlangAtom "repeat_keys")
                      (ErlangCons (ErlangAtom "strict")
                         (ErlangCons (ErlangAtom "stream")
                            (ErlangCons (ErlangAtom "uescape")
                               (ErlangCons (ErlangAtom "error_handler")
                                  (ErlangCons (ErlangAtom "incomplete_handler")
                                     ErlangEmptyList)))))))))))
erlps__valid_flags__0 args =
  EXC.badarity (ErlangFun 0 erlps__valid_flags__0) args

erlps__extract_config__1 :: ErlangFun
erlps__extract_config__1 [config_0] =
  erlps__extract_parser_config__2 [config_0, ErlangEmptyList]
erlps__extract_config__1 [arg_3] = EXC.function_clause unit
erlps__extract_config__1 args =
  EXC.badarity (ErlangFun 1 erlps__extract_config__1) args

erlps__extract_parser_config__2 :: ErlangFun
erlps__extract_parser_config__2 [(ErlangEmptyList), acc_0] =
  acc_0
erlps__extract_parser_config__2 [(ErlangCons (ErlangTuple [k_0,
                                                           v_1]) rest_2),
                                 acc_3]
  =
  let    arg_6 = erlps__valid_flags__0 []
  in let case_4 = BIF.lists__member__2 [k_0, arg_6]
  in
    case case_4 of
      (ErlangAtom "true") ->
        let    head_10 = ErlangTuple [k_0, v_1]
        in let
          arg_8 =
            BIF.erlang__op_append [ErlangCons head_10 ErlangEmptyList, acc_3]
        in erlps__extract_parser_config__2 [rest_2, arg_8]
      (ErlangAtom "false") ->
        erlps__extract_parser_config__2 [rest_2, acc_3]
      something_else -> EXC.case_clause something_else
erlps__extract_parser_config__2 [(ErlangCons k_0 rest_1), acc_2]
  =
  let    arg_5 = erlps__valid_flags__0 []
  in let case_3 = BIF.lists__member__2 [k_0, arg_5]
  in
    case case_3 of
      (ErlangAtom "true") ->
        let
          arg_7 =
            BIF.erlang__op_append [ErlangCons k_0 ErlangEmptyList, acc_2]
        in erlps__extract_parser_config__2 [rest_1, arg_7]
      (ErlangAtom "false") ->
        erlps__extract_parser_config__2 [rest_1, acc_2]
      something_else -> EXC.case_clause something_else
erlps__extract_parser_config__2 [arg_14, arg_15] =
  EXC.function_clause unit
erlps__extract_parser_config__2 args =
  EXC.badarity (ErlangFun 2 erlps__extract_parser_config__2) args