module Jsx.Parser(erlps__parser__3, erlps__resume__5,
                  erlps__init__1, erlps__handle_event__2) where
{-
This file has been autogenerated
DO NOT EDIT - Your changes WILL be overwritten
Use this code at your own risk - the authors are just a mischievous raccoon and a haskell devote
Erlscripten v0.2.0
-}

import Prelude
import Data.BigInt as DBI
import Data.Array as DA
import Data.Maybe as DM
import Data.Map as Map
import Data.Tuple as DT
import Erlang.Builtins as BIF
import Erlang.Binary as BIN
import Erlang.Helpers
import Erlang.Exception as EXC
import Erlang.Type
import Partial.Unsafe (unsafePartial)


erlps__parser__3 :: ErlangFun
erlps__parser__3 [handler_0, state_1, config_2] =
  ErlangFun 1
    (let
       lambda_3 [tokens_5] =
         let   
           tup_el_9 =
             BIF.erlang__apply__3
               [handler_0, ErlangAtom "init",
                ErlangCons state_1 ErlangEmptyList]
         in let arg_7 = ErlangTuple [handler_0, tup_el_9]
         in let
           arg_16 =
             BIF.do_remote_fun_call "Jsx.Config" "erlps__parse_config__1"
               [config_2]
         in erlps__value__4 [tokens_5, arg_7, ErlangEmptyList, arg_16]
       lambda_3 [arg_4] = EXC.function_clause unit
       lambda_3 args = EXC.badarity (ErlangFun 1 lambda_3) args
     in lambda_3)
erlps__parser__3 [arg_18, arg_19, arg_20] =
  EXC.function_clause unit
erlps__parser__3 args =
  EXC.badarity (ErlangFun 3 erlps__parser__3) args

erlps__resume__5 :: ErlangFun
erlps__resume__5 [rest_0, state_1, handler_2, stack_3, config_4]
  =
  case state_1 of
    (ErlangAtom "value") ->
      erlps__value__4 [rest_0, handler_2, stack_3, config_4]
    (ErlangAtom "object") ->
      erlps__object__4 [rest_0, handler_2, stack_3, config_4]
    (ErlangAtom "array") ->
      erlps__array__4 [rest_0, handler_2, stack_3, config_4]
    (ErlangAtom "maybe_done") ->
      erlps__maybe_done__4 [rest_0, handler_2, stack_3, config_4]
    (ErlangAtom "done") ->
      erlps__done__4 [rest_0, handler_2, stack_3, config_4]
    something_else -> EXC.case_clause something_else
erlps__resume__5 [arg_26, arg_27, arg_28, arg_29, arg_30] =
  EXC.function_clause unit
erlps__resume__5 args =
  EXC.badarity (ErlangFun 5 erlps__resume__5) args

erlps__incomplete__4 :: ErlangFun
erlps__incomplete__4 [state_0, handler_1, stack_2,
                      config_3@(ErlangTuple [(ErlangAtom "config"), _, _, _, _,
                                             _, _, _, _, _,
                                             (ErlangAtom "false"), _, _, _, _,
                                             _])]
  =
  let
    case_4 =
      case config_3 of
        (ErlangTuple arr_7) | (DM.Just field_6) <- (arr_7 DA.!! 14) ->
          field_6
        _ -> EXC.badrecord (ErlangAtom "config")
  in
    case case_4 of
      (ErlangAtom "false") ->
        BIF.erlang__error__1 [ErlangAtom "badarg"]
      f_9 ->
        let   
          arg_11 =
            ErlangTuple [ErlangAtom "parser", state_0, handler_1, stack_2]
        in let
          arg_16 =
            BIF.do_remote_fun_call "Jsx.Config" "erlps__config_to_list__1"
              [config_3]
        in
          BIF.erlang__apply__2
            [f_9,
             ErlangCons ErlangEmptyList
               (ErlangCons arg_11 (ErlangCons arg_16 ErlangEmptyList))]
erlps__incomplete__4 [state_0, handler_1, stack_2,
                      config_3@(ErlangTuple [(ErlangAtom "config"), _, _, _, _,
                                             _, _, _, _, _, _, _, _, _, _,
                                             (ErlangAtom "false")])]
  =
  let
    tup_el_5 =
      ErlangFun 1
        (let
           lambda_6 [end_8]
             | (ErlangAtom "true") ==
                 (falsifyErrors
                    (\ _ ->
                       let
                         lop_9 =
                           BIF.erlang__op_eq [end_8, ErlangAtom "end_stream"]
                       in
                         case lop_9 of
                           (ErlangAtom "true") -> ErlangAtom "true"
                           (ErlangAtom "false") ->
                             BIF.erlang__op_eq [end_8, ErlangAtom "end_json"]
                           _ -> EXC.badarg1 lop_9)) =
             let
               case_14 =
                 erlps__resume__5
                   [ErlangCons (ErlangAtom "end_json") ErlangEmptyList, state_0,
                    handler_1, stack_2, config_3]
             in
               case case_14 of
                 (ErlangTuple [(ErlangAtom "incomplete"), _]) ->
                   let
                     case_22 =
                       case config_3 of
                         (ErlangTuple arr_25) | (DM.Just field_24) <-
                                                  (arr_25 DA.!! 14) ->
                           field_24
                         _ -> EXC.badrecord (ErlangAtom "config")
                   in
                     case case_22 of
                       (ErlangAtom "false") ->
                         BIF.erlang__error__1 [ErlangAtom "badarg"]
                       f_27 ->
                         let   
                           arg_29 =
                             ErlangTuple
                               [ErlangAtom "parser", state_0, handler_1,
                                stack_2]
                         in let
                           arg_34 =
                             BIF.do_remote_fun_call "Jsx.Config"
                               "erlps__config_to_list__1" [config_3]
                         in
                           BIF.erlang__apply__2
                             [f_27,
                              ErlangCons ErlangEmptyList
                                (ErlangCons arg_29
                                   (ErlangCons arg_34 ErlangEmptyList))]
                 else_37 -> else_37
           lambda_6 [tokens_38] =
             erlps__resume__5
               [tokens_38, state_0, handler_1, stack_2, config_3]
           lambda_6 [arg_7] = EXC.function_clause unit
           lambda_6 args = EXC.badarity (ErlangFun 1 lambda_6) args
         in lambda_6)
  in ErlangTuple [ErlangAtom "incomplete", tup_el_5]
erlps__incomplete__4 [state_0, handler_1, stack_2,
                      config_4@(ErlangTuple [(ErlangAtom "config"), _, _, _, _,
                                             _, _, _, _, _, _, _, _, _, _,
                                             f_3])]
  =
  let   
    arg_6 =
      ErlangTuple [ErlangAtom "parser", state_0, handler_1, stack_2]
  in let
    arg_11 =
      BIF.do_remote_fun_call "Jsx.Config" "erlps__config_to_list__1"
        [config_4]
  in
    BIF.erlang__apply__2
      [f_3,
       ErlangCons ErlangEmptyList
         (ErlangCons arg_6 (ErlangCons arg_11 ErlangEmptyList))]
erlps__incomplete__4 [arg_14, arg_15, arg_16, arg_17] =
  EXC.function_clause unit
erlps__incomplete__4 args =
  EXC.badarity (ErlangFun 4 erlps__incomplete__4) args

erlps__handle_event__3 :: ErlangFun
erlps__handle_event__3 [event_0,
                        (ErlangTuple [handler_1, state_2]), _config_3]
  =
  let
    tup_el_5 =
      BIF.erlang__apply__3
        [handler_1, ErlangAtom "handle_event",
         ErlangCons event_0 (ErlangCons state_2 ErlangEmptyList)]
  in ErlangTuple [handler_1, tup_el_5]
erlps__handle_event__3 [arg_13, arg_14, arg_15] =
  EXC.function_clause unit
erlps__handle_event__3 args =
  EXC.badarity (ErlangFun 3 erlps__handle_event__3) args

erlps__value__4 :: ErlangFun
erlps__value__4 [(ErlangCons string_0 tokens_1), handler_2,
                 stack_3, config_4]
  | (ErlangAtom "true") ==
      (falsifyErrors (\ _ -> BIF.erlang__is_binary__1 [string_0])) =
  EXC.tryOfCatch
    (\ _ -> erlps__clean_string__2 [string_0, config_4])
    (\ of_7 ->
       let    arg_13 = ErlangTuple [ErlangAtom "string", of_7]
       in let
         arg_12 = erlps__handle_event__3 [arg_13, handler_2, config_4]
       in erlps__maybe_done__4 [tokens_1, arg_12, stack_3, config_4])
    (\ ex_8 ->
       case ex_8 of
         (ErlangTuple [(ErlangAtom "error"), (ErlangAtom "badarg"), _]) ->
           let
             case_20 =
               case config_4 of
                 (ErlangTuple arr_23) | (DM.Just field_22) <-
                                          (arr_23 DA.!! 14) ->
                   field_22
                 _ -> EXC.badrecord (ErlangAtom "config")
           in
             case case_20 of
               (ErlangAtom "false") ->
                 BIF.erlang__error__1 [ErlangAtom "badarg"]
               f_25 ->
                 let    head_27 = ErlangTuple [ErlangAtom "string", string_0]
                 in let
                   arg_31 =
                     ErlangTuple
                       [ErlangAtom "parser", ErlangAtom "value", handler_2,
                        stack_3]
                 in let
                   arg_36 =
                     BIF.do_remote_fun_call "Jsx.Config"
                       "erlps__config_to_list__1" [config_4]
                 in
                   BIF.erlang__apply__2
                     [f_25,
                      ErlangCons (ErlangCons head_27 tokens_1)
                        (ErlangCons arg_31 (ErlangCons arg_36 ErlangEmptyList))]
         ex_9 -> EXC.raise ex_9)
erlps__value__4 [(ErlangCons (ErlangAtom "true") tokens_0),
                 handler_1, stack_2, config_3]
  =
  let   
    arg_6 = ErlangTuple [ErlangAtom "literal", ErlangAtom "true"]
  in let
    arg_5 = erlps__handle_event__3 [arg_6, handler_1, config_3]
  in erlps__maybe_done__4 [tokens_0, arg_5, stack_2, config_3]
erlps__value__4 [(ErlangCons (ErlangAtom "false") tokens_0),
                 handler_1, stack_2, config_3]
  =
  let   
    arg_6 = ErlangTuple [ErlangAtom "literal", ErlangAtom "false"]
  in let
    arg_5 = erlps__handle_event__3 [arg_6, handler_1, config_3]
  in erlps__maybe_done__4 [tokens_0, arg_5, stack_2, config_3]
erlps__value__4 [(ErlangCons (ErlangAtom "null") tokens_0),
                 handler_1, stack_2, config_3]
  =
  let   
    arg_6 = ErlangTuple [ErlangAtom "literal", ErlangAtom "null"]
  in let
    arg_5 = erlps__handle_event__3 [arg_6, handler_1, config_3]
  in erlps__maybe_done__4 [tokens_0, arg_5, stack_2, config_3]
erlps__value__4 [(ErlangCons (ErlangAtom "start_object") tokens_0),
                 handler_1, stack_2, config_3]
  =
  let
    arg_5 =
      erlps__handle_event__3
        [ErlangAtom "start_object", handler_1, config_3]
  in
    erlps__object__4
      [tokens_0, arg_5, ErlangCons (ErlangAtom "object") stack_2,
       config_3]
erlps__value__4 [(ErlangCons (ErlangAtom "start_array") tokens_0),
                 handler_1, stack_2, config_3]
  =
  let
    arg_5 =
      erlps__handle_event__3
        [ErlangAtom "start_array", handler_1, config_3]
  in
    erlps__array__4
      [tokens_0, arg_5, ErlangCons (ErlangAtom "array") stack_2,
       config_3]
erlps__value__4 [(ErlangCons number_0 tokens_1), handler_2,
                 stack_3, config_4]
  | isEInt number_0 =
  let    arg_7 = ErlangTuple [ErlangAtom "integer", number_0]
  in let
    arg_6 = erlps__handle_event__3 [arg_7, handler_2, config_4]
  in erlps__maybe_done__4 [tokens_1, arg_6, stack_3, config_4]
erlps__value__4 [(ErlangCons number_0 tokens_1), handler_2,
                 stack_3, config_4]
  | isEFloat number_0 =
  let    arg_7 = ErlangTuple [ErlangAtom "float", number_0]
  in let
    arg_6 = erlps__handle_event__3 [arg_7, handler_2, config_4]
  in erlps__maybe_done__4 [tokens_1, arg_6, stack_3, config_4]
erlps__value__4 [(ErlangCons (ErlangTuple [(ErlangAtom "raw"),
                                           raw_0]) tokens_1),
                 handler_2, stack_3, config_4]
  | (ErlangAtom "true") ==
      (falsifyErrors (\ _ -> BIF.erlang__is_binary__1 [raw_0])) =
  let   
    fun_8 =
      BIF.do_remote_fun_call "Jsx" "erlps__decoder__3"
        [ErlangAtom "jsx_parser", ErlangEmptyList, ErlangEmptyList]
  in let
    lop_6 =
      BIF.erlang__apply__2 [fun_8, ErlangCons raw_0 ErlangEmptyList]
  in let arg_5 = BIF.erlang__op_append [lop_6, tokens_1]
  in erlps__value__4 [arg_5, handler_2, stack_3, config_4]
erlps__value__4 [(ErlangCons (ErlangTuple [(ErlangTuple [year_0,
                                                         month_1, day_2]),
                                           (ErlangTuple [hour_3, min_4,
                                                         sec_5])]) tokens_6),
                 handler_7, stack_8, config_9]
  | (((((isEInt year_0) && (isEInt month_1)) && (isEInt day_2)) &&
        (isEInt hour_3)) &&
       (isEInt min_4)) &&
      (isEInt sec_5) =
  let   
    arg_15 =
      toErl "~4.10.0B-~2.10.0B-~2.10.0BT~2.10.0B:~2.10.0B:~2.10.0BZ"
  in let
    arg_14 =
      BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
        [arg_15,
         ErlangCons year_0
           (ErlangCons month_1
              (ErlangCons day_2
                 (ErlangCons hour_3
                    (ErlangCons min_4 (ErlangCons sec_5 ErlangEmptyList)))))]
  in let
    tup_el_13 =
      BIF.do_remote_fun_call "Erlang.Unicode"
        "erlps__characters_to_binary__1" [arg_14]
  in let head_11 = ErlangTuple [ErlangAtom "string", tup_el_13]
  in
    erlps__value__4
      [ErlangCons head_11 tokens_6, handler_7, stack_8, config_9]
erlps__value__4 [(ErlangCons (ErlangTuple [(ErlangTuple [year_0,
                                                         month_1, day_2]),
                                           (ErlangTuple [hour_3, min_4,
                                                         sec_5])]) tokens_6),
                 handler_7, stack_8, config_9]
  | (((((isEInt year_0) && (isEInt month_1)) && (isEInt day_2)) &&
        (isEInt hour_3)) &&
       (isEInt min_4)) &&
      (isEFloat sec_5) =
  let   
    arg_15 =
      toErl "~4.10.0B-~2.10.0B-~2.10.0BT~2.10.0B:~2.10.0B:~9.6.0fZ"
  in let
    arg_14 =
      BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
        [arg_15,
         ErlangCons year_0
           (ErlangCons month_1
              (ErlangCons day_2
                 (ErlangCons hour_3
                    (ErlangCons min_4 (ErlangCons sec_5 ErlangEmptyList)))))]
  in let
    tup_el_13 =
      BIF.do_remote_fun_call "Erlang.Unicode"
        "erlps__characters_to_binary__1" [arg_14]
  in let head_11 = ErlangTuple [ErlangAtom "string", tup_el_13]
  in
    erlps__value__4
      [ErlangCons head_11 tokens_6, handler_7, stack_8, config_9]
erlps__value__4 [(ErlangCons (ErlangTuple [(ErlangAtom "literal"),
                                           value_0]) tokens_1),
                 handler_2, stack_3, config_4]
  | (ErlangAtom "true") ==
      (falsifyErrors
         (\ _ ->
            let    lop_14 = BIF.erlang__op_eq [value_0, ErlangAtom "true"]
            in let
              lop_13 =
                case lop_14 of
                  (ErlangAtom "true") -> ErlangAtom "true"
                  (ErlangAtom "false") ->
                    BIF.erlang__op_eq [value_0, ErlangAtom "false"]
                  _ -> EXC.badarg1 lop_14
            in
              case lop_13 of
                (ErlangAtom "true") -> ErlangAtom "true"
                (ErlangAtom "false") ->
                  BIF.erlang__op_eq [value_0, ErlangAtom "null"]
                _ -> EXC.badarg1 lop_13)) =
  let
    arg_5 =
      BIF.erlang__op_append
        [ErlangCons value_0 ErlangEmptyList, tokens_1]
  in erlps__value__4 [arg_5, handler_2, stack_3, config_4]
erlps__value__4 [(ErlangCons (ErlangTuple [(ErlangAtom "integer"),
                                           value_0]) tokens_1),
                 handler_2, stack_3, config_4]
  | isEInt value_0 =
  let
    arg_5 =
      BIF.erlang__op_append
        [ErlangCons value_0 ErlangEmptyList, tokens_1]
  in erlps__value__4 [arg_5, handler_2, stack_3, config_4]
erlps__value__4 [(ErlangCons (ErlangTuple [(ErlangAtom "float"),
                                           value_0]) tokens_1),
                 handler_2, stack_3, config_4]
  | isEFloat value_0 =
  let
    arg_5 =
      BIF.erlang__op_append
        [ErlangCons value_0 ErlangEmptyList, tokens_1]
  in erlps__value__4 [arg_5, handler_2, stack_3, config_4]
erlps__value__4 [(ErlangCons (ErlangTuple [(ErlangAtom "string"),
                                           value_0]) tokens_1),
                 handler_2, stack_3, config_4]
  | (ErlangAtom "true") ==
      (falsifyErrors
         (\ _ ->
            let lop_13 = BIF.erlang__is_binary__1 [value_0]
            in
              case lop_13 of
                (ErlangAtom "true") -> ErlangAtom "true"
                (ErlangAtom "false") -> BIF.erlang__is_atom__1 [value_0]
                _ -> EXC.badarg1 lop_13)) =
  let
    arg_5 =
      BIF.erlang__op_append
        [ErlangCons value_0 ErlangEmptyList, tokens_1]
  in erlps__value__4 [arg_5, handler_2, stack_3, config_4]
erlps__value__4 [(ErlangCons (ErlangTuple [(ErlangAtom "number"),
                                           value_0]) tokens_1),
                 handler_2, stack_3, config_4]
  | (ErlangAtom "true") ==
      (falsifyErrors
         (\ _ ->
            let lop_13 = BIF.erlang__is_float__1 [value_0]
            in
              case lop_13 of
                (ErlangAtom "true") -> ErlangAtom "true"
                (ErlangAtom "false") -> BIF.erlang__is_integer__1 [value_0]
                _ -> EXC.badarg1 lop_13)) =
  let
    arg_5 =
      BIF.erlang__op_append
        [ErlangCons value_0 ErlangEmptyList, tokens_1]
  in erlps__value__4 [arg_5, handler_2, stack_3, config_4]
erlps__value__4 [(ErlangCons string_0 tokens_1), handler_2,
                 stack_3, config_4]
  | isEAtom string_0 =
  let   
    tup_el_9 =
      BIF.erlang__atom_to_binary__2 [string_0, ErlangAtom "utf8"]
  in let head_7 = ErlangTuple [ErlangAtom "string", tup_el_9]
  in let
    arg_5 =
      BIF.erlang__op_append
        [ErlangCons head_7 ErlangEmptyList, tokens_1]
  in erlps__value__4 [arg_5, handler_2, stack_3, config_4]
erlps__value__4 [(ErlangEmptyList), handler_0, stack_1, config_2]
  =
  erlps__incomplete__4
    [ErlangAtom "value", handler_0, stack_1, config_2]
erlps__value__4 [badtokens_0, handler_1, stack_2, config_3]
  | isEList badtokens_0 =
  let
    case_4 =
      case config_3 of
        (ErlangTuple arr_7) | (DM.Just field_6) <- (arr_7 DA.!! 14) ->
          field_6
        _ -> EXC.badrecord (ErlangAtom "config")
  in
    case case_4 of
      (ErlangAtom "false") ->
        BIF.erlang__error__1 [ErlangAtom "badarg"]
      f_9 ->
        let   
          arg_11 =
            ErlangTuple
              [ErlangAtom "parser", ErlangAtom "value", handler_1, stack_2]
        in let
          arg_16 =
            BIF.do_remote_fun_call "Jsx.Config" "erlps__config_to_list__1"
              [config_3]
        in
          BIF.erlang__apply__2
            [f_9,
             ErlangCons badtokens_0
               (ErlangCons arg_11 (ErlangCons arg_16 ErlangEmptyList))]
erlps__value__4 [token_0, handler_1, stack_2, config_3] =
  erlps__value__4
    [ErlangCons token_0 ErlangEmptyList, handler_1, stack_2,
     config_3]
erlps__value__4 [arg_10, arg_11, arg_12, arg_13] =
  EXC.function_clause unit
erlps__value__4 args =
  EXC.badarity (ErlangFun 4 erlps__value__4) args

erlps__object__4 :: ErlangFun
erlps__object__4 [(ErlangCons (ErlangAtom "end_object") tokens_0),
                  handler_1, (ErlangCons (ErlangAtom "object") stack_2),
                  config_3]
  =
  let
    arg_5 =
      erlps__handle_event__3
        [ErlangAtom "end_object", handler_1, config_3]
  in erlps__maybe_done__4 [tokens_0, arg_5, stack_2, config_3]
erlps__object__4 [(ErlangCons (ErlangTuple [(ErlangAtom "key"),
                                            key_0]) tokens_1),
                  handler_2, stack_3, config_4]
  | (ErlangAtom "true") ==
      (falsifyErrors
         (\ _ ->
            let    lop_12 = BIF.erlang__is_atom__1 [key_0]
            in let
              lop_11 =
                case lop_12 of
                  (ErlangAtom "true") -> ErlangAtom "true"
                  (ErlangAtom "false") -> BIF.erlang__is_binary__1 [key_0]
                  _ -> EXC.badarg1 lop_12
            in
              case lop_11 of
                (ErlangAtom "true") -> ErlangAtom "true"
                (ErlangAtom "false") -> BIF.erlang__is_integer__1 [key_0]
                _ -> EXC.badarg1 lop_11)) =
  erlps__object__4
    [ErlangCons key_0 tokens_1, handler_2, stack_3, config_4]
erlps__object__4 [(ErlangCons key_0 tokens_1), handler_2,
                  (ErlangCons (ErlangAtom "object") stack_3), config_4]
  | (ErlangAtom "true") ==
      (falsifyErrors
         (\ _ ->
            let    lop_43 = BIF.erlang__is_atom__1 [key_0]
            in let
              lop_42 =
                case lop_43 of
                  (ErlangAtom "true") -> ErlangAtom "true"
                  (ErlangAtom "false") -> BIF.erlang__is_binary__1 [key_0]
                  _ -> EXC.badarg1 lop_43
            in
              case lop_42 of
                (ErlangAtom "true") -> ErlangAtom "true"
                (ErlangAtom "false") -> BIF.erlang__is_integer__1 [key_0]
                _ -> EXC.badarg1 lop_42)) =
  EXC.tryOfCatch
    (\ _ ->
       let arg_5 = erlps__fix_key__1 [key_0]
       in erlps__clean_string__2 [arg_5, config_4])
    (\ of_8 ->
       let    arg_14 = ErlangTuple [ErlangAtom "key", of_8]
       in let
         arg_13 = erlps__handle_event__3 [arg_14, handler_2, config_4]
       in
         erlps__value__4
           [tokens_1, arg_13, ErlangCons (ErlangAtom "object") stack_3,
            config_4])
    (\ ex_9 ->
       case ex_9 of
         (ErlangTuple [(ErlangAtom "error"), (ErlangAtom "badarg"), _]) ->
           let
             case_23 =
               case config_4 of
                 (ErlangTuple arr_26) | (DM.Just field_25) <-
                                          (arr_26 DA.!! 14) ->
                   field_25
                 _ -> EXC.badrecord (ErlangAtom "config")
           in
             case case_23 of
               (ErlangAtom "false") ->
                 BIF.erlang__error__1 [ErlangAtom "badarg"]
               f_28 ->
                 let    head_30 = ErlangTuple [ErlangAtom "string", key_0]
                 in let
                   arg_34 =
                     ErlangTuple
                       [ErlangAtom "parser", ErlangAtom "object", handler_2,
                        stack_3]
                 in let
                   arg_39 =
                     BIF.do_remote_fun_call "Jsx.Config"
                       "erlps__config_to_list__1" [config_4]
                 in
                   BIF.erlang__apply__2
                     [f_28,
                      ErlangCons (ErlangCons head_30 tokens_1)
                        (ErlangCons arg_34 (ErlangCons arg_39 ErlangEmptyList))]
         ex_10 -> EXC.raise ex_10)
erlps__object__4 [(ErlangEmptyList), handler_0, stack_1,
                  config_2]
  =
  erlps__incomplete__4
    [ErlangAtom "object", handler_0, stack_1, config_2]
erlps__object__4 [token_0, handler_1, stack_2, config_3] =
  erlps__object__4
    [ErlangCons token_0 ErlangEmptyList, handler_1, stack_2,
     config_3]
erlps__object__4 [arg_10, arg_11, arg_12, arg_13] =
  EXC.function_clause unit
erlps__object__4 args =
  EXC.badarity (ErlangFun 4 erlps__object__4) args

erlps__array__4 :: ErlangFun
erlps__array__4 [(ErlangCons (ErlangAtom "end_array") tokens_0),
                 handler_1, (ErlangCons (ErlangAtom "array") stack_2), config_3]
  =
  let
    arg_5 =
      erlps__handle_event__3
        [ErlangAtom "end_array", handler_1, config_3]
  in erlps__maybe_done__4 [tokens_0, arg_5, stack_2, config_3]
erlps__array__4 [(ErlangEmptyList), handler_0, stack_1, config_2]
  =
  erlps__incomplete__4
    [ErlangAtom "array", handler_0, stack_1, config_2]
erlps__array__4 [tokens_0, handler_1, stack_2, config_3]
  | isEList tokens_0 =
  erlps__value__4 [tokens_0, handler_1, stack_2, config_3]
erlps__array__4 [token_0, handler_1, stack_2, config_3] =
  erlps__array__4
    [ErlangCons token_0 ErlangEmptyList, handler_1, stack_2,
     config_3]
erlps__array__4 [arg_10, arg_11, arg_12, arg_13] =
  EXC.function_clause unit
erlps__array__4 args =
  EXC.badarity (ErlangFun 4 erlps__array__4) args

erlps__maybe_done__4 :: ErlangFun
erlps__maybe_done__4 [(ErlangCons (ErlangAtom "end_json") (ErlangEmptyList)),
                      handler_0, (ErlangEmptyList), config_1]
  =
  erlps__done__4
    [ErlangCons (ErlangAtom "end_json") ErlangEmptyList, handler_0,
     ErlangEmptyList, config_1]
erlps__maybe_done__4 [tokens_0, handler_1,
                      stack_2@(ErlangCons (ErlangAtom "object") _), config_3]
  | isEList tokens_0 =
  erlps__object__4 [tokens_0, handler_1, stack_2, config_3]
erlps__maybe_done__4 [tokens_0, handler_1,
                      stack_2@(ErlangCons (ErlangAtom "array") _), config_3]
  | isEList tokens_0 =
  erlps__array__4 [tokens_0, handler_1, stack_2, config_3]
erlps__maybe_done__4 [(ErlangEmptyList), handler_0, stack_1,
                      config_2]
  =
  erlps__incomplete__4
    [ErlangAtom "maybe_done", handler_0, stack_1, config_2]
erlps__maybe_done__4 [badtokens_0, handler_1, stack_2, config_3]
  | isEList badtokens_0 =
  let
    case_4 =
      case config_3 of
        (ErlangTuple arr_7) | (DM.Just field_6) <- (arr_7 DA.!! 14) ->
          field_6
        _ -> EXC.badrecord (ErlangAtom "config")
  in
    case case_4 of
      (ErlangAtom "false") ->
        BIF.erlang__error__1 [ErlangAtom "badarg"]
      f_9 ->
        let   
          arg_11 =
            ErlangTuple
              [ErlangAtom "parser", ErlangAtom "maybe_done", handler_1,
               stack_2]
        in let
          arg_16 =
            BIF.do_remote_fun_call "Jsx.Config" "erlps__config_to_list__1"
              [config_3]
        in
          BIF.erlang__apply__2
            [f_9,
             ErlangCons badtokens_0
               (ErlangCons arg_11 (ErlangCons arg_16 ErlangEmptyList))]
erlps__maybe_done__4 [token_0, handler_1, stack_2, config_3] =
  erlps__maybe_done__4
    [ErlangCons token_0 ErlangEmptyList, handler_1, stack_2,
     config_3]
erlps__maybe_done__4 [arg_10, arg_11, arg_12, arg_13] =
  EXC.function_clause unit
erlps__maybe_done__4 args =
  EXC.badarity (ErlangFun 4 erlps__maybe_done__4) args

erlps__done__4 :: ErlangFun
erlps__done__4 [(ErlangEmptyList), handler_0, (ErlangEmptyList),
                config_1@(ErlangTuple [(ErlangAtom "config"), _, _, _, _, _, _,
                                       _, _, _, (ErlangAtom "true"), _, _, _, _,
                                       _])]
  =
  erlps__incomplete__4
    [ErlangAtom "done", handler_0, ErlangEmptyList, config_1]
erlps__done__4 [tokens_0, handler_1, (ErlangEmptyList), config_2]
  | (ErlangAtom "true") ==
      (falsifyErrors
         (\ _ ->
            let
              lop_8 =
                BIF.erlang__op_eq
                  [tokens_0, ErlangCons (ErlangAtom "end_json") ErlangEmptyList]
            in
              case lop_8 of
                (ErlangAtom "true") -> ErlangAtom "true"
                (ErlangAtom "false") ->
                  BIF.erlang__op_eq [tokens_0, ErlangEmptyList]
                _ -> EXC.badarg1 lop_8)) =
  let
    matchExpr_7 =
      erlps__handle_event__3
        [ErlangAtom "end_json", handler_1, config_2]
  in
    case matchExpr_7 of
      (ErlangTuple [_, state_6]) -> state_6
      _ -> EXC.badmatch matchExpr_7
erlps__done__4 [badtokens_0, handler_1, stack_2, config_3]
  | isEList badtokens_0 =
  let
    case_4 =
      case config_3 of
        (ErlangTuple arr_7) | (DM.Just field_6) <- (arr_7 DA.!! 14) ->
          field_6
        _ -> EXC.badrecord (ErlangAtom "config")
  in
    case case_4 of
      (ErlangAtom "false") ->
        BIF.erlang__error__1 [ErlangAtom "badarg"]
      f_9 ->
        let   
          arg_11 =
            ErlangTuple
              [ErlangAtom "parser", ErlangAtom "done", handler_1, stack_2]
        in let
          arg_16 =
            BIF.do_remote_fun_call "Jsx.Config" "erlps__config_to_list__1"
              [config_3]
        in
          BIF.erlang__apply__2
            [f_9,
             ErlangCons badtokens_0
               (ErlangCons arg_11 (ErlangCons arg_16 ErlangEmptyList))]
erlps__done__4 [token_0, handler_1, stack_2, config_3] =
  erlps__done__4
    [ErlangCons token_0 ErlangEmptyList, handler_1, stack_2,
     config_3]
erlps__done__4 [arg_10, arg_11, arg_12, arg_13] =
  EXC.function_clause unit
erlps__done__4 args =
  EXC.badarity (ErlangFun 4 erlps__done__4) args

erlps__fix_key__1 :: ErlangFun
erlps__fix_key__1 [key_0] | isEAtom key_0 =
  BIF.erlang__atom_to_binary__2 [key_0, ErlangAtom "utf8"]
erlps__fix_key__1 [key_0] | isEInt key_0 =
  let arg_1 = BIF.erlang__integer_to_list__1 [key_0]
  in BIF.erlang__list_to_binary__1 [arg_1]
erlps__fix_key__1 [key_0]
  | (ErlangAtom "true") ==
      (falsifyErrors (\ _ -> BIF.erlang__is_binary__1 [key_0])) =
  key_0
erlps__fix_key__1 [arg_2] = EXC.function_clause unit
erlps__fix_key__1 args =
  EXC.badarity (ErlangFun 1 erlps__fix_key__1) args

erlps__clean_string__2 :: ErlangFun
erlps__clean_string__2 [bin_0,
                        (ErlangTuple [(ErlangAtom "config"),
                                      (ErlangAtom "true"), _, _, _, _, _, _, _,
                                      _, _, _, _, _, _, _])]
  =
  bin_0
erlps__clean_string__2 [bin_0, config_1] =
  erlps__clean__3 [bin_0, ErlangEmptyList, config_1]
erlps__clean_string__2 [arg_5, arg_6] = EXC.function_clause unit
erlps__clean_string__2 args =
  EXC.badarity (ErlangFun 2 erlps__clean_string__2) args

erlps__clean__3 :: ErlangFun
erlps__clean__3 [(ErlangBinary binSeg_0), acc_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 0)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    arg_14 = toErl 0
  in let head_13 = erlps__maybe_replace__2 [arg_14, config_8]
  in
    erlps__clean__3
      [rest_6, ErlangCons acc_7 (ErlangCons head_13 ErlangEmptyList),
       config_8]
erlps__clean__3 [(ErlangBinary binSeg_0), acc_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 1)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    arg_14 = toErl 1
  in let head_13 = erlps__maybe_replace__2 [arg_14, config_8]
  in
    erlps__clean__3
      [rest_6, ErlangCons acc_7 (ErlangCons head_13 ErlangEmptyList),
       config_8]
erlps__clean__3 [(ErlangBinary binSeg_0), acc_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 2)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    arg_14 = toErl 2
  in let head_13 = erlps__maybe_replace__2 [arg_14, config_8]
  in
    erlps__clean__3
      [rest_6, ErlangCons acc_7 (ErlangCons head_13 ErlangEmptyList),
       config_8]
erlps__clean__3 [(ErlangBinary binSeg_0), acc_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 3)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    arg_14 = toErl 3
  in let head_13 = erlps__maybe_replace__2 [arg_14, config_8]
  in
    erlps__clean__3
      [rest_6, ErlangCons acc_7 (ErlangCons head_13 ErlangEmptyList),
       config_8]
erlps__clean__3 [(ErlangBinary binSeg_0), acc_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 4)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    arg_14 = toErl 4
  in let head_13 = erlps__maybe_replace__2 [arg_14, config_8]
  in
    erlps__clean__3
      [rest_6, ErlangCons acc_7 (ErlangCons head_13 ErlangEmptyList),
       config_8]
erlps__clean__3 [(ErlangBinary binSeg_0), acc_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 5)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    arg_14 = toErl 5
  in let head_13 = erlps__maybe_replace__2 [arg_14, config_8]
  in
    erlps__clean__3
      [rest_6, ErlangCons acc_7 (ErlangCons head_13 ErlangEmptyList),
       config_8]
erlps__clean__3 [(ErlangBinary binSeg_0), acc_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 6)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    arg_14 = toErl 6
  in let head_13 = erlps__maybe_replace__2 [arg_14, config_8]
  in
    erlps__clean__3
      [rest_6, ErlangCons acc_7 (ErlangCons head_13 ErlangEmptyList),
       config_8]
erlps__clean__3 [(ErlangBinary binSeg_0), acc_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 7)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    arg_14 = toErl 7
  in let head_13 = erlps__maybe_replace__2 [arg_14, config_8]
  in
    erlps__clean__3
      [rest_6, ErlangCons acc_7 (ErlangCons head_13 ErlangEmptyList),
       config_8]
erlps__clean__3 [(ErlangBinary binSeg_0), acc_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 8)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    arg_14 = toErl 8
  in let head_13 = erlps__maybe_replace__2 [arg_14, config_8]
  in
    erlps__clean__3
      [rest_6, ErlangCons acc_7 (ErlangCons head_13 ErlangEmptyList),
       config_8]
erlps__clean__3 [(ErlangBinary binSeg_0), acc_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 9)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    arg_14 = toErl 9
  in let head_13 = erlps__maybe_replace__2 [arg_14, config_8]
  in
    erlps__clean__3
      [rest_6, ErlangCons acc_7 (ErlangCons head_13 ErlangEmptyList),
       config_8]
erlps__clean__3 [(ErlangBinary binSeg_0), acc_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 10)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    arg_14 = toErl 10
  in let head_13 = erlps__maybe_replace__2 [arg_14, config_8]
  in
    erlps__clean__3
      [rest_6, ErlangCons acc_7 (ErlangCons head_13 ErlangEmptyList),
       config_8]
erlps__clean__3 [(ErlangBinary binSeg_0), acc_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 11)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    arg_14 = toErl 11
  in let head_13 = erlps__maybe_replace__2 [arg_14, config_8]
  in
    erlps__clean__3
      [rest_6, ErlangCons acc_7 (ErlangCons head_13 ErlangEmptyList),
       config_8]
erlps__clean__3 [(ErlangBinary binSeg_0), acc_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 12)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    arg_14 = toErl 12
  in let head_13 = erlps__maybe_replace__2 [arg_14, config_8]
  in
    erlps__clean__3
      [rest_6, ErlangCons acc_7 (ErlangCons head_13 ErlangEmptyList),
       config_8]
erlps__clean__3 [(ErlangBinary binSeg_0), acc_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 13)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    arg_14 = toErl 13
  in let head_13 = erlps__maybe_replace__2 [arg_14, config_8]
  in
    erlps__clean__3
      [rest_6, ErlangCons acc_7 (ErlangCons head_13 ErlangEmptyList),
       config_8]
erlps__clean__3 [(ErlangBinary binSeg_0), acc_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 14)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    arg_14 = toErl 14
  in let head_13 = erlps__maybe_replace__2 [arg_14, config_8]
  in
    erlps__clean__3
      [rest_6, ErlangCons acc_7 (ErlangCons head_13 ErlangEmptyList),
       config_8]
erlps__clean__3 [(ErlangBinary binSeg_0), acc_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 15)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    arg_14 = toErl 15
  in let head_13 = erlps__maybe_replace__2 [arg_14, config_8]
  in
    erlps__clean__3
      [rest_6, ErlangCons acc_7 (ErlangCons head_13 ErlangEmptyList),
       config_8]
erlps__clean__3 [(ErlangBinary binSeg_0), acc_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 16)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    arg_14 = toErl 16
  in let head_13 = erlps__maybe_replace__2 [arg_14, config_8]
  in
    erlps__clean__3
      [rest_6, ErlangCons acc_7 (ErlangCons head_13 ErlangEmptyList),
       config_8]
erlps__clean__3 [(ErlangBinary binSeg_0), acc_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 17)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    arg_14 = toErl 17
  in let head_13 = erlps__maybe_replace__2 [arg_14, config_8]
  in
    erlps__clean__3
      [rest_6, ErlangCons acc_7 (ErlangCons head_13 ErlangEmptyList),
       config_8]
erlps__clean__3 [(ErlangBinary binSeg_0), acc_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 18)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    arg_14 = toErl 18
  in let head_13 = erlps__maybe_replace__2 [arg_14, config_8]
  in
    erlps__clean__3
      [rest_6, ErlangCons acc_7 (ErlangCons head_13 ErlangEmptyList),
       config_8]
erlps__clean__3 [(ErlangBinary binSeg_0), acc_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 19)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    arg_14 = toErl 19
  in let head_13 = erlps__maybe_replace__2 [arg_14, config_8]
  in
    erlps__clean__3
      [rest_6, ErlangCons acc_7 (ErlangCons head_13 ErlangEmptyList),
       config_8]
erlps__clean__3 [(ErlangBinary binSeg_0), acc_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 20)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    arg_14 = toErl 20
  in let head_13 = erlps__maybe_replace__2 [arg_14, config_8]
  in
    erlps__clean__3
      [rest_6, ErlangCons acc_7 (ErlangCons head_13 ErlangEmptyList),
       config_8]
erlps__clean__3 [(ErlangBinary binSeg_0), acc_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 21)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    arg_14 = toErl 21
  in let head_13 = erlps__maybe_replace__2 [arg_14, config_8]
  in
    erlps__clean__3
      [rest_6, ErlangCons acc_7 (ErlangCons head_13 ErlangEmptyList),
       config_8]
erlps__clean__3 [(ErlangBinary binSeg_0), acc_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 22)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    arg_14 = toErl 22
  in let head_13 = erlps__maybe_replace__2 [arg_14, config_8]
  in
    erlps__clean__3
      [rest_6, ErlangCons acc_7 (ErlangCons head_13 ErlangEmptyList),
       config_8]
erlps__clean__3 [(ErlangBinary binSeg_0), acc_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 23)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    arg_14 = toErl 23
  in let head_13 = erlps__maybe_replace__2 [arg_14, config_8]
  in
    erlps__clean__3
      [rest_6, ErlangCons acc_7 (ErlangCons head_13 ErlangEmptyList),
       config_8]
erlps__clean__3 [(ErlangBinary binSeg_0), acc_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 24)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    arg_14 = toErl 24
  in let head_13 = erlps__maybe_replace__2 [arg_14, config_8]
  in
    erlps__clean__3
      [rest_6, ErlangCons acc_7 (ErlangCons head_13 ErlangEmptyList),
       config_8]
erlps__clean__3 [(ErlangBinary binSeg_0), acc_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 25)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    arg_14 = toErl 25
  in let head_13 = erlps__maybe_replace__2 [arg_14, config_8]
  in
    erlps__clean__3
      [rest_6, ErlangCons acc_7 (ErlangCons head_13 ErlangEmptyList),
       config_8]
erlps__clean__3 [(ErlangBinary binSeg_0), acc_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 26)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    arg_14 = toErl 26
  in let head_13 = erlps__maybe_replace__2 [arg_14, config_8]
  in
    erlps__clean__3
      [rest_6, ErlangCons acc_7 (ErlangCons head_13 ErlangEmptyList),
       config_8]
erlps__clean__3 [(ErlangBinary binSeg_0), acc_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 27)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    arg_14 = toErl 27
  in let head_13 = erlps__maybe_replace__2 [arg_14, config_8]
  in
    erlps__clean__3
      [rest_6, ErlangCons acc_7 (ErlangCons head_13 ErlangEmptyList),
       config_8]
erlps__clean__3 [(ErlangBinary binSeg_0), acc_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 28)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    arg_14 = toErl 28
  in let head_13 = erlps__maybe_replace__2 [arg_14, config_8]
  in
    erlps__clean__3
      [rest_6, ErlangCons acc_7 (ErlangCons head_13 ErlangEmptyList),
       config_8]
erlps__clean__3 [(ErlangBinary binSeg_0), acc_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 29)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    arg_14 = toErl 29
  in let head_13 = erlps__maybe_replace__2 [arg_14, config_8]
  in
    erlps__clean__3
      [rest_6, ErlangCons acc_7 (ErlangCons head_13 ErlangEmptyList),
       config_8]
erlps__clean__3 [(ErlangBinary binSeg_0), acc_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 30)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    arg_14 = toErl 30
  in let head_13 = erlps__maybe_replace__2 [arg_14, config_8]
  in
    erlps__clean__3
      [rest_6, ErlangCons acc_7 (ErlangCons head_13 ErlangEmptyList),
       config_8]
erlps__clean__3 [(ErlangBinary binSeg_0), acc_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 31)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    arg_14 = toErl 31
  in let head_13 = erlps__maybe_replace__2 [arg_14, config_8]
  in
    erlps__clean__3
      [rest_6, ErlangCons acc_7 (ErlangCons head_13 ErlangEmptyList),
       config_8]
erlps__clean__3 [(ErlangBinary binSeg_0), acc_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 34)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    arg_14 = toErl 34
  in let head_13 = erlps__maybe_replace__2 [arg_14, config_8]
  in
    erlps__clean__3
      [rest_6, ErlangCons acc_7 (ErlangCons head_13 ErlangEmptyList),
       config_8]
erlps__clean__3 [(ErlangBinary binSeg_0), acc_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 47)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    arg_14 = toErl 47
  in let head_13 = erlps__maybe_replace__2 [arg_14, config_8]
  in
    erlps__clean__3
      [rest_6, ErlangCons acc_7 (ErlangCons head_13 ErlangEmptyList),
       config_8]
erlps__clean__3 [(ErlangBinary binSeg_0), acc_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 92)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    arg_14 = toErl 92
  in let head_13 = erlps__maybe_replace__2 [arg_14, config_8]
  in
    erlps__clean__3
      [rest_6, ErlangCons acc_7 (ErlangCons head_13 ErlangEmptyList),
       config_8]
erlps__clean__3 [bin_7@(ErlangBinary binSeg_0), acc_8,
                 config_9@(ErlangTuple [(ErlangAtom "config"), _, _, _, _, _, _,
                                        _, _, _, _, _, (ErlangAtom "true"), _,
                                        _, _])]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok x_3 bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  case x_3 of
    x_11 | x_11 == x_3
         , weakLt x_3 (toErl 128) ->
      erlps__start_count__3 [bin_7, acc_8, config_9]
    _ ->
      let head_19 = erlps__json_escape_sequence__1 [x_3]
      in
        erlps__clean__3
          [rest_6, ErlangCons acc_8 (ErlangCons head_19 ErlangEmptyList),
           config_9]
erlps__clean__3 [(ErlangBinary binSeg_0), acc_13, config_14]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 226)
  , (ErlangInt size_4) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      (BIN.chopInt bin_2 size_4 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_6) == (toErl 128)
  , (ErlangInt size_7) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_9) bin_8) <-
      (BIN.chopInt bin_5 size_7 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_9) == (toErl 168)
  , (ErlangInt size_10) <- (BIN.size bin_8)
  , (BIN.Ok rest_12 bin_11) <- (BIN.chopBin bin_8 size_10 8)
  , BIN.empty bin_11 =
  let    arg_20 = toErl 8232
  in let head_19 = erlps__maybe_replace__2 [arg_20, config_14]
  in
    erlps__clean__3
      [rest_12, ErlangCons acc_13 (ErlangCons head_19 ErlangEmptyList),
       config_14]
erlps__clean__3 [(ErlangBinary binSeg_0), acc_13, config_14]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 226)
  , (ErlangInt size_4) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      (BIN.chopInt bin_2 size_4 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_6) == (toErl 128)
  , (ErlangInt size_7) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_9) bin_8) <-
      (BIN.chopInt bin_5 size_7 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_9) == (toErl 169)
  , (ErlangInt size_10) <- (BIN.size bin_8)
  , (BIN.Ok rest_12 bin_11) <- (BIN.chopBin bin_8 size_10 8)
  , BIN.empty bin_11 =
  let    arg_20 = toErl 8233
  in let head_19 = erlps__maybe_replace__2 [arg_20, config_14]
  in
    erlps__clean__3
      [rest_12, ErlangCons acc_13 (ErlangCons head_19 ErlangEmptyList),
       config_14]
erlps__clean__3 [bin_3@(ErlangBinary binSeg_0), acc_4, config_5]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok _ bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned) =
  erlps__start_count__3 [bin_3, acc_4, config_5]
erlps__clean__3 [(ErlangBinary binSeg_0), acc_12, config_13]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 237)
  , (ErlangInt size_4) <- (toErl 8)
  , (BIN.Ok x_6 bin_5) <-
      (BIN.chopInt bin_2 size_4 1 BIN.Big BIN.Unsigned)
  , (ErlangInt size_7) <- (toErl 8)
  , (BIN.Ok _ bin_8) <-
      (BIN.chopInt bin_5 size_7 1 BIN.Big BIN.Unsigned)
  , (ErlangInt size_9) <- (BIN.size bin_8)
  , (BIN.Ok rest_11 bin_10) <- (BIN.chopBin bin_8 size_9 8)
  , BIN.empty bin_10
  , weakGeq x_6 (toErl 160) =
  let
    head_18 =
      erlps__maybe_replace__2 [ErlangAtom "surrogate", config_13]
  in
    erlps__clean__3
      [rest_11, ErlangCons acc_12 (ErlangCons head_18 ErlangEmptyList),
       config_13]
erlps__clean__3 [(ErlangBinary binSeg_0), acc_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok x_3 bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5
  , (weakGeq x_3 (toErl 192)) && (weakLeq x_3 (toErl 223)) =
  let    arg_11 = toErl 1
  in let arg_9 = erlps__strip_continuations__2 [rest_6, arg_11]
  in let
    head_15 = erlps__maybe_replace__2 [ErlangAtom "badutf", config_8]
  in
    erlps__clean__3
      [arg_9, ErlangCons acc_7 (ErlangCons head_15 ErlangEmptyList),
       config_8]
erlps__clean__3 [(ErlangBinary binSeg_0), acc_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok x_3 bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5
  , (weakGeq x_3 (toErl 224)) && (weakLeq x_3 (toErl 239)) =
  let    arg_11 = toErl 2
  in let arg_9 = erlps__strip_continuations__2 [rest_6, arg_11]
  in let
    head_15 = erlps__maybe_replace__2 [ErlangAtom "badutf", config_8]
  in
    erlps__clean__3
      [arg_9, ErlangCons acc_7 (ErlangCons head_15 ErlangEmptyList),
       config_8]
erlps__clean__3 [(ErlangBinary binSeg_0), acc_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok x_3 bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5
  , (weakGeq x_3 (toErl 240)) && (weakLeq x_3 (toErl 247)) =
  let    arg_11 = toErl 3
  in let arg_9 = erlps__strip_continuations__2 [rest_6, arg_11]
  in let
    head_15 = erlps__maybe_replace__2 [ErlangAtom "badutf", config_8]
  in
    erlps__clean__3
      [arg_9, ErlangCons acc_7 (ErlangCons head_15 ErlangEmptyList),
       config_8]
erlps__clean__3 [(ErlangBinary binSeg_0), acc_6, config_7]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok _ bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt size_3) <- (BIN.size bin_2)
  , (BIN.Ok rest_5 bin_4) <- (BIN.chopBin bin_2 size_3 8)
  , BIN.empty bin_4 =
  let
    head_12 = erlps__maybe_replace__2 [ErlangAtom "badutf", config_7]
  in
    erlps__clean__3
      [rest_5, ErlangCons acc_6 (ErlangCons head_12 ErlangEmptyList),
       config_7]
erlps__clean__3 [(ErlangBinary binEnd_0), acc_1, _]
  | BIN.empty binEnd_0 =
  BIF.erlang__iolist_to_binary__1 [acc_1]
erlps__clean__3 [arg_3, arg_4, arg_5] = EXC.function_clause unit
erlps__clean__3 args =
  EXC.badarity (ErlangFun 3 erlps__clean__3) args

erlps__start_count__3 :: ErlangFun
erlps__start_count__3 [bin_0, acc_1, config_2] =
  let    arg_4 = toErl 0
  in let size_6 = erlps__count__3 [bin_0, arg_4, config_2]
  in
    case bin_0 of
      (ErlangBinary binSeg_7) | (ErlangInt size_8) <- (size_6)
                              , (BIN.Ok clean_10 bin_9) <-
                                  (BIN.chopBin binSeg_7 size_8 8)
                              , (ErlangInt size_11) <- (BIN.size bin_9)
                              , (BIN.Ok rest_13 bin_12) <-
                                  (BIN.chopBin bin_9 size_11 8)
                              , BIN.empty bin_12 ->
        erlps__clean__3
          [rest_13, ErlangCons acc_1 (ErlangCons clean_10 ErlangEmptyList),
           config_2]
      _ -> EXC.badmatch bin_0
erlps__start_count__3 [arg_22, arg_23, arg_24] =
  EXC.function_clause unit
erlps__start_count__3 args =
  EXC.badarity (ErlangFun 3 erlps__start_count__3) args

erlps__count__3 :: ErlangFun
erlps__count__3 [(ErlangBinary binSeg_0), n_4, _]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 0) =
  n_4
erlps__count__3 [(ErlangBinary binSeg_0), n_4, _]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 1) =
  n_4
erlps__count__3 [(ErlangBinary binSeg_0), n_4, _]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 2) =
  n_4
erlps__count__3 [(ErlangBinary binSeg_0), n_4, _]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 3) =
  n_4
erlps__count__3 [(ErlangBinary binSeg_0), n_4, _]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 4) =
  n_4
erlps__count__3 [(ErlangBinary binSeg_0), n_4, _]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 5) =
  n_4
erlps__count__3 [(ErlangBinary binSeg_0), n_4, _]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 6) =
  n_4
erlps__count__3 [(ErlangBinary binSeg_0), n_4, _]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 7) =
  n_4
erlps__count__3 [(ErlangBinary binSeg_0), n_4, _]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 8) =
  n_4
erlps__count__3 [(ErlangBinary binSeg_0), n_4, _]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 9) =
  n_4
erlps__count__3 [(ErlangBinary binSeg_0), n_4, _]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 10) =
  n_4
erlps__count__3 [(ErlangBinary binSeg_0), n_4, _]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 11) =
  n_4
erlps__count__3 [(ErlangBinary binSeg_0), n_4, _]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 12) =
  n_4
erlps__count__3 [(ErlangBinary binSeg_0), n_4, _]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 13) =
  n_4
erlps__count__3 [(ErlangBinary binSeg_0), n_4, _]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 14) =
  n_4
erlps__count__3 [(ErlangBinary binSeg_0), n_4, _]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 15) =
  n_4
erlps__count__3 [(ErlangBinary binSeg_0), n_4, _]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 16) =
  n_4
erlps__count__3 [(ErlangBinary binSeg_0), n_4, _]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 17) =
  n_4
erlps__count__3 [(ErlangBinary binSeg_0), n_4, _]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 18) =
  n_4
erlps__count__3 [(ErlangBinary binSeg_0), n_4, _]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 19) =
  n_4
erlps__count__3 [(ErlangBinary binSeg_0), n_4, _]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 20) =
  n_4
erlps__count__3 [(ErlangBinary binSeg_0), n_4, _]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 21) =
  n_4
erlps__count__3 [(ErlangBinary binSeg_0), n_4, _]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 22) =
  n_4
erlps__count__3 [(ErlangBinary binSeg_0), n_4, _]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 23) =
  n_4
erlps__count__3 [(ErlangBinary binSeg_0), n_4, _]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 24) =
  n_4
erlps__count__3 [(ErlangBinary binSeg_0), n_4, _]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 25) =
  n_4
erlps__count__3 [(ErlangBinary binSeg_0), n_4, _]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 26) =
  n_4
erlps__count__3 [(ErlangBinary binSeg_0), n_4, _]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 27) =
  n_4
erlps__count__3 [(ErlangBinary binSeg_0), n_4, _]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 28) =
  n_4
erlps__count__3 [(ErlangBinary binSeg_0), n_4, _]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 29) =
  n_4
erlps__count__3 [(ErlangBinary binSeg_0), n_4, _]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 30) =
  n_4
erlps__count__3 [(ErlangBinary binSeg_0), n_4, _]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 31) =
  n_4
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 32)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 33)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_4, _]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 34) =
  n_4
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 35)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 36)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 37)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 38)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 39)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 40)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 41)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 42)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 43)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 44)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 45)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 46)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_4, _]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 47) =
  n_4
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 48)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 49)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 50)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 51)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 52)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 53)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 54)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 55)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 56)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 57)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 58)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 59)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 60)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 61)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 62)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 63)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 64)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 65)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 66)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 67)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 68)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 69)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 70)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 71)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 72)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 73)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 74)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 75)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 76)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 77)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 78)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 79)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 80)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 81)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 82)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 83)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 84)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 85)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 86)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 87)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 88)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 89)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 90)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 91)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_4, _]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 92) =
  n_4
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 93)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 94)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 95)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 96)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 97)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 98)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 99)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 100)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 101)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 102)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 103)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 104)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 105)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 106)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 107)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 108)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 109)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 110)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 111)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 112)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 113)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 114)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 115)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 116)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 117)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 118)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 119)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 120)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 121)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 122)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 123)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 124)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 125)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 126)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 127)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_3,
                 (ErlangTuple [(ErlangAtom "config"), _, _, _, _, _, _, _, _, _,
                               _, _, (ErlangAtom "true"), _, _, _])]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok _ bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned) =
  n_3
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok x_3 bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  case x_3 of
    x_10 | x_10 == x_3
         , weakLt x_3 (toErl 2048) ->
      let    rop_14 = toErl 2
      in let arg_12 = BIF.erlang__op_plus [n_7, rop_14]
      in erlps__count__3 [rest_6, arg_12, config_8]
    (ErlangInt num_16) | (ErlangInt num_16) == (toErl 8232) -> n_7
    (ErlangInt num_17) | (ErlangInt num_17) == (toErl 8233) -> n_7
    x_18 | x_18 == x_3
         , weakLt x_3 (toErl 65536) ->
      let    rop_22 = toErl 3
      in let arg_20 = BIF.erlang__op_plus [n_7, rop_22]
      in erlps__count__3 [rest_6, arg_20, config_8]
    _ ->
      let    rop_27 = toErl 4
      in let arg_25 = BIF.erlang__op_plus [n_7, rop_27]
      in erlps__count__3 [rest_6, arg_25, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_3, _]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok _ bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned) =
  n_3
erlps__count__3 [(ErlangBinary binEnd_0), n_1, _]
  | BIN.empty binEnd_0 =
  n_1
erlps__count__3 [arg_2, arg_3, arg_4] = EXC.function_clause unit
erlps__count__3 args =
  EXC.badarity (ErlangFun 3 erlps__count__3) args

erlps__strip_continuations__2 :: ErlangFun
erlps__strip_continuations__2 [bin_0, (ErlangInt num_1)]
  | (ErlangInt num_1) == (toErl 0) =
  bin_0
erlps__strip_continuations__2 [(ErlangBinary binSeg_0), n_7]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok x_3 bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5
  , (weakGeq x_3 (toErl 128)) && (weakLeq x_3 (toErl 191)) =
  let    rop_11 = toErl 1
  in let arg_9 = BIF.erlang__op_minus [n_7, rop_11]
  in erlps__strip_continuations__2 [rest_6, arg_9]
erlps__strip_continuations__2 [bin_0, _] = bin_0
erlps__strip_continuations__2 [arg_1, arg_2] =
  EXC.function_clause unit
erlps__strip_continuations__2 args =
  EXC.badarity (ErlangFun 2 erlps__strip_continuations__2) args

erlps__maybe_replace__2 :: ErlangFun
erlps__maybe_replace__2 [(ErlangInt num_0),
                         (ErlangTuple [(ErlangAtom "config"), _, _,
                                       (ErlangAtom "true"), _, _, _, _, _, _, _,
                                       _, _, _, _, _])]
  | (ErlangInt num_0) == (toErl 8) =
  let    bin_el_1 = toErl 92
  in let bin_el_2 = toErl 98
  in
    ErlangBinary
      (BIN.concat
         [BIN.fromInt bin_el_1 (toErl 8) 1 BIN.Big,
          BIN.fromInt bin_el_2 (toErl 8) 1 BIN.Big])
erlps__maybe_replace__2 [(ErlangInt num_0),
                         (ErlangTuple [(ErlangAtom "config"), _, _,
                                       (ErlangAtom "true"), _, _, _, _, _, _, _,
                                       _, _, _, _, _])]
  | (ErlangInt num_0) == (toErl 9) =
  let    bin_el_1 = toErl 92
  in let bin_el_2 = toErl 116
  in
    ErlangBinary
      (BIN.concat
         [BIN.fromInt bin_el_1 (toErl 8) 1 BIN.Big,
          BIN.fromInt bin_el_2 (toErl 8) 1 BIN.Big])
erlps__maybe_replace__2 [(ErlangInt num_0),
                         (ErlangTuple [(ErlangAtom "config"), _, _,
                                       (ErlangAtom "true"), _, _, _, _, _, _, _,
                                       _, _, _, _, _])]
  | (ErlangInt num_0) == (toErl 10) =
  let    bin_el_1 = toErl 92
  in let bin_el_2 = toErl 110
  in
    ErlangBinary
      (BIN.concat
         [BIN.fromInt bin_el_1 (toErl 8) 1 BIN.Big,
          BIN.fromInt bin_el_2 (toErl 8) 1 BIN.Big])
erlps__maybe_replace__2 [(ErlangInt num_0),
                         (ErlangTuple [(ErlangAtom "config"), _, _,
                                       (ErlangAtom "true"), _, _, _, _, _, _, _,
                                       _, _, _, _, _])]
  | (ErlangInt num_0) == (toErl 12) =
  let    bin_el_1 = toErl 92
  in let bin_el_2 = toErl 102
  in
    ErlangBinary
      (BIN.concat
         [BIN.fromInt bin_el_1 (toErl 8) 1 BIN.Big,
          BIN.fromInt bin_el_2 (toErl 8) 1 BIN.Big])
erlps__maybe_replace__2 [(ErlangInt num_0),
                         (ErlangTuple [(ErlangAtom "config"), _, _,
                                       (ErlangAtom "true"), _, _, _, _, _, _, _,
                                       _, _, _, _, _])]
  | (ErlangInt num_0) == (toErl 13) =
  let    bin_el_1 = toErl 92
  in let bin_el_2 = toErl 114
  in
    ErlangBinary
      (BIN.concat
         [BIN.fromInt bin_el_1 (toErl 8) 1 BIN.Big,
          BIN.fromInt bin_el_2 (toErl 8) 1 BIN.Big])
erlps__maybe_replace__2 [(ErlangInt num_0),
                         (ErlangTuple [(ErlangAtom "config"), _, _,
                                       (ErlangAtom "true"), _, _, _, _, _, _, _,
                                       _, _, _, _, _])]
  | (ErlangInt num_0) == (toErl 34) =
  let    bin_el_1 = toErl 92
  in let bin_el_2 = toErl 34
  in
    ErlangBinary
      (BIN.concat
         [BIN.fromInt bin_el_1 (toErl 8) 1 BIN.Big,
          BIN.fromInt bin_el_2 (toErl 8) 1 BIN.Big])
erlps__maybe_replace__2 [(ErlangInt num_0),
                         config_1@(ErlangTuple [(ErlangAtom "config"), _, _,
                                                (ErlangAtom "true"), _, _, _, _,
                                                _, _, _, _, _, _, _, _])]
  | (ErlangInt num_0) == (toErl 47) =
  let
    case_2 =
      case config_1 of
        (ErlangTuple arr_5) | (DM.Just field_4) <- (arr_5 DA.!! 2) ->
          field_4
        _ -> EXC.badrecord (ErlangAtom "config")
  in
    case case_2 of
      (ErlangAtom "true") ->
        let    bin_el_6 = toErl 92
        in let bin_el_7 = toErl 47
        in
          ErlangBinary
            (BIN.concat
               [BIN.fromInt bin_el_6 (toErl 8) 1 BIN.Big,
                BIN.fromInt bin_el_7 (toErl 8) 1 BIN.Big])
      (ErlangAtom "false") ->
        let bin_el_8 = toErl 47
        in ErlangBinary (BIN.fromInt bin_el_8 (toErl 8) 1 BIN.Big)
      something_else -> EXC.case_clause something_else
erlps__maybe_replace__2 [(ErlangInt num_0),
                         (ErlangTuple [(ErlangAtom "config"), _, _,
                                       (ErlangAtom "true"), _, _, _, _, _, _, _,
                                       _, _, _, _, _])]
  | (ErlangInt num_0) == (toErl 92) =
  let    bin_el_1 = toErl 92
  in let bin_el_2 = toErl 92
  in
    ErlangBinary
      (BIN.concat
         [BIN.fromInt bin_el_1 (toErl 8) 1 BIN.Big,
          BIN.fromInt bin_el_2 (toErl 8) 1 BIN.Big])
erlps__maybe_replace__2 [x_0,
                         (ErlangTuple [(ErlangAtom "config"), _, _,
                                       (ErlangAtom "true"), _, _, _, _, _, _, _,
                                       _, _, _, _, _])]
  | weakLt x_0 (toErl 32) =
  erlps__json_escape_sequence__1 [x_0]
erlps__maybe_replace__2 [x_0,
                         config_1@(ErlangTuple [(ErlangAtom "config"), _, _,
                                                (ErlangAtom "true"), _, _, _, _,
                                                _, _, _, _, _, _, _, _])]
  | (ErlangAtom "true") ==
      (falsifyErrors
         (\ _ ->
            let    rop_10 = toErl 8232
            in let lop_8 = BIF.erlang__op_eq [x_0, rop_10]
            in
              case lop_8 of
                (ErlangAtom "true") -> ErlangAtom "true"
                (ErlangAtom "false") ->
                  let rop_12 = toErl 8233
                  in BIF.erlang__op_eq [x_0, rop_12]
                _ -> EXC.badarg1 lop_8)) =
  let
    case_2 =
      case config_1 of
        (ErlangTuple arr_5) | (DM.Just field_4) <- (arr_5 DA.!! 13) ->
          field_4
        _ -> EXC.badrecord (ErlangAtom "config")
  in
    case case_2 of
      (ErlangAtom "true") ->
        ErlangBinary (BIN.fromInt x_0 (toErl 8) 1 BIN.Big)
      (ErlangAtom "false") -> erlps__json_escape_sequence__1 [x_0]
      something_else -> EXC.case_clause something_else
erlps__maybe_replace__2 [atom_0,
                         (ErlangTuple [(ErlangAtom "config"), _, _, _, _, _, _,
                                       (ErlangAtom "true"), _, _, _, _, _, _, _,
                                       _])]
  | isEAtom atom_0 =
  BIF.erlang__error__1 [ErlangAtom "badarg"]
erlps__maybe_replace__2 [(ErlangAtom "surrogate"), _config_0] =
  let bin_el_1 = toErl 65533
  in ErlangBinary (BIN.fromInt bin_el_1 (toErl 8) 1 BIN.Big)
erlps__maybe_replace__2 [(ErlangAtom "badutf"), _config_0] =
  let bin_el_1 = toErl 65533
  in ErlangBinary (BIN.fromInt bin_el_1 (toErl 8) 1 BIN.Big)
erlps__maybe_replace__2 [x_0, _config_1] =
  ErlangBinary (BIN.fromInt x_0 (toErl 8) 1 BIN.Big)
erlps__maybe_replace__2 [arg_3, arg_4] = EXC.function_clause unit
erlps__maybe_replace__2 args =
  EXC.badarity (ErlangFun 2 erlps__maybe_replace__2) args

erlps__json_escape_sequence__1 :: ErlangFun
erlps__json_escape_sequence__1 [x_0] | weakLt x_0 (toErl 65536) =
  let
    matchExpr_15 =
      ErlangBinary (BIN.fromInt x_0 (toErl 16) 1 BIN.Big)
  in
    case matchExpr_15 of
      (ErlangBinary binSeg_2) | (ErlangInt size_3) <- (toErl 4)
                              , (BIN.Ok a_5 bin_4) <-
                                  (BIN.chopInt binSeg_2 size_3 1 BIN.Big
                                     BIN.Unsigned)
                              , (ErlangInt size_6) <- (toErl 4)
                              , (BIN.Ok b_8 bin_7) <-
                                  (BIN.chopInt bin_4 size_6 1 BIN.Big
                                     BIN.Unsigned)
                              , (ErlangInt size_9) <- (toErl 4)
                              , (BIN.Ok c_11 bin_10) <-
                                  (BIN.chopInt bin_7 size_9 1 BIN.Big
                                     BIN.Unsigned)
                              , (ErlangInt size_12) <- (toErl 4)
                              , (BIN.Ok d_14 bin_13) <-
                                  (BIN.chopInt bin_10 size_12 1 BIN.Big
                                     BIN.Unsigned)
                              , BIN.empty bin_13 ->
        let    bin_el_16 = toErl 92
        in let bin_el_17 = toErl 117
        in let bin_el_18 = erlps__to_hex__1 [a_5]
        in let bin_el_20 = erlps__to_hex__1 [b_8]
        in let bin_el_22 = erlps__to_hex__1 [c_11]
        in let bin_el_24 = erlps__to_hex__1 [d_14]
        in
          ErlangBinary
            (BIN.concat
               [BIN.fromInt bin_el_16 (toErl 8) 1 BIN.Big,
                BIN.fromInt bin_el_17 (toErl 8) 1 BIN.Big,
                BIN.fromInt bin_el_18 (toErl 8) 1 BIN.Big,
                BIN.fromInt bin_el_20 (toErl 8) 1 BIN.Big,
                BIN.fromInt bin_el_22 (toErl 8) 1 BIN.Big,
                BIN.fromInt bin_el_24 (toErl 8) 1 BIN.Big])
      _ -> EXC.badmatch matchExpr_15
erlps__json_escape_sequence__1 [x_0] =
  let    rop_2 = toErl 65536
  in let adjusted_3 = BIF.erlang__op_minus [x_0, rop_2]
  in let
    matchExpr_12 =
      ErlangBinary (BIN.fromInt adjusted_3 (toErl 20) 1 BIN.Big)
  in
    case matchExpr_12 of
      (ErlangBinary binSeg_5) | (ErlangInt size_6) <- (toErl 10)
                              , (BIN.Ok a_8 bin_7) <-
                                  (BIN.chopInt binSeg_5 size_6 1 BIN.Big
                                     BIN.Unsigned)
                              , (ErlangInt size_9) <- (toErl 10)
                              , (BIN.Ok b_11 bin_10) <-
                                  (BIN.chopInt bin_7 size_9 1 BIN.Big
                                     BIN.Unsigned)
                              , BIN.empty bin_10 ->
        let    rop_16 = toErl 55296
        in let arg_14 = BIF.erlang__op_plus [a_8, rop_16]
        in let head_13 = erlps__json_escape_sequence__1 [arg_14]
        in let rop_21 = toErl 56320
        in let arg_19 = BIF.erlang__op_plus [b_11, rop_21]
        in let head_18 = erlps__json_escape_sequence__1 [arg_19]
        in ErlangCons head_13 (ErlangCons head_18 ErlangEmptyList)
      _ -> EXC.badmatch matchExpr_12
erlps__json_escape_sequence__1 [arg_23] =
  EXC.function_clause unit
erlps__json_escape_sequence__1 args =
  EXC.badarity (ErlangFun 1 erlps__json_escape_sequence__1) args

erlps__to_hex__1 :: ErlangFun
erlps__to_hex__1 [(ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 10) =
  toErl 97
erlps__to_hex__1 [(ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 11) =
  toErl 98
erlps__to_hex__1 [(ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 12) =
  toErl 99
erlps__to_hex__1 [(ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 13) =
  toErl 100
erlps__to_hex__1 [(ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 14) =
  toErl 101
erlps__to_hex__1 [(ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 15) =
  toErl 102
erlps__to_hex__1 [x_0] =
  let rop_2 = toErl 48
  in BIF.erlang__op_plus [x_0, rop_2]
erlps__to_hex__1 [arg_3] = EXC.function_clause unit
erlps__to_hex__1 args =
  EXC.badarity (ErlangFun 1 erlps__to_hex__1) args

erlps__init__1 :: ErlangFun
erlps__init__1 [(ErlangEmptyList)] = ErlangEmptyList
erlps__init__1 [arg_0] = EXC.function_clause unit
erlps__init__1 args =
  EXC.badarity (ErlangFun 1 erlps__init__1) args

erlps__handle_event__2 :: ErlangFun
erlps__handle_event__2 [(ErlangAtom "end_json"), state_0] =
  BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [state_0]
erlps__handle_event__2 [event_0, state_1] =
  BIF.erlang__op_append
    [ErlangCons event_0 ErlangEmptyList, state_1]
erlps__handle_event__2 [arg_6, arg_7] = EXC.function_clause unit
erlps__handle_event__2 args =
  EXC.badarity (ErlangFun 2 erlps__handle_event__2) args