module Jsx.Parser(erlps__parser__3, erlps__resume__5,
                  erlps__init__1, erlps__handle_event__2) where
{-
This file has been autogenerated
DO NOT EDIT - Your changes WILL be overwritten
Use this code at your own risk - the authors are just a mischievous raccoon and a haskell devote
Erlscripten v0.1.0
-}

import Prelude
import Data.Array as DA
import Data.List as DL
import Data.Maybe as DM
import Data.Map as Map
import Data.Tuple as Tup
import Data.BigInt as DBI
import Erlang.Builtins as BIF
import Erlang.Binary as BIN
import Erlang.Helpers as H
import Erlang.Exception as EXC
import Erlang.Type (ErlangFun, ErlangTerm(..), weakCmp, weakEq,
                    weakNEq, weakLt, weakLeq, weakGeq, weakGt)
import Effect (Effect)
import Effect.Unsafe (unsafePerformEffect)
import Effect.Exception (throw)
import Partial.Unsafe (unsafePartial)


erlps__parser__3 :: ErlangFun
erlps__parser__3 [handler_0, state_1, config_2] =
  (ErlangFun 1
     let
       lambda_3 [tokens_5] =
         let   
           tup_el_9 =
             (BIF.erlang__apply__3
                [handler_0, (ErlangAtom "init"),
                 (ErlangCons state_1 ErlangEmptyList)])
         in let arg_7 = (ErlangTuple [handler_0, tup_el_9])
         in let
           arg_16 =
             (BIF.do_remote_fun_call "Jsx.Config" "erlps__parse_config__1"
                [config_2])
         in (erlps__value__4 [tokens_5, arg_7, ErlangEmptyList, arg_16])
       lambda_3 [arg_4] = (EXC.function_clause unit)
       lambda_3 args = (EXC.badarity (ErlangFun 1 lambda_3) args)
     in lambda_3)
erlps__parser__3 [arg_18, arg_19, arg_20] =
  (EXC.function_clause unit)
erlps__parser__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__resume__5 :: ErlangFun
erlps__resume__5 [rest_0, state_1, handler_2, stack_3, config_4]
  =
  case state_1 of
    (ErlangAtom "value") ->
      (erlps__value__4 [rest_0, handler_2, stack_3, config_4])
    (ErlangAtom "object") ->
      (erlps__object__4 [rest_0, handler_2, stack_3, config_4])
    (ErlangAtom "array") ->
      (erlps__array__4 [rest_0, handler_2, stack_3, config_4])
    (ErlangAtom "maybe_done") ->
      (erlps__maybe_done__4 [rest_0, handler_2, stack_3, config_4])
    (ErlangAtom "done") ->
      (erlps__done__4 [rest_0, handler_2, stack_3, config_4])
    something_else -> (EXC.case_clause something_else)
erlps__resume__5 [arg_26, arg_27, arg_28, arg_29, arg_30] =
  (EXC.function_clause unit)
erlps__resume__5 args =
  (EXC.badarity
     (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__incomplete__4 :: ErlangFun
erlps__incomplete__4 [state_0, handler_1, stack_2,
                      config_3@(ErlangTuple [(ErlangAtom "config"), _, _, _, _,
                                             _, _, _, _, _,
                                             (ErlangAtom "false"), _, _, _, _,
                                             _])]
  =
  let
    case_4 =
      case config_3 of
        (ErlangTuple arr_7) | (DM.Just field_6) <- ((arr_7 DA.!! 14)) ->
          field_6
        _ -> (EXC.badrecord (ErlangAtom "config"))
  in
    case case_4 of
      (ErlangAtom "false") ->
        (BIF.erlang__error__1 [(ErlangAtom "badarg")])
      f_9 ->
        let   
          arg_11 =
            (ErlangTuple
               [(ErlangAtom "parser"), state_0, handler_1, stack_2])
        in let
          arg_16 =
            (BIF.do_remote_fun_call "Jsx.Config" "erlps__config_to_list__1"
               [config_3])
        in
          (BIF.erlang__apply__2
             [f_9,
              (ErlangCons ErlangEmptyList
                 (ErlangCons arg_11 (ErlangCons arg_16 ErlangEmptyList)))])
erlps__incomplete__4 [state_0, handler_1, stack_2,
                      config_3@(ErlangTuple [(ErlangAtom "config"), _, _, _, _,
                                             _, _, _, _, _, _, _, _, _, _,
                                             (ErlangAtom "false")])]
  =
  let
    tup_el_5 =
      (ErlangFun 1
         let
           lambda_6 [end_8]
             | ((ErlangAtom "true") ==
                  (H.falsifyErrors
                     (\ _ ->
                        let
                          lop_9 =
                            (BIF.erlang__op_eq
                               [end_8, (ErlangAtom "end_stream")])
                        in
                          case lop_9 of
                            (ErlangAtom "true") -> (ErlangAtom "true")
                            (ErlangAtom "false") ->
                              (BIF.erlang__op_eq
                                 [end_8, (ErlangAtom "end_json")])
                            _ -> (EXC.badarg1 lop_9)))) =
             let
               case_14 =
                 (erlps__resume__5
                    [(ErlangCons (ErlangAtom "end_json") ErlangEmptyList),
                     state_0, handler_1, stack_2, config_3])
             in
               case case_14 of
                 (ErlangTuple [(ErlangAtom "incomplete"), _]) ->
                   let
                     case_22 =
                       case config_3 of
                         (ErlangTuple arr_25) | (DM.Just field_24) <-
                                                  ((arr_25 DA.!! 14)) ->
                           field_24
                         _ -> (EXC.badrecord (ErlangAtom "config"))
                   in
                     case case_22 of
                       (ErlangAtom "false") ->
                         (BIF.erlang__error__1 [(ErlangAtom "badarg")])
                       f_27 ->
                         let   
                           arg_29 =
                             (ErlangTuple
                                [(ErlangAtom "parser"), state_0, handler_1,
                                 stack_2])
                         in let
                           arg_34 =
                             (BIF.do_remote_fun_call "Jsx.Config"
                                "erlps__config_to_list__1" [config_3])
                         in
                           (BIF.erlang__apply__2
                              [f_27,
                               (ErlangCons ErlangEmptyList
                                  (ErlangCons arg_29
                                     (ErlangCons arg_34 ErlangEmptyList)))])
                 else_37 -> else_37
           lambda_6 [tokens_38] =
             (erlps__resume__5
                [tokens_38, state_0, handler_1, stack_2, config_3])
           lambda_6 [arg_7] = (EXC.function_clause unit)
           lambda_6 args = (EXC.badarity (ErlangFun 1 lambda_6) args)
         in lambda_6)
  in (ErlangTuple [(ErlangAtom "incomplete"), tup_el_5])
erlps__incomplete__4 [state_0, handler_1, stack_2,
                      config_4@(ErlangTuple [(ErlangAtom "config"), _, _, _, _,
                                             _, _, _, _, _, _, _, _, _, _,
                                             f_3])]
  =
  let   
    arg_6 =
      (ErlangTuple
         [(ErlangAtom "parser"), state_0, handler_1, stack_2])
  in let
    arg_11 =
      (BIF.do_remote_fun_call "Jsx.Config" "erlps__config_to_list__1"
         [config_4])
  in
    (BIF.erlang__apply__2
       [f_3,
        (ErlangCons ErlangEmptyList
           (ErlangCons arg_6 (ErlangCons arg_11 ErlangEmptyList)))])
erlps__incomplete__4 [arg_14, arg_15, arg_16, arg_17] =
  (EXC.function_clause unit)
erlps__incomplete__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__handle_event__3 :: ErlangFun
erlps__handle_event__3 [event_0,
                        (ErlangTuple [handler_1, state_2]), _config_3]
  =
  let
    tup_el_5 =
      (BIF.erlang__apply__3
         [handler_1, (ErlangAtom "handle_event"),
          (ErlangCons event_0 (ErlangCons state_2 ErlangEmptyList))])
  in (ErlangTuple [handler_1, tup_el_5])
erlps__handle_event__3 [arg_13, arg_14, arg_15] =
  (EXC.function_clause unit)
erlps__handle_event__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__value__4 :: ErlangFun
erlps__value__4 [(ErlangCons string_0 tokens_1), handler_2,
                 stack_3, config_4]
  | ((ErlangAtom "true") ==
       (H.falsifyErrors
          (\ _ -> (BIF.erlang__is_binary__1 [string_0])))) =
  (EXC.tryOfCatch
     (\ _ -> (erlps__clean_string__2 [string_0, config_4]))
     (\ of_7 ->
        let    arg_13 = (ErlangTuple [(ErlangAtom "string"), of_7])
        in let
          arg_12 = (erlps__handle_event__3 [arg_13, handler_2, config_4])
        in (erlps__maybe_done__4 [tokens_1, arg_12, stack_3, config_4]))
     (\ ex_8 ->
        case ex_8 of
          (ErlangTuple [(ErlangAtom "error"), (ErlangAtom "badarg"), _]) ->
            let
              case_20 =
                case config_4 of
                  (ErlangTuple arr_23) | (DM.Just field_22) <-
                                           ((arr_23 DA.!! 14)) ->
                    field_22
                  _ -> (EXC.badrecord (ErlangAtom "config"))
            in
              case case_20 of
                (ErlangAtom "false") ->
                  (BIF.erlang__error__1 [(ErlangAtom "badarg")])
                f_25 ->
                  let   
                    head_27 = (ErlangTuple [(ErlangAtom "string"), string_0])
                  in let
                    arg_31 =
                      (ErlangTuple
                         [(ErlangAtom "parser"), (ErlangAtom "value"),
                          handler_2, stack_3])
                  in let
                    arg_36 =
                      (BIF.do_remote_fun_call "Jsx.Config"
                         "erlps__config_to_list__1" [config_4])
                  in
                    (BIF.erlang__apply__2
                       [f_25,
                        (ErlangCons (ErlangCons head_27 tokens_1)
                           (ErlangCons arg_31
                              (ErlangCons arg_36 ErlangEmptyList)))])
          ex_9 -> (EXC.raise ex_9)))
erlps__value__4 [(ErlangCons (ErlangAtom "true") tokens_0),
                 handler_1, stack_2, config_3]
  =
  let   
    arg_6 =
      (ErlangTuple [(ErlangAtom "literal"), (ErlangAtom "true")])
  in let
    arg_5 = (erlps__handle_event__3 [arg_6, handler_1, config_3])
  in (erlps__maybe_done__4 [tokens_0, arg_5, stack_2, config_3])
erlps__value__4 [(ErlangCons (ErlangAtom "false") tokens_0),
                 handler_1, stack_2, config_3]
  =
  let   
    arg_6 =
      (ErlangTuple [(ErlangAtom "literal"), (ErlangAtom "false")])
  in let
    arg_5 = (erlps__handle_event__3 [arg_6, handler_1, config_3])
  in (erlps__maybe_done__4 [tokens_0, arg_5, stack_2, config_3])
erlps__value__4 [(ErlangCons (ErlangAtom "null") tokens_0),
                 handler_1, stack_2, config_3]
  =
  let   
    arg_6 =
      (ErlangTuple [(ErlangAtom "literal"), (ErlangAtom "null")])
  in let
    arg_5 = (erlps__handle_event__3 [arg_6, handler_1, config_3])
  in (erlps__maybe_done__4 [tokens_0, arg_5, stack_2, config_3])
erlps__value__4 [(ErlangCons (ErlangAtom "start_object") tokens_0),
                 handler_1, stack_2, config_3]
  =
  let
    arg_5 =
      (erlps__handle_event__3
         [(ErlangAtom "start_object"), handler_1, config_3])
  in
    (erlps__object__4
       [tokens_0, arg_5, (ErlangCons (ErlangAtom "object") stack_2),
        config_3])
erlps__value__4 args = (erlps__value__4__p1 args)

erlps__value__4__p1 :: ErlangFun
erlps__value__4__p1 [(ErlangCons (ErlangAtom "start_array") tokens_0),
                     handler_1, stack_2, config_3]
  =
  let
    arg_5 =
      (erlps__handle_event__3
         [(ErlangAtom "start_array"), handler_1, config_3])
  in
    (erlps__array__4
       [tokens_0, arg_5, (ErlangCons (ErlangAtom "array") stack_2),
        config_3])
erlps__value__4__p1 [(ErlangCons number_0 tokens_1), handler_2,
                     stack_3, config_4]
  | (H.isEInt number_0) =
  let    arg_7 = (ErlangTuple [(ErlangAtom "integer"), number_0])
  in let
    arg_6 = (erlps__handle_event__3 [arg_7, handler_2, config_4])
  in (erlps__maybe_done__4 [tokens_1, arg_6, stack_3, config_4])
erlps__value__4__p1 [(ErlangCons number_0 tokens_1), handler_2,
                     stack_3, config_4]
  | (H.isEFloat number_0) =
  let    arg_7 = (ErlangTuple [(ErlangAtom "float"), number_0])
  in let
    arg_6 = (erlps__handle_event__3 [arg_7, handler_2, config_4])
  in (erlps__maybe_done__4 [tokens_1, arg_6, stack_3, config_4])
erlps__value__4__p1 [(ErlangCons (ErlangTuple [(ErlangAtom "raw"),
                                               raw_0]) tokens_1),
                     handler_2, stack_3, config_4]
  | ((ErlangAtom "true") ==
       (H.falsifyErrors (\ _ -> (BIF.erlang__is_binary__1 [raw_0])))) =
  let   
    fun_8 =
      (BIF.do_remote_fun_call "Jsx" "erlps__decoder__3"
         [(ErlangAtom "jsx_parser"), ErlangEmptyList, ErlangEmptyList])
  in let
    lop_6 =
      (BIF.erlang__apply__2
         [fun_8, (ErlangCons raw_0 ErlangEmptyList)])
  in let arg_5 = (BIF.erlang__op_append [lop_6, tokens_1])
  in (erlps__value__4 [arg_5, handler_2, stack_3, config_4])
erlps__value__4__p1 [(ErlangCons (ErlangTuple [(ErlangTuple [year_0,
                                                             month_1, day_2]),
                                               (ErlangTuple [hour_3, min_4,
                                                             sec_5])]) tokens_6),
                     handler_7, stack_8, config_9]
  | ((((((H.isEInt year_0) && (H.isEInt month_1)) &&
          (H.isEInt day_2)) &&
         (H.isEInt hour_3)) &&
        (H.isEInt min_4)) &&
       (H.isEInt sec_5)) =
  let   
    arg_15 =
      (H.make_string
         "~4.10.0B-~2.10.0B-~2.10.0BT~2.10.0B:~2.10.0B:~2.10.0BZ")
  in let
    arg_14 =
      (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
         [arg_15,
          (ErlangCons year_0
             (ErlangCons month_1
                (ErlangCons day_2
                   (ErlangCons hour_3
                      (ErlangCons min_4
                         (ErlangCons sec_5 ErlangEmptyList))))))])
  in let
    tup_el_13 =
      (BIF.do_remote_fun_call "Erlang.Unicode"
         "erlps__characters_to_binary__1" [arg_14])
  in let head_11 = (ErlangTuple [(ErlangAtom "string"), tup_el_13])
  in
    (erlps__value__4
       [(ErlangCons head_11 tokens_6), handler_7, stack_8, config_9])
erlps__value__4__p1 args = (erlps__value__4__p2 args)

erlps__value__4__p2 :: ErlangFun
erlps__value__4__p2 [(ErlangCons (ErlangTuple [(ErlangTuple [year_0,
                                                             month_1, day_2]),
                                               (ErlangTuple [hour_3, min_4,
                                                             sec_5])]) tokens_6),
                     handler_7, stack_8, config_9]
  | ((((((H.isEInt year_0) && (H.isEInt month_1)) &&
          (H.isEInt day_2)) &&
         (H.isEInt hour_3)) &&
        (H.isEInt min_4)) &&
       (H.isEFloat sec_5)) =
  let   
    arg_15 =
      (H.make_string
         "~4.10.0B-~2.10.0B-~2.10.0BT~2.10.0B:~2.10.0B:~9.6.0fZ")
  in let
    arg_14 =
      (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
         [arg_15,
          (ErlangCons year_0
             (ErlangCons month_1
                (ErlangCons day_2
                   (ErlangCons hour_3
                      (ErlangCons min_4
                         (ErlangCons sec_5 ErlangEmptyList))))))])
  in let
    tup_el_13 =
      (BIF.do_remote_fun_call "Erlang.Unicode"
         "erlps__characters_to_binary__1" [arg_14])
  in let head_11 = (ErlangTuple [(ErlangAtom "string"), tup_el_13])
  in
    (erlps__value__4
       [(ErlangCons head_11 tokens_6), handler_7, stack_8, config_9])
erlps__value__4__p2 [(ErlangCons (ErlangTuple [(ErlangAtom "literal"),
                                               value_0]) tokens_1),
                     handler_2, stack_3, config_4]
  | ((ErlangAtom "true") ==
       (H.falsifyErrors
          (\ _ ->
             let   
               lop_14 = (BIF.erlang__op_eq [value_0, (ErlangAtom "true")])
             in let
               lop_13 =
                 case lop_14 of
                   (ErlangAtom "true") -> (ErlangAtom "true")
                   (ErlangAtom "false") ->
                     (BIF.erlang__op_eq [value_0, (ErlangAtom "false")])
                   _ -> (EXC.badarg1 lop_14)
             in
               case lop_13 of
                 (ErlangAtom "true") -> (ErlangAtom "true")
                 (ErlangAtom "false") ->
                   (BIF.erlang__op_eq [value_0, (ErlangAtom "null")])
                 _ -> (EXC.badarg1 lop_13)))) =
  let
    arg_5 =
      (BIF.erlang__op_append
         [(ErlangCons value_0 ErlangEmptyList), tokens_1])
  in (erlps__value__4 [arg_5, handler_2, stack_3, config_4])
erlps__value__4__p2 [(ErlangCons (ErlangTuple [(ErlangAtom "integer"),
                                               value_0]) tokens_1),
                     handler_2, stack_3, config_4]
  | (H.isEInt value_0) =
  let
    arg_5 =
      (BIF.erlang__op_append
         [(ErlangCons value_0 ErlangEmptyList), tokens_1])
  in (erlps__value__4 [arg_5, handler_2, stack_3, config_4])
erlps__value__4__p2 [(ErlangCons (ErlangTuple [(ErlangAtom "float"),
                                               value_0]) tokens_1),
                     handler_2, stack_3, config_4]
  | (H.isEFloat value_0) =
  let
    arg_5 =
      (BIF.erlang__op_append
         [(ErlangCons value_0 ErlangEmptyList), tokens_1])
  in (erlps__value__4 [arg_5, handler_2, stack_3, config_4])
erlps__value__4__p2 [(ErlangCons (ErlangTuple [(ErlangAtom "string"),
                                               value_0]) tokens_1),
                     handler_2, stack_3, config_4]
  | ((ErlangAtom "true") ==
       (H.falsifyErrors
          (\ _ ->
             let lop_13 = (BIF.erlang__is_binary__1 [value_0])
             in
               case lop_13 of
                 (ErlangAtom "true") -> (ErlangAtom "true")
                 (ErlangAtom "false") -> (BIF.erlang__is_atom__1 [value_0])
                 _ -> (EXC.badarg1 lop_13)))) =
  let
    arg_5 =
      (BIF.erlang__op_append
         [(ErlangCons value_0 ErlangEmptyList), tokens_1])
  in (erlps__value__4 [arg_5, handler_2, stack_3, config_4])
erlps__value__4__p2 args = (erlps__value__4__p3 args)

erlps__value__4__p3 :: ErlangFun
erlps__value__4__p3 [(ErlangCons (ErlangTuple [(ErlangAtom "number"),
                                               value_0]) tokens_1),
                     handler_2, stack_3, config_4]
  | ((ErlangAtom "true") ==
       (H.falsifyErrors
          (\ _ ->
             let lop_13 = (BIF.erlang__is_float__1 [value_0])
             in
               case lop_13 of
                 (ErlangAtom "true") -> (ErlangAtom "true")
                 (ErlangAtom "false") -> (BIF.erlang__is_integer__1 [value_0])
                 _ -> (EXC.badarg1 lop_13)))) =
  let
    arg_5 =
      (BIF.erlang__op_append
         [(ErlangCons value_0 ErlangEmptyList), tokens_1])
  in (erlps__value__4 [arg_5, handler_2, stack_3, config_4])
erlps__value__4__p3 [(ErlangCons string_0 tokens_1), handler_2,
                     stack_3, config_4]
  | (H.isEAtom string_0) =
  let   
    tup_el_9 =
      (BIF.erlang__atom_to_binary__2 [string_0, (ErlangAtom "utf8")])
  in let head_7 = (ErlangTuple [(ErlangAtom "string"), tup_el_9])
  in let
    arg_5 =
      (BIF.erlang__op_append
         [(ErlangCons head_7 ErlangEmptyList), tokens_1])
  in (erlps__value__4 [arg_5, handler_2, stack_3, config_4])
erlps__value__4__p3 [(ErlangEmptyList), handler_0, stack_1,
                     config_2]
  =
  (erlps__incomplete__4
     [(ErlangAtom "value"), handler_0, stack_1, config_2])
erlps__value__4__p3 [badtokens_0, handler_1, stack_2, config_3]
  | (H.isEList badtokens_0) =
  let
    case_4 =
      case config_3 of
        (ErlangTuple arr_7) | (DM.Just field_6) <- ((arr_7 DA.!! 14)) ->
          field_6
        _ -> (EXC.badrecord (ErlangAtom "config"))
  in
    case case_4 of
      (ErlangAtom "false") ->
        (BIF.erlang__error__1 [(ErlangAtom "badarg")])
      f_9 ->
        let   
          arg_11 =
            (ErlangTuple
               [(ErlangAtom "parser"), (ErlangAtom "value"), handler_1,
                stack_2])
        in let
          arg_16 =
            (BIF.do_remote_fun_call "Jsx.Config" "erlps__config_to_list__1"
               [config_3])
        in
          (BIF.erlang__apply__2
             [f_9,
              (ErlangCons badtokens_0
                 (ErlangCons arg_11 (ErlangCons arg_16 ErlangEmptyList)))])
erlps__value__4__p3 [token_0, handler_1, stack_2, config_3] =
  (erlps__value__4
     [(ErlangCons token_0 ErlangEmptyList), handler_1, stack_2,
      config_3])
erlps__value__4__p3 [arg_10, arg_11, arg_12, arg_13] =
  (EXC.function_clause unit)
erlps__value__4__p3 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__object__4 :: ErlangFun
erlps__object__4 [(ErlangCons (ErlangAtom "end_object") tokens_0),
                  handler_1, (ErlangCons (ErlangAtom "object") stack_2),
                  config_3]
  =
  let
    arg_5 =
      (erlps__handle_event__3
         [(ErlangAtom "end_object"), handler_1, config_3])
  in (erlps__maybe_done__4 [tokens_0, arg_5, stack_2, config_3])
erlps__object__4 [(ErlangCons (ErlangTuple [(ErlangAtom "key"),
                                            key_0]) tokens_1),
                  handler_2, stack_3, config_4]
  | ((ErlangAtom "true") ==
       (H.falsifyErrors
          (\ _ ->
             let    lop_12 = (BIF.erlang__is_atom__1 [key_0])
             in let
               lop_11 =
                 case lop_12 of
                   (ErlangAtom "true") -> (ErlangAtom "true")
                   (ErlangAtom "false") -> (BIF.erlang__is_binary__1 [key_0])
                   _ -> (EXC.badarg1 lop_12)
             in
               case lop_11 of
                 (ErlangAtom "true") -> (ErlangAtom "true")
                 (ErlangAtom "false") -> (BIF.erlang__is_integer__1 [key_0])
                 _ -> (EXC.badarg1 lop_11)))) =
  (erlps__object__4
     [(ErlangCons key_0 tokens_1), handler_2, stack_3, config_4])
erlps__object__4 [(ErlangCons key_0 tokens_1), handler_2,
                  (ErlangCons (ErlangAtom "object") stack_3), config_4]
  | ((ErlangAtom "true") ==
       (H.falsifyErrors
          (\ _ ->
             let    lop_43 = (BIF.erlang__is_atom__1 [key_0])
             in let
               lop_42 =
                 case lop_43 of
                   (ErlangAtom "true") -> (ErlangAtom "true")
                   (ErlangAtom "false") -> (BIF.erlang__is_binary__1 [key_0])
                   _ -> (EXC.badarg1 lop_43)
             in
               case lop_42 of
                 (ErlangAtom "true") -> (ErlangAtom "true")
                 (ErlangAtom "false") -> (BIF.erlang__is_integer__1 [key_0])
                 _ -> (EXC.badarg1 lop_42)))) =
  (EXC.tryOfCatch
     (\ _ ->
        let arg_5 = (erlps__fix_key__1 [key_0])
        in (erlps__clean_string__2 [arg_5, config_4]))
     (\ of_8 ->
        let    arg_14 = (ErlangTuple [(ErlangAtom "key"), of_8])
        in let
          arg_13 = (erlps__handle_event__3 [arg_14, handler_2, config_4])
        in
          (erlps__value__4
             [tokens_1, arg_13, (ErlangCons (ErlangAtom "object") stack_3),
              config_4]))
     (\ ex_9 ->
        case ex_9 of
          (ErlangTuple [(ErlangAtom "error"), (ErlangAtom "badarg"), _]) ->
            let
              case_23 =
                case config_4 of
                  (ErlangTuple arr_26) | (DM.Just field_25) <-
                                           ((arr_26 DA.!! 14)) ->
                    field_25
                  _ -> (EXC.badrecord (ErlangAtom "config"))
            in
              case case_23 of
                (ErlangAtom "false") ->
                  (BIF.erlang__error__1 [(ErlangAtom "badarg")])
                f_28 ->
                  let    head_30 = (ErlangTuple [(ErlangAtom "string"), key_0])
                  in let
                    arg_34 =
                      (ErlangTuple
                         [(ErlangAtom "parser"), (ErlangAtom "object"),
                          handler_2, stack_3])
                  in let
                    arg_39 =
                      (BIF.do_remote_fun_call "Jsx.Config"
                         "erlps__config_to_list__1" [config_4])
                  in
                    (BIF.erlang__apply__2
                       [f_28,
                        (ErlangCons (ErlangCons head_30 tokens_1)
                           (ErlangCons arg_34
                              (ErlangCons arg_39 ErlangEmptyList)))])
          ex_10 -> (EXC.raise ex_10)))
erlps__object__4 [(ErlangEmptyList), handler_0, stack_1,
                  config_2]
  =
  (erlps__incomplete__4
     [(ErlangAtom "object"), handler_0, stack_1, config_2])
erlps__object__4 [token_0, handler_1, stack_2, config_3] =
  (erlps__object__4
     [(ErlangCons token_0 ErlangEmptyList), handler_1, stack_2,
      config_3])
erlps__object__4 [arg_10, arg_11, arg_12, arg_13] =
  (EXC.function_clause unit)
erlps__object__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__array__4 :: ErlangFun
erlps__array__4 [(ErlangCons (ErlangAtom "end_array") tokens_0),
                 handler_1, (ErlangCons (ErlangAtom "array") stack_2), config_3]
  =
  let
    arg_5 =
      (erlps__handle_event__3
         [(ErlangAtom "end_array"), handler_1, config_3])
  in (erlps__maybe_done__4 [tokens_0, arg_5, stack_2, config_3])
erlps__array__4 [(ErlangEmptyList), handler_0, stack_1, config_2]
  =
  (erlps__incomplete__4
     [(ErlangAtom "array"), handler_0, stack_1, config_2])
erlps__array__4 [tokens_0, handler_1, stack_2, config_3]
  | (H.isEList tokens_0) =
  (erlps__value__4 [tokens_0, handler_1, stack_2, config_3])
erlps__array__4 [token_0, handler_1, stack_2, config_3] =
  (erlps__array__4
     [(ErlangCons token_0 ErlangEmptyList), handler_1, stack_2,
      config_3])
erlps__array__4 [arg_10, arg_11, arg_12, arg_13] =
  (EXC.function_clause unit)
erlps__array__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__maybe_done__4 :: ErlangFun
erlps__maybe_done__4 [(ErlangCons (ErlangAtom "end_json") (ErlangEmptyList)),
                      handler_0, (ErlangEmptyList), config_1]
  =
  (erlps__done__4
     [(ErlangCons (ErlangAtom "end_json") ErlangEmptyList), handler_0,
      ErlangEmptyList, config_1])
erlps__maybe_done__4 [tokens_0, handler_1,
                      stack_2@(ErlangCons (ErlangAtom "object") _), config_3]
  | (H.isEList tokens_0) =
  (erlps__object__4 [tokens_0, handler_1, stack_2, config_3])
erlps__maybe_done__4 [tokens_0, handler_1,
                      stack_2@(ErlangCons (ErlangAtom "array") _), config_3]
  | (H.isEList tokens_0) =
  (erlps__array__4 [tokens_0, handler_1, stack_2, config_3])
erlps__maybe_done__4 [(ErlangEmptyList), handler_0, stack_1,
                      config_2]
  =
  (erlps__incomplete__4
     [(ErlangAtom "maybe_done"), handler_0, stack_1, config_2])
erlps__maybe_done__4 [badtokens_0, handler_1, stack_2, config_3]
  | (H.isEList badtokens_0) =
  let
    case_4 =
      case config_3 of
        (ErlangTuple arr_7) | (DM.Just field_6) <- ((arr_7 DA.!! 14)) ->
          field_6
        _ -> (EXC.badrecord (ErlangAtom "config"))
  in
    case case_4 of
      (ErlangAtom "false") ->
        (BIF.erlang__error__1 [(ErlangAtom "badarg")])
      f_9 ->
        let   
          arg_11 =
            (ErlangTuple
               [(ErlangAtom "parser"), (ErlangAtom "maybe_done"), handler_1,
                stack_2])
        in let
          arg_16 =
            (BIF.do_remote_fun_call "Jsx.Config" "erlps__config_to_list__1"
               [config_3])
        in
          (BIF.erlang__apply__2
             [f_9,
              (ErlangCons badtokens_0
                 (ErlangCons arg_11 (ErlangCons arg_16 ErlangEmptyList)))])
erlps__maybe_done__4 args = (erlps__maybe_done__4__p1 args)

erlps__maybe_done__4__p1 :: ErlangFun
erlps__maybe_done__4__p1 [token_0, handler_1, stack_2, config_3]
  =
  (erlps__maybe_done__4
     [(ErlangCons token_0 ErlangEmptyList), handler_1, stack_2,
      config_3])
erlps__maybe_done__4__p1 [arg_10, arg_11, arg_12, arg_13] =
  (EXC.function_clause unit)
erlps__maybe_done__4__p1 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__done__4 :: ErlangFun
erlps__done__4 [(ErlangEmptyList), handler_0, (ErlangEmptyList),
                config_1@(ErlangTuple [(ErlangAtom "config"), _, _, _, _, _, _,
                                       _, _, _, (ErlangAtom "true"), _, _, _, _,
                                       _])]
  =
  (erlps__incomplete__4
     [(ErlangAtom "done"), handler_0, ErlangEmptyList, config_1])
erlps__done__4 [tokens_0, handler_1, (ErlangEmptyList), config_2]
  | ((ErlangAtom "true") ==
       (H.falsifyErrors
          (\ _ ->
             let
               lop_8 =
                 (BIF.erlang__op_eq
                    [tokens_0,
                     (ErlangCons (ErlangAtom "end_json") ErlangEmptyList)])
             in
               case lop_8 of
                 (ErlangAtom "true") -> (ErlangAtom "true")
                 (ErlangAtom "false") ->
                   (BIF.erlang__op_eq [tokens_0, ErlangEmptyList])
                 _ -> (EXC.badarg1 lop_8)))) =
  let
    match_expr_7 =
      (erlps__handle_event__3
         [(ErlangAtom "end_json"), handler_1, config_2])
  in
    case match_expr_7 of
      (ErlangTuple [_, state_6]) -> state_6
      _ -> (EXC.badmatch match_expr_7)
erlps__done__4 [badtokens_0, handler_1, stack_2, config_3]
  | (H.isEList badtokens_0) =
  let
    case_4 =
      case config_3 of
        (ErlangTuple arr_7) | (DM.Just field_6) <- ((arr_7 DA.!! 14)) ->
          field_6
        _ -> (EXC.badrecord (ErlangAtom "config"))
  in
    case case_4 of
      (ErlangAtom "false") ->
        (BIF.erlang__error__1 [(ErlangAtom "badarg")])
      f_9 ->
        let   
          arg_11 =
            (ErlangTuple
               [(ErlangAtom "parser"), (ErlangAtom "done"), handler_1, stack_2])
        in let
          arg_16 =
            (BIF.do_remote_fun_call "Jsx.Config" "erlps__config_to_list__1"
               [config_3])
        in
          (BIF.erlang__apply__2
             [f_9,
              (ErlangCons badtokens_0
                 (ErlangCons arg_11 (ErlangCons arg_16 ErlangEmptyList)))])
erlps__done__4 [token_0, handler_1, stack_2, config_3] =
  (erlps__done__4
     [(ErlangCons token_0 ErlangEmptyList), handler_1, stack_2,
      config_3])
erlps__done__4 [arg_10, arg_11, arg_12, arg_13] =
  (EXC.function_clause unit)
erlps__done__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__fix_key__1 :: ErlangFun
erlps__fix_key__1 [key_0] | (H.isEAtom key_0) =
  (BIF.erlang__atom_to_binary__2 [key_0, (ErlangAtom "utf8")])
erlps__fix_key__1 [key_0] | (H.isEInt key_0) =
  let arg_1 = (BIF.erlang__integer_to_list__1 [key_0])
  in (BIF.erlang__list_to_binary__1 [arg_1])
erlps__fix_key__1 [key_0]
  | ((ErlangAtom "true") ==
       (H.falsifyErrors (\ _ -> (BIF.erlang__is_binary__1 [key_0])))) =
  key_0
erlps__fix_key__1 [arg_2] = (EXC.function_clause unit)
erlps__fix_key__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__clean_string__2 :: ErlangFun
erlps__clean_string__2 [bin_0,
                        (ErlangTuple [(ErlangAtom "config"),
                                      (ErlangAtom "true"), _, _, _, _, _, _, _,
                                      _, _, _, _, _, _, _])]
  =
  bin_0
erlps__clean_string__2 [bin_0, config_1] =
  (erlps__clean__3 [bin_0, ErlangEmptyList, config_1])
erlps__clean_string__2 [arg_5, arg_6] =
  (EXC.function_clause unit)
erlps__clean_string__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__clean__3 :: ErlangFun
erlps__clean__3 [(ErlangBinary bin_c_0), acc_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 0)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    head_13 =
      (erlps__maybe_replace__2 [(ErlangInt (DBI.fromInt 0)), config_8])
  in
    (erlps__clean__3
       [rest_6, (ErlangCons acc_7 (ErlangCons head_13 ErlangEmptyList)),
        config_8])
erlps__clean__3 [(ErlangBinary bin_c_0), acc_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 1)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    head_13 =
      (erlps__maybe_replace__2 [(ErlangInt (DBI.fromInt 1)), config_8])
  in
    (erlps__clean__3
       [rest_6, (ErlangCons acc_7 (ErlangCons head_13 ErlangEmptyList)),
        config_8])
erlps__clean__3 [(ErlangBinary bin_c_0), acc_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 2)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    head_13 =
      (erlps__maybe_replace__2 [(ErlangInt (DBI.fromInt 2)), config_8])
  in
    (erlps__clean__3
       [rest_6, (ErlangCons acc_7 (ErlangCons head_13 ErlangEmptyList)),
        config_8])
erlps__clean__3 [(ErlangBinary bin_c_0), acc_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 3)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    head_13 =
      (erlps__maybe_replace__2 [(ErlangInt (DBI.fromInt 3)), config_8])
  in
    (erlps__clean__3
       [rest_6, (ErlangCons acc_7 (ErlangCons head_13 ErlangEmptyList)),
        config_8])
erlps__clean__3 [(ErlangBinary bin_c_0), acc_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 4)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    head_13 =
      (erlps__maybe_replace__2 [(ErlangInt (DBI.fromInt 4)), config_8])
  in
    (erlps__clean__3
       [rest_6, (ErlangCons acc_7 (ErlangCons head_13 ErlangEmptyList)),
        config_8])
erlps__clean__3 args = (erlps__clean__3__p1 args)

erlps__clean__3__p1 :: ErlangFun
erlps__clean__3__p1 [(ErlangBinary bin_c_0), acc_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 5)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    head_13 =
      (erlps__maybe_replace__2 [(ErlangInt (DBI.fromInt 5)), config_8])
  in
    (erlps__clean__3
       [rest_6, (ErlangCons acc_7 (ErlangCons head_13 ErlangEmptyList)),
        config_8])
erlps__clean__3__p1 [(ErlangBinary bin_c_0), acc_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 6)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    head_13 =
      (erlps__maybe_replace__2 [(ErlangInt (DBI.fromInt 6)), config_8])
  in
    (erlps__clean__3
       [rest_6, (ErlangCons acc_7 (ErlangCons head_13 ErlangEmptyList)),
        config_8])
erlps__clean__3__p1 [(ErlangBinary bin_c_0), acc_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 7)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    head_13 =
      (erlps__maybe_replace__2 [(ErlangInt (DBI.fromInt 7)), config_8])
  in
    (erlps__clean__3
       [rest_6, (ErlangCons acc_7 (ErlangCons head_13 ErlangEmptyList)),
        config_8])
erlps__clean__3__p1 [(ErlangBinary bin_c_0), acc_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 8)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    head_13 =
      (erlps__maybe_replace__2 [(ErlangInt (DBI.fromInt 8)), config_8])
  in
    (erlps__clean__3
       [rest_6, (ErlangCons acc_7 (ErlangCons head_13 ErlangEmptyList)),
        config_8])
erlps__clean__3__p1 [(ErlangBinary bin_c_0), acc_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 9)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    head_13 =
      (erlps__maybe_replace__2 [(ErlangInt (DBI.fromInt 9)), config_8])
  in
    (erlps__clean__3
       [rest_6, (ErlangCons acc_7 (ErlangCons head_13 ErlangEmptyList)),
        config_8])
erlps__clean__3__p1 args = (erlps__clean__3__p2 args)

erlps__clean__3__p2 :: ErlangFun
erlps__clean__3__p2 [(ErlangBinary bin_c_0), acc_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 10)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    head_13 =
      (erlps__maybe_replace__2
         [(ErlangInt (DBI.fromInt 10)), config_8])
  in
    (erlps__clean__3
       [rest_6, (ErlangCons acc_7 (ErlangCons head_13 ErlangEmptyList)),
        config_8])
erlps__clean__3__p2 [(ErlangBinary bin_c_0), acc_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 11)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    head_13 =
      (erlps__maybe_replace__2
         [(ErlangInt (DBI.fromInt 11)), config_8])
  in
    (erlps__clean__3
       [rest_6, (ErlangCons acc_7 (ErlangCons head_13 ErlangEmptyList)),
        config_8])
erlps__clean__3__p2 [(ErlangBinary bin_c_0), acc_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 12)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    head_13 =
      (erlps__maybe_replace__2
         [(ErlangInt (DBI.fromInt 12)), config_8])
  in
    (erlps__clean__3
       [rest_6, (ErlangCons acc_7 (ErlangCons head_13 ErlangEmptyList)),
        config_8])
erlps__clean__3__p2 [(ErlangBinary bin_c_0), acc_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 13)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    head_13 =
      (erlps__maybe_replace__2
         [(ErlangInt (DBI.fromInt 13)), config_8])
  in
    (erlps__clean__3
       [rest_6, (ErlangCons acc_7 (ErlangCons head_13 ErlangEmptyList)),
        config_8])
erlps__clean__3__p2 [(ErlangBinary bin_c_0), acc_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 14)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    head_13 =
      (erlps__maybe_replace__2
         [(ErlangInt (DBI.fromInt 14)), config_8])
  in
    (erlps__clean__3
       [rest_6, (ErlangCons acc_7 (ErlangCons head_13 ErlangEmptyList)),
        config_8])
erlps__clean__3__p2 args = (erlps__clean__3__p3 args)

erlps__clean__3__p3 :: ErlangFun
erlps__clean__3__p3 [(ErlangBinary bin_c_0), acc_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 15)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    head_13 =
      (erlps__maybe_replace__2
         [(ErlangInt (DBI.fromInt 15)), config_8])
  in
    (erlps__clean__3
       [rest_6, (ErlangCons acc_7 (ErlangCons head_13 ErlangEmptyList)),
        config_8])
erlps__clean__3__p3 [(ErlangBinary bin_c_0), acc_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 16)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    head_13 =
      (erlps__maybe_replace__2
         [(ErlangInt (DBI.fromInt 16)), config_8])
  in
    (erlps__clean__3
       [rest_6, (ErlangCons acc_7 (ErlangCons head_13 ErlangEmptyList)),
        config_8])
erlps__clean__3__p3 [(ErlangBinary bin_c_0), acc_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 17)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    head_13 =
      (erlps__maybe_replace__2
         [(ErlangInt (DBI.fromInt 17)), config_8])
  in
    (erlps__clean__3
       [rest_6, (ErlangCons acc_7 (ErlangCons head_13 ErlangEmptyList)),
        config_8])
erlps__clean__3__p3 [(ErlangBinary bin_c_0), acc_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 18)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    head_13 =
      (erlps__maybe_replace__2
         [(ErlangInt (DBI.fromInt 18)), config_8])
  in
    (erlps__clean__3
       [rest_6, (ErlangCons acc_7 (ErlangCons head_13 ErlangEmptyList)),
        config_8])
erlps__clean__3__p3 [(ErlangBinary bin_c_0), acc_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 19)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    head_13 =
      (erlps__maybe_replace__2
         [(ErlangInt (DBI.fromInt 19)), config_8])
  in
    (erlps__clean__3
       [rest_6, (ErlangCons acc_7 (ErlangCons head_13 ErlangEmptyList)),
        config_8])
erlps__clean__3__p3 args = (erlps__clean__3__p4 args)

erlps__clean__3__p4 :: ErlangFun
erlps__clean__3__p4 [(ErlangBinary bin_c_0), acc_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 20)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    head_13 =
      (erlps__maybe_replace__2
         [(ErlangInt (DBI.fromInt 20)), config_8])
  in
    (erlps__clean__3
       [rest_6, (ErlangCons acc_7 (ErlangCons head_13 ErlangEmptyList)),
        config_8])
erlps__clean__3__p4 [(ErlangBinary bin_c_0), acc_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 21)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    head_13 =
      (erlps__maybe_replace__2
         [(ErlangInt (DBI.fromInt 21)), config_8])
  in
    (erlps__clean__3
       [rest_6, (ErlangCons acc_7 (ErlangCons head_13 ErlangEmptyList)),
        config_8])
erlps__clean__3__p4 [(ErlangBinary bin_c_0), acc_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 22)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    head_13 =
      (erlps__maybe_replace__2
         [(ErlangInt (DBI.fromInt 22)), config_8])
  in
    (erlps__clean__3
       [rest_6, (ErlangCons acc_7 (ErlangCons head_13 ErlangEmptyList)),
        config_8])
erlps__clean__3__p4 [(ErlangBinary bin_c_0), acc_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 23)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    head_13 =
      (erlps__maybe_replace__2
         [(ErlangInt (DBI.fromInt 23)), config_8])
  in
    (erlps__clean__3
       [rest_6, (ErlangCons acc_7 (ErlangCons head_13 ErlangEmptyList)),
        config_8])
erlps__clean__3__p4 [(ErlangBinary bin_c_0), acc_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 24)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    head_13 =
      (erlps__maybe_replace__2
         [(ErlangInt (DBI.fromInt 24)), config_8])
  in
    (erlps__clean__3
       [rest_6, (ErlangCons acc_7 (ErlangCons head_13 ErlangEmptyList)),
        config_8])
erlps__clean__3__p4 args = (erlps__clean__3__p5 args)

erlps__clean__3__p5 :: ErlangFun
erlps__clean__3__p5 [(ErlangBinary bin_c_0), acc_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 25)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    head_13 =
      (erlps__maybe_replace__2
         [(ErlangInt (DBI.fromInt 25)), config_8])
  in
    (erlps__clean__3
       [rest_6, (ErlangCons acc_7 (ErlangCons head_13 ErlangEmptyList)),
        config_8])
erlps__clean__3__p5 [(ErlangBinary bin_c_0), acc_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 26)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    head_13 =
      (erlps__maybe_replace__2
         [(ErlangInt (DBI.fromInt 26)), config_8])
  in
    (erlps__clean__3
       [rest_6, (ErlangCons acc_7 (ErlangCons head_13 ErlangEmptyList)),
        config_8])
erlps__clean__3__p5 [(ErlangBinary bin_c_0), acc_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 27)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    head_13 =
      (erlps__maybe_replace__2
         [(ErlangInt (DBI.fromInt 27)), config_8])
  in
    (erlps__clean__3
       [rest_6, (ErlangCons acc_7 (ErlangCons head_13 ErlangEmptyList)),
        config_8])
erlps__clean__3__p5 [(ErlangBinary bin_c_0), acc_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 28)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    head_13 =
      (erlps__maybe_replace__2
         [(ErlangInt (DBI.fromInt 28)), config_8])
  in
    (erlps__clean__3
       [rest_6, (ErlangCons acc_7 (ErlangCons head_13 ErlangEmptyList)),
        config_8])
erlps__clean__3__p5 [(ErlangBinary bin_c_0), acc_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 29)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    head_13 =
      (erlps__maybe_replace__2
         [(ErlangInt (DBI.fromInt 29)), config_8])
  in
    (erlps__clean__3
       [rest_6, (ErlangCons acc_7 (ErlangCons head_13 ErlangEmptyList)),
        config_8])
erlps__clean__3__p5 args = (erlps__clean__3__p6 args)

erlps__clean__3__p6 :: ErlangFun
erlps__clean__3__p6 [(ErlangBinary bin_c_0), acc_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 30)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    head_13 =
      (erlps__maybe_replace__2
         [(ErlangInt (DBI.fromInt 30)), config_8])
  in
    (erlps__clean__3
       [rest_6, (ErlangCons acc_7 (ErlangCons head_13 ErlangEmptyList)),
        config_8])
erlps__clean__3__p6 [(ErlangBinary bin_c_0), acc_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 31)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    head_13 =
      (erlps__maybe_replace__2
         [(ErlangInt (DBI.fromInt 31)), config_8])
  in
    (erlps__clean__3
       [rest_6, (ErlangCons acc_7 (ErlangCons head_13 ErlangEmptyList)),
        config_8])
erlps__clean__3__p6 [(ErlangBinary bin_c_0), acc_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 34)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    head_13 =
      (erlps__maybe_replace__2
         [(ErlangInt (DBI.fromInt 34)), config_8])
  in
    (erlps__clean__3
       [rest_6, (ErlangCons acc_7 (ErlangCons head_13 ErlangEmptyList)),
        config_8])
erlps__clean__3__p6 [(ErlangBinary bin_c_0), acc_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 47)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    head_13 =
      (erlps__maybe_replace__2
         [(ErlangInt (DBI.fromInt 47)), config_8])
  in
    (erlps__clean__3
       [rest_6, (ErlangCons acc_7 (ErlangCons head_13 ErlangEmptyList)),
        config_8])
erlps__clean__3__p6 [(ErlangBinary bin_c_0), acc_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 92)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    head_13 =
      (erlps__maybe_replace__2
         [(ErlangInt (DBI.fromInt 92)), config_8])
  in
    (erlps__clean__3
       [rest_6, (ErlangCons acc_7 (ErlangCons head_13 ErlangEmptyList)),
        config_8])
erlps__clean__3__p6 args = (erlps__clean__3__p7 args)

erlps__clean__3__p7 :: ErlangFun
erlps__clean__3__p7 [bin_7@(ErlangBinary bin_c_0), acc_8,
                     config_9@(ErlangTuple [(ErlangAtom "config"), _, _, _, _,
                                            _, _, _, _, _, _, _,
                                            (ErlangAtom "true"), _, _, _])]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok x_3 bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  case x_3 of
    x_11 | (x_11 == x_3)
         , (weakLt x_3 (ErlangInt (DBI.fromInt 128))) ->
      (erlps__start_count__3 [bin_7, acc_8, config_9])
    _ ->
      let head_19 = (erlps__json_escape_sequence__1 [x_3])
      in
        (erlps__clean__3
           [rest_6, (ErlangCons acc_8 (ErlangCons head_19 ErlangEmptyList)),
            config_9])
erlps__clean__3__p7 [(ErlangBinary bin_c_0), acc_13, config_14]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 226)))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_6) == (ErlangInt (DBI.fromInt 128)))
  , size_7 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_9) bin_8) <-
      ((BIN.chop_int bin_5 size_7 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_9) == (ErlangInt (DBI.fromInt 168)))
  , (ErlangInt size_10) <- ((BIN.size bin_8))
  , (BIN.Ok rest_12 bin_11) <- ((BIN.chop_bin bin_8 size_10 8))
  , (BIN.empty bin_11) =
  let
    head_19 =
      (erlps__maybe_replace__2
         [(ErlangInt (DBI.fromInt 8232)), config_14])
  in
    (erlps__clean__3
       [rest_12,
        (ErlangCons acc_13 (ErlangCons head_19 ErlangEmptyList)),
        config_14])
erlps__clean__3__p7 [(ErlangBinary bin_c_0), acc_13, config_14]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 226)))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_6) == (ErlangInt (DBI.fromInt 128)))
  , size_7 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_9) bin_8) <-
      ((BIN.chop_int bin_5 size_7 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_9) == (ErlangInt (DBI.fromInt 169)))
  , (ErlangInt size_10) <- ((BIN.size bin_8))
  , (BIN.Ok rest_12 bin_11) <- ((BIN.chop_bin bin_8 size_10 8))
  , (BIN.empty bin_11) =
  let
    head_19 =
      (erlps__maybe_replace__2
         [(ErlangInt (DBI.fromInt 8233)), config_14])
  in
    (erlps__clean__3
       [rest_12,
        (ErlangCons acc_13 (ErlangCons head_19 ErlangEmptyList)),
        config_14])
erlps__clean__3__p7 [bin_3@(ErlangBinary bin_c_0), acc_4,
                     config_5]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok _ bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned)) =
  (erlps__start_count__3 [bin_3, acc_4, config_5])
erlps__clean__3__p7 [(ErlangBinary bin_c_0), acc_12, config_13]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 237)))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok x_6 bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , size_7 <- ((DBI.fromInt 8))
  , (BIN.Ok _ bin_8) <-
      ((BIN.chop_int bin_5 size_7 1 BIN.Big BIN.Unsigned))
  , (ErlangInt size_9) <- ((BIN.size bin_8))
  , (BIN.Ok rest_11 bin_10) <- ((BIN.chop_bin bin_8 size_9 8))
  , (BIN.empty bin_10)
  , (weakGeq x_6 (ErlangInt (DBI.fromInt 160))) =
  let
    head_18 =
      (erlps__maybe_replace__2 [(ErlangAtom "surrogate"), config_13])
  in
    (erlps__clean__3
       [rest_11,
        (ErlangCons acc_12 (ErlangCons head_18 ErlangEmptyList)),
        config_13])
erlps__clean__3__p7 args = (erlps__clean__3__p8 args)

erlps__clean__3__p8 :: ErlangFun
erlps__clean__3__p8 [(ErlangBinary bin_c_0), acc_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok x_3 bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5)
  , ((weakGeq x_3 (ErlangInt (DBI.fromInt 192))) &&
       (weakLeq x_3 (ErlangInt (DBI.fromInt 223)))) =
  let   
    arg_9 =
      (erlps__strip_continuations__2
         [rest_6, (ErlangInt (DBI.fromInt 1))])
  in let
    head_15 =
      (erlps__maybe_replace__2 [(ErlangAtom "badutf"), config_8])
  in
    (erlps__clean__3
       [arg_9, (ErlangCons acc_7 (ErlangCons head_15 ErlangEmptyList)),
        config_8])
erlps__clean__3__p8 [(ErlangBinary bin_c_0), acc_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok x_3 bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5)
  , ((weakGeq x_3 (ErlangInt (DBI.fromInt 224))) &&
       (weakLeq x_3 (ErlangInt (DBI.fromInt 239)))) =
  let   
    arg_9 =
      (erlps__strip_continuations__2
         [rest_6, (ErlangInt (DBI.fromInt 2))])
  in let
    head_15 =
      (erlps__maybe_replace__2 [(ErlangAtom "badutf"), config_8])
  in
    (erlps__clean__3
       [arg_9, (ErlangCons acc_7 (ErlangCons head_15 ErlangEmptyList)),
        config_8])
erlps__clean__3__p8 [(ErlangBinary bin_c_0), acc_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok x_3 bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5)
  , ((weakGeq x_3 (ErlangInt (DBI.fromInt 240))) &&
       (weakLeq x_3 (ErlangInt (DBI.fromInt 247)))) =
  let   
    arg_9 =
      (erlps__strip_continuations__2
         [rest_6, (ErlangInt (DBI.fromInt 3))])
  in let
    head_15 =
      (erlps__maybe_replace__2 [(ErlangAtom "badutf"), config_8])
  in
    (erlps__clean__3
       [arg_9, (ErlangCons acc_7 (ErlangCons head_15 ErlangEmptyList)),
        config_8])
erlps__clean__3__p8 [(ErlangBinary bin_c_0), acc_6, config_7]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok _ bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , (ErlangInt size_3) <- ((BIN.size bin_2))
  , (BIN.Ok rest_5 bin_4) <- ((BIN.chop_bin bin_2 size_3 8))
  , (BIN.empty bin_4) =
  let
    head_12 =
      (erlps__maybe_replace__2 [(ErlangAtom "badutf"), config_7])
  in
    (erlps__clean__3
       [rest_5, (ErlangCons acc_6 (ErlangCons head_12 ErlangEmptyList)),
        config_7])
erlps__clean__3__p8 [(ErlangBinary bin_e_0), acc_1, _]
  | (BIN.empty bin_e_0) =
  (BIF.erlang__iolist_to_binary__1 [acc_1])
erlps__clean__3__p8 [arg_3, arg_4, arg_5] =
  (EXC.function_clause unit)
erlps__clean__3__p8 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__start_count__3 :: ErlangFun
erlps__start_count__3 [bin_0, acc_1, config_2] =
  let
    size_6 =
      (erlps__count__3 [bin_0, (ErlangInt (DBI.fromInt 0)), config_2])
  in
    case bin_0 of
      (ErlangBinary bin_c_7) | (ErlangInt size_8) <- (size_6)
                             , (BIN.Ok clean_10 bin_9) <-
                                 ((BIN.chop_bin bin_c_7 size_8 8))
                             , (ErlangInt size_11) <- ((BIN.size bin_9))
                             , (BIN.Ok rest_13 bin_12) <-
                                 ((BIN.chop_bin bin_9 size_11 8))
                             , (BIN.empty bin_12) ->
        (erlps__clean__3
           [rest_13,
            (ErlangCons acc_1 (ErlangCons clean_10 ErlangEmptyList)),
            config_2])
      _ -> (EXC.badmatch bin_0)
erlps__start_count__3 [arg_22, arg_23, arg_24] =
  (EXC.function_clause unit)
erlps__start_count__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__count__3 :: ErlangFun
erlps__count__3 [(ErlangBinary bin_c_0), n_4, _]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 0))) =
  n_4
erlps__count__3 [(ErlangBinary bin_c_0), n_4, _]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 1))) =
  n_4
erlps__count__3 [(ErlangBinary bin_c_0), n_4, _]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 2))) =
  n_4
erlps__count__3 [(ErlangBinary bin_c_0), n_4, _]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 3))) =
  n_4
erlps__count__3 [(ErlangBinary bin_c_0), n_4, _]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 4))) =
  n_4
erlps__count__3 args = (erlps__count__3__p1 args)

erlps__count__3__p1 :: ErlangFun
erlps__count__3__p1 [(ErlangBinary bin_c_0), n_4, _]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 5))) =
  n_4
erlps__count__3__p1 [(ErlangBinary bin_c_0), n_4, _]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 6))) =
  n_4
erlps__count__3__p1 [(ErlangBinary bin_c_0), n_4, _]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 7))) =
  n_4
erlps__count__3__p1 [(ErlangBinary bin_c_0), n_4, _]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 8))) =
  n_4
erlps__count__3__p1 [(ErlangBinary bin_c_0), n_4, _]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 9))) =
  n_4
erlps__count__3__p1 args = (erlps__count__3__p2 args)

erlps__count__3__p2 :: ErlangFun
erlps__count__3__p2 [(ErlangBinary bin_c_0), n_4, _]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 10))) =
  n_4
erlps__count__3__p2 [(ErlangBinary bin_c_0), n_4, _]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 11))) =
  n_4
erlps__count__3__p2 [(ErlangBinary bin_c_0), n_4, _]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 12))) =
  n_4
erlps__count__3__p2 [(ErlangBinary bin_c_0), n_4, _]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 13))) =
  n_4
erlps__count__3__p2 [(ErlangBinary bin_c_0), n_4, _]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 14))) =
  n_4
erlps__count__3__p2 args = (erlps__count__3__p3 args)

erlps__count__3__p3 :: ErlangFun
erlps__count__3__p3 [(ErlangBinary bin_c_0), n_4, _]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 15))) =
  n_4
erlps__count__3__p3 [(ErlangBinary bin_c_0), n_4, _]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 16))) =
  n_4
erlps__count__3__p3 [(ErlangBinary bin_c_0), n_4, _]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 17))) =
  n_4
erlps__count__3__p3 [(ErlangBinary bin_c_0), n_4, _]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 18))) =
  n_4
erlps__count__3__p3 [(ErlangBinary bin_c_0), n_4, _]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 19))) =
  n_4
erlps__count__3__p3 args = (erlps__count__3__p4 args)

erlps__count__3__p4 :: ErlangFun
erlps__count__3__p4 [(ErlangBinary bin_c_0), n_4, _]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 20))) =
  n_4
erlps__count__3__p4 [(ErlangBinary bin_c_0), n_4, _]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 21))) =
  n_4
erlps__count__3__p4 [(ErlangBinary bin_c_0), n_4, _]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 22))) =
  n_4
erlps__count__3__p4 [(ErlangBinary bin_c_0), n_4, _]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 23))) =
  n_4
erlps__count__3__p4 [(ErlangBinary bin_c_0), n_4, _]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 24))) =
  n_4
erlps__count__3__p4 args = (erlps__count__3__p5 args)

erlps__count__3__p5 :: ErlangFun
erlps__count__3__p5 [(ErlangBinary bin_c_0), n_4, _]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 25))) =
  n_4
erlps__count__3__p5 [(ErlangBinary bin_c_0), n_4, _]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 26))) =
  n_4
erlps__count__3__p5 [(ErlangBinary bin_c_0), n_4, _]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 27))) =
  n_4
erlps__count__3__p5 [(ErlangBinary bin_c_0), n_4, _]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 28))) =
  n_4
erlps__count__3__p5 [(ErlangBinary bin_c_0), n_4, _]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 29))) =
  n_4
erlps__count__3__p5 args = (erlps__count__3__p6 args)

erlps__count__3__p6 :: ErlangFun
erlps__count__3__p6 [(ErlangBinary bin_c_0), n_4, _]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 30))) =
  n_4
erlps__count__3__p6 [(ErlangBinary bin_c_0), n_4, _]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 31))) =
  n_4
erlps__count__3__p6 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 32)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p6 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 33)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p6 [(ErlangBinary bin_c_0), n_4, _]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 34))) =
  n_4
erlps__count__3__p6 args = (erlps__count__3__p7 args)

erlps__count__3__p7 :: ErlangFun
erlps__count__3__p7 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 35)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p7 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 36)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p7 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 37)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p7 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 38)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p7 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 39)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p7 args = (erlps__count__3__p8 args)

erlps__count__3__p8 :: ErlangFun
erlps__count__3__p8 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 40)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p8 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 41)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p8 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 42)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p8 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 43)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p8 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 44)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p8 args = (erlps__count__3__p9 args)

erlps__count__3__p9 :: ErlangFun
erlps__count__3__p9 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 45)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p9 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 46)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p9 [(ErlangBinary bin_c_0), n_4, _]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 47))) =
  n_4
erlps__count__3__p9 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 48)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p9 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 49)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p9 args = (erlps__count__3__p10 args)

erlps__count__3__p10 :: ErlangFun
erlps__count__3__p10 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 50)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p10 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 51)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p10 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 52)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p10 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 53)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p10 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 54)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p10 args = (erlps__count__3__p11 args)

erlps__count__3__p11 :: ErlangFun
erlps__count__3__p11 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 55)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p11 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 56)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p11 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 57)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p11 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 58)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p11 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 59)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p11 args = (erlps__count__3__p12 args)

erlps__count__3__p12 :: ErlangFun
erlps__count__3__p12 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 60)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p12 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 61)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p12 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 62)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p12 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 63)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p12 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 64)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p12 args = (erlps__count__3__p13 args)

erlps__count__3__p13 :: ErlangFun
erlps__count__3__p13 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 65)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p13 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 66)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p13 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 67)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p13 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 68)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p13 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 69)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p13 args = (erlps__count__3__p14 args)

erlps__count__3__p14 :: ErlangFun
erlps__count__3__p14 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 70)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p14 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 71)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p14 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 72)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p14 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 73)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p14 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 74)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p14 args = (erlps__count__3__p15 args)

erlps__count__3__p15 :: ErlangFun
erlps__count__3__p15 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 75)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p15 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 76)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p15 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 77)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p15 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 78)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p15 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 79)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p15 args = (erlps__count__3__p16 args)

erlps__count__3__p16 :: ErlangFun
erlps__count__3__p16 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 80)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p16 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 81)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p16 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 82)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p16 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 83)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p16 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 84)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p16 args = (erlps__count__3__p17 args)

erlps__count__3__p17 :: ErlangFun
erlps__count__3__p17 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 85)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p17 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 86)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p17 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 87)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p17 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 88)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p17 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 89)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p17 args = (erlps__count__3__p18 args)

erlps__count__3__p18 :: ErlangFun
erlps__count__3__p18 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 90)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p18 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 91)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p18 [(ErlangBinary bin_c_0), n_4, _]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 92))) =
  n_4
erlps__count__3__p18 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 93)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p18 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 94)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p18 args = (erlps__count__3__p19 args)

erlps__count__3__p19 :: ErlangFun
erlps__count__3__p19 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 95)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p19 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 96)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p19 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 97)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p19 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 98)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p19 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 99)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p19 args = (erlps__count__3__p20 args)

erlps__count__3__p20 :: ErlangFun
erlps__count__3__p20 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 100)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p20 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 101)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p20 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 102)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p20 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 103)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p20 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 104)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p20 args = (erlps__count__3__p21 args)

erlps__count__3__p21 :: ErlangFun
erlps__count__3__p21 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 105)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p21 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 106)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p21 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 107)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p21 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 108)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p21 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 109)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p21 args = (erlps__count__3__p22 args)

erlps__count__3__p22 :: ErlangFun
erlps__count__3__p22 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 110)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p22 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 111)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p22 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 112)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p22 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 113)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p22 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 114)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p22 args = (erlps__count__3__p23 args)

erlps__count__3__p23 :: ErlangFun
erlps__count__3__p23 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 115)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p23 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 116)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p23 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 117)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p23 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 118)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p23 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 119)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p23 args = (erlps__count__3__p24 args)

erlps__count__3__p24 :: ErlangFun
erlps__count__3__p24 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 120)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p24 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 121)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p24 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 122)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p24 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 123)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p24 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 124)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p24 args = (erlps__count__3__p25 args)

erlps__count__3__p25 :: ErlangFun
erlps__count__3__p25 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 125)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p25 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 126)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p25 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 127)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p25 [(ErlangBinary bin_c_0), n_3,
                      (ErlangTuple [(ErlangAtom "config"), _, _, _, _, _, _, _,
                                    _, _, _, _, (ErlangAtom "true"), _, _, _])]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok _ bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned)) =
  n_3
erlps__count__3__p25 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok x_3 bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  case x_3 of
    x_10 | (x_10 == x_3)
         , (weakLt x_3 (ErlangInt (DBI.fromInt 2048))) ->
      let
        arg_12 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 2))])
      in (erlps__count__3 [rest_6, arg_12, config_8])
    (ErlangInt num_16) | ((ErlangInt num_16) ==
                            (ErlangInt (DBI.fromInt 8232))) ->
      n_7
    (ErlangInt num_17) | ((ErlangInt num_17) ==
                            (ErlangInt (DBI.fromInt 8233))) ->
      n_7
    x_18 | (x_18 == x_3)
         , (weakLt x_3 (ErlangInt (DBI.fromInt 65536))) ->
      let
        arg_20 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 3))])
      in (erlps__count__3 [rest_6, arg_20, config_8])
    _ ->
      let
        arg_25 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 4))])
      in (erlps__count__3 [rest_6, arg_25, config_8])
erlps__count__3__p25 args = (erlps__count__3__p26 args)

erlps__count__3__p26 :: ErlangFun
erlps__count__3__p26 [(ErlangBinary bin_c_0), n_3, _]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok _ bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned)) =
  n_3
erlps__count__3__p26 [(ErlangBinary bin_e_0), n_1, _]
  | (BIN.empty bin_e_0) =
  n_1
erlps__count__3__p26 [arg_2, arg_3, arg_4] =
  (EXC.function_clause unit)
erlps__count__3__p26 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__strip_continuations__2 :: ErlangFun
erlps__strip_continuations__2 [bin_0, (ErlangInt num_1)]
  | ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 0))) =
  bin_0
erlps__strip_continuations__2 [(ErlangBinary bin_c_0), n_7]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok x_3 bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5)
  , ((weakGeq x_3 (ErlangInt (DBI.fromInt 128))) &&
       (weakLeq x_3 (ErlangInt (DBI.fromInt 191)))) =
  let
    arg_9 = (BIF.erlang__op_minus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__strip_continuations__2 [rest_6, arg_9])
erlps__strip_continuations__2 [bin_0, _] = bin_0
erlps__strip_continuations__2 [arg_1, arg_2] =
  (EXC.function_clause unit)
erlps__strip_continuations__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__maybe_replace__2 :: ErlangFun
erlps__maybe_replace__2 [(ErlangInt num_0),
                         (ErlangTuple [(ErlangAtom "config"), _, _,
                                       (ErlangAtom "true"), _, _, _, _, _, _, _,
                                       _, _, _, _, _])]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 8))) =
  (ErlangBinary
     (BIN.concat
        [(BIN.from_int (ErlangInt (DBI.fromInt 92))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
         (BIN.from_int (ErlangInt (DBI.fromInt 98))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big)]))
erlps__maybe_replace__2 [(ErlangInt num_0),
                         (ErlangTuple [(ErlangAtom "config"), _, _,
                                       (ErlangAtom "true"), _, _, _, _, _, _, _,
                                       _, _, _, _, _])]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 9))) =
  (ErlangBinary
     (BIN.concat
        [(BIN.from_int (ErlangInt (DBI.fromInt 92))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
         (BIN.from_int (ErlangInt (DBI.fromInt 116))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big)]))
erlps__maybe_replace__2 [(ErlangInt num_0),
                         (ErlangTuple [(ErlangAtom "config"), _, _,
                                       (ErlangAtom "true"), _, _, _, _, _, _, _,
                                       _, _, _, _, _])]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 10))) =
  (ErlangBinary
     (BIN.concat
        [(BIN.from_int (ErlangInt (DBI.fromInt 92))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
         (BIN.from_int (ErlangInt (DBI.fromInt 110))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big)]))
erlps__maybe_replace__2 [(ErlangInt num_0),
                         (ErlangTuple [(ErlangAtom "config"), _, _,
                                       (ErlangAtom "true"), _, _, _, _, _, _, _,
                                       _, _, _, _, _])]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 12))) =
  (ErlangBinary
     (BIN.concat
        [(BIN.from_int (ErlangInt (DBI.fromInt 92))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
         (BIN.from_int (ErlangInt (DBI.fromInt 102))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big)]))
erlps__maybe_replace__2 [(ErlangInt num_0),
                         (ErlangTuple [(ErlangAtom "config"), _, _,
                                       (ErlangAtom "true"), _, _, _, _, _, _, _,
                                       _, _, _, _, _])]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 13))) =
  (ErlangBinary
     (BIN.concat
        [(BIN.from_int (ErlangInt (DBI.fromInt 92))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
         (BIN.from_int (ErlangInt (DBI.fromInt 114))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big)]))
erlps__maybe_replace__2 args =
  (erlps__maybe_replace__2__p1 args)

erlps__maybe_replace__2__p1 :: ErlangFun
erlps__maybe_replace__2__p1 [(ErlangInt num_0),
                             (ErlangTuple [(ErlangAtom "config"), _, _,
                                           (ErlangAtom "true"), _, _, _, _, _,
                                           _, _, _, _, _, _, _])]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 34))) =
  (ErlangBinary
     (BIN.concat
        [(BIN.from_int (ErlangInt (DBI.fromInt 92))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
         (BIN.from_int (ErlangInt (DBI.fromInt 34))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big)]))
erlps__maybe_replace__2__p1 [(ErlangInt num_0),
                             config_1@(ErlangTuple [(ErlangAtom "config"), _, _,
                                                    (ErlangAtom "true"), _, _,
                                                    _, _, _, _, _, _, _, _, _,
                                                    _])]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 47))) =
  let
    case_2 =
      case config_1 of
        (ErlangTuple arr_5) | (DM.Just field_4) <- ((arr_5 DA.!! 2)) ->
          field_4
        _ -> (EXC.badrecord (ErlangAtom "config"))
  in
    case case_2 of
      (ErlangAtom "true") ->
        (ErlangBinary
           (BIN.concat
              [(BIN.from_int (ErlangInt (DBI.fromInt 92))
                  (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
               (BIN.from_int (ErlangInt (DBI.fromInt 47))
                  (ErlangInt (DBI.fromInt 8)) 1 BIN.Big)]))
      (ErlangAtom "false") ->
        (ErlangBinary
           (BIN.from_int (ErlangInt (DBI.fromInt 47))
              (ErlangInt (DBI.fromInt 8)) 1 BIN.Big))
      something_else -> (EXC.case_clause something_else)
erlps__maybe_replace__2__p1 [(ErlangInt num_0),
                             (ErlangTuple [(ErlangAtom "config"), _, _,
                                           (ErlangAtom "true"), _, _, _, _, _,
                                           _, _, _, _, _, _, _])]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 92))) =
  (ErlangBinary
     (BIN.concat
        [(BIN.from_int (ErlangInt (DBI.fromInt 92))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
         (BIN.from_int (ErlangInt (DBI.fromInt 92))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big)]))
erlps__maybe_replace__2__p1 [x_0,
                             (ErlangTuple [(ErlangAtom "config"), _, _,
                                           (ErlangAtom "true"), _, _, _, _, _,
                                           _, _, _, _, _, _, _])]
  | (weakLt x_0 (ErlangInt (DBI.fromInt 32))) =
  (erlps__json_escape_sequence__1 [x_0])
erlps__maybe_replace__2__p1 [x_0,
                             config_1@(ErlangTuple [(ErlangAtom "config"), _, _,
                                                    (ErlangAtom "true"), _, _,
                                                    _, _, _, _, _, _, _, _, _,
                                                    _])]
  | ((ErlangAtom "true") ==
       (H.falsifyErrors
          (\ _ ->
             let
               lop_8 = (BIF.erlang__op_eq [x_0, (ErlangInt (DBI.fromInt 8232))])
             in
               case lop_8 of
                 (ErlangAtom "true") -> (ErlangAtom "true")
                 (ErlangAtom "false") ->
                   (BIF.erlang__op_eq [x_0, (ErlangInt (DBI.fromInt 8233))])
                 _ -> (EXC.badarg1 lop_8)))) =
  let
    case_2 =
      case config_1 of
        (ErlangTuple arr_5) | (DM.Just field_4) <- ((arr_5 DA.!! 13)) ->
          field_4
        _ -> (EXC.badrecord (ErlangAtom "config"))
  in
    case case_2 of
      (ErlangAtom "true") ->
        (ErlangBinary
           (BIN.from_int x_0 (ErlangInt (DBI.fromInt 8)) 1 BIN.Big))
      (ErlangAtom "false") -> (erlps__json_escape_sequence__1 [x_0])
      something_else -> (EXC.case_clause something_else)
erlps__maybe_replace__2__p1 args =
  (erlps__maybe_replace__2__p2 args)

erlps__maybe_replace__2__p2 :: ErlangFun
erlps__maybe_replace__2__p2 [atom_0,
                             (ErlangTuple [(ErlangAtom "config"), _, _, _, _, _,
                                           _, (ErlangAtom "true"), _, _, _, _,
                                           _, _, _, _])]
  | (H.isEAtom atom_0) =
  (BIF.erlang__error__1 [(ErlangAtom "badarg")])
erlps__maybe_replace__2__p2 [(ErlangAtom "surrogate"), _config_0]
  =
  (ErlangBinary
     (BIN.from_int (ErlangInt (DBI.fromInt 65533))
        (ErlangInt (DBI.fromInt 8)) 1 BIN.Big))
erlps__maybe_replace__2__p2 [(ErlangAtom "badutf"), _config_0] =
  (ErlangBinary
     (BIN.from_int (ErlangInt (DBI.fromInt 65533))
        (ErlangInt (DBI.fromInt 8)) 1 BIN.Big))
erlps__maybe_replace__2__p2 [x_0, _config_1] =
  (ErlangBinary
     (BIN.from_int x_0 (ErlangInt (DBI.fromInt 8)) 1 BIN.Big))
erlps__maybe_replace__2__p2 [arg_3, arg_4] =
  (EXC.function_clause unit)
erlps__maybe_replace__2__p2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__json_escape_sequence__1 :: ErlangFun
erlps__json_escape_sequence__1 [x_0]
  | (weakLt x_0 (ErlangInt (DBI.fromInt 65536))) =
  let
    match_expr_15 =
      (ErlangBinary
         (BIN.from_int x_0 (ErlangInt (DBI.fromInt 16)) 1 BIN.Big))
  in
    case match_expr_15 of
      (ErlangBinary bin_c_2) | size_3 <- ((DBI.fromInt 4))
                             , (BIN.Ok a_5 bin_4) <-
                                 ((BIN.chop_int bin_c_2 size_3 1 BIN.Big
                                     BIN.Unsigned))
                             , size_6 <- ((DBI.fromInt 4))
                             , (BIN.Ok b_8 bin_7) <-
                                 ((BIN.chop_int bin_4 size_6 1 BIN.Big
                                     BIN.Unsigned))
                             , size_9 <- ((DBI.fromInt 4))
                             , (BIN.Ok c_11 bin_10) <-
                                 ((BIN.chop_int bin_7 size_9 1 BIN.Big
                                     BIN.Unsigned))
                             , size_12 <- ((DBI.fromInt 4))
                             , (BIN.Ok d_14 bin_13) <-
                                 ((BIN.chop_int bin_10 size_12 1 BIN.Big
                                     BIN.Unsigned))
                             , (BIN.empty bin_13) ->
        let    bin_el_18 = (erlps__to_hex__1 [a_5])
        in let bin_el_20 = (erlps__to_hex__1 [b_8])
        in let bin_el_22 = (erlps__to_hex__1 [c_11])
        in let bin_el_24 = (erlps__to_hex__1 [d_14])
        in
          (ErlangBinary
             (BIN.concat
                [(BIN.from_int (ErlangInt (DBI.fromInt 92))
                    (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
                 (BIN.from_int (ErlangInt (DBI.fromInt 117))
                    (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
                 (BIN.from_int bin_el_18 (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
                 (BIN.from_int bin_el_20 (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
                 (BIN.from_int bin_el_22 (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
                 (BIN.from_int bin_el_24 (ErlangInt (DBI.fromInt 8)) 1
                    BIN.Big)]))
      _ -> (EXC.badmatch match_expr_15)
erlps__json_escape_sequence__1 [x_0] =
  let   
    adjusted_3 =
      (BIF.erlang__op_minus [x_0, (ErlangInt (DBI.fromInt 65536))])
  in let
    match_expr_12 =
      (ErlangBinary
         (BIN.from_int adjusted_3 (ErlangInt (DBI.fromInt 20)) 1 BIN.Big))
  in
    case match_expr_12 of
      (ErlangBinary bin_c_5) | size_6 <- ((DBI.fromInt 10))
                             , (BIN.Ok a_8 bin_7) <-
                                 ((BIN.chop_int bin_c_5 size_6 1 BIN.Big
                                     BIN.Unsigned))
                             , size_9 <- ((DBI.fromInt 10))
                             , (BIN.Ok b_11 bin_10) <-
                                 ((BIN.chop_int bin_7 size_9 1 BIN.Big
                                     BIN.Unsigned))
                             , (BIN.empty bin_10) ->
        let   
          arg_14 =
            (BIF.erlang__op_plus [a_8, (ErlangInt (DBI.fromInt 55296))])
        in let head_13 = (erlps__json_escape_sequence__1 [arg_14])
        in let
          arg_19 =
            (BIF.erlang__op_plus [b_11, (ErlangInt (DBI.fromInt 56320))])
        in let head_18 = (erlps__json_escape_sequence__1 [arg_19])
        in (ErlangCons head_13 (ErlangCons head_18 ErlangEmptyList))
      _ -> (EXC.badmatch match_expr_12)
erlps__json_escape_sequence__1 [arg_23] =
  (EXC.function_clause unit)
erlps__json_escape_sequence__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__to_hex__1 :: ErlangFun
erlps__to_hex__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 10))) =
  (ErlangInt (DBI.fromInt 97))
erlps__to_hex__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 11))) =
  (ErlangInt (DBI.fromInt 98))
erlps__to_hex__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 12))) =
  (ErlangInt (DBI.fromInt 99))
erlps__to_hex__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 13))) =
  (ErlangInt (DBI.fromInt 100))
erlps__to_hex__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 14))) =
  (ErlangInt (DBI.fromInt 101))
erlps__to_hex__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 15))) =
  (ErlangInt (DBI.fromInt 102))
erlps__to_hex__1 [x_0] =
  (BIF.erlang__op_plus [x_0, (ErlangInt (DBI.fromInt 48))])
erlps__to_hex__1 [arg_3] = (EXC.function_clause unit)
erlps__to_hex__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__init__1 :: ErlangFun
erlps__init__1 [(ErlangEmptyList)] = ErlangEmptyList
erlps__init__1 [arg_0] = (EXC.function_clause unit)
erlps__init__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__handle_event__2 :: ErlangFun
erlps__handle_event__2 [(ErlangAtom "end_json"), state_0] =
  (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [state_0])
erlps__handle_event__2 [event_0, state_1] =
  (BIF.erlang__op_append
     [(ErlangCons event_0 ErlangEmptyList), state_1])
erlps__handle_event__2 [arg_6, arg_7] =
  (EXC.function_clause unit)
erlps__handle_event__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)