module Aeso.Compiler(erlps__file__1, erlps__file__2,
                     erlps__from_string__2, erlps__check_call__4,
                     erlps__create_calldata__3, erlps__create_calldata__4,
                     erlps__version__0, erlps__numeric_version__0,
                     erlps__sophia_type_to_typerep__1,
                     erlps__to_sophia_value__4, erlps__to_sophia_value__5,
                     erlps__decode_calldata__3, erlps__decode_calldata__4,
                     erlps__parse__2, erlps__add_include_path__2,
                     erlps__validate_byte_code__3) where
{-
This file has been autogenerated
DO NOT EDIT - Your changes WILL be overwritten
Use this code at your own risk - the authors are just a mischievous raccoon and a haskell devote
Erlscripten v0.1.0
-}

import Prelude
import Data.Array as DA
import Data.List as DL
import Data.Maybe as DM
import Data.Map as Map
import Data.Tuple as Tup
import Data.BigInt as DBI
import Erlang.Builtins as BIF
import Erlang.Binary as BIN
import Erlang.Helpers as H
import Erlang.Exception as EXC
import Erlang.Type (ErlangFun, ErlangTerm(..), weakCmp, weakEq,
                    weakNEq, weakLt, weakLeq, weakGeq, weakGt)
import Effect (Effect)
import Effect.Unsafe (unsafePerformEffect)
import Effect.Exception (throw)
import Partial.Unsafe (unsafePartial)


erlps__version__0 :: ErlangFun
erlps__version__0 [] = ErlangTuple [ErlangAtom "ok", ErlangBinary $ BIN.fromFoldable [52,46,51,46,48]]
erlps__version__0 [] =
  let   
    arg_3 =
      (BIF.do_remote_fun_call "Application"
         "erlps__loaded_applications__0" [])
  in let
    case_0 =
      (BIF.lists__keyfind__3
         [(ErlangAtom "aesophia"), (ErlangInt (DBI.fromInt 1)), arg_3])
  in
    case case_0 of
      (ErlangAtom "false") ->
        let
          case_4 =
            (BIF.do_remote_fun_call "Application" "erlps__load__1"
               [(ErlangAtom "aesophia")])
        in
          case case_4 of
            (ErlangAtom "ok") ->
              let
                case_6 =
                  (BIF.do_remote_fun_call "Application" "erlps__get_key__2"
                     [(ErlangAtom "aesophia"), (ErlangAtom "vsn")])
              in
                case case_6 of
                  (ErlangTuple [(ErlangAtom "ok"), vsnstring_9]) ->
                    let
                      tup_el_11 = (BIF.erlang__list_to_binary__1 [vsnstring_9])
                    in (ErlangTuple [(ErlangAtom "ok"), tup_el_11])
                  (ErlangAtom "undefined") ->
                    (ErlangTuple
                       [(ErlangAtom "error"),
                        (ErlangAtom "failed_to_load_aesophia")])
                  something_else -> (EXC.case_clause something_else)
            err_15@(ErlangTuple [(ErlangAtom "error"), _]) -> err_15
            something_else -> (EXC.case_clause something_else)
      (ErlangTuple [_app_16, _des_17, vsnstring_18]) ->
        let tup_el_20 = (BIF.erlang__list_to_binary__1 [vsnstring_18])
        in (ErlangTuple [(ErlangAtom "ok"), tup_el_20])
      something_else -> (EXC.case_clause something_else)
erlps__version__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__numeric_version__0 :: ErlangFun
erlps__numeric_version__0 [] =
  let case_0 = (erlps__version__0 [])
  in
    case case_0 of
      (ErlangTuple [(ErlangAtom "ok"), bin_1]) ->
        let   
          arg_3 =
            (ErlangBinary
               (BIN.from_int (ErlangInt (DBI.fromInt 45))
                  (ErlangInt (DBI.fromInt 8)) 1 BIN.Big))
        in let match_expr_6 = (BIF.binary__split__2 [bin_1, arg_3])
        in
          case match_expr_6 of
            (ErlangCons nosuf_5 _) ->
              let   
                arg_8 =
                  (ErlangBinary
                     (BIN.from_int (ErlangInt (DBI.fromInt 46))
                        (ErlangInt (DBI.fromInt 8)) 1 BIN.Big))
              in let
                numbers_13 =
                  (BIF.binary__split__3
                     [nosuf_5, arg_8,
                      (ErlangCons (ErlangAtom "global") ErlangEmptyList)])
              in let
                tup_el_15 =
                  (H.flmap
                     (\ lc_18 ->
                        let
                          lc_ret_19 = (BIF.erlang__binary_to_integer__1 [lc_18])
                        in (ErlangCons lc_ret_19 ErlangEmptyList))
                     numbers_13)
              in (ErlangTuple [(ErlangAtom "ok"), tup_el_15])
            _ -> (EXC.badmatch match_expr_6)
      err_21@(ErlangTuple [(ErlangAtom "error"), _]) -> err_21
      something_else -> (EXC.case_clause something_else)
erlps__numeric_version__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__file__1 :: ErlangFun
erlps__file__1 [filename_0] =
  (erlps__file__2 [filename_0, ErlangEmptyList])
erlps__file__1 [arg_3] = (EXC.function_clause unit)
erlps__file__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__file__2 :: ErlangFun
erlps__file__2 [file_0, options0_1] =
  let   
    options_4 = (erlps__add_include_path__2 [file_0, options0_1])
  in let case_5 = (erlps__read_contract__1 [file_0])
  in
    case case_5 of
      (ErlangTuple [(ErlangAtom "ok"), bin_7]) ->
        let head_10 = (ErlangTuple [(ErlangAtom "src_file"), file_0])
        in
          (erlps__from_string__2 [bin_7, (ErlangCons head_10 options_4)])
      (ErlangTuple [(ErlangAtom "error"), error_14]) ->
        let    head_18 = (H.make_string ": ")
        in let
          head_20 =
            (BIF.do_remote_fun_call "File" "erlps__format_error__1"
               [error_14])
        in let
          msg_23 =
            (BIF.do_remote_fun_call "Lists" "erlps__flatten__1"
               [(ErlangCons file_0
                   (ErlangCons head_18 (ErlangCons head_20 ErlangEmptyList)))])
        in let
          head_26 =
            (BIF.do_remote_fun_call "Aeso.Errors" "erlps__new__2"
               [(ErlangAtom "file_error"), msg_23])
        in
          (ErlangTuple
             [(ErlangAtom "error"), (ErlangCons head_26 ErlangEmptyList)])
      something_else -> (EXC.case_clause something_else)
erlps__file__2 [arg_30, arg_31] = (EXC.function_clause unit)
erlps__file__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__add_include_path__2 :: ErlangFun
erlps__add_include_path__2 [file_0, options_1] =
  let
    case_2 =
      (BIF.lists__keymember__3
         [(ErlangAtom "include"), (ErlangInt (DBI.fromInt 1)), options_1])
  in
    case case_2 of
      (ErlangAtom "true") -> options_1
      (ErlangAtom "false") ->
        let   
          dir_7 =
            (BIF.do_remote_fun_call "Filename" "erlps__dirname__1" [file_0])
        in let
          match_expr_9 =
            (BIF.do_remote_fun_call "File" "erlps__get_cwd__0" [])
        in
          case match_expr_9 of
            (ErlangTuple [(ErlangAtom "ok"), cwd_8]) ->
              let   
                tup_el_12 =
                  (ErlangTuple
                     [(ErlangAtom "file_system"),
                      (ErlangCons cwd_8 (ErlangCons dir_7 ErlangEmptyList))])
              in let
                head_10 = (ErlangTuple [(ErlangAtom "include"), tup_el_12])
              in (ErlangCons head_10 options_1)
            _ -> (EXC.badmatch match_expr_9)
      something_else -> (EXC.case_clause something_else)
erlps__add_include_path__2 [arg_20, arg_21] =
  (EXC.function_clause unit)
erlps__add_include_path__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__from_string__2 :: ErlangFun
erlps__from_string__2 [contract_0, options_1] =
  let
    arg_2 =
      (BIF.do_remote_fun_call "Proplists" "erlps__get_value__3"
         [(ErlangAtom "backend"), options_1, (ErlangAtom "aevm")])
  in (erlps__from_string__3 [arg_2, contract_0, options_1])
erlps__from_string__2 [arg_8, arg_9] = (EXC.function_clause unit)
erlps__from_string__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__from_string__3 :: ErlangFun
erlps__from_string__3 [backend_0, contractbin_1, options_2]
  | ((ErlangAtom "true") ==
       (H.falsifyErrors
          (\ _ -> (BIF.erlang__is_binary__1 [contractbin_1])))) =
  let arg_4 = (BIF.erlang__binary_to_list__1 [contractbin_1])
  in (erlps__from_string__3 [backend_0, arg_4, options_2])
erlps__from_string__3 [backend_0, contractstring_1, options_2] =
  (EXC.tryCatch
     (\ _ ->
        (erlps__from_string1__3
           [backend_0, contractstring_1, options_2]))
     (\ ex_7 ->
        case ex_7 of
          (ErlangTuple [(ErlangAtom "throw"),
                        (ErlangTuple [(ErlangAtom "error"), errors_9]), _]) ->
            (ErlangTuple [(ErlangAtom "error"), errors_9])
          ex_8 -> (EXC.raise ex_8)))
erlps__from_string__3 [arg_12, arg_13, arg_14] =
  (EXC.function_clause unit)
erlps__from_string__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__from_string1__3 :: ErlangFun
erlps__from_string1__3 [(ErlangAtom "aevm"), contractstring_0,
                        options_1]
  =
  let
    match_expr_7 =
      (erlps__string_to_code__2 [contractstring_0, options_1])
  in
    case match_expr_7 of
      (ErlangMap map_4) | (DM.Just foldedtypedast_6) <-
                            ((Map.lookup (ErlangAtom "folded_typed_ast") map_4))
                        , (DM.Just icode_5) <-
                            ((Map.lookup (ErlangAtom "icode") map_4)) ->
        let    typeinfo_9 = (erlps__extract_type_info__1 [icode_5])
        in let assembler_12 = (erlps__assemble__2 [icode_5, options_1])
        in let
          _ =
            (erlps__pp_assembler__3
               [(ErlangAtom "aevm"), assembler_12, options_1])
        in let
          bytecodelist_18 =
            (erlps__to_bytecode__2 [assembler_12, options_1])
        in let
          bytecode_24 =
            (BIN.concat_erl
               (H.flmap
                  (\ lc_21 ->
                     let
                       lc_ret_22 =
                         (ErlangBinary
                            (BIN.from_int lc_21 (ErlangInt (DBI.fromInt 8)) 1
                               BIN.Big))
                     in (ErlangCons lc_ret_22 ErlangEmptyList))
                  bytecodelist_18))
        in let _ = (erlps__pp_bytecode__2 [bytecode_24, options_1])
        in let match_expr_28 = (erlps__version__0 [])
        in
          case match_expr_28 of
            (ErlangTuple [(ErlangAtom "ok"), version_27]) ->
              let   
                val_39 =
                  (BIF.do_remote_fun_call "Aeb.Aevm.Abi" "erlps__abi_version__0"
                     [])
              in let
                val_40 = (BIF.maps__get__2 [(ErlangAtom "payable"), icode_5])
              in let
                res_43 =
                  (ErlangMap
                     (Map.fromFoldable
                        [(Tup.Tuple (ErlangAtom "byte_code") bytecode_24),
                         (Tup.Tuple (ErlangAtom "compiler_version") version_27),
                         (Tup.Tuple (ErlangAtom "contract_source")
                            contractstring_0),
                         (Tup.Tuple (ErlangAtom "type_info") typeinfo_9),
                         (Tup.Tuple (ErlangAtom "abi_version") val_39),
                         (Tup.Tuple (ErlangAtom "payable") val_40)]))
              in let
                tup_el_45 =
                  (erlps__maybe_generate_aci__3
                     [res_43, foldedtypedast_6, options_1])
              in (ErlangTuple [(ErlangAtom "ok"), tup_el_45])
            _ -> (EXC.badmatch match_expr_28)
      _ -> (EXC.badmatch match_expr_7)
erlps__from_string1__3 [(ErlangAtom "fate"), contractstring_0,
                        options_1]
  =
  let
    match_expr_7 =
      (erlps__string_to_code__2 [contractstring_0, options_1])
  in
    case match_expr_7 of
      (ErlangMap map_4) | (DM.Just foldedtypedast_6) <-
                            ((Map.lookup (ErlangAtom "folded_typed_ast") map_4))
                        , (DM.Just fcode_5) <-
                            ((Map.lookup (ErlangAtom "fcode") map_4)) ->
        let   
          fatecode_10 =
            (BIF.do_remote_fun_call "Aeso.Fcode.To.Fate" "erlps__compile__2"
               [fcode_5, options_1])
        in let
          _ =
            (erlps__pp_assembler__3
               [(ErlangAtom "fate"), fatecode_10, options_1])
        in let
          bytecode_16 =
            (BIF.do_remote_fun_call "Aeb.Fate.Code" "erlps__serialize__2"
               [fatecode_10, ErlangEmptyList])
        in let match_expr_18 = (erlps__version__0 [])
        in
          case match_expr_18 of
            (ErlangTuple [(ErlangAtom "ok"), version_17]) ->
              let   
                val_31 =
                  (BIF.do_remote_fun_call "Aeb.Fate.Abi" "erlps__abi_version__0"
                     [])
              in let
                val_32 = (BIF.maps__get__2 [(ErlangAtom "payable"), fcode_5])
              in let
                res_35 =
                  (ErlangMap
                     (Map.fromFoldable
                        [(Tup.Tuple (ErlangAtom "byte_code") bytecode_16),
                         (Tup.Tuple (ErlangAtom "compiler_version") version_17),
                         (Tup.Tuple (ErlangAtom "contract_source")
                            contractstring_0),
                         (Tup.Tuple (ErlangAtom "type_info") ErlangEmptyList),
                         (Tup.Tuple (ErlangAtom "fate_code") fatecode_10),
                         (Tup.Tuple (ErlangAtom "abi_version") val_31),
                         (Tup.Tuple (ErlangAtom "payable") val_32)]))
              in let
                tup_el_37 =
                  (erlps__maybe_generate_aci__3
                     [res_35, foldedtypedast_6, options_1])
              in (ErlangTuple [(ErlangAtom "ok"), tup_el_37])
            _ -> (EXC.badmatch match_expr_18)
      _ -> (EXC.badmatch match_expr_7)
erlps__from_string1__3 [arg_41, arg_42, arg_43] =
  (EXC.function_clause unit)
erlps__from_string1__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__maybe_generate_aci__3 :: ErlangFun
erlps__maybe_generate_aci__3 [result_0, foldedtypedast_1,
                              options_2]
  =
  let
    case_3 =
      (BIF.do_remote_fun_call "Proplists" "erlps__get_value__2"
         [(ErlangAtom "aci"), options_2])
  in
    case case_3 of
      (ErlangAtom "undefined") -> result_0
      type_6 ->
        let
          match_expr_10 =
            (BIF.do_remote_fun_call "Aeso.Aci" "erlps__from_typed_ast__2"
               [type_6, foldedtypedast_1])
        in
          case match_expr_10 of
            (ErlangTuple [(ErlangAtom "ok"), aci_9]) ->
              (BIF.maps__put__3 [(ErlangAtom "aci"), aci_9, result_0])
            _ -> (EXC.badmatch match_expr_10)
erlps__maybe_generate_aci__3 [arg_14, arg_15, arg_16] =
  (EXC.function_clause unit)
erlps__maybe_generate_aci__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__string_to_code__2 :: ErlangFun
erlps__string_to_code__2 [contractstring_0, options_1] =
  let    ast_4 = (erlps__parse__2 [contractstring_0, options_1])
  in let _ = (erlps__pp_sophia_code__2 [ast_4, options_1])
  in let _ = (erlps__pp_ast__2 [ast_4, options_1])
  in let
    match_expr_16 =
      (BIF.do_remote_fun_call "Aeso.Ast.Infer.Types" "erlps__infer__2"
         [ast_4, (ErlangCons (ErlangAtom "return_env") options_1)])
  in
    case match_expr_16 of
      (ErlangTuple [typeenv_13, foldedtypedast_14,
                    unfoldedtypedast_15]) ->
        let   
          _ = (erlps__pp_typed_ast__2 [unfoldedtypedast_15, options_1])
        in let
          case_19 =
            (BIF.do_remote_fun_call "Proplists" "erlps__get_value__3"
               [(ErlangAtom "backend"), options_1, (ErlangAtom "aevm")])
        in
          case case_19 of
            (ErlangAtom "aevm") ->
              let   
                icode_25 =
                  (erlps__ast_to_icode__2 [unfoldedtypedast_15, options_1])
              in let _ = (erlps__pp_icode__2 [icode_25, options_1])
              in
                (ErlangMap
                   (Map.fromFoldable
                      [(Tup.Tuple (ErlangAtom "icode") icode_25),
                       (Tup.Tuple (ErlangAtom "unfolded_typed_ast")
                          unfoldedtypedast_15),
                       (Tup.Tuple (ErlangAtom "folded_typed_ast")
                          foldedtypedast_14),
                       (Tup.Tuple (ErlangAtom "type_env") typeenv_13),
                       (Tup.Tuple (ErlangAtom "ast") ast_4)]))
            (ErlangAtom "fate") ->
              let
                fcode_40 =
                  (BIF.do_remote_fun_call "Aeso.Ast.To.Fcode"
                     "erlps__ast_to_fcode__2" [unfoldedtypedast_15, options_1])
              in
                (ErlangMap
                   (Map.fromFoldable
                      [(Tup.Tuple (ErlangAtom "fcode") fcode_40),
                       (Tup.Tuple (ErlangAtom "unfolded_typed_ast")
                          unfoldedtypedast_15),
                       (Tup.Tuple (ErlangAtom "folded_typed_ast")
                          foldedtypedast_14),
                       (Tup.Tuple (ErlangAtom "type_env") typeenv_13),
                       (Tup.Tuple (ErlangAtom "ast") ast_4)]))
            something_else -> (EXC.case_clause something_else)
      _ -> (EXC.badmatch match_expr_16)
erlps__string_to_code__2 [arg_51, arg_52] =
  (EXC.function_clause unit)
erlps__string_to_code__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__check_call__4 :: ErlangFun
erlps__check_call__4 [source_0,
                      funname_5@(ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangEmptyList))))),
                      args_6, options_7]
  | ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 105)))
  , ((ErlangInt num_2) == (ErlangInt (DBI.fromInt 110)))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 105)))
  , ((ErlangInt num_4) == (ErlangInt (DBI.fromInt 116))) =
  let
    case_8 =
      (erlps__check_call1__4 [source_0, funname_5, args_6, options_7])
  in
    case case_8 of
      err_13@(ErlangTuple [(ErlangAtom "error"), _]) | (weakEq args_6
                                                          ErlangEmptyList) ->
        let   
          arg_15 = (erlps__insert_init_function__2 [source_0, options_7])
        in let
          case_14 =
            (erlps__check_call1__4 [arg_15, funname_5, args_6, options_7])
        in
          case case_14 of
            (ErlangTuple [(ErlangAtom "error"), _]) -> err_13
            res_21 -> res_21
      res_22 -> res_22
erlps__check_call__4 [source_0, funname_1, args_2, options_3] =
  (erlps__check_call1__4 [source_0, funname_1, args_2, options_3])
erlps__check_call__4 [arg_8, arg_9, arg_10, arg_11] =
  (EXC.function_clause unit)
erlps__check_call__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__check_call1__4 :: ErlangFun
erlps__check_call1__4 [contractstring0_0, funname_1, args_2,
                       options_3]
  =
  (EXC.tryCatch
     (\ _ ->
        let
          case_4 =
            (BIF.do_remote_fun_call "Proplists" "erlps__get_value__3"
               [(ErlangAtom "backend"), options_3, (ErlangAtom "aevm")])
        in
          case case_4 of
            (ErlangAtom "aevm") ->
              let
                match_expr_12 =
                  (erlps__string_to_code__2 [contractstring0_0, options_3])
              in
                case match_expr_12 of
                  (ErlangMap map_10) | (DM.Just ast_11) <-
                                         ((Map.lookup (ErlangAtom "ast")
                                             map_10)) ->
                    let    arg_15 = (H.make_string "__call")
                    in let
                      contractstring_18 =
                        (erlps__insert_call_function__5
                           [ast_11, contractstring0_0, arg_15, funname_1,
                            args_2])
                    in let
                      match_expr_24 =
                        (erlps__string_to_code__2
                           [contractstring_18, options_3])
                    in
                      case match_expr_24 of
                        (ErlangMap map_21) | (DM.Just icode_23) <-
                                               ((Map.lookup (ErlangAtom "icode")
                                                   map_21))
                                           , (DM.Just typedast_22) <-
                                               ((Map.lookup
                                                   (ErlangAtom
                                                      "unfolded_typed_ast")
                                                   map_21)) ->
                          let
                            match_expr_29 =
                              (erlps__get_call_type__1 [typedast_22])
                          in
                            case match_expr_29 of
                              (ErlangTuple [(ErlangAtom "ok"),
                                            (ErlangTuple [funname_26,
                                                          (ErlangTuple [(ErlangAtom "fun_t"),
                                                                        _, _,
                                                                        argtypes_27,
                                                                        rettype_28])])]) | (funname_26 ==
                                                                                              funname_1) ->
                                let   
                                  argvmtypes_36 =
                                    (H.flmap
                                       (\ lc_32 ->
                                          let
                                            lc_ret_33 =
                                              (BIF.do_remote_fun_call
                                                 "Aeso.Ast.To.Icode"
                                                 "erlps__ast_typerep__2"
                                                 [lc_32, icode_23])
                                          in
                                            (ErlangCons lc_ret_33
                                               ErlangEmptyList))
                                       argtypes_27)
                                in let
                                  retvmtype_41 =
                                    case rettype_28 of
                                      (ErlangTuple [(ErlangAtom "id"), _,
                                                    (ErlangCons (ErlangInt num_38) (ErlangEmptyList))]) | ((ErlangInt
                                                                                                              num_38) ==
                                                                                                             (ErlangInt
                                                                                                                (DBI.fromInt
                                                                                                                   95))) ->
                                        (ErlangAtom "any")
                                      _ ->
                                        (BIF.do_remote_fun_call
                                           "Aeso.Ast.To.Icode"
                                           "erlps__ast_typerep__2"
                                           [rettype_28, icode_23])
                                in
                                  case icode_23 of
                                    (ErlangMap map_42) | (DM.Just funs_43) <-
                                                           ((Map.lookup
                                                               (ErlangAtom
                                                                  "functions")
                                                               map_42)) ->
                                      let   
                                        argicode_46 =
                                          (erlps__get_arg_icode__1 [funs_43])
                                      in let
                                        lc_src_47 =
                                          (BIF.do_remote_fun_call "Lists"
                                             "erlps__zip__2"
                                             [argvmtypes_36, argicode_46])
                                      in let
                                        argterms_56 =
                                          (H.flmap
                                             (\ lc_52 ->
                                                case lc_52 of
                                                  (ErlangTuple [t_50,
                                                                arg_51]) ->
                                                    let
                                                      lc_ret_53 =
                                                        (erlps__icode_to_term__2
                                                           [t_50, arg_51])
                                                    in
                                                      (ErlangCons lc_ret_53
                                                         ErlangEmptyList)
                                                  _ -> ErlangEmptyList)
                                             lc_src_47)
                                      in let
                                        retvmtype1_68 =
                                          case funname_1 of
                                            (ErlangCons (ErlangInt num_58) (ErlangCons (ErlangInt num_59) (ErlangCons (ErlangInt num_60) (ErlangCons (ErlangInt num_61) (ErlangEmptyList))))) | ((ErlangInt
                                                                                                                                                                                                    num_58) ==
                                                                                                                                                                                                   (ErlangInt
                                                                                                                                                                                                      (DBI.fromInt
                                                                                                                                                                                                         105)))
                                                                                                                                                                                              , ((ErlangInt
                                                                                                                                                                                                    num_59) ==
                                                                                                                                                                                                   (ErlangInt
                                                                                                                                                                                                      (DBI.fromInt
                                                                                                                                                                                                         110)))
                                                                                                                                                                                              , ((ErlangInt
                                                                                                                                                                                                    num_60) ==
                                                                                                                                                                                                   (ErlangInt
                                                                                                                                                                                                      (DBI.fromInt
                                                                                                                                                                                                         105)))
                                                                                                                                                                                              , ((ErlangInt
                                                                                                                                                                                                    num_61) ==
                                                                                                                                                                                                   (ErlangInt
                                                                                                                                                                                                      (DBI.fromInt
                                                                                                                                                                                                         116))) ->
                                              (ErlangTuple
                                                 [(ErlangAtom "tuple"),
                                                  (ErlangCons
                                                     (ErlangAtom "typerep")
                                                     (ErlangCons retvmtype_41
                                                        ErlangEmptyList))])
                                            _ -> retvmtype_41
                                      in let
                                        tup_el_71 =
                                          (ErlangTuple
                                             [argvmtypes_36, retvmtype1_68])
                                      in
                                        (ErlangTuple
                                           [(ErlangAtom "ok"), funname_1,
                                            tup_el_71, argterms_56])
                                    _ -> (EXC.badmatch icode_23)
                              _ -> (EXC.badmatch match_expr_29)
                        _ -> (EXC.badmatch match_expr_24)
                  _ -> (EXC.badmatch match_expr_12)
            (ErlangAtom "fate") ->
              let
                match_expr_80 =
                  (erlps__string_to_code__2 [contractstring0_0, options_3])
              in
                case match_expr_80 of
                  (ErlangMap map_77) | (DM.Just ast_79) <-
                                         ((Map.lookup (ErlangAtom "ast")
                                             map_77))
                                     , (DM.Just orgfcode_78) <-
                                         ((Map.lookup (ErlangAtom "fcode")
                                             map_77)) ->
                    let   
                      fatecode_83 =
                        (BIF.do_remote_fun_call "Aeso.Fcode.To.Fate"
                           "erlps__compile__2" [orgfcode_78, ErlangEmptyList])
                    in let
                      arg_84 =
                        (BIF.do_remote_fun_call "Aeb.Fate.Code"
                           "erlps__symbols__1" [fatecode_83])
                    in let symbolhashes_86 = (BIF.maps__keys__1 [arg_84])
                    in let arg_87 = (H.make_string "__call")
                    in let
                      lop_90 =
                        (BIF.do_remote_fun_call "Lists" "erlps__seq__2"
                           [(ErlangInt (DBI.fromInt 49)),
                            (ErlangInt (DBI.fromInt 57))])
                    in let
                      lop_94 =
                        (BIF.do_remote_fun_call "Lists" "erlps__seq__2"
                           [(ErlangInt (DBI.fromInt 65)),
                            (ErlangInt (DBI.fromInt 90))])
                    in let
                      rop_97 =
                        (BIF.do_remote_fun_call "Lists" "erlps__seq__2"
                           [(ErlangInt (DBI.fromInt 97)),
                            (ErlangInt (DBI.fromInt 122))])
                    in let rop_93 = (BIF.erlang__op_append [lop_94, rop_97])
                    in let arg_89 = (BIF.erlang__op_append [lop_90, rop_93])
                    in let
                      callname_100 =
                        (erlps__first_none_match__3
                           [arg_87, symbolhashes_86, arg_89])
                    in let
                      contractstring_106 =
                        (erlps__insert_call_function__5
                           [ast_79, contractstring0_0, callname_100, funname_1,
                            args_2])
                    in let
                      match_expr_111 =
                        (erlps__string_to_code__2
                           [contractstring_106, options_3])
                    in
                      case match_expr_111 of
                        (ErlangMap map_109) | (DM.Just fcode_110) <-
                                                ((Map.lookup
                                                    (ErlangAtom "fcode")
                                                    map_109)) ->
                          let
                            callargs_115 =
                              (erlps__arguments_of_body__3
                                 [callname_100, funname_1, fcode_110])
                          in
                            (ErlangTuple
                               [(ErlangAtom "ok"), funname_1, callargs_115])
                        _ -> (EXC.badmatch match_expr_111)
                  _ -> (EXC.badmatch match_expr_80)
            something_else -> (EXC.case_clause something_else))
     (\ ex_120 ->
        case ex_120 of
          (ErlangTuple [(ErlangAtom "throw"),
                        (ErlangTuple [(ErlangAtom "error"), errors_122]), _]) ->
            (ErlangTuple [(ErlangAtom "error"), errors_122])
          ex_121 -> (EXC.raise ex_121)))
erlps__check_call1__4 [arg_125, arg_126, arg_127, arg_128] =
  (EXC.function_clause unit)
erlps__check_call1__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__arguments_of_body__3 :: ErlangFun
erlps__arguments_of_body__3 [callname_0, _funname_1, fcode_2] =
  let    tup_el_5 = (BIF.erlang__list_to_binary__1 [callname_0])
  in let
    arg_3 = (ErlangTuple [(ErlangAtom "entrypoint"), tup_el_5])
  in let
    arg_7 = (BIF.maps__get__2 [(ErlangAtom "functions"), fcode_2])
  in let match_expr_12 = (BIF.maps__get__2 [arg_3, arg_7])
  in
    case match_expr_12 of
      (ErlangMap map_10) | (DM.Just body_11) <-
                             ((Map.lookup (ErlangAtom "body") map_10)) ->
        case body_11 of
          (ErlangTuple [(ErlangAtom "def"), _fname_13, args_14]) ->
            (H.flmap
               (\ lc_18 ->
                  let
                    lc_ret_19 =
                      (BIF.do_remote_fun_call "Aeso.Fcode.To.Fate"
                         "erlps__term_to_fate__1" [lc_18])
                  in (ErlangCons lc_ret_19 ErlangEmptyList))
               args_14)
          _ -> (EXC.badmatch body_11)
      _ -> (EXC.badmatch match_expr_12)
erlps__arguments_of_body__3 [arg_21, arg_22, arg_23] =
  (EXC.function_clause unit)
erlps__arguments_of_body__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__first_none_match__3 :: ErlangFun
erlps__first_none_match__3 [_callname_0, _hashes_1,
                            (ErlangEmptyList)]
  =
  (BIF.erlang__error__1
     [(ErlangAtom "unable_to_find_unique_call_name")])
erlps__first_none_match__3 [callname_0, hashes_1,
                            (ErlangCons char_2 chars_3)]
  =
  let    arg_7 = (BIF.erlang__list_to_binary__1 [callname_0])
  in let
    arg_6 =
      (BIF.do_remote_fun_call "Aeb.Fate.Code"
         "erlps__symbol_identifier__1" [arg_7])
  in let op_arg_5 = (BIF.lists__member__2 [arg_6, hashes_1])
  in let case_4 = (BIF.erlang__not__1 [op_arg_5])
  in
    case case_4 of
      (ErlangAtom "true") -> callname_0
      (ErlangAtom "false") ->
        let    lop_11 = (H.make_string "__call")
        in let
          arg_10 =
            (BIF.erlang__op_append
               [lop_11, (ErlangCons char_2 ErlangEmptyList)])
        in (erlps__first_none_match__3 [arg_10, hashes_1, chars_3])
      something_else -> (EXC.case_clause something_else)
erlps__first_none_match__3 [arg_17, arg_18, arg_19] =
  (EXC.function_clause unit)
erlps__first_none_match__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__insert_call_function__5 :: ErlangFun
erlps__insert_call_function__5 [ast_0, code_1, call_2, funname_3,
                                args_4]
  =
  let    ind_6 = (erlps__last_contract_indent__1 [ast_0])
  in let head_10 = (H.make_string "\n\n")
  in let arg_14 = (H.make_string " ")
  in let
    head_12 =
      (BIF.do_remote_fun_call "Lists" "erlps__duplicate__2"
         [ind_6, arg_14])
  in let head_16 = (H.make_string "stateful entrypoint ")
  in let head_20 = (H.make_string "() = ")
  in let head_24 = (H.make_string "(")
  in let arg_28 = (H.make_string ",")
  in let
    head_26 =
      (BIF.do_remote_fun_call "String" "erlps__join__2"
         [args_4, arg_28])
  in let head_30 = (H.make_string ")\n")
  in
    (BIF.do_remote_fun_call "Lists" "erlps__flatten__1"
       [(ErlangCons code_1
           (ErlangCons head_10
              (ErlangCons head_12
                 (ErlangCons head_16
                    (ErlangCons call_2
                       (ErlangCons head_20
                          (ErlangCons funname_3
                             (ErlangCons head_24
                                (ErlangCons head_26
                                   (ErlangCons head_30
                                      ErlangEmptyList))))))))))])
erlps__insert_call_function__5 [arg_32, arg_33, arg_34, arg_35,
                                arg_36]
  =
  (EXC.function_clause unit)
erlps__insert_call_function__5 args =
  (EXC.badarity
     (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__insert_init_function__2 :: ErlangFun
erlps__insert_init_function__2 [code_0, options_1] =
  let    ast_4 = (erlps__parse__2 [code_0, options_1])
  in let ind_6 = (erlps__last_contract_indent__1 [ast_4])
  in let head_10 = (H.make_string "\n\n")
  in let arg_14 = (H.make_string " ")
  in let
    head_12 =
      (BIF.do_remote_fun_call "Lists" "erlps__duplicate__2"
         [ind_6, arg_14])
  in let head_16 = (H.make_string "entrypoint init() = ()\n")
  in
    (BIF.do_remote_fun_call "Lists" "erlps__flatten__1"
       [(ErlangCons code_0
           (ErlangCons head_10
              (ErlangCons head_12 (ErlangCons head_16 ErlangEmptyList))))])
erlps__insert_init_function__2 [arg_18, arg_19] =
  (EXC.function_clause unit)
erlps__insert_init_function__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__last_contract_indent__1 :: ErlangFun
erlps__last_contract_indent__1 [decls_0] =
  let
    case_1 =
      (BIF.do_remote_fun_call "Lists" "erlps__last__1" [decls_0])
  in
    case case_1 of
      (ErlangTuple [_, _, _, (ErlangCons decl_3 _)]) ->
        let
          lop_4 =
            (BIF.do_remote_fun_call "Aeso.Syntax" "erlps__get_ann__3"
               [(ErlangAtom "col"), decl_3, (ErlangInt (DBI.fromInt 1))])
        in (BIF.erlang__op_minus [lop_4, (ErlangInt (DBI.fromInt 1))])
      _ -> (ErlangInt (DBI.fromInt 0))
erlps__last_contract_indent__1 [arg_9] =
  (EXC.function_clause unit)
erlps__last_contract_indent__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__to_sophia_value__4 :: ErlangFun
erlps__to_sophia_value__4 [contractstring_0, fun_1, restype_2,
                           data_3]
  =
  let
    head_9 =
      (ErlangTuple [(ErlangAtom "backend"), (ErlangAtom "aevm")])
  in
    (erlps__to_sophia_value__5
       [contractstring_0, fun_1, restype_2, data_3,
        (ErlangCons head_9 ErlangEmptyList)])
erlps__to_sophia_value__4 [arg_13, arg_14, arg_15, arg_16] =
  (EXC.function_clause unit)
erlps__to_sophia_value__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__to_sophia_value__5 :: ErlangFun
erlps__to_sophia_value__5 [_, _, (ErlangAtom "error"), err_0,
                           _options_1]
  =
  let    tup_el_9 = (H.make_string "error")
  in let
    tup_el_6 =
      (ErlangTuple [(ErlangAtom "id"), ErlangEmptyList, tup_el_9])
  in let
    head_11 =
      (ErlangTuple [(ErlangAtom "string"), ErlangEmptyList, err_0])
  in let
    tup_el_3 =
      (ErlangTuple
         [(ErlangAtom "app"), ErlangEmptyList, tup_el_6,
          (ErlangCons head_11 ErlangEmptyList)])
  in (ErlangTuple [(ErlangAtom "ok"), tup_el_3])
erlps__to_sophia_value__5 [_, _, (ErlangAtom "revert"), data_0,
                           options_1]
  =
  let
    case_2 =
      (BIF.do_remote_fun_call "Proplists" "erlps__get_value__3"
         [(ErlangAtom "backend"), options_1, (ErlangAtom "aevm")])
  in
    case case_2 of
      (ErlangAtom "aevm") ->
        let
          case_6 =
            (BIF.do_remote_fun_call "Aeb.Heap" "erlps__from_binary__2"
               [(ErlangAtom "string"), data_0])
        in
          case case_6 of
            (ErlangTuple [(ErlangAtom "ok"), err_9]) ->
              let    tup_el_17 = (H.make_string "abort")
              in let
                tup_el_14 =
                  (ErlangTuple [(ErlangAtom "id"), ErlangEmptyList, tup_el_17])
              in let
                head_19 =
                  (ErlangTuple [(ErlangAtom "string"), ErlangEmptyList, err_9])
              in let
                tup_el_11 =
                  (ErlangTuple
                     [(ErlangAtom "app"), ErlangEmptyList, tup_el_14,
                      (ErlangCons head_19 ErlangEmptyList)])
              in (ErlangTuple [(ErlangAtom "ok"), tup_el_11])
            (ErlangTuple [(ErlangAtom "error"), _]) ->
              let   
                msg_24 =
                  (H.make_string "Could not interpret the revert message\n")
              in let
                head_27 =
                  (BIF.do_remote_fun_call "Aeso.Errors" "erlps__new__2"
                     [(ErlangAtom "data_error"), msg_24])
              in
                (ErlangTuple
                   [(ErlangAtom "error"), (ErlangCons head_27 ErlangEmptyList)])
            something_else -> (EXC.case_clause something_else)
      (ErlangAtom "fate") ->
        (EXC.tryOfCatch
           (\ _ ->
              (BIF.do_remote_fun_call "Aeb.Fate.Encoding"
                 "erlps__deserialize__1" [data_0]))
           (\ of_32 ->
              let    tup_el_43 = (H.make_string "abort")
              in let
                tup_el_40 =
                  (ErlangTuple [(ErlangAtom "id"), ErlangEmptyList, tup_el_43])
              in let
                head_45 =
                  (ErlangTuple [(ErlangAtom "string"), ErlangEmptyList, of_32])
              in let
                tup_el_37 =
                  (ErlangTuple
                     [(ErlangAtom "app"), ErlangEmptyList, tup_el_40,
                      (ErlangCons head_45 ErlangEmptyList)])
              in (ErlangTuple [(ErlangAtom "ok"), tup_el_37]))
           (\ ex_33 ->
              case ex_33 of
                (ErlangTuple [_, _, _]) ->
                  let   
                    msg_50 =
                      (H.make_string
                         "Could not deserialize the revert message\n")
                  in let
                    head_53 =
                      (BIF.do_remote_fun_call "Aeso.Errors" "erlps__new__2"
                         [(ErlangAtom "data_error"), msg_50])
                  in
                    (ErlangTuple
                       [(ErlangAtom "error"),
                        (ErlangCons head_53 ErlangEmptyList)])
                ex_34 -> (EXC.raise ex_34)))
      something_else -> (EXC.case_clause something_else)
erlps__to_sophia_value__5 [contractstring_0, funname_1,
                           (ErlangAtom "ok"), data_2, options0_3]
  =
  (EXC.tryCatch
     (\ _ ->
        let
          code_9 =
            (erlps__string_to_code__2
               [contractstring_0,
                (ErlangCons (ErlangAtom "no_code") options0_3)])
        in
          case code_9 of
            (ErlangMap map_10) | (DM.Just typeenv_12) <-
                                   ((Map.lookup (ErlangAtom "type_env") map_10))
                               , (DM.Just typedast_11) <-
                                   ((Map.lookup
                                       (ErlangAtom "unfolded_typed_ast")
                                       map_10)) ->
              let
                match_expr_17 =
                  (erlps__get_decode_type__2 [funname_1, typedast_11])
              in
                case match_expr_17 of
                  (ErlangTuple [(ErlangAtom "ok"), _, type0_16]) ->
                    let   
                      type_25 =
                        (BIF.do_remote_fun_call "Aeso.Ast.Infer.Types"
                           "erlps__unfold_types_in_type__3"
                           [typeenv_12, type0_16,
                            (ErlangCons (ErlangAtom "unfold_record_types")
                               (ErlangCons (ErlangAtom "unfold_variant_types")
                                  ErlangEmptyList))])
                    in let
                      case_26 =
                        (BIF.do_remote_fun_call "Proplists"
                           "erlps__get_value__3"
                           [(ErlangAtom "backend"),
                            (ErlangCons (ErlangAtom "no_code") options0_3),
                            (ErlangAtom "aevm")])
                    in
                      case case_26 of
                        (ErlangAtom "aevm") ->
                          let   
                            icode_32 =
                              (BIF.maps__get__2 [(ErlangAtom "icode"), code_9])
                          in let
                            vmtype_35 =
                              (BIF.do_remote_fun_call "Aeso.Ast.To.Icode"
                                 "erlps__ast_typerep__2" [type_25, icode_32])
                          in let
                            case_36 =
                              (BIF.do_remote_fun_call "Aeb.Heap"
                                 "erlps__from_binary__2" [vmtype_35, data_2])
                          in
                            case case_36 of
                              (ErlangTuple [(ErlangAtom "ok"), vmvalue_39]) ->
                                (EXC.tryCatch
                                   (\ _ ->
                                      let
                                        tup_el_41 =
                                          (BIF.do_remote_fun_call
                                             "Aeso.Vm.Decode"
                                             "erlps__from_aevm__3"
                                             [vmtype_35, type_25, vmvalue_39])
                                      in
                                        (ErlangTuple
                                           [(ErlangAtom "ok"), tup_el_41]))
                                   (\ ex_46 ->
                                      case ex_46 of
                                        (ErlangTuple [(ErlangAtom "throw"),
                                                      (ErlangAtom "cannot_translate_to_sophia"),
                                                      _]) ->
                                          let   
                                            arg_48 =
                                              (BIF.do_remote_fun_call
                                                 "Aeso.Pretty" "erlps__type__1"
                                                 [type0_16])
                                          in let
                                            type0str_50 =
                                              (BIF.do_remote_fun_call "Prettypr"
                                                 "erlps__format__1" [arg_48])
                                          in let
                                            arg_51 =
                                              (H.make_string
                                                 "Cannot translate VM value ~p\n  of type ~p\n  to Sophia type ~s\n")
                                          in let
                                            msg_59 =
                                              (BIF.do_remote_fun_call "Io.Lib"
                                                 "erlps__format__2"
                                                 [arg_51,
                                                  (ErlangCons data_2
                                                     (ErlangCons vmtype_35
                                                        (ErlangCons type0str_50
                                                           ErlangEmptyList)))])
                                          in let
                                            head_62 =
                                              (BIF.do_remote_fun_call
                                                 "Aeso.Errors" "erlps__new__2"
                                                 [(ErlangAtom "data_error"),
                                                  msg_59])
                                          in
                                            (ErlangTuple
                                               [(ErlangAtom "error"),
                                                (ErlangCons head_62
                                                   ErlangEmptyList)])
                                        ex_47 -> (EXC.raise ex_47)))
                              (ErlangTuple [(ErlangAtom "error"), _err_66]) ->
                                let   
                                  arg_67 =
                                    (H.make_string
                                       "Failed to decode binary as type ~p\n")
                                in let
                                  msg_71 =
                                    (BIF.do_remote_fun_call "Io.Lib"
                                       "erlps__format__2"
                                       [arg_67,
                                        (ErlangCons vmtype_35 ErlangEmptyList)])
                                in let
                                  head_74 =
                                    (BIF.do_remote_fun_call "Aeso.Errors"
                                       "erlps__new__2"
                                       [(ErlangAtom "data_error"), msg_71])
                                in
                                  (ErlangTuple
                                     [(ErlangAtom "error"),
                                      (ErlangCons head_74 ErlangEmptyList)])
                              something_else -> (EXC.case_clause something_else)
                        (ErlangAtom "fate") ->
                          (EXC.tryCatch
                             (\ _ ->
                                let   
                                  arg_81 =
                                    (BIF.do_remote_fun_call "Aeb.Fate.Encoding"
                                       "erlps__deserialize__1" [data_2])
                                in let
                                  tup_el_79 =
                                    (BIF.do_remote_fun_call "Aeso.Vm.Decode"
                                       "erlps__from_fate__2" [type_25, arg_81])
                                in (ErlangTuple [(ErlangAtom "ok"), tup_el_79]))
                             (\ ex_84 ->
                                case ex_84 of
                                  (ErlangTuple [(ErlangAtom "throw"),
                                                (ErlangAtom "cannot_translate_to_sophia"),
                                                _]) ->
                                    let   
                                      arg_86 =
                                        (BIF.do_remote_fun_call "Aeso.Pretty"
                                           "erlps__type__1" [type0_16])
                                    in let
                                      type1_88 =
                                        (BIF.do_remote_fun_call "Prettypr"
                                           "erlps__format__1" [arg_86])
                                    in let
                                      arg_89 =
                                        (H.make_string
                                           "Cannot translate FATE value ~p\n  of Sophia type ~s\n")
                                    in let
                                      head_91 =
                                        (BIF.do_remote_fun_call
                                           "Aeb.Fate.Encoding"
                                           "erlps__deserialize__1" [data_2])
                                    in let
                                      msg_96 =
                                        (BIF.do_remote_fun_call "Io.Lib"
                                           "erlps__format__2"
                                           [arg_89,
                                            (ErlangCons head_91
                                               (ErlangCons type1_88
                                                  ErlangEmptyList))])
                                    in let
                                      head_99 =
                                        (BIF.do_remote_fun_call "Aeso.Errors"
                                           "erlps__new__2"
                                           [(ErlangAtom "data_error"), msg_96])
                                    in
                                      (ErlangTuple
                                         [(ErlangAtom "error"),
                                          (ErlangCons head_99 ErlangEmptyList)])
                                  (ErlangTuple [_, _, _]) ->
                                    let   
                                      arg_103 =
                                        (BIF.do_remote_fun_call "Aeso.Pretty"
                                           "erlps__type__1" [type0_16])
                                    in let
                                      type1_105 =
                                        (BIF.do_remote_fun_call "Prettypr"
                                           "erlps__format__1" [arg_103])
                                    in let
                                      arg_106 =
                                        (H.make_string
                                           "Failed to decode binary as type ~s\n")
                                    in let
                                      msg_110 =
                                        (BIF.do_remote_fun_call "Io.Lib"
                                           "erlps__format__2"
                                           [arg_106,
                                            (ErlangCons type1_105
                                               ErlangEmptyList)])
                                    in let
                                      head_113 =
                                        (BIF.do_remote_fun_call "Aeso.Errors"
                                           "erlps__new__2"
                                           [(ErlangAtom "data_error"), msg_110])
                                    in
                                      (ErlangTuple
                                         [(ErlangAtom "error"),
                                          (ErlangCons head_113
                                             ErlangEmptyList)])
                                  ex_85 -> (EXC.raise ex_85)))
                        something_else -> (EXC.case_clause something_else)
                  _ -> (EXC.badmatch match_expr_17)
            _ -> (EXC.badmatch code_9))
     (\ ex_118 ->
        case ex_118 of
          (ErlangTuple [(ErlangAtom "throw"),
                        (ErlangTuple [(ErlangAtom "error"), errors_120]), _]) ->
            (ErlangTuple [(ErlangAtom "error"), errors_120])
          ex_119 -> (EXC.raise ex_119)))
erlps__to_sophia_value__5 [arg_123, arg_124, arg_125, arg_126,
                           arg_127]
  =
  (EXC.function_clause unit)
erlps__to_sophia_value__5 args =
  (EXC.badarity
     (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__create_calldata__3 :: ErlangFun
erlps__create_calldata__3 [code_0, fun_1, args_2] =
  let
    head_7 =
      (ErlangTuple [(ErlangAtom "backend"), (ErlangAtom "aevm")])
  in
    (erlps__create_calldata__4
       [code_0, fun_1, args_2, (ErlangCons head_7 ErlangEmptyList)])
erlps__create_calldata__3 [arg_11, arg_12, arg_13] =
  (EXC.function_clause unit)
erlps__create_calldata__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__create_calldata__4 :: ErlangFun
erlps__create_calldata__4 [code_0, fun_1, args_2, options0_3] =
  let
    case_7 =
      (BIF.do_remote_fun_call "Proplists" "erlps__get_value__3"
         [(ErlangAtom "backend"),
          (ErlangCons (ErlangAtom "no_code") options0_3),
          (ErlangAtom "aevm")])
  in
    case case_7 of
      (ErlangAtom "aevm") ->
        let
          case_11 =
            (erlps__check_call__4
               [code_0, fun_1, args_2,
                (ErlangCons (ErlangAtom "no_code") options0_3)])
        in
          case case_11 of
            (ErlangTuple [(ErlangAtom "ok"), funname_16,
                          (ErlangTuple [argtypes_17, rettype_18]),
                          vmargs_19]) ->
              (BIF.do_remote_fun_call "Aeb.Aevm.Abi"
                 "erlps__create_calldata__4"
                 [funname_16, vmargs_19, argtypes_17, rettype_18])
            err_24@(ErlangTuple [(ErlangAtom "error"), _]) -> err_24
            something_else -> (EXC.case_clause something_else)
      (ErlangAtom "fate") ->
        let
          case_25 =
            (erlps__check_call__4
               [code_0, fun_1, args_2,
                (ErlangCons (ErlangAtom "no_code") options0_3)])
        in
          case case_25 of
            (ErlangTuple [(ErlangAtom "ok"), funname_30, fateargs_31]) ->
              (BIF.do_remote_fun_call "Aeb.Fate.Abi"
                 "erlps__create_calldata__2" [funname_30, fateargs_31])
            err_34@(ErlangTuple [(ErlangAtom "error"), _]) -> err_34
            something_else -> (EXC.case_clause something_else)
      something_else -> (EXC.case_clause something_else)
erlps__create_calldata__4 [arg_35, arg_36, arg_37, arg_38] =
  (EXC.function_clause unit)
erlps__create_calldata__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__decode_calldata__3 :: ErlangFun
erlps__decode_calldata__3 [contractstring_0, funname_1,
                           calldata_2]
  =
  let
    head_7 =
      (ErlangTuple [(ErlangAtom "backend"), (ErlangAtom "aevm")])
  in
    (erlps__decode_calldata__4
       [contractstring_0, funname_1, calldata_2,
        (ErlangCons head_7 ErlangEmptyList)])
erlps__decode_calldata__3 [arg_11, arg_12, arg_13] =
  (EXC.function_clause unit)
erlps__decode_calldata__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__decode_calldata__4 :: ErlangFun
erlps__decode_calldata__4 [contractstring_0, funname_1,
                           calldata_2, options0_3]
  =
  (EXC.tryCatch
     (\ _ ->
        let
          code_9 =
            (erlps__string_to_code__2
               [contractstring_0,
                (ErlangCons (ErlangAtom "no_code") options0_3)])
        in
          case code_9 of
            (ErlangMap map_10) | (DM.Just typeenv_12) <-
                                   ((Map.lookup (ErlangAtom "type_env") map_10))
                               , (DM.Just typedast_11) <-
                                   ((Map.lookup
                                       (ErlangAtom "unfolded_typed_ast")
                                       map_10)) ->
              let
                match_expr_17 =
                  (erlps__get_decode_type__2 [funname_1, typedast_11])
              in
                case match_expr_17 of
                  (ErlangTuple [(ErlangAtom "ok"), args_16, _]) ->
                    let   
                      gettype_22 =
                        (ErlangFun 1
                           let
                             lambda_18 [(ErlangTuple [(ErlangAtom "typed"), _,
                                                      _, t_20])]
                               =
                               t_20
                             lambda_18 [t_21] = t_21
                             lambda_18 [arg_19] = (EXC.function_clause unit)
                             lambda_18 args =
                               (EXC.badarity (ErlangFun 1 lambda_18) args)
                           in lambda_18)
                    in let
                      argtypes_25 =
                        (BIF.do_remote_fun_call "Lists" "erlps__map__2"
                           [gettype_22, args_16])
                    in let
                      type0_29 =
                        (ErlangTuple
                           [(ErlangAtom "tuple_t"), ErlangEmptyList,
                            argtypes_25])
                    in let
                      type_37 =
                        (BIF.do_remote_fun_call "Aeso.Ast.Infer.Types"
                           "erlps__unfold_types_in_type__3"
                           [typeenv_12, type0_29,
                            (ErlangCons (ErlangAtom "unfold_record_types")
                               (ErlangCons (ErlangAtom "unfold_variant_types")
                                  ErlangEmptyList))])
                    in let
                      case_38 =
                        (BIF.do_remote_fun_call "Proplists"
                           "erlps__get_value__3"
                           [(ErlangAtom "backend"),
                            (ErlangCons (ErlangAtom "no_code") options0_3),
                            (ErlangAtom "aevm")])
                    in
                      case case_38 of
                        (ErlangAtom "aevm") ->
                          let   
                            icode_44 =
                              (BIF.maps__get__2 [(ErlangAtom "icode"), code_9])
                          in let
                            vmtype_47 =
                              (BIF.do_remote_fun_call "Aeso.Ast.To.Icode"
                                 "erlps__ast_typerep__2" [type_37, icode_44])
                          in let
                            arg_49 =
                              (ErlangTuple
                                 [(ErlangAtom "tuple"),
                                  (ErlangCons (ErlangAtom "word")
                                     (ErlangCons vmtype_47 ErlangEmptyList))])
                          in let
                            case_48 =
                              (BIF.do_remote_fun_call "Aeb.Heap"
                                 "erlps__from_binary__2" [arg_49, calldata_2])
                          in
                            case case_48 of
                              (ErlangTuple [(ErlangAtom "ok"),
                                            (ErlangTuple [_, vmvalue_57])]) ->
                                (EXC.tryCatch
                                   (\ _ ->
                                      let
                                        match_expr_62 =
                                          (BIF.do_remote_fun_call
                                             "Aeso.Vm.Decode"
                                             "erlps__from_aevm__3"
                                             [vmtype_47, type_37, vmvalue_57])
                                      in
                                        case match_expr_62 of
                                          (ErlangTuple [(ErlangAtom "tuple"),
                                                        (ErlangEmptyList),
                                                        values_61]) ->
                                            (ErlangTuple
                                               [(ErlangAtom "ok"), argtypes_25,
                                                values_61])
                                          _ -> (EXC.badmatch match_expr_62))
                                   (\ ex_67 ->
                                      case ex_67 of
                                        (ErlangTuple [(ErlangAtom "throw"),
                                                      (ErlangAtom "cannot_translate_to_sophia"),
                                                      _]) ->
                                          let   
                                            arg_69 =
                                              (BIF.do_remote_fun_call
                                                 "Aeso.Pretty" "erlps__type__1"
                                                 [type0_29])
                                          in let
                                            type0str_71 =
                                              (BIF.do_remote_fun_call "Prettypr"
                                                 "erlps__format__1" [arg_69])
                                          in let
                                            arg_72 =
                                              (H.make_string
                                                 "Cannot translate VM value ~p\n  of type ~p\n  to Sophia type ~s\n")
                                          in let
                                            msg_80 =
                                              (BIF.do_remote_fun_call "Io.Lib"
                                                 "erlps__format__2"
                                                 [arg_72,
                                                  (ErlangCons vmvalue_57
                                                     (ErlangCons vmtype_47
                                                        (ErlangCons type0str_71
                                                           ErlangEmptyList)))])
                                          in let
                                            head_83 =
                                              (BIF.do_remote_fun_call
                                                 "Aeso.Errors" "erlps__new__2"
                                                 [(ErlangAtom "data_error"),
                                                  msg_80])
                                          in
                                            (ErlangTuple
                                               [(ErlangAtom "error"),
                                                (ErlangCons head_83
                                                   ErlangEmptyList)])
                                        ex_68 -> (EXC.raise ex_68)))
                              (ErlangTuple [(ErlangAtom "error"), _err_87]) ->
                                let   
                                  arg_88 =
                                    (H.make_string
                                       "Failed to decode calldata as type ~p\n")
                                in let
                                  msg_92 =
                                    (BIF.do_remote_fun_call "Io.Lib"
                                       "erlps__format__2"
                                       [arg_88,
                                        (ErlangCons vmtype_47 ErlangEmptyList)])
                                in let
                                  head_95 =
                                    (BIF.do_remote_fun_call "Aeso.Errors"
                                       "erlps__new__2"
                                       [(ErlangAtom "data_error"), msg_92])
                                in
                                  (ErlangTuple
                                     [(ErlangAtom "error"),
                                      (ErlangCons head_95 ErlangEmptyList)])
                              something_else -> (EXC.case_clause something_else)
                        (ErlangAtom "fate") ->
                          let
                            case_99 =
                              (BIF.do_remote_fun_call "Aeb.Fate.Abi"
                                 "erlps__decode_calldata__2"
                                 [funname_1, calldata_2])
                          in
                            case case_99 of
                              (ErlangTuple [(ErlangAtom "ok"), fateargs_102]) ->
                                (EXC.tryCatch
                                   (\ _ ->
                                      case type_37 of
                                        (ErlangTuple [(ErlangAtom "tuple_t"),
                                                      (ErlangEmptyList),
                                                      argtypes1_103]) ->
                                          let   
                                            lc_src_105 =
                                              (BIF.do_remote_fun_call "Lists"
                                                 "erlps__zip__2"
                                                 [argtypes1_103, fateargs_102])
                                          in let
                                            astargs_114 =
                                              (H.flmap
                                                 (\ lc_110 ->
                                                    case lc_110 of
                                                      (ErlangTuple [argtype_108,
                                                                    fatearg_109]) ->
                                                        let
                                                          lc_ret_111 =
                                                            (BIF.do_remote_fun_call
                                                               "Aeso.Vm.Decode"
                                                               "erlps__from_fate__2"
                                                               [argtype_108,
                                                                fatearg_109])
                                                        in
                                                          (ErlangCons lc_ret_111
                                                             ErlangEmptyList)
                                                      _ -> ErlangEmptyList)
                                                 lc_src_105)
                                          in
                                            (ErlangTuple
                                               [(ErlangAtom "ok"), argtypes_25,
                                                astargs_114])
                                        _ -> (EXC.badmatch type_37))
                                   (\ ex_119 ->
                                      case ex_119 of
                                        (ErlangTuple [(ErlangAtom "throw"),
                                                      (ErlangAtom "cannot_translate_to_sophia"),
                                                      _]) ->
                                          let   
                                            arg_121 =
                                              (BIF.do_remote_fun_call
                                                 "Aeso.Pretty" "erlps__type__1"
                                                 [type0_29])
                                          in let
                                            type0str_123 =
                                              (BIF.do_remote_fun_call "Prettypr"
                                                 "erlps__format__1" [arg_121])
                                          in let
                                            arg_124 =
                                              (H.make_string
                                                 "Cannot translate FATE value ~p\n  to Sophia type ~s\n")
                                          in let
                                            msg_130 =
                                              (BIF.do_remote_fun_call "Io.Lib"
                                                 "erlps__format__2"
                                                 [arg_124,
                                                  (ErlangCons fateargs_102
                                                     (ErlangCons type0str_123
                                                        ErlangEmptyList))])
                                          in let
                                            head_133 =
                                              (BIF.do_remote_fun_call
                                                 "Aeso.Errors" "erlps__new__2"
                                                 [(ErlangAtom "data_error"),
                                                  msg_130])
                                          in
                                            (ErlangTuple
                                               [(ErlangAtom "error"),
                                                (ErlangCons head_133
                                                   ErlangEmptyList)])
                                        ex_120 -> (EXC.raise ex_120)))
                              (ErlangTuple [(ErlangAtom "error"), _]) ->
                                let   
                                  arg_137 =
                                    (H.make_string
                                       "Failed to decode calldata binary\n")
                                in let
                                  msg_139 =
                                    (BIF.do_remote_fun_call "Io.Lib"
                                       "erlps__format__2"
                                       [arg_137, ErlangEmptyList])
                                in let
                                  head_142 =
                                    (BIF.do_remote_fun_call "Aeso.Errors"
                                       "erlps__new__2"
                                       [(ErlangAtom "data_error"), msg_139])
                                in
                                  (ErlangTuple
                                     [(ErlangAtom "error"),
                                      (ErlangCons head_142 ErlangEmptyList)])
                              something_else -> (EXC.case_clause something_else)
                        something_else -> (EXC.case_clause something_else)
                  _ -> (EXC.badmatch match_expr_17)
            _ -> (EXC.badmatch code_9))
     (\ ex_147 ->
        case ex_147 of
          (ErlangTuple [(ErlangAtom "throw"),
                        (ErlangTuple [(ErlangAtom "error"), errors_149]), _]) ->
            (ErlangTuple [(ErlangAtom "error"), errors_149])
          ex_148 -> (EXC.raise ex_148)))
erlps__decode_calldata__4 [arg_152, arg_153, arg_154, arg_155] =
  (EXC.function_clause unit)
erlps__decode_calldata__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__get_arg_icode__1 :: ErlangFun
erlps__get_arg_icode__1 [funs_0] =
  let
    case_1 =
      (H.flmap
         (\ lc_10 ->
            case lc_10 of
              (ErlangTuple [(ErlangCons _ (ErlangCons (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangEmptyList))))))) (ErlangEmptyList))),
                            _, _,
                            (ErlangTuple [(ErlangAtom "funcall"), _, args_9]),
                            _]) | ((ErlangInt num_3) ==
                                     (ErlangInt (DBI.fromInt 95)))
                                , ((ErlangInt num_4) ==
                                     (ErlangInt (DBI.fromInt 95)))
                                , ((ErlangInt num_5) ==
                                     (ErlangInt (DBI.fromInt 99)))
                                , ((ErlangInt num_6) ==
                                     (ErlangInt (DBI.fromInt 97)))
                                , ((ErlangInt num_7) ==
                                     (ErlangInt (DBI.fromInt 108)))
                                , ((ErlangInt num_8) ==
                                     (ErlangInt (DBI.fromInt 108))) ->
                (ErlangCons args_9 ErlangEmptyList)
              _ -> ErlangEmptyList)
         funs_0)
  in
    case case_1 of
      (ErlangCons args_12 (ErlangEmptyList)) -> args_12
      (ErlangEmptyList) -> (erlps__error_missing_call_function__0 [])
      something_else -> (EXC.case_clause something_else)
erlps__get_arg_icode__1 [arg_13] = (EXC.function_clause unit)
erlps__get_arg_icode__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__error_missing_call_function__0 :: ErlangFun
erlps__error_missing_call_function__0 [] =
  let   
    msg_0 =
      (H.make_string "Internal error: missing \'__call\'-function")
  in let
    arg_1 =
      (BIF.do_remote_fun_call "Aeso.Errors" "erlps__new__2"
         [(ErlangAtom "internal_error"), msg_0])
  in
    (BIF.do_remote_fun_call "Aeso.Errors" "erlps__throw__1" [arg_1])
erlps__error_missing_call_function__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__get_call_type__1 :: ErlangFun
erlps__get_call_type__1 [(ErlangCons (ErlangTuple [(ErlangAtom "contract"),
                                                   _, _,
                                                   defs_0]) (ErlangEmptyList))]
  =
  let
    case_1 =
      (H.flmap
         (\ lc_12 ->
            case lc_12 of
              (ErlangTuple [(ErlangAtom "letfun"), _,
                            (ErlangTuple [(ErlangAtom "id"), _,
                                          (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangEmptyList)))))))]),
                            (ErlangEmptyList), _ret_9,
                            (ErlangTuple [(ErlangAtom "typed"), _,
                                          (ErlangTuple [(ErlangAtom "app"), _,
                                                        (ErlangTuple [(ErlangAtom "typed"),
                                                                      _,
                                                                      (ErlangTuple [(ErlangAtom "qid"),
                                                                                    _,
                                                                                    qfunname_10]),
                                                                      funtype_11]),
                                                        _]),
                                          _])]) | ((ErlangInt num_3) ==
                                                     (ErlangInt
                                                        (DBI.fromInt 95)))
                                                , ((ErlangInt num_4) ==
                                                     (ErlangInt
                                                        (DBI.fromInt 95)))
                                                , ((ErlangInt num_5) ==
                                                     (ErlangInt
                                                        (DBI.fromInt 99)))
                                                , ((ErlangInt num_6) ==
                                                     (ErlangInt
                                                        (DBI.fromInt 97)))
                                                , ((ErlangInt num_7) ==
                                                     (ErlangInt
                                                        (DBI.fromInt 108)))
                                                , ((ErlangInt num_8) ==
                                                     (ErlangInt
                                                        (DBI.fromInt 108))) ->
                let   
                  tup_el_14 =
                    (BIF.do_remote_fun_call "Lists" "erlps__last__1"
                       [qfunname_10])
                in let lc_ret_13 = (ErlangTuple [tup_el_14, funtype_11])
                in (ErlangCons lc_ret_13 ErlangEmptyList)
              _ -> ErlangEmptyList)
         defs_0)
  in
    case case_1 of
      (ErlangCons call_17 (ErlangEmptyList)) ->
        (ErlangTuple [(ErlangAtom "ok"), call_17])
      (ErlangEmptyList) -> (erlps__error_missing_call_function__0 [])
      something_else -> (EXC.case_clause something_else)
erlps__get_call_type__1 [(ErlangCons _ contracts_0)] =
  (erlps__get_call_type__1 [contracts_0])
erlps__get_call_type__1 [arg_2] = (EXC.function_clause unit)
erlps__get_call_type__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__get_decode_type__2 :: ErlangFun
erlps__get_decode_type__2 [funname_0,
                           (ErlangCons (ErlangTuple [(ErlangAtom "contract"),
                                                     ann_1, _,
                                                     defs_2]) (ErlangEmptyList))]
  =
  let   
    gettype_19 =
      (ErlangFun 1
         let
           lambda_3 [(ErlangTuple [(ErlangAtom "letfun"), _,
                                   (ErlangTuple [(ErlangAtom "id"), _, name_5]),
                                   args_6, ret_7, _])]
             | (weakEq name_5 funname_0) =
             let head_8 = (ErlangTuple [args_6, ret_7])
             in (ErlangCons head_8 ErlangEmptyList)
           lambda_3 [(ErlangTuple [(ErlangAtom "fun_decl"), _,
                                   (ErlangTuple [(ErlangAtom "id"), _,
                                                 name_12]),
                                   (ErlangTuple [(ErlangAtom "fun_t"), _, _,
                                                 args_13, ret_14])])]
             | (weakEq name_12 funname_0) =
             let head_15 = (ErlangTuple [args_13, ret_14])
             in (ErlangCons head_15 ErlangEmptyList)
           lambda_3 [_] = ErlangEmptyList
           lambda_3 [arg_4] = (EXC.function_clause unit)
           lambda_3 args = (EXC.badarity (ErlangFun 1 lambda_3) args)
         in lambda_3)
  in let
    case_20 =
      (BIF.do_remote_fun_call "Lists" "erlps__flatmap__2"
         [gettype_19, defs_2])
  in
    case case_20 of
      (ErlangCons (ErlangTuple [args_23, ret_24]) (ErlangEmptyList)) ->
        (ErlangTuple [(ErlangAtom "ok"), args_23, ret_24])
      (ErlangEmptyList) ->
        case funname_0 of
          (ErlangCons (ErlangInt num_29) (ErlangCons (ErlangInt num_30) (ErlangCons (ErlangInt num_31) (ErlangCons (ErlangInt num_32) (ErlangEmptyList))))) | ((ErlangInt
                                                                                                                                                                  num_29) ==
                                                                                                                                                                 (ErlangInt
                                                                                                                                                                    (DBI.fromInt
                                                                                                                                                                       105)))
                                                                                                                                                            , ((ErlangInt
                                                                                                                                                                  num_30) ==
                                                                                                                                                                 (ErlangInt
                                                                                                                                                                    (DBI.fromInt
                                                                                                                                                                       110)))
                                                                                                                                                            , ((ErlangInt
                                                                                                                                                                  num_31) ==
                                                                                                                                                                 (ErlangInt
                                                                                                                                                                    (DBI.fromInt
                                                                                                                                                                       105)))
                                                                                                                                                            , ((ErlangInt
                                                                                                                                                                  num_32) ==
                                                                                                                                                                 (ErlangInt
                                                                                                                                                                    (DBI.fromInt
                                                                                                                                                                       116))) ->
            let
              tup_el_35 =
                (ErlangTuple
                   [(ErlangAtom "tuple_t"), ErlangEmptyList, ErlangEmptyList])
            in (ErlangTuple [(ErlangAtom "ok"), ErlangEmptyList, tup_el_35])
          _ ->
            let   
              arg_39 =
                (H.make_string "Function \'~s\' is missing in contract\n")
            in let
              msg_43 =
                (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
                   [arg_39, (ErlangCons funname_0 ErlangEmptyList)])
            in let
              pos_45 =
                (BIF.do_remote_fun_call "Aeso.Code.Errors" "erlps__pos__1"
                   [ann_1])
            in let
              arg_46 =
                (BIF.do_remote_fun_call "Aeso.Errors" "erlps__new__3"
                   [(ErlangAtom "data_error"), pos_45, msg_43])
            in
              (BIF.do_remote_fun_call "Aeso.Errors" "erlps__throw__1" [arg_46])
      something_else -> (EXC.case_clause something_else)
erlps__get_decode_type__2 [funname_0, (ErlangCons _ contracts_1)]
  =
  (erlps__get_decode_type__2 [funname_0, contracts_1])
erlps__get_decode_type__2 [arg_4, arg_5] =
  (EXC.function_clause unit)
erlps__get_decode_type__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__icode_to_term__2 :: ErlangFun
erlps__icode_to_term__2 [(ErlangAtom "word"),
                         (ErlangTuple [(ErlangAtom "integer"), n_0])]
  =
  n_0
erlps__icode_to_term__2 [(ErlangAtom "word"),
                         (ErlangTuple [(ErlangAtom "unop"), (ErlangAtom "-"),
                                       (ErlangTuple [(ErlangAtom "integer"),
                                                     n_0])])]
  =
  (BIF.erlang__op_neg [n_0])
erlps__icode_to_term__2 [(ErlangAtom "string"),
                         (ErlangTuple [(ErlangAtom "tuple"),
                                       (ErlangCons (ErlangTuple [(ErlangAtom "integer"),
                                                                 len_0]) words_1)])]
  =
  let
    match_expr_11 =
      (BIN.concat_erl
         (H.flmap
            (\ lc_4 ->
               case lc_4 of
                 (ErlangTuple [(ErlangAtom "integer"), w_3]) ->
                   let
                     lc_ret_5 =
                       (ErlangBinary
                          (BIN.from_int w_3 (ErlangInt (DBI.fromInt 256)) 1
                             BIN.Big))
                   in (ErlangCons lc_ret_5 ErlangEmptyList)
                 _ -> ErlangEmptyList)
            words_1))
  in
    case match_expr_11 of
      (ErlangBinary bin_c_7) | (ErlangInt size_8) <- (len_0)
                             , (BIN.Ok str_10 bin_9) <-
                                 ((BIN.chop_bin bin_c_7 size_8 8)) ->
        str_10
      _ -> (EXC.badmatch match_expr_11)
erlps__icode_to_term__2 [(ErlangTuple [(ErlangAtom "list"),
                                       t_0]),
                         (ErlangTuple [(ErlangAtom "list"), vs_1])]
  =
  (H.flmap
     (\ lc_4 ->
        let lc_ret_5 = (erlps__icode_to_term__2 [t_0, lc_4])
        in (ErlangCons lc_ret_5 ErlangEmptyList))
     vs_1)
erlps__icode_to_term__2 [(ErlangTuple [(ErlangAtom "tuple"),
                                       ts_0]),
                         (ErlangTuple [(ErlangAtom "tuple"), vs_1])]
  =
  let arg_2 = (erlps__icodes_to_terms__2 [ts_0, vs_1])
  in (BIF.erlang__list_to_tuple__1 [arg_2])
erlps__icode_to_term__2 [(ErlangTuple [(ErlangAtom "variant"),
                                       cs_0]),
                         (ErlangTuple [(ErlangAtom "tuple"),
                                       (ErlangCons (ErlangTuple [(ErlangAtom "integer"),
                                                                 tag_1]) args_2)])]
  =
  let   
    arg_3 =
      (BIF.erlang__op_plus [tag_1, (ErlangInt (DBI.fromInt 1))])
  in let
    ts_7 =
      (BIF.do_remote_fun_call "Lists" "erlps__nth__2" [arg_3, cs_0])
  in let tup_el_10 = (erlps__icodes_to_terms__2 [ts_7, args_2])
  in (ErlangTuple [(ErlangAtom "variant"), tag_1, tup_el_10])
erlps__icode_to_term__2 [t_2@(ErlangTuple [(ErlangAtom "map"),
                                           kt_0, vt_1]),
                         m_3]
  =
  case m_3 of
    (ErlangTuple [(ErlangAtom "funcall"),
                  (ErlangTuple [(ErlangAtom "var_ref"),
                                (ErlangTuple [(ErlangAtom "builtin"),
                                              (ErlangAtom "map_put")])]),
                  (ErlangCons m1_5 (ErlangCons k_6 (ErlangCons v_7 (ErlangEmptyList))))]) ->
      let    map_10 = (erlps__icode_to_term__2 [t_2, m1_5])
      in let key_13 = (erlps__icode_to_term__2 [kt_0, k_6])
      in let val_16 = (erlps__icode_to_term__2 [vt_1, v_7])
      in let map_ext_20 = (ErlangMap (Map.singleton key_13 val_16))
      in (BIF.maps__merge__2 [map_10, map_ext_20])
    (ErlangTuple [(ErlangAtom "prim_call_contract"), _,
                  (ErlangTuple [(ErlangAtom "integer"), (ErlangInt num_22)]), _,
                  (ErlangTuple [(ErlangAtom "tuple"),
                                (ErlangCons (ErlangTuple [(ErlangAtom "integer"),
                                                          (ErlangInt num_23)]) (ErlangCons _ (ErlangCons _ (ErlangEmptyList))))]),
                  _]) | ((ErlangInt num_22) == (ErlangInt (DBI.fromInt 0)))
                      , ((ErlangInt num_23) == (ErlangInt (DBI.fromInt 300))) ->
      (ErlangMap Map.empty)
    _ ->
      let arg_24 = (ErlangTuple [(ErlangAtom "todo"), m_3])
      in (BIF.erlang__throw__1 [arg_24])
erlps__icode_to_term__2 [(ErlangAtom "word"),
                         (ErlangTuple [(ErlangAtom "unop"), (ErlangAtom "bnot"),
                                       a_0])]
  =
  let
    op_arg_1 = (erlps__icode_to_term__2 [(ErlangAtom "word"), a_0])
  in (BIF.erlang__bnot__1 [op_arg_1])
erlps__icode_to_term__2 [(ErlangAtom "word"),
                         (ErlangTuple [(ErlangAtom "binop"), (ErlangAtom "bor"),
                                       a_0, b_1])]
  =
  let   
    lop_2 = (erlps__icode_to_term__2 [(ErlangAtom "word"), a_0])
  in let
    rop_5 = (erlps__icode_to_term__2 [(ErlangAtom "word"), b_1])
  in (BIF.erlang__bor__2 [lop_2, rop_5])
erlps__icode_to_term__2 [(ErlangAtom "word"),
                         (ErlangTuple [(ErlangAtom "binop"), (ErlangAtom "bsl"),
                                       a_0, b_1])]
  =
  let   
    lop_2 = (erlps__icode_to_term__2 [(ErlangAtom "word"), b_1])
  in let
    rop_5 = (erlps__icode_to_term__2 [(ErlangAtom "word"), a_0])
  in (BIF.erlang__bsl__2 [lop_2, rop_5])
erlps__icode_to_term__2 [(ErlangAtom "word"),
                         (ErlangTuple [(ErlangAtom "binop"),
                                       (ErlangAtom "band"), a_0, b_1])]
  =
  let   
    lop_2 = (erlps__icode_to_term__2 [(ErlangAtom "word"), a_0])
  in let
    rop_5 = (erlps__icode_to_term__2 [(ErlangAtom "word"), b_1])
  in (BIF.erlang__band__2 [lop_2, rop_5])
erlps__icode_to_term__2 [(ErlangAtom "typerep"), _] =
  let
    arg_0 =
      (ErlangTuple [(ErlangAtom "todo"), (ErlangAtom "typerep")])
  in (BIF.erlang__throw__1 [arg_0])
erlps__icode_to_term__2 [t_0, v_1] =
  let arg_2 = (ErlangTuple [(ErlangAtom "not_a_value"), t_0, v_1])
  in (BIF.erlang__throw__1 [arg_2])
erlps__icode_to_term__2 [arg_6, arg_7] =
  (EXC.function_clause unit)
erlps__icode_to_term__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__icodes_to_terms__2 :: ErlangFun
erlps__icodes_to_terms__2 [ts_0, vs_1] =
  let
    lc_src_2 =
      (BIF.do_remote_fun_call "Lists" "erlps__zip__2" [ts_0, vs_1])
  in
    (H.flmap
       (\ lc_7 ->
          case lc_7 of
            (ErlangTuple [t_5, v_6]) ->
              let lc_ret_8 = (erlps__icode_to_term__2 [t_5, v_6])
              in (ErlangCons lc_ret_8 ErlangEmptyList)
            _ -> ErlangEmptyList)
       lc_src_2)
erlps__icodes_to_terms__2 [arg_11, arg_12] =
  (EXC.function_clause unit)
erlps__icodes_to_terms__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__ast_to_icode__2 :: ErlangFun
erlps__ast_to_icode__2 [typedast_0, options_1] =
  (BIF.do_remote_fun_call "Aeso.Ast.To.Icode"
     "erlps__convert_typed__2" [typedast_0, options_1])
erlps__ast_to_icode__2 [arg_4, arg_5] =
  (EXC.function_clause unit)
erlps__ast_to_icode__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__assemble__2 :: ErlangFun
erlps__assemble__2 [icode_0, options_1] =
  (BIF.do_remote_fun_call "Aeso.Icode.To.Asm" "erlps__convert__2"
     [icode_0, options_1])
erlps__assemble__2 [arg_4, arg_5] = (EXC.function_clause unit)
erlps__assemble__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__to_bytecode__2 :: ErlangFun
erlps__to_bytecode__2 [(ErlangCons (ErlangAtom "COMMENT") (ErlangCons _ rest_0)),
                       _options_1]
  =
  (erlps__to_bytecode__2 [rest_0, _options_1])
erlps__to_bytecode__2 [(ErlangCons op_0 rest_1), options_2] =
  let   
    head_3 =
      (BIF.do_remote_fun_call "Aeb.Opcodes" "erlps__m_to_op__1" [op_0])
  in let tail_5 = (erlps__to_bytecode__2 [rest_1, options_2])
  in (ErlangCons head_3 tail_5)
erlps__to_bytecode__2 [(ErlangEmptyList), _] = ErlangEmptyList
erlps__to_bytecode__2 [arg_0, arg_1] = (EXC.function_clause unit)
erlps__to_bytecode__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__extract_type_info__1 :: ErlangFun
erlps__extract_type_info__1 [_icode_2@(ErlangMap map_0)]
  | (DM.Just functions_1) <-
      ((Map.lookup (ErlangAtom "functions") map_0)) =
  let   
    argtypesonly_10 =
      (ErlangFun 1
         let
           lambda_3 [as_5] =
             (H.flmap
                (\ lc_8 ->
                   case lc_8 of
                     (ErlangTuple [_, t_7]) -> (ErlangCons t_7 ErlangEmptyList)
                     _ -> ErlangEmptyList)
                as_5)
           lambda_3 [arg_4] = (EXC.function_clause unit)
           lambda_3 args = (EXC.badarity (ErlangFun 1 lambda_3) args)
         in lambda_3)
  in let
    payable_17 =
      (ErlangFun 1
         let
           lambda_11 [attrs_13] =
             (BIF.do_remote_fun_call "Proplists" "erlps__get_value__3"
                [(ErlangAtom "payable"), attrs_13, (ErlangAtom "false")])
           lambda_11 [arg_12] = (EXC.function_clause unit)
           lambda_11 args = (EXC.badarity (ErlangFun 1 lambda_11) args)
         in lambda_11)
  in let
    typeinfo_43 =
      (H.flmap
         (\ lc_24 ->
            case lc_24 of
              (ErlangTuple [name_19, attrs_20, args_21, _body_22,
                            typerep_23]) ->
                let    op_arg_26 = (BIF.erlang__is_tuple__1 [name_19])
                in let cond_25 = (BIF.erlang__not__1 [op_arg_26])
                in
                  case cond_25 of
                    (ErlangAtom "true") ->
                      let   
                        op_arg_29 =
                          (BIF.lists__member__2
                             [(ErlangAtom "private"), attrs_20])
                      in let cond_28 = (BIF.erlang__not__1 [op_arg_29])
                      in
                        case cond_28 of
                          (ErlangAtom "true") ->
                            let   
                              arg_34 =
                                (BIF.do_remote_fun_call "Lists" "erlps__last__1"
                                   [name_19])
                            in let
                              arg_33 = (BIF.erlang__list_to_binary__1 [arg_34])
                            in let
                              arg_36 =
                                (BIF.erlang__apply__2
                                   [payable_17,
                                    (ErlangCons attrs_20 ErlangEmptyList)])
                            in let
                              arg_39 =
                                (BIF.erlang__apply__2
                                   [argtypesonly_10,
                                    (ErlangCons args_21 ErlangEmptyList)])
                            in let
                              lc_ret_32 =
                                (BIF.do_remote_fun_call "Aeb.Aevm.Abi"
                                   "erlps__function_type_info__4"
                                   [arg_33, arg_36, arg_39, typerep_23])
                            in (ErlangCons lc_ret_32 ErlangEmptyList)
                          _ -> ErlangEmptyList
                    _ -> ErlangEmptyList
              _ -> ErlangEmptyList)
         functions_1)
  in
    (BIF.do_remote_fun_call "Lists" "erlps__sort__1" [typeinfo_43])
erlps__extract_type_info__1 [arg_45] = (EXC.function_clause unit)
erlps__extract_type_info__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__pp_sophia_code__2 :: ErlangFun
erlps__pp_sophia_code__2 [c_0, opts_1] =
  let
    arg_5 =
      (ErlangFun 1
         let
           lambda_6 [code_8] =
             let    arg_9 = (H.make_string "~s\n")
             in let
               arg_12 =
                 (BIF.do_remote_fun_call "Aeso.Pretty" "erlps__decls__1"
                    [code_8])
             in let
               head_11 =
                 (BIF.do_remote_fun_call "Prettypr" "erlps__format__1" [arg_12])
             in
               (BIF.do_remote_fun_call "Erlang.Io" "erlps__format__2"
                  [arg_9, (ErlangCons head_11 ErlangEmptyList)])
           lambda_6 [arg_7] = (EXC.function_clause unit)
           lambda_6 args = (EXC.badarity (ErlangFun 1 lambda_6) args)
         in lambda_6)
  in
    (erlps__pp__4
       [c_0, opts_1, (ErlangAtom "pp_sophia_code"), arg_5])
erlps__pp_sophia_code__2 [arg_15, arg_16] =
  (EXC.function_clause unit)
erlps__pp_sophia_code__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__pp_ast__2 :: ErlangFun
erlps__pp_ast__2 [c_0, opts_1] =
  let
    arg_5 =
      (BIF.erlang__make_fun__3
         [(ErlangAtom "aeso_ast"), (ErlangAtom "pp"),
          (ErlangInt (DBI.fromInt 1))])
  in (erlps__pp__4 [c_0, opts_1, (ErlangAtom "pp_ast"), arg_5])
erlps__pp_ast__2 [arg_9, arg_10] = (EXC.function_clause unit)
erlps__pp_ast__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__pp_typed_ast__2 :: ErlangFun
erlps__pp_typed_ast__2 [c_0, opts_1] =
  let
    arg_5 =
      (BIF.erlang__make_fun__3
         [(ErlangAtom "aeso_ast"), (ErlangAtom "pp_typed"),
          (ErlangInt (DBI.fromInt 1))])
  in
    (erlps__pp__4 [c_0, opts_1, (ErlangAtom "pp_typed_ast"), arg_5])
erlps__pp_typed_ast__2 [arg_9, arg_10] =
  (EXC.function_clause unit)
erlps__pp_typed_ast__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__pp_icode__2 :: ErlangFun
erlps__pp_icode__2 [c_0, opts_1] =
  let
    arg_5 =
      (BIF.erlang__make_fun__3
         [(ErlangAtom "aeso_icode"), (ErlangAtom "pp"),
          (ErlangInt (DBI.fromInt 1))])
  in (erlps__pp__4 [c_0, opts_1, (ErlangAtom "pp_icode"), arg_5])
erlps__pp_icode__2 [arg_9, arg_10] = (EXC.function_clause unit)
erlps__pp_icode__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__pp_bytecode__2 :: ErlangFun
erlps__pp_bytecode__2 [c_0, opts_1] =
  let
    arg_5 =
      (BIF.erlang__make_fun__3
         [(ErlangAtom "aeb_disassemble"), (ErlangAtom "pp"),
          (ErlangInt (DBI.fromInt 1))])
  in
    (erlps__pp__4 [c_0, opts_1, (ErlangAtom "pp_bytecode"), arg_5])
erlps__pp_bytecode__2 [arg_9, arg_10] =
  (EXC.function_clause unit)
erlps__pp_bytecode__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__pp_assembler__3 :: ErlangFun
erlps__pp_assembler__3 [(ErlangAtom "aevm"), c_0, opts_1] =
  let
    arg_5 =
      (BIF.erlang__make_fun__3
         [(ErlangAtom "aeb_asm"), (ErlangAtom "pp"),
          (ErlangInt (DBI.fromInt 1))])
  in
    (erlps__pp__4 [c_0, opts_1, (ErlangAtom "pp_assembler"), arg_5])
erlps__pp_assembler__3 [(ErlangAtom "fate"), c_0, opts_1] =
  let
    arg_5 =
      (ErlangFun 1
         let
           lambda_6 [asm_8] =
             let    arg_9 = (H.make_string "~s")
             in let
               head_11 =
                 (BIF.do_remote_fun_call "Aeb.Fate.Asm" "erlps__pp__1" [asm_8])
             in
               (BIF.do_remote_fun_call "Erlang.Io" "erlps__format__2"
                  [arg_9, (ErlangCons head_11 ErlangEmptyList)])
           lambda_6 [arg_7] = (EXC.function_clause unit)
           lambda_6 args = (EXC.badarity (ErlangFun 1 lambda_6) args)
         in lambda_6)
  in
    (erlps__pp__4 [c_0, opts_1, (ErlangAtom "pp_assembler"), arg_5])
erlps__pp_assembler__3 [arg_14, arg_15, arg_16] =
  (EXC.function_clause unit)
erlps__pp_assembler__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__pp__4 :: ErlangFun
erlps__pp__4 [code_0, options_1, option_2, ppfun_3] =
  let
    case_4 =
      (BIF.do_remote_fun_call "Proplists" "erlps__lookup__2"
         [option_2, options_1])
  in
    case case_4 of
      (ErlangTuple [option_7, (ErlangAtom "true")]) | (option_7 ==
                                                         option_2) ->
        (BIF.erlang__apply__2
           [ppfun_3, (ErlangCons code_0 ErlangEmptyList)])
      (ErlangAtom "none") -> (ErlangAtom "ok")
      something_else -> (EXC.case_clause something_else)
erlps__pp__4 [arg_10, arg_11, arg_12, arg_13] =
  (EXC.function_clause unit)
erlps__pp__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__validate_byte_code__3 :: ErlangFun
erlps__validate_byte_code__3 [(ErlangMap map_0), source_3,
                              options_4]
  | (DM.Just payable_2) <-
      ((Map.lookup (ErlangAtom "payable") map_0))
  , (DM.Just bytecode_1) <-
      ((Map.lookup (ErlangAtom "byte_code") map_0)) =
  let   
    fail_14 =
      (ErlangFun 1
         let
           lambda_5 [err_7] =
             let
               head_10 =
                 (BIF.do_remote_fun_call "Aeso.Errors" "erlps__new__2"
                    [(ErlangAtom "data_error"), err_7])
             in
               (ErlangTuple
                  [(ErlangAtom "error"), (ErlangCons head_10 ErlangEmptyList)])
           lambda_5 [arg_6] = (EXC.function_clause unit)
           lambda_5 args = (EXC.badarity (ErlangFun 1 lambda_5) args)
         in lambda_5)
  in let
    case_15 =
      (BIF.do_remote_fun_call "Proplists" "erlps__get_value__3"
         [(ErlangAtom "backend"), options_4, (ErlangAtom "aevm")])
  in
    case case_15 of
      b_19 | (weakNEq b_19 (ErlangAtom "fate")) ->
        let    arg_21 = (H.make_string "Unsupported backend: ~s\n")
        in let
          arg_20 =
            (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
               [arg_21, (ErlangCons b_19 ErlangEmptyList)])
        in
          (BIF.erlang__apply__2
             [fail_14, (ErlangCons arg_20 ErlangEmptyList)])
      (ErlangAtom "fate") ->
        (EXC.tryCatch
           (\ _ ->
              let   
                fun_26 =
                  (ErlangFun 0
                     let
                       lambda_27 [] =
                         (EXC.tryCatch
                            (\ _ ->
                               let
                                 arg_28 =
                                   (BIF.do_remote_fun_call "Aeb.Fate.Code"
                                      "erlps__deserialize__1" [bytecode_1])
                               in
                                 (BIF.do_remote_fun_call "Aeb.Fate.Code"
                                    "erlps__strip_init_function__1" [arg_28]))
                            (\ ex_31 ->
                               case ex_31 of
                                 (ErlangTuple [_, err1_33, _]) ->
                                   let
                                     arg_34 =
                                       (ErlangTuple
                                          [(ErlangAtom "deserialize"), err1_33])
                                   in (BIF.erlang__throw__1 [arg_34])
                                 ex_32 -> (EXC.raise ex_32)))
                       lambda_27 [] = (EXC.function_clause unit)
                       lambda_27 args =
                         (EXC.badarity (ErlangFun 0 lambda_27) args)
                     in lambda_27)
              in let
                fcode1_37 = (BIF.erlang__apply__2 [fun_26, ErlangEmptyList])
              in let
                fun_38 =
                  (ErlangFun 0
                     let
                       lambda_39 [] =
                         (EXC.tryCatch
                            (\ _ ->
                               let
                                 match_expr_46 =
                                   (erlps__from_string1__3
                                      [(ErlangAtom "fate"), source_3,
                                       options_4])
                               in
                                 case match_expr_46 of
                                   (ErlangTuple [(ErlangAtom "ok"),
                                                 (ErlangMap map_43)]) | (DM.Just srcpayable_45) <-
                                                                          ((Map.lookup
                                                                              (ErlangAtom
                                                                                 "payable")
                                                                              map_43))
                                                                      , (DM.Just srcbytecode_44) <-
                                                                          ((Map.lookup
                                                                              (ErlangAtom
                                                                                 "byte_code")
                                                                              map_43)) ->
                                     let   
                                       fcode_48 =
                                         (BIF.do_remote_fun_call "Aeb.Fate.Code"
                                            "erlps__deserialize__1"
                                            [srcbytecode_44])
                                     in let
                                       tup_el_49 =
                                         (BIF.do_remote_fun_call "Aeb.Fate.Code"
                                            "erlps__strip_init_function__1"
                                            [fcode_48])
                                     in (ErlangTuple [tup_el_49, srcpayable_45])
                                   _ -> (EXC.badmatch match_expr_46))
                            (\ ex_53 ->
                               case ex_53 of
                                 (ErlangTuple [_, err1_55, _]) ->
                                   let
                                     arg_56 =
                                       (ErlangTuple
                                          [(ErlangAtom "compile"), err1_55])
                                   in (BIF.erlang__throw__1 [arg_56])
                                 ex_54 -> (EXC.raise ex_54)))
                       lambda_39 [] = (EXC.function_clause unit)
                       lambda_39 args =
                         (EXC.badarity (ErlangFun 0 lambda_39) args)
                     in lambda_39)
              in let
                match_expr_61 = (BIF.erlang__apply__2 [fun_38, ErlangEmptyList])
              in
                case match_expr_61 of
                  (ErlangTuple [fcode2_59, srcpayable_60]) ->
                    let
                      case_62 =
                        (erlps__compare_fate_code__2 [fcode1_37, fcode2_59])
                    in
                      case case_62 of
                        (ErlangAtom "ok") | (weakNEq srcpayable_60 payable_2) ->
                          let   
                            not_67 =
                              (ErlangFun 1
                                 let
                                   lambda_65 [(ErlangAtom "true")] =
                                     (H.make_string "")
                                   lambda_65 [(ErlangAtom "false")] =
                                     (H.make_string " not")
                                   lambda_65 [arg_66] =
                                     (EXC.function_clause unit)
                                   lambda_65 args =
                                     (EXC.badarity (ErlangFun 1 lambda_65) args)
                                 in lambda_65)
                          in let
                            arg_69 =
                              (H.make_string
                                 "Byte code contract is~s payable, but source code contract is~s.\n")
                          in let
                            head_71 =
                              (BIF.erlang__apply__2
                                 [not_67,
                                  (ErlangCons payable_2 ErlangEmptyList)])
                          in let
                            head_75 =
                              (BIF.erlang__apply__2
                                 [not_67,
                                  (ErlangCons srcpayable_60 ErlangEmptyList)])
                          in let
                            arg_68 =
                              (BIF.do_remote_fun_call "Io.Lib"
                                 "erlps__format__2"
                                 [arg_69,
                                  (ErlangCons head_71
                                     (ErlangCons head_75 ErlangEmptyList))])
                          in
                            (BIF.erlang__apply__2
                               [fail_14, (ErlangCons arg_68 ErlangEmptyList)])
                        (ErlangAtom "ok") -> (ErlangAtom "ok")
                        (ErlangTuple [(ErlangAtom "error"), why_80]) ->
                          let   
                            arg_82 =
                              (H.make_string
                                 "Byte code does not match source code.\n~s")
                          in let
                            arg_81 =
                              (BIF.do_remote_fun_call "Io.Lib"
                                 "erlps__format__2"
                                 [arg_82, (ErlangCons why_80 ErlangEmptyList)])
                          in
                            (BIF.erlang__apply__2
                               [fail_14, (ErlangCons arg_81 ErlangEmptyList)])
                        something_else -> (EXC.case_clause something_else)
                  _ -> (EXC.badmatch match_expr_61))
           (\ ex_88 ->
              case ex_88 of
                (ErlangTuple [(ErlangAtom "throw"),
                              (ErlangTuple [(ErlangAtom "deserialize"), _]),
                              _]) ->
                  let arg_90 = (H.make_string "Invalid byte code")
                  in
                    (BIF.erlang__apply__2
                       [fail_14, (ErlangCons arg_90 ErlangEmptyList)])
                (ErlangTuple [(ErlangAtom "throw"),
                              (ErlangTuple [(ErlangAtom "compile"),
                                            (ErlangTuple [(ErlangAtom "error"),
                                                          errs_92])]),
                              _]) ->
                  (ErlangTuple [(ErlangAtom "error"), errs_92])
                ex_89 -> (EXC.raise ex_89)))
      something_else -> (EXC.case_clause something_else)
erlps__validate_byte_code__3 [arg_95, arg_96, arg_97] =
  (EXC.function_clause unit)
erlps__validate_byte_code__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__compare_fate_code__2 :: ErlangFun
erlps__compare_fate_code__2 [fcode1_0, fcode2_1] =
  let   
    funs1_3 =
      (BIF.do_remote_fun_call "Aeb.Fate.Code" "erlps__functions__1"
         [fcode1_0])
  in let
    funs2_5 =
      (BIF.do_remote_fun_call "Aeb.Fate.Code" "erlps__functions__1"
         [fcode2_1])
  in let
    syms1_7 =
      (BIF.do_remote_fun_call "Aeb.Fate.Code" "erlps__symbols__1"
         [fcode1_0])
  in let
    syms2_9 =
      (BIF.do_remote_fun_call "Aeb.Fate.Code" "erlps__symbols__1"
         [fcode2_1])
  in let funhashes1_11 = (BIF.maps__keys__1 [funs1_3])
  in let funhashes2_13 = (BIF.maps__keys__1 [funs2_5])
  in let
    case_14 = (BIF.erlang__op_eq [funhashes1_11, funhashes2_13])
  in
    case case_14 of
      (ErlangAtom "false") ->
        let   
          lc_src_17 =
            (BIF.erlang__op_unAppend [funhashes1_11, funhashes2_13])
        in let
          inbytecode_26 =
            (H.flmap
               (\ lc_21 ->
                  let    arg_23 = (BIF.maps__get__2 [lc_21, syms1_7])
                  in let lc_ret_22 = (BIF.erlang__binary_to_list__1 [arg_23])
                  in (ErlangCons lc_ret_22 ErlangEmptyList))
               lc_src_17)
        in let
          lc_src_27 =
            (BIF.erlang__op_unAppend [funhashes2_13, funhashes1_11])
        in let
          insourcecode_36 =
            (H.flmap
               (\ lc_31 ->
                  let    arg_33 = (BIF.maps__get__2 [lc_31, syms2_9])
                  in let lc_ret_32 = (BIF.erlang__binary_to_list__1 [arg_33])
                  in (ErlangCons lc_ret_32 ErlangEmptyList))
               lc_src_27)
        in let
          cond_38 = (BIF.erlang__op_neq [inbytecode_26, ErlangEmptyList])
        in let
          lop_37 =
            case cond_38 of
              (ErlangAtom "true") ->
                let   
                  arg_42 =
                    (H.make_string
                       "- Functions in the byte code but not in the source code:\n    ~s\n")
                in let arg_46 = (H.make_string ", ")
                in let
                  head_44 =
                    (BIF.do_remote_fun_call "String" "erlps__join__2"
                       [inbytecode_26, arg_46])
                in let
                  lc_ret_41 =
                    (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
                       [arg_42, (ErlangCons head_44 ErlangEmptyList)])
                in (ErlangCons lc_ret_41 ErlangEmptyList)
              _ -> ErlangEmptyList
        in let
          cond_49 = (BIF.erlang__op_neq [insourcecode_36, ErlangEmptyList])
        in let
          rop_48 =
            case cond_49 of
              (ErlangAtom "true") ->
                let   
                  arg_53 =
                    (H.make_string
                       "- Functions in the source code but not in the byte code:\n    ~s\n")
                in let arg_57 = (H.make_string ", ")
                in let
                  head_55 =
                    (BIF.do_remote_fun_call "String" "erlps__join__2"
                       [insourcecode_36, arg_57])
                in let
                  lc_ret_52 =
                    (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
                       [arg_53, (ErlangCons head_55 ErlangEmptyList)])
                in (ErlangCons lc_ret_52 ErlangEmptyList)
              _ -> ErlangEmptyList
        in let msg_59 = (BIF.erlang__op_append [lop_37, rop_48])
        in (ErlangTuple [(ErlangAtom "error"), msg_59])
      (ErlangAtom "true") ->
        let    arg_65 = (BIF.maps__to_list__1 [funs1_3])
        in let arg_67 = (BIF.maps__to_list__1 [funs2_5])
        in let
          lc_src_64 =
            (BIF.do_remote_fun_call "Lists" "erlps__zip__2" [arg_65, arg_67])
        in let
          arg_63 =
            (H.flmap
               (\ lc_72 ->
                  case lc_72 of
                    (ErlangTuple [(ErlangTuple [h_69, fun1_70]),
                                  (ErlangTuple [_, fun2_71])]) ->
                      let    arg_74 = (BIF.maps__get__2 [h_69, syms1_7])
                      in let
                        lc_ret_73 =
                          (erlps__compare_fate_fun__3
                             [arg_74, fun1_70, fun2_71])
                      in (ErlangCons lc_ret_73 ErlangEmptyList)
                    _ -> ErlangEmptyList)
               lc_src_64)
        in let
          case_62 =
            (BIF.do_remote_fun_call "Lists" "erlps__append__1" [arg_63])
        in
          case case_62 of
            (ErlangEmptyList) -> (ErlangAtom "ok")
            errs_79 -> (ErlangTuple [(ErlangAtom "error"), errs_79])
      something_else -> (EXC.case_clause something_else)
erlps__compare_fate_code__2 [arg_82, arg_83] =
  (EXC.function_clause unit)
erlps__compare_fate_code__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__compare_fate_fun__3 :: ErlangFun
erlps__compare_fate_fun__3 [_name_0, fun_1, fun_2]
  | (fun_2 == fun_1) =
  ErlangEmptyList
erlps__compare_fate_fun__3 [name_0,
                            (ErlangTuple [attr_1, type_2, _]),
                            (ErlangTuple [attr_3, type_4, _])]
  | (attr_3 == attr_1)
  , (type_4 == type_2) =
  let   
    arg_6 =
      (H.make_string
         "- The implementation of the function ~s is different.\n")
  in let
    head_5 =
      (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
         [arg_6, (ErlangCons name_0 ErlangEmptyList)])
  in (ErlangCons head_5 ErlangEmptyList)
erlps__compare_fate_fun__3 [name_0,
                            (ErlangTuple [attr1_1, type_2, _]),
                            (ErlangTuple [attr2_3, type_4, _])]
  | (type_4 == type_2) =
  let   
    arg_6 =
      (H.make_string
         "- The attributes of the function ~s differ:\n    Byte code:   ~s\n    Source code: ~s\n")
  in let
    arg_11 =
      (H.flmap
         (\ lc_14 ->
            let lc_ret_15 = (BIF.erlang__atom_to_list__1 [lc_14])
            in (ErlangCons lc_ret_15 ErlangEmptyList))
         attr1_1)
  in let arg_17 = (H.make_string ", ")
  in let
    head_10 =
      (BIF.do_remote_fun_call "String" "erlps__join__2"
         [arg_11, arg_17])
  in let
    arg_20 =
      (H.flmap
         (\ lc_23 ->
            let lc_ret_24 = (BIF.erlang__atom_to_list__1 [lc_23])
            in (ErlangCons lc_ret_24 ErlangEmptyList))
         attr2_3)
  in let arg_26 = (H.make_string ", ")
  in let
    head_19 =
      (BIF.do_remote_fun_call "String" "erlps__join__2"
         [arg_20, arg_26])
  in let
    head_5 =
      (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
         [arg_6,
          (ErlangCons name_0
             (ErlangCons head_10 (ErlangCons head_19 ErlangEmptyList)))])
  in (ErlangCons head_5 ErlangEmptyList)
erlps__compare_fate_fun__3 [name_0,
                            (ErlangTuple [_, type1_1, _]),
                            (ErlangTuple [_, type2_2, _])]
  =
  let   
    arg_4 =
      (H.make_string
         "- The type of the function ~s differs:\n    Byte code:   ~s\n    Source code: ~s\n")
  in let head_8 = (erlps__pp_fate_sig__1 [type1_1])
  in let head_11 = (erlps__pp_fate_sig__1 [type2_2])
  in let
    head_3 =
      (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
         [arg_4,
          (ErlangCons name_0
             (ErlangCons head_8 (ErlangCons head_11 ErlangEmptyList)))])
  in (ErlangCons head_3 ErlangEmptyList)
erlps__compare_fate_fun__3 [arg_15, arg_16, arg_17] =
  (EXC.function_clause unit)
erlps__compare_fate_fun__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__pp_fate_sig__1 :: ErlangFun
erlps__pp_fate_sig__1 [(ErlangTuple [(ErlangCons arg_0 (ErlangEmptyList)),
                                     res_1])]
  =
  let    arg_2 = (H.make_string "~s => ~s")
  in let head_4 = (erlps__pp_fate_type__1 [arg_0])
  in let head_7 = (erlps__pp_fate_type__1 [res_1])
  in
    (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
       [arg_2, (ErlangCons head_4 (ErlangCons head_7 ErlangEmptyList))])
erlps__pp_fate_sig__1 [(ErlangTuple [args_0, res_1])] =
  let    arg_2 = (H.make_string "(~s) => ~s")
  in let
    arg_5 =
      (H.flmap
         (\ lc_8 ->
            let lc_ret_9 = (erlps__pp_fate_type__1 [lc_8])
            in (ErlangCons lc_ret_9 ErlangEmptyList))
         args_0)
  in let arg_11 = (H.make_string ", ")
  in let
    head_4 =
      (BIF.do_remote_fun_call "String" "erlps__join__2"
         [arg_5, arg_11])
  in let head_13 = (erlps__pp_fate_type__1 [res_1])
  in
    (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
       [arg_2,
        (ErlangCons head_4 (ErlangCons head_13 ErlangEmptyList))])
erlps__pp_fate_sig__1 [arg_16] = (EXC.function_clause unit)
erlps__pp_fate_sig__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__pp_fate_type__1 :: ErlangFun
erlps__pp_fate_type__1 [t_0] =
  let arg_1 = (H.make_string "~w")
  in
    (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
       [arg_1, (ErlangCons t_0 ErlangEmptyList)])
erlps__pp_fate_type__1 [arg_5] = (EXC.function_clause unit)
erlps__pp_fate_type__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__sophia_type_to_typerep__1 :: ErlangFun
erlps__sophia_type_to_typerep__1 [string_0] =
  let   
    arg_1 =
      (BIF.do_remote_fun_call "Aeso.Parser" "erlps__type__0" [])
  in let
    ast_3 =
      (BIF.do_remote_fun_call "Aeso.Parser" "erlps__run_parser__2"
         [arg_1, string_0])
  in
    (EXC.tryOfCatch
       (\ _ ->
          (BIF.do_remote_fun_call "Aeso.Ast.To.Icode"
             "erlps__ast_typerep__1" [ast_3]))
       (\ of_5 -> (ErlangTuple [(ErlangAtom "ok"), of_5]))
       (\ ex_6 ->
          case ex_6 of
            (ErlangTuple [_, _, _]) ->
              (ErlangTuple [(ErlangAtom "error"), (ErlangAtom "bad_type")])
            ex_7 -> (EXC.raise ex_7)))
erlps__sophia_type_to_typerep__1 [arg_13] =
  (EXC.function_clause unit)
erlps__sophia_type_to_typerep__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__parse__2 :: ErlangFun
erlps__parse__2 [text_0, options_1] =
  let arg_3 = (BIF.do_remote_fun_call "Sets" "erlps__new__0" [])
  in (erlps__parse__3 [text_0, arg_3, options_1])
erlps__parse__2 [arg_5, arg_6] = (EXC.function_clause unit)
erlps__parse__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__parse__3 :: ErlangFun
erlps__parse__3 [text_0, included_1, options_2] =
  (BIF.do_remote_fun_call "Aeso.Parser" "erlps__string__3"
     [text_0, included_1, options_2])
erlps__parse__3 [arg_6, arg_7, arg_8] =
  (EXC.function_clause unit)
erlps__parse__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__read_contract__1 :: ErlangFun
erlps__read_contract__1 [name_0] =
  (BIF.do_remote_fun_call "File" "erlps__read_file__1" [name_0])
erlps__read_contract__1 [arg_2] = (EXC.function_clause unit)
erlps__read_contract__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)
