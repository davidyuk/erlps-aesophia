module Jsx.Decoder(erlps__decoder__3, erlps__resume__6) where
{-
This file has been autogenerated
DO NOT EDIT - Your changes WILL be overwritten
Use this code at your own risk - the authors are just a mischievous raccoon and a haskell devote
Erlscripten v0.2.0
-}

import Prelude
import Data.BigInt as DBI
import Data.Array as DA
import Data.Maybe as DM
import Data.Map as Map
import Data.Tuple as DT
import Erlang.Builtins as BIF
import Erlang.Binary as BIN
import Erlang.Helpers
import Erlang.Exception as EXC
import Erlang.Type
import Partial.Unsafe (unsafePartial)


erlps__decoder__3 :: ErlangFun
erlps__decoder__3 [handler_0, state_1, config_2] =
  ErlangFun 1
    (let
       lambda_3 [json_5] =
         let   
           tup_el_9 =
             BIF.erlang__apply__3
               [handler_0, ErlangAtom "init",
                ErlangCons state_1 ErlangEmptyList]
         in let arg_7 = ErlangTuple [handler_0, tup_el_9]
         in let
           arg_16 =
             BIF.do_remote_fun_call "Jsx.Config" "erlps__parse_config__1"
               [config_2]
         in erlps__start__4 [json_5, arg_7, ErlangEmptyList, arg_16]
       lambda_3 [arg_4] = EXC.function_clause unit
       lambda_3 args = EXC.badarity (ErlangFun 1 lambda_3) args
     in lambda_3)
erlps__decoder__3 [arg_18, arg_19, arg_20] =
  EXC.function_clause unit
erlps__decoder__3 args =
  EXC.badarity (ErlangFun 3 erlps__decoder__3) args

erlps__resume__6 :: ErlangFun
erlps__resume__6 [rest_0, state_1, handler_2, acc_3, stack_4,
                  config_5]
  =
  case state_1 of
    (ErlangAtom "start") ->
      erlps__start__4 [rest_0, handler_2, stack_4, config_5]
    (ErlangAtom "value") ->
      erlps__value__4 [rest_0, handler_2, stack_4, config_5]
    (ErlangAtom "object") ->
      erlps__object__4 [rest_0, handler_2, stack_4, config_5]
    (ErlangAtom "array") ->
      erlps__array__4 [rest_0, handler_2, stack_4, config_5]
    (ErlangAtom "colon") ->
      erlps__colon__4 [rest_0, handler_2, stack_4, config_5]
    (ErlangAtom "key") ->
      erlps__key__4 [rest_0, handler_2, stack_4, config_5]
    (ErlangAtom "string") ->
      erlps__string__5 [rest_0, handler_2, acc_3, stack_4, config_5]
    (ErlangAtom "number") ->
      erlps__number__5 [rest_0, handler_2, acc_3, stack_4, config_5]
    (ErlangAtom "true") ->
      erlps__true__4 [rest_0, handler_2, stack_4, config_5]
    (ErlangAtom "false") ->
      erlps__false__4 [rest_0, handler_2, stack_4, config_5]
    (ErlangAtom "null") ->
      erlps__null__4 [rest_0, handler_2, stack_4, config_5]
    (ErlangAtom "comment") ->
      erlps__comment__5 [rest_0, handler_2, acc_3, stack_4, config_5]
    (ErlangAtom "maybe_done") ->
      erlps__maybe_done__4 [rest_0, handler_2, stack_4, config_5]
    (ErlangAtom "done") ->
      erlps__done__4 [rest_0, handler_2, stack_4, config_5]
    something_else -> EXC.case_clause something_else
erlps__resume__6 [arg_66, arg_67, arg_68, arg_69, arg_70, arg_71]
  =
  EXC.function_clause unit
erlps__resume__6 args =
  EXC.badarity (ErlangFun 6 erlps__resume__6) args

erlps__incomplete__5 :: ErlangFun
erlps__incomplete__5 [state_0, rest_1, handler_2, stack_3,
                      config_4@(ErlangTuple [(ErlangAtom "config"), _, _, _, _,
                                             _, _, _, _, _,
                                             (ErlangAtom "false"), _, _, _, _,
                                             _])]
  =
  let
    case_5 =
      case config_4 of
        (ErlangTuple arr_8) | (DM.Just field_7) <- (arr_8 DA.!! 14) ->
          field_7
        _ -> EXC.badrecord (ErlangAtom "config")
  in
    case case_5 of
      (ErlangAtom "false") ->
        BIF.erlang__error__1 [ErlangAtom "badarg"]
      f_10 ->
        let   
          arg_12 =
            ErlangTuple
              [ErlangAtom "decoder", state_0, handler_2, ErlangAtom "null",
               stack_3]
        in let
          arg_18 =
            BIF.do_remote_fun_call "Jsx.Config" "erlps__config_to_list__1"
              [config_4]
        in
          BIF.erlang__apply__2
            [f_10,
             ErlangCons rest_1
               (ErlangCons arg_12 (ErlangCons arg_18 ErlangEmptyList))]
erlps__incomplete__5 [state_0, rest_1, handler_2, stack_3,
                      config_4]
  =
  erlps__incomplete__6
    [state_0, rest_1, handler_2, ErlangAtom "unused", stack_3,
     config_4]
erlps__incomplete__5 [arg_11, arg_12, arg_13, arg_14, arg_15] =
  EXC.function_clause unit
erlps__incomplete__5 args =
  EXC.badarity (ErlangFun 5 erlps__incomplete__5) args

erlps__incomplete__6 :: ErlangFun
erlps__incomplete__6 [state_0, rest_1, handler_2, acc_3, stack_4,
                      config_5@(ErlangTuple [(ErlangAtom "config"), _, _, _, _,
                                             _, _, _, _, _,
                                             (ErlangAtom "false"), _, _, _, _,
                                             _])]
  =
  let
    case_6 =
      case config_5 of
        (ErlangTuple arr_9) | (DM.Just field_8) <- (arr_9 DA.!! 14) ->
          field_8
        _ -> EXC.badrecord (ErlangAtom "config")
  in
    case case_6 of
      (ErlangAtom "false") ->
        BIF.erlang__error__1 [ErlangAtom "badarg"]
      f_11 ->
        let   
          arg_13 =
            ErlangTuple
              [ErlangAtom "decoder", state_0, handler_2, acc_3, stack_4]
        in let
          arg_19 =
            BIF.do_remote_fun_call "Jsx.Config" "erlps__config_to_list__1"
              [config_5]
        in
          BIF.erlang__apply__2
            [f_11,
             ErlangCons rest_1
               (ErlangCons arg_13 (ErlangCons arg_19 ErlangEmptyList))]
erlps__incomplete__6 [state_0, rest_1, handler_2, acc_3, stack_4,
                      config_5@(ErlangTuple [(ErlangAtom "config"), _, _, _, _,
                                             _, _, _, _, _, _, _, _, _, _,
                                             (ErlangAtom "false")])]
  =
  let
    tup_el_7 =
      ErlangFun 1
        (let
           lambda_8 [stream_10] | isEBinary stream_10 =
             let
               arg_11 =
                 ErlangBinary
                   (BIN.concat
                      [BIN.binPrefix rest_1 (BIN.packedSize rest_1) 8,
                       BIN.binPrefix stream_10 (BIN.packedSize stream_10) 8])
             in
               erlps__resume__6
                 [arg_11, state_0, handler_2, acc_3, stack_4, config_5]
           lambda_8 [end_19]
             | (weakEq end_19 (ErlangAtom "end_stream")) ||
                 (weakEq end_19 (ErlangAtom "end_json")) =
             let    bin_el_23 = toErl 32
             in let
               arg_21 =
                 ErlangBinary
                   (BIN.concat
                      [BIN.binPrefix rest_1 (BIN.packedSize rest_1) 8,
                       BIN.fromInt bin_el_23 (toErl 8) 1 BIN.Big])
             in let
               arg_28 =
                 case config_5 of
                   (ErlangTuple [(ErlangAtom "config"), dirty_strings_31,
                                 escaped_forward_slashes_32, escaped_strings_33,
                                 multi_term_34, strict_comments_35,
                                 strict_commas_36, strict_utf8_37,
                                 strict_single_quotes_38, strict_escapes_39,
                                 stream_40, return_tail_41, uescape_42,
                                 unescaped_jsonp_43, error_handler_44,
                                 incomplete_handler_45]) ->
                     ErlangTuple
                       [ErlangAtom "config", dirty_strings_31,
                        escaped_forward_slashes_32, escaped_strings_33,
                        multi_term_34, strict_comments_35, strict_commas_36,
                        strict_utf8_37, strict_single_quotes_38,
                        strict_escapes_39, ErlangAtom "false", return_tail_41,
                        uescape_42, unescaped_jsonp_43, error_handler_44,
                        incomplete_handler_45]
                   _ -> EXC.badrecord (ErlangAtom "config")
             in let
               case_20 =
                 erlps__resume__6
                   [arg_21, state_0, handler_2, acc_3, stack_4, arg_28]
             in
               case case_20 of
                 (ErlangTuple [(ErlangAtom "incomplete"), _]) ->
                   let
                     case_46 =
                       case config_5 of
                         (ErlangTuple arr_49) | (DM.Just field_48) <-
                                                  (arr_49 DA.!! 14) ->
                           field_48
                         _ -> EXC.badrecord (ErlangAtom "config")
                   in
                     case case_46 of
                       (ErlangAtom "false") ->
                         BIF.erlang__error__1 [ErlangAtom "badarg"]
                       f_51 ->
                         let   
                           arg_53 =
                             ErlangTuple
                               [ErlangAtom "decoder", state_0, handler_2, acc_3,
                                stack_4]
                         in let
                           arg_59 =
                             BIF.do_remote_fun_call "Jsx.Config"
                               "erlps__config_to_list__1" [config_5]
                         in
                           BIF.erlang__apply__2
                             [f_51,
                              ErlangCons rest_1
                                (ErlangCons arg_53
                                   (ErlangCons arg_59 ErlangEmptyList))]
                 else_62 -> else_62
           lambda_8 [arg_9] = EXC.function_clause unit
           lambda_8 args = EXC.badarity (ErlangFun 1 lambda_8) args
         in lambda_8)
  in ErlangTuple [ErlangAtom "incomplete", tup_el_7]
erlps__incomplete__6 [state_0, rest_1, handler_2, acc_3, stack_4,
                      config_6@(ErlangTuple [(ErlangAtom "config"), _, _, _, _,
                                             _, _, _, _, _, _, _, _, _, _,
                                             f_5])]
  =
  let   
    arg_8 =
      ErlangTuple
        [ErlangAtom "decoder", state_0, handler_2, acc_3, stack_4]
  in let
    arg_14 =
      BIF.do_remote_fun_call "Jsx.Config" "erlps__config_to_list__1"
        [config_6]
  in
    BIF.erlang__apply__2
      [f_5,
       ErlangCons rest_1
         (ErlangCons arg_8 (ErlangCons arg_14 ErlangEmptyList))]
erlps__incomplete__6 [arg_17, arg_18, arg_19, arg_20, arg_21,
                      arg_22]
  =
  EXC.function_clause unit
erlps__incomplete__6 args =
  EXC.badarity (ErlangFun 6 erlps__incomplete__6) args

erlps__handle_event__3 :: ErlangFun
erlps__handle_event__3 [event_0,
                        (ErlangTuple [handler_1, state_2]), _config_3]
  =
  let
    tup_el_5 =
      BIF.erlang__apply__3
        [handler_1, ErlangAtom "handle_event",
         ErlangCons event_0 (ErlangCons state_2 ErlangEmptyList)]
  in ErlangTuple [handler_1, tup_el_5]
erlps__handle_event__3 [arg_13, arg_14, arg_15] =
  EXC.function_clause unit
erlps__handle_event__3 args =
  EXC.badarity (ErlangFun 3 erlps__handle_event__3) args

erlps__start__4 :: ErlangFun
erlps__start__4 [(ErlangBinary binSeg_0), handler_13, stack_14,
                 config_15]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 239)
  , (ErlangInt size_4) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      (BIN.chopInt bin_2 size_4 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_6) == (toErl 187)
  , (ErlangInt size_7) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_9) bin_8) <-
      (BIN.chopInt bin_5 size_7 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_9) == (toErl 191)
  , (ErlangInt size_10) <- (BIN.size bin_8)
  , (BIN.Ok rest_12 bin_11) <- (BIN.chopBin bin_8 size_10 8)
  , BIN.empty bin_11 =
  erlps__value__4 [rest_12, handler_13, stack_14, config_15]
erlps__start__4 [(ErlangBinary binSeg_0), handler_7, stack_8,
                 config_9]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 239)
  , (ErlangInt size_4) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      (BIN.chopInt bin_2 size_4 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_6) == (toErl 187)
  , BIN.empty bin_5 =
  let    bin_el_12 = toErl 239
  in let bin_el_13 = toErl 187
  in let
    arg_11 =
      ErlangBinary
        (BIN.concat
           [BIN.fromInt bin_el_12 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_13 (toErl 8) 1 BIN.Big])
  in
    erlps__incomplete__5
      [ErlangAtom "start", arg_11, handler_7, stack_8, config_9]
erlps__start__4 [(ErlangBinary binSeg_0), handler_4, stack_5,
                 config_6]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 239)
  , BIN.empty bin_2 =
  let    bin_el_9 = toErl 239
  in let
    arg_8 = ErlangBinary (BIN.fromInt bin_el_9 (toErl 8) 1 BIN.Big)
  in
    erlps__incomplete__5
      [ErlangAtom "start", arg_8, handler_4, stack_5, config_6]
erlps__start__4 [(ErlangBinary binEnd_0), handler_1, stack_2,
                 config_3]
  | BIN.empty binEnd_0 =
  let arg_5 = ErlangBinary (BIN.concat [])
  in
    erlps__incomplete__5
      [ErlangAtom "start", arg_5, handler_1, stack_2, config_3]
erlps__start__4 [bin_0, handler_1, stack_2, config_3] =
  erlps__value__4 [bin_0, handler_1, stack_2, config_3]
erlps__start__4 [arg_8, arg_9, arg_10, arg_11] =
  EXC.function_clause unit
erlps__start__4 args =
  EXC.badarity (ErlangFun 4 erlps__start__4) args

erlps__value__4 :: ErlangFun
erlps__value__4 [(ErlangBinary binSeg_0), handler_7, stack_8,
                 config_9]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 34)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  erlps__string__4 [rest_6, handler_7, stack_8, config_9]
erlps__value__4 [(ErlangBinary binSeg_0), handler_7, stack_8,
                 config_9]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 32)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  erlps__value__4 [rest_6, handler_7, stack_8, config_9]
erlps__value__4 [(ErlangBinary binSeg_0), handler_7, stack_8,
                 config_9]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 123)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let
    arg_11 =
      erlps__handle_event__3
        [ErlangAtom "start_object", handler_7, config_9]
  in
    erlps__object__4
      [rest_6, arg_11, ErlangCons (ErlangAtom "key") stack_8, config_9]
erlps__value__4 [(ErlangBinary binSeg_0), handler_7, stack_8,
                 config_9]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 91)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let
    arg_11 =
      erlps__handle_event__3
        [ErlangAtom "start_array", handler_7, config_9]
  in
    erlps__array__4
      [rest_6, arg_11, ErlangCons (ErlangAtom "array") stack_8,
       config_9]
erlps__value__4 [(ErlangBinary binSeg_0), handler_16, stack_17,
                 config_18]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 116)
  , (ErlangInt size_4) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      (BIN.chopInt bin_2 size_4 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_6) == (toErl 114)
  , (ErlangInt size_7) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_9) bin_8) <-
      (BIN.chopInt bin_5 size_7 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_9) == (toErl 117)
  , (ErlangInt size_10) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_12) bin_11) <-
      (BIN.chopInt bin_8 size_10 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_12) == (toErl 101)
  , (ErlangInt size_13) <- (BIN.size bin_11)
  , (BIN.Ok rest_15 bin_14) <- (BIN.chopBin bin_11 size_13 8)
  , BIN.empty bin_14 =
  let   
    arg_21 = ErlangTuple [ErlangAtom "literal", ErlangAtom "true"]
  in let
    arg_20 = erlps__handle_event__3 [arg_21, handler_16, config_18]
  in erlps__maybe_done__4 [rest_15, arg_20, stack_17, config_18]
erlps__value__4 [(ErlangBinary binSeg_0), handler_19, stack_20,
                 config_21]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 102)
  , (ErlangInt size_4) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      (BIN.chopInt bin_2 size_4 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_6) == (toErl 97)
  , (ErlangInt size_7) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_9) bin_8) <-
      (BIN.chopInt bin_5 size_7 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_9) == (toErl 108)
  , (ErlangInt size_10) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_12) bin_11) <-
      (BIN.chopInt bin_8 size_10 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_12) == (toErl 115)
  , (ErlangInt size_13) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_15) bin_14) <-
      (BIN.chopInt bin_11 size_13 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_15) == (toErl 101)
  , (ErlangInt size_16) <- (BIN.size bin_14)
  , (BIN.Ok rest_18 bin_17) <- (BIN.chopBin bin_14 size_16 8)
  , BIN.empty bin_17 =
  let   
    arg_24 = ErlangTuple [ErlangAtom "literal", ErlangAtom "false"]
  in let
    arg_23 = erlps__handle_event__3 [arg_24, handler_19, config_21]
  in erlps__maybe_done__4 [rest_18, arg_23, stack_20, config_21]
erlps__value__4 [(ErlangBinary binSeg_0), handler_16, stack_17,
                 config_18]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 110)
  , (ErlangInt size_4) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      (BIN.chopInt bin_2 size_4 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_6) == (toErl 117)
  , (ErlangInt size_7) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_9) bin_8) <-
      (BIN.chopInt bin_5 size_7 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_9) == (toErl 108)
  , (ErlangInt size_10) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_12) bin_11) <-
      (BIN.chopInt bin_8 size_10 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_12) == (toErl 108)
  , (ErlangInt size_13) <- (BIN.size bin_11)
  , (BIN.Ok rest_15 bin_14) <- (BIN.chopBin bin_11 size_13 8)
  , BIN.empty bin_14 =
  let   
    arg_21 = ErlangTuple [ErlangAtom "literal", ErlangAtom "null"]
  in let
    arg_20 = erlps__handle_event__3 [arg_21, handler_16, config_18]
  in erlps__maybe_done__4 [rest_15, arg_20, stack_17, config_18]
erlps__value__4 [(ErlangBinary binSeg_0), handler_7, stack_8,
                 config_9]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 48)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let head_13 = toErl 48
  in
    erlps__number__5
      [rest_6, handler_7, ErlangCons head_13 ErlangEmptyList,
       ErlangCons (ErlangAtom "zero") stack_8, config_9]
erlps__value__4 [(ErlangBinary binSeg_0), handler_7, stack_8,
                 config_9]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 49)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let head_13 = toErl 49
  in
    erlps__number__5
      [rest_6, handler_7, ErlangCons head_13 ErlangEmptyList,
       ErlangCons (ErlangAtom "integer") stack_8, config_9]
erlps__value__4 [(ErlangBinary binSeg_0), handler_7, stack_8,
                 config_9]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 50)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let head_13 = toErl 50
  in
    erlps__number__5
      [rest_6, handler_7, ErlangCons head_13 ErlangEmptyList,
       ErlangCons (ErlangAtom "integer") stack_8, config_9]
erlps__value__4 [(ErlangBinary binSeg_0), handler_7, stack_8,
                 config_9]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 51)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let head_13 = toErl 51
  in
    erlps__number__5
      [rest_6, handler_7, ErlangCons head_13 ErlangEmptyList,
       ErlangCons (ErlangAtom "integer") stack_8, config_9]
erlps__value__4 [(ErlangBinary binSeg_0), handler_7, stack_8,
                 config_9]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 52)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let head_13 = toErl 52
  in
    erlps__number__5
      [rest_6, handler_7, ErlangCons head_13 ErlangEmptyList,
       ErlangCons (ErlangAtom "integer") stack_8, config_9]
erlps__value__4 [(ErlangBinary binSeg_0), handler_7, stack_8,
                 config_9]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 53)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let head_13 = toErl 53
  in
    erlps__number__5
      [rest_6, handler_7, ErlangCons head_13 ErlangEmptyList,
       ErlangCons (ErlangAtom "integer") stack_8, config_9]
erlps__value__4 [(ErlangBinary binSeg_0), handler_7, stack_8,
                 config_9]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 54)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let head_13 = toErl 54
  in
    erlps__number__5
      [rest_6, handler_7, ErlangCons head_13 ErlangEmptyList,
       ErlangCons (ErlangAtom "integer") stack_8, config_9]
erlps__value__4 [(ErlangBinary binSeg_0), handler_7, stack_8,
                 config_9]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 55)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let head_13 = toErl 55
  in
    erlps__number__5
      [rest_6, handler_7, ErlangCons head_13 ErlangEmptyList,
       ErlangCons (ErlangAtom "integer") stack_8, config_9]
erlps__value__4 [(ErlangBinary binSeg_0), handler_7, stack_8,
                 config_9]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 56)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let head_13 = toErl 56
  in
    erlps__number__5
      [rest_6, handler_7, ErlangCons head_13 ErlangEmptyList,
       ErlangCons (ErlangAtom "integer") stack_8, config_9]
erlps__value__4 [(ErlangBinary binSeg_0), handler_7, stack_8,
                 config_9]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 57)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let head_13 = toErl 57
  in
    erlps__number__5
      [rest_6, handler_7, ErlangCons head_13 ErlangEmptyList,
       ErlangCons (ErlangAtom "integer") stack_8, config_9]
erlps__value__4 [(ErlangBinary binSeg_0), handler_7, stack_8,
                 config_9]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 45)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let head_13 = toErl 45
  in
    erlps__number__5
      [rest_6, handler_7, ErlangCons head_13 ErlangEmptyList,
       ErlangCons (ErlangAtom "negative") stack_8, config_9]
erlps__value__4 [(ErlangBinary binSeg_0), handler_7, stack_8,
                 config_9]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 10)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  erlps__value__4 [rest_6, handler_7, stack_8, config_9]
erlps__value__4 [(ErlangBinary binSeg_0), handler_7, stack_8,
                 config_9]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 116)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  erlps__true__4 [rest_6, handler_7, stack_8, config_9]
erlps__value__4 [(ErlangBinary binSeg_0), handler_7, stack_8,
                 config_9]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 102)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  erlps__false__4 [rest_6, handler_7, stack_8, config_9]
erlps__value__4 [(ErlangBinary binSeg_0), handler_7, stack_8,
                 config_9]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 110)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  erlps__null__4 [rest_6, handler_7, stack_8, config_9]
erlps__value__4 [(ErlangBinary binSeg_0), handler_7, stack_8,
                 config_9]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 9)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  erlps__value__4 [rest_6, handler_7, stack_8, config_9]
erlps__value__4 [(ErlangBinary binSeg_0), handler_7, stack_8,
                 config_9]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 13)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  erlps__value__4 [rest_6, handler_7, stack_8, config_9]
erlps__value__4 [(ErlangBinary binSeg_0), handler_7, stack_8,
                 config_9@(ErlangTuple [(ErlangAtom "config"), _, _, _, _, _, _,
                                        _, (ErlangAtom "false"), _, _, _, _, _,
                                        _, _])]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 39)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  erlps__string__4
    [rest_6, handler_7,
     ErlangCons (ErlangAtom "singlequote") stack_8, config_9]
erlps__value__4 [rest_4@(ErlangBinary binSeg_0), handler_5,
                 stack_6,
                 config_7@(ErlangTuple [(ErlangAtom "config"), _, _, _, _, _,
                                        (ErlangAtom "false"), _, _, _, _, _, _,
                                        _, _, _])]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 93) =
  erlps__maybe_done__4 [rest_4, handler_5, stack_6, config_7]
erlps__value__4 [(ErlangBinary binSeg_0), handler_7, stack_8,
                 config_9@(ErlangTuple [(ErlangAtom "config"), _, _, _, _,
                                        (ErlangAtom "true"), _, _, _, _, _, _,
                                        _, _, _, _])]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 47)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let
    case_10 =
      case config_9 of
        (ErlangTuple arr_13) | (DM.Just field_12) <- (arr_13 DA.!! 14) ->
          field_12
        _ -> EXC.badrecord (ErlangAtom "config")
  in
    case case_10 of
      (ErlangAtom "false") ->
        BIF.erlang__error__1 [ErlangAtom "badarg"]
      f_15 ->
        let    bin_el_17 = toErl 47
        in let
          arg_16 =
            ErlangBinary
              (BIN.concat
                 [BIN.fromInt bin_el_17 (toErl 8) 1 BIN.Big,
                  BIN.binPrefix rest_6 (BIN.packedSize rest_6) 8])
        in let
          arg_19 =
            ErlangTuple
              [ErlangAtom "decoder", ErlangAtom "value", handler_7,
               ErlangAtom "null", stack_8]
        in let
          arg_25 =
            BIF.do_remote_fun_call "Jsx.Config" "erlps__config_to_list__1"
              [config_9]
        in
          BIF.erlang__apply__2
            [f_15,
             ErlangCons arg_16
               (ErlangCons arg_19 (ErlangCons arg_25 ErlangEmptyList))]
erlps__value__4 [(ErlangBinary binSeg_0), handler_10, stack_11,
                 config_12]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 47)
  , (ErlangInt size_4) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      (BIN.chopInt bin_2 size_4 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_6) == (toErl 47)
  , (ErlangInt size_7) <- (BIN.size bin_5)
  , (BIN.Ok rest_9 bin_8) <- (BIN.chopBin bin_5 size_7 8)
  , BIN.empty bin_8 =
  erlps__comment__5
    [rest_9, handler_10, ErlangAtom "value",
     ErlangCons (ErlangAtom "comment") stack_11, config_12]
erlps__value__4 [(ErlangBinary binSeg_0), handler_10, stack_11,
                 config_12]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 47)
  , (ErlangInt size_4) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      (BIN.chopInt bin_2 size_4 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_6) == (toErl 42)
  , (ErlangInt size_7) <- (BIN.size bin_5)
  , (BIN.Ok rest_9 bin_8) <- (BIN.chopBin bin_5 size_7 8)
  , BIN.empty bin_8 =
  erlps__comment__5
    [rest_9, handler_10, ErlangAtom "value",
     ErlangCons (ErlangAtom "multicomment") stack_11, config_12]
erlps__value__4 [(ErlangBinary binSeg_0), handler_4, stack_5,
                 config_6]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 47)
  , BIN.empty bin_2 =
  let    bin_el_9 = toErl 47
  in let
    arg_8 = ErlangBinary (BIN.fromInt bin_el_9 (toErl 8) 1 BIN.Big)
  in
    erlps__incomplete__5
      [ErlangAtom "value", arg_8, handler_4, stack_5, config_6]
erlps__value__4 [(ErlangBinary binEnd_0), handler_1, stack_2,
                 config_3]
  | BIN.empty binEnd_0 =
  let arg_5 = ErlangBinary (BIN.concat [])
  in
    erlps__incomplete__5
      [ErlangAtom "value", arg_5, handler_1, stack_2, config_3]
erlps__value__4 [bin_0, handler_1, stack_2, config_3] =
  let
    case_4 =
      case config_3 of
        (ErlangTuple arr_7) | (DM.Just field_6) <- (arr_7 DA.!! 14) ->
          field_6
        _ -> EXC.badrecord (ErlangAtom "config")
  in
    case case_4 of
      (ErlangAtom "false") ->
        BIF.erlang__error__1 [ErlangAtom "badarg"]
      f_9 ->
        let   
          arg_11 =
            ErlangTuple
              [ErlangAtom "decoder", ErlangAtom "value", handler_1,
               ErlangAtom "null", stack_2]
        in let
          arg_17 =
            BIF.do_remote_fun_call "Jsx.Config" "erlps__config_to_list__1"
              [config_3]
        in
          BIF.erlang__apply__2
            [f_9,
             ErlangCons bin_0
               (ErlangCons arg_11 (ErlangCons arg_17 ErlangEmptyList))]
erlps__value__4 [arg_20, arg_21, arg_22, arg_23] =
  EXC.function_clause unit
erlps__value__4 args =
  EXC.badarity (ErlangFun 4 erlps__value__4) args

erlps__object__4 :: ErlangFun
erlps__object__4 [(ErlangBinary binSeg_0), handler_7, stack_8,
                  config_9]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 34)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  erlps__string__4 [rest_6, handler_7, stack_8, config_9]
erlps__object__4 [(ErlangBinary binSeg_0), handler_7, stack_8,
                  config_9]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 32)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  erlps__object__4 [rest_6, handler_7, stack_8, config_9]
erlps__object__4 [(ErlangBinary binSeg_0), handler_7,
                  (ErlangCons (ErlangAtom "key") stack_8), config_9]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 125)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let
    arg_11 =
      erlps__handle_event__3
        [ErlangAtom "end_object", handler_7, config_9]
  in erlps__maybe_done__4 [rest_6, arg_11, stack_8, config_9]
erlps__object__4 [(ErlangBinary binSeg_0), handler_7, stack_8,
                  config_9]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 10)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  erlps__object__4 [rest_6, handler_7, stack_8, config_9]
erlps__object__4 [(ErlangBinary binSeg_0), handler_7, stack_8,
                  config_9]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 9)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  erlps__object__4 [rest_6, handler_7, stack_8, config_9]
erlps__object__4 [(ErlangBinary binSeg_0), handler_7, stack_8,
                  config_9]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 13)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  erlps__object__4 [rest_6, handler_7, stack_8, config_9]
erlps__object__4 [(ErlangBinary binSeg_0), handler_7, stack_8,
                  config_9@(ErlangTuple [(ErlangAtom "config"), _, _, _, _, _,
                                         _, _, (ErlangAtom "false"), _, _, _, _,
                                         _, _, _])]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 39)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  erlps__string__4
    [rest_6, handler_7,
     ErlangCons (ErlangAtom "singlequote") stack_8, config_9]
erlps__object__4 [(ErlangBinary binSeg_0), handler_7, stack_8,
                  config_9@(ErlangTuple [(ErlangAtom "config"), _, _, _, _,
                                         (ErlangAtom "true"), _, _, _, _, _, _,
                                         _, _, _, _])]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 47)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let
    case_10 =
      case config_9 of
        (ErlangTuple arr_13) | (DM.Just field_12) <- (arr_13 DA.!! 14) ->
          field_12
        _ -> EXC.badrecord (ErlangAtom "config")
  in
    case case_10 of
      (ErlangAtom "false") ->
        BIF.erlang__error__1 [ErlangAtom "badarg"]
      f_15 ->
        let    bin_el_17 = toErl 47
        in let
          arg_16 =
            ErlangBinary
              (BIN.concat
                 [BIN.fromInt bin_el_17 (toErl 8) 1 BIN.Big,
                  BIN.binPrefix rest_6 (BIN.packedSize rest_6) 8])
        in let
          arg_19 =
            ErlangTuple
              [ErlangAtom "decoder", ErlangAtom "object", handler_7,
               ErlangAtom "null", stack_8]
        in let
          arg_25 =
            BIF.do_remote_fun_call "Jsx.Config" "erlps__config_to_list__1"
              [config_9]
        in
          BIF.erlang__apply__2
            [f_15,
             ErlangCons arg_16
               (ErlangCons arg_19 (ErlangCons arg_25 ErlangEmptyList))]
erlps__object__4 [(ErlangBinary binSeg_0), handler_10, stack_11,
                  config_12]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 47)
  , (ErlangInt size_4) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      (BIN.chopInt bin_2 size_4 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_6) == (toErl 47)
  , (ErlangInt size_7) <- (BIN.size bin_5)
  , (BIN.Ok rest_9 bin_8) <- (BIN.chopBin bin_5 size_7 8)
  , BIN.empty bin_8 =
  erlps__comment__5
    [rest_9, handler_10, ErlangAtom "object",
     ErlangCons (ErlangAtom "comment") stack_11, config_12]
erlps__object__4 [(ErlangBinary binSeg_0), handler_10, stack_11,
                  config_12]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 47)
  , (ErlangInt size_4) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      (BIN.chopInt bin_2 size_4 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_6) == (toErl 42)
  , (ErlangInt size_7) <- (BIN.size bin_5)
  , (BIN.Ok rest_9 bin_8) <- (BIN.chopBin bin_5 size_7 8)
  , BIN.empty bin_8 =
  erlps__comment__5
    [rest_9, handler_10, ErlangAtom "object",
     ErlangCons (ErlangAtom "multicomment") stack_11, config_12]
erlps__object__4 [(ErlangBinary binSeg_0), handler_4, stack_5,
                  config_6]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 47)
  , BIN.empty bin_2 =
  let    bin_el_9 = toErl 47
  in let
    arg_8 = ErlangBinary (BIN.fromInt bin_el_9 (toErl 8) 1 BIN.Big)
  in
    erlps__incomplete__5
      [ErlangAtom "object", arg_8, handler_4, stack_5, config_6]
erlps__object__4 [(ErlangBinary binEnd_0), handler_1, stack_2,
                  config_3]
  | BIN.empty binEnd_0 =
  let arg_5 = ErlangBinary (BIN.concat [])
  in
    erlps__incomplete__5
      [ErlangAtom "object", arg_5, handler_1, stack_2, config_3]
erlps__object__4 [bin_0, handler_1, stack_2, config_3] =
  let
    case_4 =
      case config_3 of
        (ErlangTuple arr_7) | (DM.Just field_6) <- (arr_7 DA.!! 14) ->
          field_6
        _ -> EXC.badrecord (ErlangAtom "config")
  in
    case case_4 of
      (ErlangAtom "false") ->
        BIF.erlang__error__1 [ErlangAtom "badarg"]
      f_9 ->
        let   
          arg_11 =
            ErlangTuple
              [ErlangAtom "decoder", ErlangAtom "object", handler_1,
               ErlangAtom "null", stack_2]
        in let
          arg_17 =
            BIF.do_remote_fun_call "Jsx.Config" "erlps__config_to_list__1"
              [config_3]
        in
          BIF.erlang__apply__2
            [f_9,
             ErlangCons bin_0
               (ErlangCons arg_11 (ErlangCons arg_17 ErlangEmptyList))]
erlps__object__4 [arg_20, arg_21, arg_22, arg_23] =
  EXC.function_clause unit
erlps__object__4 args =
  EXC.badarity (ErlangFun 4 erlps__object__4) args

erlps__array__4 :: ErlangFun
erlps__array__4 [(ErlangBinary binSeg_0), handler_7,
                 (ErlangCons (ErlangAtom "array") stack_8), config_9]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 93)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let
    arg_11 =
      erlps__handle_event__3
        [ErlangAtom "end_array", handler_7, config_9]
  in erlps__maybe_done__4 [rest_6, arg_11, stack_8, config_9]
erlps__array__4 [(ErlangBinary binSeg_0), handler_7, stack_8,
                 config_9]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 32)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  erlps__array__4 [rest_6, handler_7, stack_8, config_9]
erlps__array__4 [(ErlangBinary binSeg_0), handler_7, stack_8,
                 config_9]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 10)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  erlps__array__4 [rest_6, handler_7, stack_8, config_9]
erlps__array__4 [(ErlangBinary binSeg_0), handler_7, stack_8,
                 config_9]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 9)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  erlps__array__4 [rest_6, handler_7, stack_8, config_9]
erlps__array__4 [(ErlangBinary binSeg_0), handler_7, stack_8,
                 config_9]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 13)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  erlps__array__4 [rest_6, handler_7, stack_8, config_9]
erlps__array__4 [(ErlangBinary binSeg_0), handler_7, stack_8,
                 config_9@(ErlangTuple [(ErlangAtom "config"), _, _, _, _,
                                        (ErlangAtom "true"), _, _, _, _, _, _,
                                        _, _, _, _])]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 47)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    bin_el_11 = toErl 47
  in let
    arg_10 =
      ErlangBinary
        (BIN.concat
           [BIN.fromInt bin_el_11 (toErl 8) 1 BIN.Big,
            BIN.binPrefix rest_6 (BIN.packedSize rest_6) 8])
  in erlps__value__4 [arg_10, handler_7, stack_8, config_9]
erlps__array__4 [(ErlangBinary binSeg_0), handler_10, stack_11,
                 config_12]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 47)
  , (ErlangInt size_4) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      (BIN.chopInt bin_2 size_4 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_6) == (toErl 47)
  , (ErlangInt size_7) <- (BIN.size bin_5)
  , (BIN.Ok rest_9 bin_8) <- (BIN.chopBin bin_5 size_7 8)
  , BIN.empty bin_8 =
  erlps__comment__5
    [rest_9, handler_10, ErlangAtom "array",
     ErlangCons (ErlangAtom "comment") stack_11, config_12]
erlps__array__4 [(ErlangBinary binSeg_0), handler_10, stack_11,
                 config_12]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 47)
  , (ErlangInt size_4) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      (BIN.chopInt bin_2 size_4 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_6) == (toErl 42)
  , (ErlangInt size_7) <- (BIN.size bin_5)
  , (BIN.Ok rest_9 bin_8) <- (BIN.chopBin bin_5 size_7 8)
  , BIN.empty bin_8 =
  erlps__comment__5
    [rest_9, handler_10, ErlangAtom "array",
     ErlangCons (ErlangAtom "multicomment") stack_11, config_12]
erlps__array__4 [(ErlangBinary binSeg_0), handler_4, stack_5,
                 config_6]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 47)
  , BIN.empty bin_2 =
  let    bin_el_9 = toErl 47
  in let
    arg_8 = ErlangBinary (BIN.fromInt bin_el_9 (toErl 8) 1 BIN.Big)
  in
    erlps__incomplete__5
      [ErlangAtom "array", arg_8, handler_4, stack_5, config_6]
erlps__array__4 [(ErlangBinary binEnd_0), handler_1, stack_2,
                 config_3]
  | BIN.empty binEnd_0 =
  let arg_5 = ErlangBinary (BIN.concat [])
  in
    erlps__incomplete__5
      [ErlangAtom "array", arg_5, handler_1, stack_2, config_3]
erlps__array__4 [bin_0, handler_1, stack_2, config_3] =
  erlps__value__4 [bin_0, handler_1, stack_2, config_3]
erlps__array__4 [arg_8, arg_9, arg_10, arg_11] =
  EXC.function_clause unit
erlps__array__4 args =
  EXC.badarity (ErlangFun 4 erlps__array__4) args

erlps__colon__4 :: ErlangFun
erlps__colon__4 [(ErlangBinary binSeg_0), handler_7,
                 (ErlangCons (ErlangAtom "key") stack_8), config_9]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 58)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  erlps__value__4
    [rest_6, handler_7, ErlangCons (ErlangAtom "object") stack_8,
     config_9]
erlps__colon__4 [(ErlangBinary binSeg_0), handler_7, stack_8,
                 config_9]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 32)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  erlps__colon__4 [rest_6, handler_7, stack_8, config_9]
erlps__colon__4 [(ErlangBinary binSeg_0), handler_7, stack_8,
                 config_9]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 10)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  erlps__colon__4 [rest_6, handler_7, stack_8, config_9]
erlps__colon__4 [(ErlangBinary binSeg_0), handler_7, stack_8,
                 config_9]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 9)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  erlps__colon__4 [rest_6, handler_7, stack_8, config_9]
erlps__colon__4 [(ErlangBinary binSeg_0), handler_7, stack_8,
                 config_9]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 13)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  erlps__colon__4 [rest_6, handler_7, stack_8, config_9]
erlps__colon__4 [(ErlangBinary binSeg_0), handler_7, stack_8,
                 config_9@(ErlangTuple [(ErlangAtom "config"), _, _, _, _,
                                        (ErlangAtom "true"), _, _, _, _, _, _,
                                        _, _, _, _])]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 47)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let
    case_10 =
      case config_9 of
        (ErlangTuple arr_13) | (DM.Just field_12) <- (arr_13 DA.!! 14) ->
          field_12
        _ -> EXC.badrecord (ErlangAtom "config")
  in
    case case_10 of
      (ErlangAtom "false") ->
        BIF.erlang__error__1 [ErlangAtom "badarg"]
      f_15 ->
        let    bin_el_17 = toErl 47
        in let
          arg_16 =
            ErlangBinary
              (BIN.concat
                 [BIN.fromInt bin_el_17 (toErl 8) 1 BIN.Big,
                  BIN.binPrefix rest_6 (BIN.packedSize rest_6) 8])
        in let
          arg_19 =
            ErlangTuple
              [ErlangAtom "decoder", ErlangAtom "colon", handler_7,
               ErlangAtom "null", stack_8]
        in let
          arg_25 =
            BIF.do_remote_fun_call "Jsx.Config" "erlps__config_to_list__1"
              [config_9]
        in
          BIF.erlang__apply__2
            [f_15,
             ErlangCons arg_16
               (ErlangCons arg_19 (ErlangCons arg_25 ErlangEmptyList))]
erlps__colon__4 [(ErlangBinary binSeg_0), handler_10, stack_11,
                 config_12]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 47)
  , (ErlangInt size_4) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      (BIN.chopInt bin_2 size_4 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_6) == (toErl 47)
  , (ErlangInt size_7) <- (BIN.size bin_5)
  , (BIN.Ok rest_9 bin_8) <- (BIN.chopBin bin_5 size_7 8)
  , BIN.empty bin_8 =
  erlps__comment__5
    [rest_9, handler_10, ErlangAtom "colon",
     ErlangCons (ErlangAtom "comment") stack_11, config_12]
erlps__colon__4 [(ErlangBinary binSeg_0), handler_10, stack_11,
                 config_12]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 47)
  , (ErlangInt size_4) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      (BIN.chopInt bin_2 size_4 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_6) == (toErl 42)
  , (ErlangInt size_7) <- (BIN.size bin_5)
  , (BIN.Ok rest_9 bin_8) <- (BIN.chopBin bin_5 size_7 8)
  , BIN.empty bin_8 =
  erlps__comment__5
    [rest_9, handler_10, ErlangAtom "colon",
     ErlangCons (ErlangAtom "multicomment") stack_11, config_12]
erlps__colon__4 [(ErlangBinary binSeg_0), handler_4, stack_5,
                 config_6]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 47)
  , BIN.empty bin_2 =
  let    bin_el_9 = toErl 47
  in let
    arg_8 = ErlangBinary (BIN.fromInt bin_el_9 (toErl 8) 1 BIN.Big)
  in
    erlps__incomplete__5
      [ErlangAtom "colon", arg_8, handler_4, stack_5, config_6]
erlps__colon__4 [(ErlangBinary binEnd_0), handler_1, stack_2,
                 config_3]
  | BIN.empty binEnd_0 =
  let arg_5 = ErlangBinary (BIN.concat [])
  in
    erlps__incomplete__5
      [ErlangAtom "colon", arg_5, handler_1, stack_2, config_3]
erlps__colon__4 [bin_0, handler_1, stack_2, config_3] =
  let
    case_4 =
      case config_3 of
        (ErlangTuple arr_7) | (DM.Just field_6) <- (arr_7 DA.!! 14) ->
          field_6
        _ -> EXC.badrecord (ErlangAtom "config")
  in
    case case_4 of
      (ErlangAtom "false") ->
        BIF.erlang__error__1 [ErlangAtom "badarg"]
      f_9 ->
        let   
          arg_11 =
            ErlangTuple
              [ErlangAtom "decoder", ErlangAtom "colon", handler_1,
               ErlangAtom "null", stack_2]
        in let
          arg_17 =
            BIF.do_remote_fun_call "Jsx.Config" "erlps__config_to_list__1"
              [config_3]
        in
          BIF.erlang__apply__2
            [f_9,
             ErlangCons bin_0
               (ErlangCons arg_11 (ErlangCons arg_17 ErlangEmptyList))]
erlps__colon__4 [arg_20, arg_21, arg_22, arg_23] =
  EXC.function_clause unit
erlps__colon__4 args =
  EXC.badarity (ErlangFun 4 erlps__colon__4) args

erlps__key__4 :: ErlangFun
erlps__key__4 [(ErlangBinary binSeg_0), handler_7, stack_8,
               config_9]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 34)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  erlps__string__4 [rest_6, handler_7, stack_8, config_9]
erlps__key__4 [(ErlangBinary binSeg_0), handler_7, stack_8,
               config_9]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 32)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  erlps__key__4 [rest_6, handler_7, stack_8, config_9]
erlps__key__4 [(ErlangBinary binSeg_0), handler_7,
               (ErlangCons (ErlangAtom "key") stack_8),
               config_9@(ErlangTuple [(ErlangAtom "config"), _, _, _, _, _,
                                      (ErlangAtom "false"), _, _, _, _, _, _, _,
                                      _, _])]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 125)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    bin_el_11 = toErl 125
  in let
    arg_10 =
      ErlangBinary
        (BIN.concat
           [BIN.fromInt bin_el_11 (toErl 8) 1 BIN.Big,
            BIN.binPrefix rest_6 (BIN.packedSize rest_6) 8])
  in
    erlps__maybe_done__4
      [arg_10, handler_7, ErlangCons (ErlangAtom "object") stack_8,
       config_9]
erlps__key__4 [(ErlangBinary binSeg_0), handler_7, stack_8,
               config_9]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 10)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  erlps__key__4 [rest_6, handler_7, stack_8, config_9]
erlps__key__4 [(ErlangBinary binSeg_0), handler_7, stack_8,
               config_9]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 9)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  erlps__key__4 [rest_6, handler_7, stack_8, config_9]
erlps__key__4 [(ErlangBinary binSeg_0), handler_7, stack_8,
               config_9]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 13)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  erlps__key__4 [rest_6, handler_7, stack_8, config_9]
erlps__key__4 [(ErlangBinary binSeg_0), handler_7, stack_8,
               config_9@(ErlangTuple [(ErlangAtom "config"), _, _, _, _, _, _,
                                      _, (ErlangAtom "false"), _, _, _, _, _, _,
                                      _])]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 39)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  erlps__string__4
    [rest_6, handler_7,
     ErlangCons (ErlangAtom "singlequote") stack_8, config_9]
erlps__key__4 [(ErlangBinary binSeg_0), handler_7, stack_8,
               config_9@(ErlangTuple [(ErlangAtom "config"), _, _, _, _,
                                      (ErlangAtom "true"), _, _, _, _, _, _, _,
                                      _, _, _])]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 47)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let
    case_10 =
      case config_9 of
        (ErlangTuple arr_13) | (DM.Just field_12) <- (arr_13 DA.!! 14) ->
          field_12
        _ -> EXC.badrecord (ErlangAtom "config")
  in
    case case_10 of
      (ErlangAtom "false") ->
        BIF.erlang__error__1 [ErlangAtom "badarg"]
      f_15 ->
        let    bin_el_17 = toErl 47
        in let
          arg_16 =
            ErlangBinary
              (BIN.concat
                 [BIN.fromInt bin_el_17 (toErl 8) 1 BIN.Big,
                  BIN.binPrefix rest_6 (BIN.packedSize rest_6) 8])
        in let
          arg_19 =
            ErlangTuple
              [ErlangAtom "decoder", ErlangAtom "key", handler_7,
               ErlangAtom "null", stack_8]
        in let
          arg_25 =
            BIF.do_remote_fun_call "Jsx.Config" "erlps__config_to_list__1"
              [config_9]
        in
          BIF.erlang__apply__2
            [f_15,
             ErlangCons arg_16
               (ErlangCons arg_19 (ErlangCons arg_25 ErlangEmptyList))]
erlps__key__4 [(ErlangBinary binSeg_0), handler_10, stack_11,
               config_12]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 47)
  , (ErlangInt size_4) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      (BIN.chopInt bin_2 size_4 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_6) == (toErl 47)
  , (ErlangInt size_7) <- (BIN.size bin_5)
  , (BIN.Ok rest_9 bin_8) <- (BIN.chopBin bin_5 size_7 8)
  , BIN.empty bin_8 =
  erlps__comment__5
    [rest_9, handler_10, ErlangAtom "key",
     ErlangCons (ErlangAtom "comment") stack_11, config_12]
erlps__key__4 [(ErlangBinary binSeg_0), handler_10, stack_11,
               config_12]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 47)
  , (ErlangInt size_4) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      (BIN.chopInt bin_2 size_4 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_6) == (toErl 42)
  , (ErlangInt size_7) <- (BIN.size bin_5)
  , (BIN.Ok rest_9 bin_8) <- (BIN.chopBin bin_5 size_7 8)
  , BIN.empty bin_8 =
  erlps__comment__5
    [rest_9, handler_10, ErlangAtom "key",
     ErlangCons (ErlangAtom "multicomment") stack_11, config_12]
erlps__key__4 [(ErlangBinary binSeg_0), handler_4, stack_5,
               config_6]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 47)
  , BIN.empty bin_2 =
  let    bin_el_9 = toErl 47
  in let
    arg_8 = ErlangBinary (BIN.fromInt bin_el_9 (toErl 8) 1 BIN.Big)
  in
    erlps__incomplete__5
      [ErlangAtom "key", arg_8, handler_4, stack_5, config_6]
erlps__key__4 [(ErlangBinary binEnd_0), handler_1, stack_2,
               config_3]
  | BIN.empty binEnd_0 =
  let arg_5 = ErlangBinary (BIN.concat [])
  in
    erlps__incomplete__5
      [ErlangAtom "key", arg_5, handler_1, stack_2, config_3]
erlps__key__4 [bin_0, handler_1, stack_2, config_3] =
  let
    case_4 =
      case config_3 of
        (ErlangTuple arr_7) | (DM.Just field_6) <- (arr_7 DA.!! 14) ->
          field_6
        _ -> EXC.badrecord (ErlangAtom "config")
  in
    case case_4 of
      (ErlangAtom "false") ->
        BIF.erlang__error__1 [ErlangAtom "badarg"]
      f_9 ->
        let   
          arg_11 =
            ErlangTuple
              [ErlangAtom "decoder", ErlangAtom "key", handler_1,
               ErlangAtom "null", stack_2]
        in let
          arg_17 =
            BIF.do_remote_fun_call "Jsx.Config" "erlps__config_to_list__1"
              [config_3]
        in
          BIF.erlang__apply__2
            [f_9,
             ErlangCons bin_0
               (ErlangCons arg_11 (ErlangCons arg_17 ErlangEmptyList))]
erlps__key__4 [arg_20, arg_21, arg_22, arg_23] =
  EXC.function_clause unit
erlps__key__4 args =
  EXC.badarity (ErlangFun 4 erlps__key__4) args

erlps__string__4 :: ErlangFun
erlps__string__4 [bin_0, handler_1, stack_2, config_3] =
  erlps__string__5
    [bin_0, handler_1, ErlangEmptyList, stack_2, config_3]
erlps__string__4 [arg_9, arg_10, arg_11, arg_12] =
  EXC.function_clause unit
erlps__string__4 args =
  EXC.badarity (ErlangFun 4 erlps__string__4) args

erlps__string__5 :: ErlangFun
erlps__string__5 [(ErlangBinary binSeg_0), handler_7, acc_8,
                  stack_9, config_10]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 34)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  erlps__doublequote__5
    [rest_6, handler_7, acc_8, stack_9, config_10]
erlps__string__5 [(ErlangBinary binSeg_0), handler_7, acc_8,
                  stack_9, config_10]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 39)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  erlps__singlequote__5
    [rest_6, handler_7, acc_8, stack_9, config_10]
erlps__string__5 [(ErlangBinary binSeg_0), handler_7, acc_8,
                  stack_9, config_10]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 47)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    arg_17 = toErl 47
  in let head_16 = erlps__maybe_replace__2 [arg_17, config_10]
  in
    erlps__string__5
      [rest_6, handler_7,
       ErlangCons acc_8 (ErlangCons head_16 ErlangEmptyList), stack_9,
       config_10]
erlps__string__5 [(ErlangBinary binSeg_0), handler_7, acc_8,
                  stack_9, config_10]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 92)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  erlps__unescape__5 [rest_6, handler_7, acc_8, stack_9, config_10]
erlps__string__5 [bin_7@(ErlangBinary binSeg_0), handler_8,
                  acc_9, stack_10,
                  config_11@(ErlangTuple [(ErlangAtom "config"), _, _, _, _, _,
                                          _, _, _, _, _, _, (ErlangAtom "true"),
                                          _, _, _])]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok x_3 bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  case x_3 of
    x_13 | x_13 == x_3
         , weakLt x_3 (toErl 128) ->
      erlps__count__5 [bin_7, handler_8, acc_9, stack_10, config_11]
    x_19 | x_19 == x_3 ->
      let head_25 = erlps__json_escape_sequence__1 [x_3]
      in
        erlps__string__5
          [rest_6, handler_8,
           ErlangCons acc_9 (ErlangCons head_25 ErlangEmptyList), stack_10,
           config_11]
    something_else -> EXC.case_clause something_else
erlps__string__5 [(ErlangBinary binSeg_0), handler_13, acc_14,
                  stack_15, config_16]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 226)
  , (ErlangInt size_4) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      (BIN.chopInt bin_2 size_4 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_6) == (toErl 128)
  , (ErlangInt size_7) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_9) bin_8) <-
      (BIN.chopInt bin_5 size_7 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_9) == (toErl 168)
  , (ErlangInt size_10) <- (BIN.size bin_8)
  , (BIN.Ok rest_12 bin_11) <- (BIN.chopBin bin_8 size_10 8)
  , BIN.empty bin_11 =
  let    arg_23 = toErl 8232
  in let head_22 = erlps__maybe_replace__2 [arg_23, config_16]
  in
    erlps__string__5
      [rest_12, handler_13,
       ErlangCons acc_14 (ErlangCons head_22 ErlangEmptyList), stack_15,
       config_16]
erlps__string__5 [(ErlangBinary binSeg_0), handler_13, acc_14,
                  stack_15, config_16]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 226)
  , (ErlangInt size_4) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      (BIN.chopInt bin_2 size_4 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_6) == (toErl 128)
  , (ErlangInt size_7) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_9) bin_8) <-
      (BIN.chopInt bin_5 size_7 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_9) == (toErl 169)
  , (ErlangInt size_10) <- (BIN.size bin_8)
  , (BIN.Ok rest_12 bin_11) <- (BIN.chopBin bin_8 size_10 8)
  , BIN.empty bin_11 =
  let    arg_23 = toErl 8233
  in let head_22 = erlps__maybe_replace__2 [arg_23, config_16]
  in
    erlps__string__5
      [rest_12, handler_13,
       ErlangCons acc_14 (ErlangCons head_22 ErlangEmptyList), stack_15,
       config_16]
erlps__string__5 [bin_3@(ErlangBinary binSeg_0), handler_4,
                  acc_5, stack_6, config_7]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok _ bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned) =
  erlps__count__5 [bin_3, handler_4, acc_5, stack_6, config_7]
erlps__string__5 [(ErlangBinary binSeg_0), handler_7, acc_8,
                  stack_9,
                  config_10@(ErlangTuple [(ErlangAtom "config"),
                                          (ErlangAtom "true"), _, _, _, _, _, _,
                                          _, _, _, _, _, _, _, _])]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok x_3 bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  erlps__string__5
    [rest_6, handler_7,
     ErlangCons acc_8 (ErlangCons x_3 ErlangEmptyList), stack_9,
     config_10]
erlps__string__5 [(ErlangBinary binSeg_0), handler_13, acc_14,
                  stack_15, config_16]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 239)
  , (ErlangInt size_4) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      (BIN.chopInt bin_2 size_4 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_6) == (toErl 191)
  , (ErlangInt size_7) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_9) bin_8) <-
      (BIN.chopInt bin_5 size_7 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_9) == (toErl 190)
  , (ErlangInt size_10) <- (BIN.size bin_8)
  , (BIN.Ok rest_12 bin_11) <- (BIN.chopBin bin_8 size_10 8)
  , BIN.empty bin_11 =
  let    bin_el_23 = toErl 65534
  in let
    head_22 =
      ErlangBinary (BIN.fromInt bin_el_23 (toErl 8) 1 BIN.Big)
  in
    erlps__string__5
      [rest_12, handler_13,
       ErlangCons acc_14 (ErlangCons head_22 ErlangEmptyList), stack_15,
       config_16]
erlps__string__5 [(ErlangBinary binSeg_0), handler_13, acc_14,
                  stack_15, config_16]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 239)
  , (ErlangInt size_4) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      (BIN.chopInt bin_2 size_4 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_6) == (toErl 191)
  , (ErlangInt size_7) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_9) bin_8) <-
      (BIN.chopInt bin_5 size_7 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_9) == (toErl 191)
  , (ErlangInt size_10) <- (BIN.size bin_8)
  , (BIN.Ok rest_12 bin_11) <- (BIN.chopBin bin_8 size_10 8)
  , BIN.empty bin_11 =
  let    bin_el_23 = toErl 65535
  in let
    head_22 =
      ErlangBinary (BIN.fromInt bin_el_23 (toErl 8) 1 BIN.Big)
  in
    erlps__string__5
      [rest_12, handler_13,
       ErlangCons acc_14 (ErlangCons head_22 ErlangEmptyList), stack_15,
       config_16]
erlps__string__5 [(ErlangBinary binEnd_0), handler_1, acc_2,
                  stack_3, config_4]
  | BIN.empty binEnd_0 =
  let arg_6 = ErlangBinary (BIN.concat [])
  in
    erlps__incomplete__6
      [ErlangAtom "string", arg_6, handler_1, acc_2, stack_3, config_4]
erlps__string__5 [(ErlangBinary binSeg_0), handler_4, acc_5,
                  stack_6, config_7]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok x_3 bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , BIN.empty bin_2
  , weakGeq x_3 (toErl 192) =
  let arg_9 = ErlangBinary (BIN.fromInt x_3 (toErl 8) 1 BIN.Big)
  in
    erlps__incomplete__6
      [ErlangAtom "string", arg_9, handler_4, acc_5, stack_6, config_7]
erlps__string__5 [(ErlangBinary binSeg_0), handler_7, acc_8,
                  stack_9, config_10]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok x_3 bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt size_4) <- (toErl 8)
  , (BIN.Ok y_6 bin_5) <-
      (BIN.chopInt bin_2 size_4 1 BIN.Big BIN.Unsigned)
  , BIN.empty bin_5
  , (weakGeq x_3 (toErl 224)) && (weakGeq y_6 (toErl 128)) =
  let
    arg_12 =
      ErlangBinary
        (BIN.concat
           [BIN.fromInt x_3 (toErl 8) 1 BIN.Big,
            BIN.fromInt y_6 (toErl 8) 1 BIN.Big])
  in
    erlps__incomplete__6
      [ErlangAtom "string", arg_12, handler_7, acc_8, stack_9,
       config_10]
erlps__string__5 [(ErlangBinary binSeg_0), handler_10, acc_11,
                  stack_12, config_13]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok x_3 bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt size_4) <- (toErl 8)
  , (BIN.Ok y_6 bin_5) <-
      (BIN.chopInt bin_2 size_4 1 BIN.Big BIN.Unsigned)
  , (ErlangInt size_7) <- (toErl 8)
  , (BIN.Ok z_9 bin_8) <-
      (BIN.chopInt bin_5 size_7 1 BIN.Big BIN.Unsigned)
  , BIN.empty bin_8
  , ((weakGeq x_3 (toErl 224)) && (weakGeq y_6 (toErl 128))) &&
      (weakGeq z_9 (toErl 128)) =
  let
    arg_15 =
      ErlangBinary
        (BIN.concat
           [BIN.fromInt x_3 (toErl 8) 1 BIN.Big,
            BIN.fromInt y_6 (toErl 8) 1 BIN.Big,
            BIN.fromInt z_9 (toErl 8) 1 BIN.Big])
  in
    erlps__incomplete__6
      [ErlangAtom "string", arg_15, handler_10, acc_11, stack_12,
       config_13]
erlps__string__5 [(ErlangBinary binSeg_0), handler_12, acc_13,
                  stack_14,
                  config_15@(ErlangTuple [(ErlangAtom "config"), _, _, _, _, _,
                                          _, (ErlangAtom "false"), _, _, _, _,
                                          _, _, _, _])]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 237)
  , (ErlangInt size_4) <- (toErl 8)
  , (BIN.Ok x_6 bin_5) <-
      (BIN.chopInt bin_2 size_4 1 BIN.Big BIN.Unsigned)
  , (ErlangInt size_7) <- (toErl 8)
  , (BIN.Ok _ bin_8) <-
      (BIN.chopInt bin_5 size_7 1 BIN.Big BIN.Unsigned)
  , (ErlangInt size_9) <- (BIN.size bin_8)
  , (BIN.Ok rest_11 bin_10) <- (BIN.chopBin bin_8 size_9 8)
  , BIN.empty bin_10
  , weakGeq x_6 (toErl 160) =
  let    bin_el_22 = toErl 65533
  in let
    head_21 =
      ErlangBinary (BIN.fromInt bin_el_22 (toErl 8) 1 BIN.Big)
  in
    erlps__string__5
      [rest_11, handler_12,
       ErlangCons acc_13 (ErlangCons head_21 ErlangEmptyList), stack_14,
       config_15]
erlps__string__5 [(ErlangBinary binSeg_0), handler_7, acc_8,
                  stack_9,
                  config_10@(ErlangTuple [(ErlangAtom "config"), _, _, _, _, _,
                                          _, (ErlangAtom "false"), _, _, _, _,
                                          _, _, _, _])]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok x_3 bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5
  , (weakGeq x_3 (toErl 192)) && (weakLeq x_3 (toErl 223)) =
  let arg_16 = toErl 1
  in
    erlps__strip_continuations__6
      [rest_6, handler_7, acc_8, stack_9, config_10, arg_16]
erlps__string__5 [(ErlangBinary binSeg_0), handler_7, acc_8,
                  stack_9,
                  config_10@(ErlangTuple [(ErlangAtom "config"), _, _, _, _, _,
                                          _, (ErlangAtom "false"), _, _, _, _,
                                          _, _, _, _])]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok x_3 bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5
  , (weakGeq x_3 (toErl 224)) && (weakLeq x_3 (toErl 239)) =
  let arg_16 = toErl 2
  in
    erlps__strip_continuations__6
      [rest_6, handler_7, acc_8, stack_9, config_10, arg_16]
erlps__string__5 [(ErlangBinary binSeg_0), handler_7, acc_8,
                  stack_9,
                  config_10@(ErlangTuple [(ErlangAtom "config"), _, _, _, _, _,
                                          _, (ErlangAtom "false"), _, _, _, _,
                                          _, _, _, _])]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok x_3 bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5
  , (weakGeq x_3 (toErl 240)) && (weakLeq x_3 (toErl 247)) =
  let arg_16 = toErl 3
  in
    erlps__strip_continuations__6
      [rest_6, handler_7, acc_8, stack_9, config_10, arg_16]
erlps__string__5 [(ErlangBinary binSeg_0), handler_6, acc_7,
                  stack_8,
                  config_9@(ErlangTuple [(ErlangAtom "config"), _, _, _, _, _,
                                         _, (ErlangAtom "false"), _, _, _, _, _,
                                         _, _, _])]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok _ bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt size_3) <- (BIN.size bin_2)
  , (BIN.Ok rest_5 bin_4) <- (BIN.chopBin bin_2 size_3 8)
  , BIN.empty bin_4 =
  let    bin_el_16 = toErl 65533
  in let
    head_15 =
      ErlangBinary (BIN.fromInt bin_el_16 (toErl 8) 1 BIN.Big)
  in
    erlps__string__5
      [rest_5, handler_6,
       ErlangCons acc_7 (ErlangCons head_15 ErlangEmptyList), stack_8,
       config_9]
erlps__string__5 [bin_0, handler_1, acc_2, stack_3, config_4] =
  let
    case_5 =
      case config_4 of
        (ErlangTuple arr_8) | (DM.Just field_7) <- (arr_8 DA.!! 14) ->
          field_7
        _ -> EXC.badrecord (ErlangAtom "config")
  in
    case case_5 of
      (ErlangAtom "false") ->
        BIF.erlang__error__1 [ErlangAtom "badarg"]
      f_10 ->
        let   
          arg_12 =
            ErlangTuple
              [ErlangAtom "decoder", ErlangAtom "string", handler_1, acc_2,
               stack_3]
        in let
          arg_18 =
            BIF.do_remote_fun_call "Jsx.Config" "erlps__config_to_list__1"
              [config_4]
        in
          BIF.erlang__apply__2
            [f_10,
             ErlangCons bin_0
               (ErlangCons arg_12 (ErlangCons arg_18 ErlangEmptyList))]
erlps__string__5 [arg_21, arg_22, arg_23, arg_24, arg_25] =
  EXC.function_clause unit
erlps__string__5 args =
  EXC.badarity (ErlangFun 5 erlps__string__5) args

erlps__count__5 :: ErlangFun
erlps__count__5 [bin_0, handler_1, acc_2, stack_3, config_4] =
  let    arg_6 = toErl 0
  in let size_8 = erlps__count__3 [bin_0, arg_6, config_4]
  in
    case bin_0 of
      (ErlangBinary binSeg_9) | (ErlangInt size_10) <- (size_8)
                              , (BIN.Ok clean_12 bin_11) <-
                                  (BIN.chopBin binSeg_9 size_10 8)
                              , (ErlangInt size_13) <- (BIN.size bin_11)
                              , (BIN.Ok rest_15 bin_14) <-
                                  (BIN.chopBin bin_11 size_13 8)
                              , BIN.empty bin_14 ->
        erlps__string__5
          [rest_15, handler_1,
           ErlangCons acc_2 (ErlangCons clean_12 ErlangEmptyList), stack_3,
           config_4]
      _ -> EXC.badmatch bin_0
erlps__count__5 [arg_26, arg_27, arg_28, arg_29, arg_30] =
  EXC.function_clause unit
erlps__count__5 args =
  EXC.badarity (ErlangFun 5 erlps__count__5) args

erlps__count__3 :: ErlangFun
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 0)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 1)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 2)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 3)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 4)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 5)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 6)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 7)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 8)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 9)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 10)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 11)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 12)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 13)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 14)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 15)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 16)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 17)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 18)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 19)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 20)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 21)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 22)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 23)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 24)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 25)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 26)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 27)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 28)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 29)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 30)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 31)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 32)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 33)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_4, _]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 34) =
  n_4
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 35)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 36)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 37)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 38)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_4, _]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 39) =
  n_4
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 40)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 41)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 42)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 43)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 44)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 45)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 46)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_4, _]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 47) =
  n_4
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 48)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 49)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 50)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 51)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 52)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 53)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 54)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 55)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 56)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 57)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 58)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 59)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 60)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 61)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 62)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 63)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 64)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 65)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 66)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 67)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 68)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 69)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 70)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 71)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 72)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 73)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 74)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 75)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 76)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 77)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 78)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 79)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 80)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 81)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 82)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 83)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 84)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 85)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 86)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 87)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 88)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 89)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 90)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 91)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_4, _]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 92) =
  n_4
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 93)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 94)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 95)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 96)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 97)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 98)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 99)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 100)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 101)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 102)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 103)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 104)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 105)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 106)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 107)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 108)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 109)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 110)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 111)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 112)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 113)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 114)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 115)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 116)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 117)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 118)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 119)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 120)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 121)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 122)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 123)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 124)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 125)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 126)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 127)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_12 = toErl 1
  in let arg_10 = BIF.erlang__op_plus [n_7, rop_12]
  in erlps__count__3 [rest_6, arg_10, config_8]
erlps__count__3 [(ErlangBinary binSeg_0), n_6,
                 config_7@(ErlangTuple [(ErlangAtom "config"),
                                        (ErlangAtom "true"), _, _, _, _, _, _,
                                        _, _, _, _, _, _, _, _])]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok _ bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt size_3) <- (BIN.size bin_2)
  , (BIN.Ok rest_5 bin_4) <- (BIN.chopBin bin_2 size_3 8)
  , BIN.empty bin_4 =
  let    rop_11 = toErl 1
  in let arg_9 = BIF.erlang__op_plus [n_6, rop_11]
  in erlps__count__3 [rest_5, arg_9, config_7]
erlps__count__3 [(ErlangBinary binSeg_0), n_3,
                 (ErlangTuple [(ErlangAtom "config"), _, _, _, _, _, _, _, _, _,
                               _, _, (ErlangAtom "true"), _, _, _])]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok _ bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned) =
  n_3
erlps__count__3 [(ErlangBinary binSeg_0), n_7, config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok x_3 bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  case x_3 of
    x_10 | x_10 == x_3
         , weakLt x_3 (toErl 2048) ->
      let    rop_14 = toErl 2
      in let arg_12 = BIF.erlang__op_plus [n_7, rop_14]
      in erlps__count__3 [rest_6, arg_12, config_8]
    (ErlangInt num_16) | (ErlangInt num_16) == (toErl 8232) -> n_7
    (ErlangInt num_17) | (ErlangInt num_17) == (toErl 8233) -> n_7
    x_18 | x_18 == x_3
         , weakLt x_3 (toErl 65536) ->
      let    rop_22 = toErl 3
      in let arg_20 = BIF.erlang__op_plus [n_7, rop_22]
      in erlps__count__3 [rest_6, arg_20, config_8]
    _ ->
      let    rop_27 = toErl 4
      in let arg_25 = BIF.erlang__op_plus [n_7, rop_27]
      in erlps__count__3 [rest_6, arg_25, config_8]
erlps__count__3 [_, n_0, _] = n_0
erlps__count__3 [arg_1, arg_2, arg_3] = EXC.function_clause unit
erlps__count__3 args =
  EXC.badarity (ErlangFun 3 erlps__count__3) args

erlps__doublequote__5 :: ErlangFun
erlps__doublequote__5 [rest_0, handler_1, acc_2,
                       stack_3@(ErlangCons (ErlangAtom "key") _), config_4]
  =
  let    tup_el_9 = BIF.erlang__iolist_to_binary__1 [acc_2]
  in let arg_7 = ErlangTuple [ErlangAtom "key", tup_el_9]
  in let
    arg_6 = erlps__handle_event__3 [arg_7, handler_1, config_4]
  in erlps__colon__4 [rest_0, arg_6, stack_3, config_4]
erlps__doublequote__5 [rest_0, handler_1, acc_2,
                       stack_3@(ErlangCons (ErlangAtom "singlequote") _),
                       config_4]
  =
  let    arg_11 = toErl 34
  in let head_10 = erlps__maybe_replace__2 [arg_11, config_4]
  in
    erlps__string__5
      [rest_0, handler_1,
       ErlangCons acc_2 (ErlangCons head_10 ErlangEmptyList), stack_3,
       config_4]
erlps__doublequote__5 [(ErlangBinary binEnd_0), handler_1, acc_2,
                       stack_3@(ErlangCons (ErlangAtom "singlequote") _),
                       config_4]
  | BIN.empty binEnd_0 =
  let    bin_el_7 = toErl 34
  in let
    arg_6 = ErlangBinary (BIN.fromInt bin_el_7 (toErl 8) 1 BIN.Big)
  in
    erlps__incomplete__6
      [ErlangAtom "string", arg_6, handler_1, acc_2, stack_3, config_4]
erlps__doublequote__5 [rest_0, handler_1, acc_2, stack_3,
                       config_4]
  =
  let    tup_el_9 = BIF.erlang__iolist_to_binary__1 [acc_2]
  in let arg_7 = ErlangTuple [ErlangAtom "string", tup_el_9]
  in let
    arg_6 = erlps__handle_event__3 [arg_7, handler_1, config_4]
  in erlps__maybe_done__4 [rest_0, arg_6, stack_3, config_4]
erlps__doublequote__5 [arg_15, arg_16, arg_17, arg_18, arg_19] =
  EXC.function_clause unit
erlps__doublequote__5 args =
  EXC.badarity (ErlangFun 5 erlps__doublequote__5) args

erlps__singlequote__5 :: ErlangFun
erlps__singlequote__5 [rest_0, handler_1, acc_2,
                       (ErlangCons (ErlangAtom "singlequote") (ErlangCons (ErlangAtom "key") stack_3)),
                       config_4]
  =
  let    tup_el_9 = BIF.erlang__iolist_to_binary__1 [acc_2]
  in let arg_7 = ErlangTuple [ErlangAtom "key", tup_el_9]
  in let
    arg_6 = erlps__handle_event__3 [arg_7, handler_1, config_4]
  in
    erlps__colon__4
      [rest_0, arg_6, ErlangCons (ErlangAtom "key") stack_3, config_4]
erlps__singlequote__5 [rest_0, handler_1, acc_2,
                       (ErlangCons (ErlangAtom "singlequote") stack_3),
                       config_4]
  =
  let    tup_el_9 = BIF.erlang__iolist_to_binary__1 [acc_2]
  in let arg_7 = ErlangTuple [ErlangAtom "string", tup_el_9]
  in let
    arg_6 = erlps__handle_event__3 [arg_7, handler_1, config_4]
  in erlps__maybe_done__4 [rest_0, arg_6, stack_3, config_4]
erlps__singlequote__5 [rest_0, handler_1, acc_2, stack_3,
                       config_4]
  =
  let head_10 = toErl 39
  in
    erlps__string__5
      [rest_0, handler_1,
       ErlangCons acc_2 (ErlangCons head_10 ErlangEmptyList), stack_3,
       config_4]
erlps__singlequote__5 [arg_14, arg_15, arg_16, arg_17, arg_18] =
  EXC.function_clause unit
erlps__singlequote__5 args =
  EXC.badarity (ErlangFun 5 erlps__singlequote__5) args

erlps__strip_continuations__6 :: ErlangFun
erlps__strip_continuations__6 [(ErlangBinary binSeg_0),
                               handler_4, acc_5, stack_6, config_7,
                               (ErlangInt num_8)]
  | (ErlangInt size_1) <- (BIN.size binSeg_0)
  , (BIN.Ok rest_3 bin_2) <- (BIN.chopBin binSeg_0 size_1 8)
  , BIN.empty bin_2
  , (ErlangInt num_8) == (toErl 0) =
  let    bin_el_15 = toErl 65533
  in let
    head_14 =
      ErlangBinary (BIN.fromInt bin_el_15 (toErl 8) 1 BIN.Big)
  in
    erlps__string__5
      [rest_3, handler_4,
       ErlangCons acc_5 (ErlangCons head_14 ErlangEmptyList), stack_6,
       config_7]
erlps__strip_continuations__6 [(ErlangBinary binSeg_0),
                               handler_7, acc_8, stack_9, config_10, n_11]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok x_3 bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5
  , (weakGeq x_3 (toErl 128)) && (weakLeq x_3 (toErl 191)) =
  let    rop_19 = toErl 1
  in let arg_17 = BIF.erlang__op_minus [n_11, rop_19]
  in
    erlps__strip_continuations__6
      [rest_6, handler_7, acc_8, stack_9, config_10, arg_17]
erlps__strip_continuations__6 [(ErlangBinary binEnd_0),
                               handler_1, acc_2, stack_3, config_4, n_5]
  | BIN.empty binEnd_0 =
  case n_5 of
    (ErlangInt num_7) | (ErlangInt num_7) == (toErl 1) ->
      let    bin_el_10 = toErl 192
      in let
        arg_9 = ErlangBinary (BIN.fromInt bin_el_10 (toErl 8) 1 BIN.Big)
      in
        erlps__incomplete__6
          [ErlangAtom "string", arg_9, handler_1, acc_2, stack_3, config_4]
    (ErlangInt num_15) | (ErlangInt num_15) == (toErl 2) ->
      let    bin_el_18 = toErl 224
      in let
        arg_17 = ErlangBinary (BIN.fromInt bin_el_18 (toErl 8) 1 BIN.Big)
      in
        erlps__incomplete__6
          [ErlangAtom "string", arg_17, handler_1, acc_2, stack_3,
           config_4]
    (ErlangInt num_23) | (ErlangInt num_23) == (toErl 3) ->
      let    bin_el_26 = toErl 240
      in let
        arg_25 = ErlangBinary (BIN.fromInt bin_el_26 (toErl 8) 1 BIN.Big)
      in
        erlps__incomplete__6
          [ErlangAtom "string", arg_25, handler_1, acc_2, stack_3,
           config_4]
    something_else -> EXC.case_clause something_else
erlps__strip_continuations__6 [(ErlangBinary binSeg_0),
                               handler_4, acc_5, stack_6, config_7, _]
  | (ErlangInt size_1) <- (BIN.size binSeg_0)
  , (BIN.Ok rest_3 bin_2) <- (BIN.chopBin binSeg_0 size_1 8)
  , BIN.empty bin_2 =
  let    bin_el_14 = toErl 65533
  in let
    head_13 =
      ErlangBinary (BIN.fromInt bin_el_14 (toErl 8) 1 BIN.Big)
  in
    erlps__string__5
      [rest_3, handler_4,
       ErlangCons acc_5 (ErlangCons head_13 ErlangEmptyList), stack_6,
       config_7]
erlps__strip_continuations__6 [arg_18, arg_19, arg_20, arg_21,
                               arg_22, arg_23]
  =
  EXC.function_clause unit
erlps__strip_continuations__6 args =
  EXC.badarity (ErlangFun 6 erlps__strip_continuations__6) args

erlps__unescape__5 :: ErlangFun
erlps__unescape__5 [(ErlangBinary binSeg_0), handler_7, acc_8,
                    stack_9,
                    config_10@(ErlangTuple [(ErlangAtom "config"),
                                            (ErlangAtom "true"), _, _, _, _, _,
                                            _, _, _, _, _, _, _, _, _])]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 92)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    bin_el_12 = toErl 92
  in let
    arg_11 =
      ErlangBinary
        (BIN.concat
           [BIN.fromInt bin_el_12 (toErl 8) 1 BIN.Big,
            BIN.binPrefix rest_6 (BIN.packedSize rest_6) 8])
  in let bin_el_19 = toErl 92
  in let
    head_18 =
      ErlangBinary (BIN.fromInt bin_el_19 (toErl 8) 1 BIN.Big)
  in
    erlps__string__5
      [arg_11, handler_7,
       ErlangCons acc_8 (ErlangCons head_18 ErlangEmptyList), stack_9,
       config_10]
erlps__unescape__5 [(ErlangBinary binSeg_0), handler_7, acc_8,
                    stack_9,
                    config_10@(ErlangTuple [(ErlangAtom "config"),
                                            (ErlangAtom "true"), _, _, _, _, _,
                                            _, _, _, _, _, _, _, _, _])]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok c_3 bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    bin_el_17 = toErl 92
  in let
    head_16 =
      ErlangBinary
        (BIN.concat
           [BIN.fromInt bin_el_17 (toErl 8) 1 BIN.Big,
            BIN.fromInt c_3 (toErl 8) 1 BIN.Big])
  in
    erlps__string__5
      [rest_6, handler_7,
       ErlangCons acc_8 (ErlangCons head_16 ErlangEmptyList), stack_9,
       config_10]
erlps__unescape__5 [(ErlangBinary binSeg_0), handler_7, acc_8,
                    stack_9, config_10]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 98)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    arg_17 = toErl 8
  in let head_16 = erlps__maybe_replace__2 [arg_17, config_10]
  in
    erlps__string__5
      [rest_6, handler_7,
       ErlangCons acc_8 (ErlangCons head_16 ErlangEmptyList), stack_9,
       config_10]
erlps__unescape__5 [(ErlangBinary binSeg_0), handler_7, acc_8,
                    stack_9, config_10]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 102)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    arg_17 = toErl 12
  in let head_16 = erlps__maybe_replace__2 [arg_17, config_10]
  in
    erlps__string__5
      [rest_6, handler_7,
       ErlangCons acc_8 (ErlangCons head_16 ErlangEmptyList), stack_9,
       config_10]
erlps__unescape__5 [(ErlangBinary binSeg_0), handler_7, acc_8,
                    stack_9, config_10]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 110)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    arg_17 = toErl 10
  in let head_16 = erlps__maybe_replace__2 [arg_17, config_10]
  in
    erlps__string__5
      [rest_6, handler_7,
       ErlangCons acc_8 (ErlangCons head_16 ErlangEmptyList), stack_9,
       config_10]
erlps__unescape__5 [(ErlangBinary binSeg_0), handler_7, acc_8,
                    stack_9, config_10]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 114)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    arg_17 = toErl 13
  in let head_16 = erlps__maybe_replace__2 [arg_17, config_10]
  in
    erlps__string__5
      [rest_6, handler_7,
       ErlangCons acc_8 (ErlangCons head_16 ErlangEmptyList), stack_9,
       config_10]
erlps__unescape__5 [(ErlangBinary binSeg_0), handler_7, acc_8,
                    stack_9, config_10]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 116)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    arg_17 = toErl 9
  in let head_16 = erlps__maybe_replace__2 [arg_17, config_10]
  in
    erlps__string__5
      [rest_6, handler_7,
       ErlangCons acc_8 (ErlangCons head_16 ErlangEmptyList), stack_9,
       config_10]
erlps__unescape__5 [(ErlangBinary binSeg_0), handler_7, acc_8,
                    stack_9, config_10]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 34)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    arg_17 = toErl 34
  in let head_16 = erlps__maybe_replace__2 [arg_17, config_10]
  in
    erlps__string__5
      [rest_6, handler_7,
       ErlangCons acc_8 (ErlangCons head_16 ErlangEmptyList), stack_9,
       config_10]
erlps__unescape__5 [(ErlangBinary binSeg_0), handler_7, acc_8,
                    stack_9,
                    config_10@(ErlangTuple [(ErlangAtom "config"), _, _, _, _,
                                            _, _, _, (ErlangAtom "false"), _, _,
                                            _, _, _, _, _])]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 39)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    bin_el_17 = toErl 39
  in let
    head_16 =
      ErlangBinary (BIN.fromInt bin_el_17 (toErl 8) 1 BIN.Big)
  in
    erlps__string__5
      [rest_6, handler_7,
       ErlangCons acc_8 (ErlangCons head_16 ErlangEmptyList), stack_9,
       config_10]
erlps__unescape__5 [(ErlangBinary binSeg_0), handler_7, acc_8,
                    stack_9, config_10]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 92)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    arg_17 = toErl 92
  in let head_16 = erlps__maybe_replace__2 [arg_17, config_10]
  in
    erlps__string__5
      [rest_6, handler_7,
       ErlangCons acc_8 (ErlangCons head_16 ErlangEmptyList), stack_9,
       config_10]
erlps__unescape__5 [(ErlangBinary binSeg_0), handler_7, acc_8,
                    stack_9, config_10]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 47)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    arg_17 = toErl 47
  in let head_16 = erlps__maybe_replace__2 [arg_17, config_10]
  in
    erlps__string__5
      [rest_6, handler_7,
       ErlangCons acc_8 (ErlangCons head_16 ErlangEmptyList), stack_9,
       config_10]
erlps__unescape__5 [(ErlangBinary binSeg_0), handler_37, acc_38,
                    stack_39, config_40]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 117)
  , (ErlangInt size_4) <- (toErl 8)
  , (BIN.Ok f_6 bin_5) <-
      (BIN.chopInt bin_2 size_4 1 BIN.Big BIN.Unsigned)
  , (ErlangInt size_7) <- (toErl 8)
  , (BIN.Ok a_9 bin_8) <-
      (BIN.chopInt bin_5 size_7 1 BIN.Big BIN.Unsigned)
  , (ErlangInt size_10) <- (toErl 8)
  , (BIN.Ok b_12 bin_11) <-
      (BIN.chopInt bin_8 size_10 1 BIN.Big BIN.Unsigned)
  , (ErlangInt size_13) <- (toErl 8)
  , (BIN.Ok c_15 bin_14) <-
      (BIN.chopInt bin_11 size_13 1 BIN.Big BIN.Unsigned)
  , (ErlangInt size_16) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_18) bin_17) <-
      (BIN.chopInt bin_14 size_16 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_18) == (toErl 92)
  , (ErlangInt size_19) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_21) bin_20) <-
      (BIN.chopInt bin_17 size_19 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_21) == (toErl 117)
  , (ErlangInt size_22) <- (toErl 8)
  , (BIN.Ok g_24 bin_23) <-
      (BIN.chopInt bin_20 size_22 1 BIN.Big BIN.Unsigned)
  , (ErlangInt size_25) <- (toErl 8)
  , (BIN.Ok x_27 bin_26) <-
      (BIN.chopInt bin_23 size_25 1 BIN.Big BIN.Unsigned)
  , (ErlangInt size_28) <- (toErl 8)
  , (BIN.Ok y_30 bin_29) <-
      (BIN.chopInt bin_26 size_28 1 BIN.Big BIN.Unsigned)
  , (ErlangInt size_31) <- (toErl 8)
  , (BIN.Ok z_33 bin_32) <-
      (BIN.chopInt bin_29 size_31 1 BIN.Big BIN.Unsigned)
  , (ErlangInt size_34) <- (BIN.size bin_32)
  , (BIN.Ok rest_36 bin_35) <- (BIN.chopBin bin_32 size_34 8)
  , BIN.empty bin_35
  , ((((((((weakEq a_9 (toErl 56)) ||
             ((weakEq a_9 (toErl 57)) ||
                ((weakEq a_9 (toErl 97)) ||
                   ((weakEq a_9 (toErl 98)) ||
                      ((weakEq a_9 (toErl 65)) ||
                         (weakEq a_9 (toErl 66))))))) &&
            ((weakEq x_27 (toErl 99)) ||
               ((weakEq x_27 (toErl 100)) ||
                  ((weakEq x_27 (toErl 101)) ||
                     ((weakEq x_27 (toErl 102)) ||
                        ((weakEq x_27 (toErl 67)) ||
                           ((weakEq x_27 (toErl 68)) ||
                              ((weakEq x_27 (toErl 69)) ||
                                 (weakEq x_27 (toErl 70)))))))))) &&
           ((weakEq f_6 (toErl 100)) || (weakEq f_6 (toErl 68)))) &&
          ((weakEq g_24 (toErl 100)) || (weakEq g_24 (toErl 68)))) &&
         (((weakGeq b_12 (toErl 97)) && (weakLeq b_12 (toErl 102))) ||
            (((weakGeq b_12 (toErl 65)) && (weakLeq b_12 (toErl 70))) ||
               ((weakGeq b_12 (toErl 48)) && (weakLeq b_12 (toErl 57)))))) &&
        (((weakGeq c_15 (toErl 97)) && (weakLeq c_15 (toErl 102))) ||
           (((weakGeq c_15 (toErl 65)) && (weakLeq c_15 (toErl 70))) ||
              ((weakGeq c_15 (toErl 48)) && (weakLeq c_15 (toErl 57)))))) &&
       (((weakGeq y_30 (toErl 97)) && (weakLeq y_30 (toErl 102))) ||
          (((weakGeq y_30 (toErl 65)) && (weakLeq y_30 (toErl 70))) ||
             ((weakGeq y_30 (toErl 48)) && (weakLeq y_30 (toErl 57)))))) &&
      (((weakGeq z_33 (toErl 97)) && (weakLeq z_33 (toErl 102))) ||
         (((weakGeq z_33 (toErl 65)) && (weakLeq z_33 (toErl 70))) ||
            ((weakGeq z_33 (toErl 48)) && (weakLeq z_33 (toErl 57))))) =
  let    head_42 = toErl 100
  in let arg_50 = toErl 16
  in let
    high_51 =
      BIF.erlang__list_to_integer__2
        [ErlangCons head_42
           (ErlangCons a_9
              (ErlangCons b_12 (ErlangCons c_15 ErlangEmptyList))),
         arg_50]
  in let head_53 = toErl 100
  in let arg_61 = toErl 16
  in let
    low_62 =
      BIF.erlang__list_to_integer__2
        [ErlangCons head_53
           (ErlangCons x_27
              (ErlangCons y_30 (ErlangCons z_33 ErlangEmptyList))),
         arg_61]
  in let rop_67 = toErl 55296
  in let lop_65 = BIF.erlang__op_minus [high_51, rop_67]
  in let rop_68 = toErl 1024
  in let lop_64 = BIF.erlang__op_mult [lop_65, rop_68]
  in let rop_71 = toErl 56320
  in let rop_69 = BIF.erlang__op_minus [low_62, rop_71]
  in let lop_63 = BIF.erlang__op_plus [lop_64, rop_69]
  in let rop_72 = toErl 65536
  in let codepoint_73 = BIF.erlang__op_plus [lop_63, rop_72]
  in let
    head_79 =
      ErlangBinary (BIN.fromInt codepoint_73 (toErl 8) 1 BIN.Big)
  in
    erlps__string__5
      [rest_36, handler_37,
       ErlangCons acc_38 (ErlangCons head_79 ErlangEmptyList), stack_39,
       config_40]
erlps__unescape__5 [(ErlangBinary binSeg_0), handler_37, acc_38,
                    stack_39, config_40]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 117)
  , (ErlangInt size_4) <- (toErl 8)
  , (BIN.Ok f_6 bin_5) <-
      (BIN.chopInt bin_2 size_4 1 BIN.Big BIN.Unsigned)
  , (ErlangInt size_7) <- (toErl 8)
  , (BIN.Ok a_9 bin_8) <-
      (BIN.chopInt bin_5 size_7 1 BIN.Big BIN.Unsigned)
  , (ErlangInt size_10) <- (toErl 8)
  , (BIN.Ok b_12 bin_11) <-
      (BIN.chopInt bin_8 size_10 1 BIN.Big BIN.Unsigned)
  , (ErlangInt size_13) <- (toErl 8)
  , (BIN.Ok c_15 bin_14) <-
      (BIN.chopInt bin_11 size_13 1 BIN.Big BIN.Unsigned)
  , (ErlangInt size_16) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_18) bin_17) <-
      (BIN.chopInt bin_14 size_16 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_18) == (toErl 92)
  , (ErlangInt size_19) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_21) bin_20) <-
      (BIN.chopInt bin_17 size_19 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_21) == (toErl 117)
  , (ErlangInt size_22) <- (toErl 8)
  , (BIN.Ok w_24 bin_23) <-
      (BIN.chopInt bin_20 size_22 1 BIN.Big BIN.Unsigned)
  , (ErlangInt size_25) <- (toErl 8)
  , (BIN.Ok x_27 bin_26) <-
      (BIN.chopInt bin_23 size_25 1 BIN.Big BIN.Unsigned)
  , (ErlangInt size_28) <- (toErl 8)
  , (BIN.Ok y_30 bin_29) <-
      (BIN.chopInt bin_26 size_28 1 BIN.Big BIN.Unsigned)
  , (ErlangInt size_31) <- (toErl 8)
  , (BIN.Ok z_33 bin_32) <-
      (BIN.chopInt bin_29 size_31 1 BIN.Big BIN.Unsigned)
  , (ErlangInt size_34) <- (BIN.size bin_32)
  , (BIN.Ok rest_36 bin_35) <- (BIN.chopBin bin_32 size_34 8)
  , BIN.empty bin_35
  , ((((((((weakEq a_9 (toErl 56)) ||
             ((weakEq a_9 (toErl 57)) ||
                ((weakEq a_9 (toErl 97)) ||
                   ((weakEq a_9 (toErl 98)) ||
                      ((weakEq a_9 (toErl 65)) ||
                         (weakEq a_9 (toErl 66))))))) &&
            ((weakEq f_6 (toErl 100)) || (weakEq f_6 (toErl 68)))) &&
           (((weakGeq b_12 (toErl 97)) && (weakLeq b_12 (toErl 102))) ||
              (((weakGeq b_12 (toErl 65)) && (weakLeq b_12 (toErl 70))) ||
                 ((weakGeq b_12 (toErl 48)) && (weakLeq b_12 (toErl 57)))))) &&
          (((weakGeq c_15 (toErl 97)) && (weakLeq c_15 (toErl 102))) ||
             (((weakGeq c_15 (toErl 65)) && (weakLeq c_15 (toErl 70))) ||
                ((weakGeq c_15 (toErl 48)) && (weakLeq c_15 (toErl 57)))))) &&
         (((weakGeq w_24 (toErl 97)) && (weakLeq w_24 (toErl 102))) ||
            (((weakGeq w_24 (toErl 65)) && (weakLeq w_24 (toErl 70))) ||
               ((weakGeq w_24 (toErl 48)) && (weakLeq w_24 (toErl 57)))))) &&
        (((weakGeq x_27 (toErl 97)) && (weakLeq x_27 (toErl 102))) ||
           (((weakGeq x_27 (toErl 65)) && (weakLeq x_27 (toErl 70))) ||
              ((weakGeq x_27 (toErl 48)) && (weakLeq x_27 (toErl 57)))))) &&
       (((weakGeq y_30 (toErl 97)) && (weakLeq y_30 (toErl 102))) ||
          (((weakGeq y_30 (toErl 65)) && (weakLeq y_30 (toErl 70))) ||
             ((weakGeq y_30 (toErl 48)) && (weakLeq y_30 (toErl 57)))))) &&
      (((weakGeq z_33 (toErl 97)) && (weakLeq z_33 (toErl 102))) ||
         (((weakGeq z_33 (toErl 65)) && (weakLeq z_33 (toErl 70))) ||
            ((weakGeq z_33 (toErl 48)) && (weakLeq z_33 (toErl 57))))) =
  let
    case_41 =
      case config_40 of
        (ErlangTuple arr_44) | (DM.Just field_43) <- (arr_44 DA.!! 7) ->
          field_43
        _ -> EXC.badrecord (ErlangAtom "config")
  in
    case case_41 of
      (ErlangAtom "true") ->
        let
          case_45 =
            case config_40 of
              (ErlangTuple arr_48) | (DM.Just field_47) <- (arr_48 DA.!! 14) ->
                field_47
              _ -> EXC.badrecord (ErlangAtom "config")
        in
          case case_45 of
            (ErlangAtom "false") ->
              BIF.erlang__error__1 [ErlangAtom "badarg"]
            f_50 | f_50 == f_6 ->
              let    bin_el_55 = toErl 117
              in let bin_el_56 = toErl 100
              in let bin_el_60 = toErl 92
              in let bin_el_61 = toErl 117
              in let
                tup_el_54 =
                  ErlangBinary
                    (BIN.concat
                       [BIN.fromInt bin_el_55 (toErl 8) 1 BIN.Big,
                        BIN.fromInt bin_el_56 (toErl 8) 1 BIN.Big,
                        BIN.fromInt a_9 (toErl 8) 1 BIN.Big,
                        BIN.fromInt b_12 (toErl 8) 1 BIN.Big,
                        BIN.fromInt c_15 (toErl 8) 1 BIN.Big,
                        BIN.fromInt bin_el_60 (toErl 8) 1 BIN.Big,
                        BIN.fromInt bin_el_61 (toErl 8) 1 BIN.Big,
                        BIN.fromInt w_24 (toErl 8) 1 BIN.Big,
                        BIN.fromInt x_27 (toErl 8) 1 BIN.Big,
                        BIN.fromInt y_30 (toErl 8) 1 BIN.Big,
                        BIN.fromInt z_33 (toErl 8) 1 BIN.Big,
                        BIN.binPrefix rest_36 (BIN.packedSize rest_36) 8])
              in let
                arg_52 =
                  ErlangTuple
                    [ErlangAtom "decoder", tup_el_54, acc_38, ErlangAtom "null",
                     stack_39]
              in let
                arg_70 =
                  BIF.do_remote_fun_call "Jsx.Config" "erlps__config_to_list__1"
                    [config_40]
              in
                BIF.erlang__apply__2
                  [f_6,
                   ErlangCons handler_37
                     (ErlangCons arg_52 (ErlangCons arg_70 ErlangEmptyList))]
            something_else -> EXC.case_clause something_else
      (ErlangAtom "false") ->
        let    bin_el_79 = toErl 65533
        in let
          head_78 =
            ErlangBinary (BIN.fromInt bin_el_79 (toErl 8) 1 BIN.Big)
        in let bin_el_82 = toErl 65533
        in let
          head_81 =
            ErlangBinary (BIN.fromInt bin_el_82 (toErl 8) 1 BIN.Big)
        in
          erlps__string__5
            [rest_36, handler_37,
             ErlangCons acc_38
               (ErlangCons head_78 (ErlangCons head_81 ErlangEmptyList)),
             stack_39, config_40]
      something_else -> EXC.case_clause something_else
erlps__unescape__5 [(ErlangBinary binSeg_0), handler_22, acc_23,
                    stack_24, config_25]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 117)
  , (ErlangInt size_4) <- (toErl 8)
  , (BIN.Ok f_6 bin_5) <-
      (BIN.chopInt bin_2 size_4 1 BIN.Big BIN.Unsigned)
  , (ErlangInt size_7) <- (toErl 8)
  , (BIN.Ok a_9 bin_8) <-
      (BIN.chopInt bin_5 size_7 1 BIN.Big BIN.Unsigned)
  , (ErlangInt size_10) <- (toErl 8)
  , (BIN.Ok b_12 bin_11) <-
      (BIN.chopInt bin_8 size_10 1 BIN.Big BIN.Unsigned)
  , (ErlangInt size_13) <- (toErl 8)
  , (BIN.Ok c_15 bin_14) <-
      (BIN.chopInt bin_11 size_13 1 BIN.Big BIN.Unsigned)
  , (ErlangInt size_16) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_18) bin_17) <-
      (BIN.chopInt bin_14 size_16 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_18) == (toErl 92)
  , (ErlangInt size_19) <- (BIN.size bin_17)
  , (BIN.Ok rest_21 bin_20) <- (BIN.chopBin bin_17 size_19 8)
  , BIN.empty bin_20
  , ((((weakEq a_9 (toErl 56)) ||
         ((weakEq a_9 (toErl 57)) ||
            ((weakEq a_9 (toErl 97)) ||
               ((weakEq a_9 (toErl 98)) ||
                  ((weakEq a_9 (toErl 65)) || (weakEq a_9 (toErl 66))))))) &&
        ((weakEq f_6 (toErl 100)) || (weakEq f_6 (toErl 68)))) &&
       (((weakGeq b_12 (toErl 97)) && (weakLeq b_12 (toErl 102))) ||
          (((weakGeq b_12 (toErl 65)) && (weakLeq b_12 (toErl 70))) ||
             ((weakGeq b_12 (toErl 48)) && (weakLeq b_12 (toErl 57)))))) &&
      (((weakGeq c_15 (toErl 97)) && (weakLeq c_15 (toErl 102))) ||
         (((weakGeq c_15 (toErl 65)) && (weakLeq c_15 (toErl 70))) ||
            ((weakGeq c_15 (toErl 48)) && (weakLeq c_15 (toErl 57))))) =
  let    bin_el_28 = toErl 92
  in let bin_el_29 = toErl 117
  in let bin_el_30 = toErl 100
  in let bin_el_34 = toErl 92
  in let
    arg_27 =
      ErlangBinary
        (BIN.concat
           [BIN.fromInt bin_el_28 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_29 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_30 (toErl 8) 1 BIN.Big,
            BIN.fromInt a_9 (toErl 8) 1 BIN.Big,
            BIN.fromInt b_12 (toErl 8) 1 BIN.Big,
            BIN.fromInt c_15 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_34 (toErl 8) 1 BIN.Big,
            BIN.binPrefix rest_21 (BIN.packedSize rest_21) 8])
  in
    erlps__incomplete__6
      [ErlangAtom "string", arg_27, handler_22, acc_23, stack_24,
       config_25]
erlps__unescape__5 [(ErlangBinary binSeg_0), handler_16, acc_17,
                    stack_18, config_19]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 117)
  , (ErlangInt size_4) <- (toErl 8)
  , (BIN.Ok f_6 bin_5) <-
      (BIN.chopInt bin_2 size_4 1 BIN.Big BIN.Unsigned)
  , (ErlangInt size_7) <- (toErl 8)
  , (BIN.Ok a_9 bin_8) <-
      (BIN.chopInt bin_5 size_7 1 BIN.Big BIN.Unsigned)
  , (ErlangInt size_10) <- (toErl 8)
  , (BIN.Ok b_12 bin_11) <-
      (BIN.chopInt bin_8 size_10 1 BIN.Big BIN.Unsigned)
  , (ErlangInt size_13) <- (toErl 8)
  , (BIN.Ok c_15 bin_14) <-
      (BIN.chopInt bin_11 size_13 1 BIN.Big BIN.Unsigned)
  , BIN.empty bin_14
  , ((((weakEq a_9 (toErl 56)) ||
         ((weakEq a_9 (toErl 57)) ||
            ((weakEq a_9 (toErl 97)) ||
               ((weakEq a_9 (toErl 98)) ||
                  ((weakEq a_9 (toErl 65)) || (weakEq a_9 (toErl 66))))))) &&
        ((weakEq f_6 (toErl 100)) || (weakEq f_6 (toErl 68)))) &&
       (((weakGeq b_12 (toErl 97)) && (weakLeq b_12 (toErl 102))) ||
          (((weakGeq b_12 (toErl 65)) && (weakLeq b_12 (toErl 70))) ||
             ((weakGeq b_12 (toErl 48)) && (weakLeq b_12 (toErl 57)))))) &&
      (((weakGeq c_15 (toErl 97)) && (weakLeq c_15 (toErl 102))) ||
         (((weakGeq c_15 (toErl 65)) && (weakLeq c_15 (toErl 70))) ||
            ((weakGeq c_15 (toErl 48)) && (weakLeq c_15 (toErl 57))))) =
  let    bin_el_22 = toErl 92
  in let bin_el_23 = toErl 117
  in let bin_el_24 = toErl 100
  in let
    arg_21 =
      ErlangBinary
        (BIN.concat
           [BIN.fromInt bin_el_22 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_23 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_24 (toErl 8) 1 BIN.Big,
            BIN.fromInt a_9 (toErl 8) 1 BIN.Big,
            BIN.fromInt b_12 (toErl 8) 1 BIN.Big,
            BIN.fromInt c_15 (toErl 8) 1 BIN.Big])
  in
    erlps__incomplete__6
      [ErlangAtom "string", arg_21, handler_16, acc_17, stack_18,
       config_19]
erlps__unescape__5 [(ErlangBinary binSeg_0), handler_19, acc_20,
                    stack_21, config_22]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 117)
  , (ErlangInt size_4) <- (toErl 8)
  , (BIN.Ok a_6 bin_5) <-
      (BIN.chopInt bin_2 size_4 1 BIN.Big BIN.Unsigned)
  , (ErlangInt size_7) <- (toErl 8)
  , (BIN.Ok b_9 bin_8) <-
      (BIN.chopInt bin_5 size_7 1 BIN.Big BIN.Unsigned)
  , (ErlangInt size_10) <- (toErl 8)
  , (BIN.Ok c_12 bin_11) <-
      (BIN.chopInt bin_8 size_10 1 BIN.Big BIN.Unsigned)
  , (ErlangInt size_13) <- (toErl 8)
  , (BIN.Ok d_15 bin_14) <-
      (BIN.chopInt bin_11 size_13 1 BIN.Big BIN.Unsigned)
  , (ErlangInt size_16) <- (BIN.size bin_14)
  , (BIN.Ok rest_18 bin_17) <- (BIN.chopBin bin_14 size_16 8)
  , BIN.empty bin_17
  , (((((weakGeq a_6 (toErl 97)) && (weakLeq a_6 (toErl 102))) ||
         (((weakGeq a_6 (toErl 65)) && (weakLeq a_6 (toErl 70))) ||
            ((weakGeq a_6 (toErl 48)) && (weakLeq a_6 (toErl 57))))) &&
        (((weakGeq b_9 (toErl 97)) && (weakLeq b_9 (toErl 102))) ||
           (((weakGeq b_9 (toErl 65)) && (weakLeq b_9 (toErl 70))) ||
              ((weakGeq b_9 (toErl 48)) && (weakLeq b_9 (toErl 57)))))) &&
       (((weakGeq c_12 (toErl 97)) && (weakLeq c_12 (toErl 102))) ||
          (((weakGeq c_12 (toErl 65)) && (weakLeq c_12 (toErl 70))) ||
             ((weakGeq c_12 (toErl 48)) && (weakLeq c_12 (toErl 57)))))) &&
      (((weakGeq d_15 (toErl 97)) && (weakLeq d_15 (toErl 102))) ||
         (((weakGeq d_15 (toErl 65)) && (weakLeq d_15 (toErl 70))) ||
            ((weakGeq d_15 (toErl 48)) && (weakLeq d_15 (toErl 57))))) =
  let    arg_33 = toErl 16
  in let
    case_23 =
      BIF.erlang__list_to_integer__2
        [ErlangCons a_6
           (ErlangCons b_9
              (ErlangCons c_12 (ErlangCons d_15 ErlangEmptyList))),
         arg_33]
  in
    case case_23 of
      codepoint_34 | (weakLt codepoint_34 (toErl 55296)) ||
                       (weakGt codepoint_34 (toErl 57343)) ->
        let head_40 = erlps__maybe_replace__2 [codepoint_34, config_22]
        in
          erlps__string__5
            [rest_18, handler_19,
             ErlangCons acc_20 (ErlangCons head_40 ErlangEmptyList), stack_21,
             config_22]
      _ | (ErlangAtom "true") ==
            (falsifyErrors
               (\ _ ->
                  case config_22 of
                    (ErlangTuple arr_48) | (DM.Just field_47) <-
                                             (arr_48 DA.!! 7) ->
                      field_47
                    _ -> EXC.badrecord (ErlangAtom "config"))) ->
        let
          case_49 =
            case config_22 of
              (ErlangTuple arr_52) | (DM.Just field_51) <- (arr_52 DA.!! 14) ->
                field_51
              _ -> EXC.badrecord (ErlangAtom "config")
        in
          case case_49 of
            (ErlangAtom "false") ->
              BIF.erlang__error__1 [ErlangAtom "badarg"]
            f_54 ->
              let    bin_el_56 = toErl 92
              in let bin_el_57 = toErl 117
              in let
                arg_55 =
                  ErlangBinary
                    (BIN.concat
                       [BIN.fromInt bin_el_56 (toErl 8) 1 BIN.Big,
                        BIN.fromInt bin_el_57 (toErl 8) 1 BIN.Big,
                        BIN.fromInt a_6 (toErl 8) 1 BIN.Big,
                        BIN.fromInt b_9 (toErl 8) 1 BIN.Big,
                        BIN.fromInt c_12 (toErl 8) 1 BIN.Big,
                        BIN.fromInt d_15 (toErl 8) 1 BIN.Big,
                        BIN.binPrefix rest_18 (BIN.packedSize rest_18) 8])
              in let
                arg_63 =
                  ErlangTuple
                    [ErlangAtom "decoder", ErlangAtom "string", handler_19,
                     acc_20, stack_21]
              in let
                arg_69 =
                  BIF.do_remote_fun_call "Jsx.Config" "erlps__config_to_list__1"
                    [config_22]
              in
                BIF.erlang__apply__2
                  [f_54,
                   ErlangCons arg_55
                     (ErlangCons arg_63 (ErlangCons arg_69 ErlangEmptyList))]
      _ ->
        let    bin_el_78 = toErl 65533
        in let
          head_77 =
            ErlangBinary (BIN.fromInt bin_el_78 (toErl 8) 1 BIN.Big)
        in
          erlps__string__5
            [rest_18, handler_19,
             ErlangCons acc_20 (ErlangCons head_77 ErlangEmptyList), stack_21,
             config_22]
erlps__unescape__5 [bin_0, handler_1, acc_2, stack_3, config_4] =
  let case_5 = erlps__is_partial_escape__1 [bin_0]
  in
    case case_5 of
      (ErlangAtom "true") ->
        let    bin_el_9 = toErl 92
        in let
          arg_8 =
            ErlangBinary
              (BIN.concat
                 [BIN.fromInt bin_el_9 (toErl 8) 1 BIN.Big,
                  BIN.binPrefix bin_0 (BIN.packedSize bin_0) 8])
        in
          erlps__incomplete__6
            [ErlangAtom "string", arg_8, handler_1, acc_2, stack_3, config_4]
      (ErlangAtom "false") ->
        let
          case_15 =
            case config_4 of
              (ErlangTuple arr_18) | (DM.Just field_17) <- (arr_18 DA.!! 9) ->
                field_17
              _ -> EXC.badrecord (ErlangAtom "config")
        in
          case case_15 of
            (ErlangAtom "true") ->
              let
                case_19 =
                  case config_4 of
                    (ErlangTuple arr_22) | (DM.Just field_21) <-
                                             (arr_22 DA.!! 14) ->
                      field_21
                    _ -> EXC.badrecord (ErlangAtom "config")
              in
                case case_19 of
                  (ErlangAtom "false") ->
                    BIF.erlang__error__1 [ErlangAtom "badarg"]
                  f_24 ->
                    let    bin_el_26 = toErl 92
                    in let
                      arg_25 =
                        ErlangBinary
                          (BIN.concat
                             [BIN.fromInt bin_el_26 (toErl 8) 1 BIN.Big,
                              BIN.binPrefix bin_0 (BIN.packedSize bin_0) 8])
                    in let
                      arg_28 =
                        ErlangTuple
                          [ErlangAtom "decoder", ErlangAtom "string", handler_1,
                           acc_2, stack_3]
                    in let
                      arg_34 =
                        BIF.do_remote_fun_call "Jsx.Config"
                          "erlps__config_to_list__1" [config_4]
                    in
                      BIF.erlang__apply__2
                        [f_24,
                         ErlangCons arg_25
                           (ErlangCons arg_28
                              (ErlangCons arg_34 ErlangEmptyList))]
            (ErlangAtom "false") ->
              let    bin_el_43 = toErl 92
              in let
                head_42 =
                  ErlangBinary (BIN.fromInt bin_el_43 (toErl 8) 1 BIN.Big)
              in
                erlps__string__5
                  [bin_0, handler_1,
                   ErlangCons acc_2 (ErlangCons head_42 ErlangEmptyList),
                   stack_3, config_4]
            something_else -> EXC.case_clause something_else
      something_else -> EXC.case_clause something_else
erlps__unescape__5 [arg_47, arg_48, arg_49, arg_50, arg_51] =
  EXC.function_clause unit
erlps__unescape__5 args =
  EXC.badarity (ErlangFun 5 erlps__unescape__5) args

erlps__is_partial_escape__1 :: ErlangFun
erlps__is_partial_escape__1 [(ErlangBinary binSeg_0)]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 117)
  , (ErlangInt size_4) <- (toErl 8)
  , (BIN.Ok a_6 bin_5) <-
      (BIN.chopInt bin_2 size_4 1 BIN.Big BIN.Unsigned)
  , (ErlangInt size_7) <- (toErl 8)
  , (BIN.Ok b_9 bin_8) <-
      (BIN.chopInt bin_5 size_7 1 BIN.Big BIN.Unsigned)
  , (ErlangInt size_10) <- (toErl 8)
  , (BIN.Ok c_12 bin_11) <-
      (BIN.chopInt bin_8 size_10 1 BIN.Big BIN.Unsigned)
  , BIN.empty bin_11
  , ((((weakGeq a_6 (toErl 97)) && (weakLeq a_6 (toErl 102))) ||
        (((weakGeq a_6 (toErl 65)) && (weakLeq a_6 (toErl 70))) ||
           ((weakGeq a_6 (toErl 48)) && (weakLeq a_6 (toErl 57))))) &&
       (((weakGeq b_9 (toErl 97)) && (weakLeq b_9 (toErl 102))) ||
          (((weakGeq b_9 (toErl 65)) && (weakLeq b_9 (toErl 70))) ||
             ((weakGeq b_9 (toErl 48)) && (weakLeq b_9 (toErl 57)))))) &&
      (((weakGeq c_12 (toErl 97)) && (weakLeq c_12 (toErl 102))) ||
         (((weakGeq c_12 (toErl 65)) && (weakLeq c_12 (toErl 70))) ||
            ((weakGeq c_12 (toErl 48)) && (weakLeq c_12 (toErl 57))))) =
  ErlangAtom "true"
erlps__is_partial_escape__1 [(ErlangBinary binSeg_0)]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 117)
  , (ErlangInt size_4) <- (toErl 8)
  , (BIN.Ok a_6 bin_5) <-
      (BIN.chopInt bin_2 size_4 1 BIN.Big BIN.Unsigned)
  , (ErlangInt size_7) <- (toErl 8)
  , (BIN.Ok b_9 bin_8) <-
      (BIN.chopInt bin_5 size_7 1 BIN.Big BIN.Unsigned)
  , BIN.empty bin_8
  , (((weakGeq a_6 (toErl 97)) && (weakLeq a_6 (toErl 102))) ||
       (((weakGeq a_6 (toErl 65)) && (weakLeq a_6 (toErl 70))) ||
          ((weakGeq a_6 (toErl 48)) && (weakLeq a_6 (toErl 57))))) &&
      (((weakGeq b_9 (toErl 97)) && (weakLeq b_9 (toErl 102))) ||
         (((weakGeq b_9 (toErl 65)) && (weakLeq b_9 (toErl 70))) ||
            ((weakGeq b_9 (toErl 48)) && (weakLeq b_9 (toErl 57))))) =
  ErlangAtom "true"
erlps__is_partial_escape__1 [(ErlangBinary binSeg_0)]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 117)
  , (ErlangInt size_4) <- (toErl 8)
  , (BIN.Ok a_6 bin_5) <-
      (BIN.chopInt bin_2 size_4 1 BIN.Big BIN.Unsigned)
  , BIN.empty bin_5
  , ((weakGeq a_6 (toErl 97)) && (weakLeq a_6 (toErl 102))) ||
      (((weakGeq a_6 (toErl 65)) && (weakLeq a_6 (toErl 70))) ||
         ((weakGeq a_6 (toErl 48)) && (weakLeq a_6 (toErl 57)))) =
  ErlangAtom "true"
erlps__is_partial_escape__1 [(ErlangBinary binSeg_0)]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 117)
  , BIN.empty bin_2 =
  ErlangAtom "true"
erlps__is_partial_escape__1 [(ErlangBinary binEnd_0)]
  | BIN.empty binEnd_0 =
  ErlangAtom "true"
erlps__is_partial_escape__1 [_] = ErlangAtom "false"
erlps__is_partial_escape__1 [arg_0] = EXC.function_clause unit
erlps__is_partial_escape__1 args =
  EXC.badarity (ErlangFun 1 erlps__is_partial_escape__1) args

erlps__maybe_replace__2 :: ErlangFun
erlps__maybe_replace__2 [c_0,
                         (ErlangTuple [(ErlangAtom "config"),
                                       (ErlangAtom "true"), _, _, _, _, _, _, _,
                                       _, _, _, _, _, _, _])]
  =
  ErlangBinary (BIN.fromInt c_0 (toErl 8) 1 BIN.Big)
erlps__maybe_replace__2 [(ErlangInt num_0),
                         (ErlangTuple [(ErlangAtom "config"), _, _,
                                       (ErlangAtom "true"), _, _, _, _, _, _, _,
                                       _, _, _, _, _])]
  | (ErlangInt num_0) == (toErl 8) =
  let    bin_el_1 = toErl 92
  in let bin_el_2 = toErl 98
  in
    ErlangBinary
      (BIN.concat
         [BIN.fromInt bin_el_1 (toErl 8) 1 BIN.Big,
          BIN.fromInt bin_el_2 (toErl 8) 1 BIN.Big])
erlps__maybe_replace__2 [(ErlangInt num_0),
                         (ErlangTuple [(ErlangAtom "config"), _, _,
                                       (ErlangAtom "true"), _, _, _, _, _, _, _,
                                       _, _, _, _, _])]
  | (ErlangInt num_0) == (toErl 9) =
  let    bin_el_1 = toErl 92
  in let bin_el_2 = toErl 116
  in
    ErlangBinary
      (BIN.concat
         [BIN.fromInt bin_el_1 (toErl 8) 1 BIN.Big,
          BIN.fromInt bin_el_2 (toErl 8) 1 BIN.Big])
erlps__maybe_replace__2 [(ErlangInt num_0),
                         (ErlangTuple [(ErlangAtom "config"), _, _,
                                       (ErlangAtom "true"), _, _, _, _, _, _, _,
                                       _, _, _, _, _])]
  | (ErlangInt num_0) == (toErl 10) =
  let    bin_el_1 = toErl 92
  in let bin_el_2 = toErl 110
  in
    ErlangBinary
      (BIN.concat
         [BIN.fromInt bin_el_1 (toErl 8) 1 BIN.Big,
          BIN.fromInt bin_el_2 (toErl 8) 1 BIN.Big])
erlps__maybe_replace__2 [(ErlangInt num_0),
                         (ErlangTuple [(ErlangAtom "config"), _, _,
                                       (ErlangAtom "true"), _, _, _, _, _, _, _,
                                       _, _, _, _, _])]
  | (ErlangInt num_0) == (toErl 12) =
  let    bin_el_1 = toErl 92
  in let bin_el_2 = toErl 102
  in
    ErlangBinary
      (BIN.concat
         [BIN.fromInt bin_el_1 (toErl 8) 1 BIN.Big,
          BIN.fromInt bin_el_2 (toErl 8) 1 BIN.Big])
erlps__maybe_replace__2 [(ErlangInt num_0),
                         (ErlangTuple [(ErlangAtom "config"), _, _,
                                       (ErlangAtom "true"), _, _, _, _, _, _, _,
                                       _, _, _, _, _])]
  | (ErlangInt num_0) == (toErl 13) =
  let    bin_el_1 = toErl 92
  in let bin_el_2 = toErl 114
  in
    ErlangBinary
      (BIN.concat
         [BIN.fromInt bin_el_1 (toErl 8) 1 BIN.Big,
          BIN.fromInt bin_el_2 (toErl 8) 1 BIN.Big])
erlps__maybe_replace__2 [(ErlangInt num_0),
                         (ErlangTuple [(ErlangAtom "config"), _, _,
                                       (ErlangAtom "true"), _, _, _, _, _, _, _,
                                       _, _, _, _, _])]
  | (ErlangInt num_0) == (toErl 34) =
  let    bin_el_1 = toErl 92
  in let bin_el_2 = toErl 34
  in
    ErlangBinary
      (BIN.concat
         [BIN.fromInt bin_el_1 (toErl 8) 1 BIN.Big,
          BIN.fromInt bin_el_2 (toErl 8) 1 BIN.Big])
erlps__maybe_replace__2 [(ErlangInt num_0),
                         config_1@(ErlangTuple [(ErlangAtom "config"), _, _,
                                                (ErlangAtom "true"), _, _, _, _,
                                                _, _, _, _, _, _, _, _])]
  | (ErlangInt num_0) == (toErl 47) =
  let
    case_2 =
      case config_1 of
        (ErlangTuple arr_5) | (DM.Just field_4) <- (arr_5 DA.!! 2) ->
          field_4
        _ -> EXC.badrecord (ErlangAtom "config")
  in
    case case_2 of
      (ErlangAtom "true") ->
        let    bin_el_6 = toErl 92
        in let bin_el_7 = toErl 47
        in
          ErlangBinary
            (BIN.concat
               [BIN.fromInt bin_el_6 (toErl 8) 1 BIN.Big,
                BIN.fromInt bin_el_7 (toErl 8) 1 BIN.Big])
      (ErlangAtom "false") ->
        let bin_el_8 = toErl 47
        in ErlangBinary (BIN.fromInt bin_el_8 (toErl 8) 1 BIN.Big)
      something_else -> EXC.case_clause something_else
erlps__maybe_replace__2 [(ErlangInt num_0),
                         (ErlangTuple [(ErlangAtom "config"), _, _,
                                       (ErlangAtom "true"), _, _, _, _, _, _, _,
                                       _, _, _, _, _])]
  | (ErlangInt num_0) == (toErl 92) =
  let    bin_el_1 = toErl 92
  in let bin_el_2 = toErl 92
  in
    ErlangBinary
      (BIN.concat
         [BIN.fromInt bin_el_1 (toErl 8) 1 BIN.Big,
          BIN.fromInt bin_el_2 (toErl 8) 1 BIN.Big])
erlps__maybe_replace__2 [x_0,
                         config_1@(ErlangTuple [(ErlangAtom "config"), _, _,
                                                (ErlangAtom "true"), _, _, _, _,
                                                _, _, _, _, _, _, _, _])]
  | (weakEq x_0 (toErl 8232)) || (weakEq x_0 (toErl 8233)) =
  let
    case_2 =
      case config_1 of
        (ErlangTuple arr_5) | (DM.Just field_4) <- (arr_5 DA.!! 13) ->
          field_4
        _ -> EXC.badrecord (ErlangAtom "config")
  in
    case case_2 of
      (ErlangAtom "true") ->
        ErlangBinary (BIN.fromInt x_0 (toErl 8) 1 BIN.Big)
      (ErlangAtom "false") -> erlps__json_escape_sequence__1 [x_0]
      something_else -> EXC.case_clause something_else
erlps__maybe_replace__2 [x_0,
                         (ErlangTuple [(ErlangAtom "config"), _, _,
                                       (ErlangAtom "true"), _, _, _, _, _, _, _,
                                       _, _, _, _, _])]
  | weakLt x_0 (toErl 32) =
  erlps__json_escape_sequence__1 [x_0]
erlps__maybe_replace__2 [x_0, _config_1] =
  ErlangBinary (BIN.fromInt x_0 (toErl 8) 1 BIN.Big)
erlps__maybe_replace__2 [arg_3, arg_4] = EXC.function_clause unit
erlps__maybe_replace__2 args =
  EXC.badarity (ErlangFun 2 erlps__maybe_replace__2) args

erlps__json_escape_sequence__1 :: ErlangFun
erlps__json_escape_sequence__1 [x_0] | weakLt x_0 (toErl 65536) =
  let
    matchExpr_15 =
      ErlangBinary (BIN.fromInt x_0 (toErl 16) 1 BIN.Big)
  in
    case matchExpr_15 of
      (ErlangBinary binSeg_2) | (ErlangInt size_3) <- (toErl 4)
                              , (BIN.Ok a_5 bin_4) <-
                                  (BIN.chopInt binSeg_2 size_3 1 BIN.Big
                                     BIN.Unsigned)
                              , (ErlangInt size_6) <- (toErl 4)
                              , (BIN.Ok b_8 bin_7) <-
                                  (BIN.chopInt bin_4 size_6 1 BIN.Big
                                     BIN.Unsigned)
                              , (ErlangInt size_9) <- (toErl 4)
                              , (BIN.Ok c_11 bin_10) <-
                                  (BIN.chopInt bin_7 size_9 1 BIN.Big
                                     BIN.Unsigned)
                              , (ErlangInt size_12) <- (toErl 4)
                              , (BIN.Ok d_14 bin_13) <-
                                  (BIN.chopInt bin_10 size_12 1 BIN.Big
                                     BIN.Unsigned)
                              , BIN.empty bin_13 ->
        let    bin_el_16 = toErl 92
        in let bin_el_17 = toErl 117
        in let bin_el_18 = erlps__to_hex__1 [a_5]
        in let bin_el_20 = erlps__to_hex__1 [b_8]
        in let bin_el_22 = erlps__to_hex__1 [c_11]
        in let bin_el_24 = erlps__to_hex__1 [d_14]
        in
          ErlangBinary
            (BIN.concat
               [BIN.fromInt bin_el_16 (toErl 8) 1 BIN.Big,
                BIN.fromInt bin_el_17 (toErl 8) 1 BIN.Big,
                BIN.fromInt bin_el_18 (toErl 8) 1 BIN.Big,
                BIN.fromInt bin_el_20 (toErl 8) 1 BIN.Big,
                BIN.fromInt bin_el_22 (toErl 8) 1 BIN.Big,
                BIN.fromInt bin_el_24 (toErl 8) 1 BIN.Big])
      _ -> EXC.badmatch matchExpr_15
erlps__json_escape_sequence__1 [x_0] =
  let    rop_2 = toErl 65536
  in let adjusted_3 = BIF.erlang__op_minus [x_0, rop_2]
  in let
    matchExpr_12 =
      ErlangBinary (BIN.fromInt adjusted_3 (toErl 20) 1 BIN.Big)
  in
    case matchExpr_12 of
      (ErlangBinary binSeg_5) | (ErlangInt size_6) <- (toErl 10)
                              , (BIN.Ok a_8 bin_7) <-
                                  (BIN.chopInt binSeg_5 size_6 1 BIN.Big
                                     BIN.Unsigned)
                              , (ErlangInt size_9) <- (toErl 10)
                              , (BIN.Ok b_11 bin_10) <-
                                  (BIN.chopInt bin_7 size_9 1 BIN.Big
                                     BIN.Unsigned)
                              , BIN.empty bin_10 ->
        let    rop_16 = toErl 55296
        in let arg_14 = BIF.erlang__op_plus [a_8, rop_16]
        in let head_13 = erlps__json_escape_sequence__1 [arg_14]
        in let rop_21 = toErl 56320
        in let arg_19 = BIF.erlang__op_plus [b_11, rop_21]
        in let head_18 = erlps__json_escape_sequence__1 [arg_19]
        in ErlangCons head_13 (ErlangCons head_18 ErlangEmptyList)
      _ -> EXC.badmatch matchExpr_12
erlps__json_escape_sequence__1 [arg_23] =
  EXC.function_clause unit
erlps__json_escape_sequence__1 args =
  EXC.badarity (ErlangFun 1 erlps__json_escape_sequence__1) args

erlps__to_hex__1 :: ErlangFun
erlps__to_hex__1 [(ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 10) =
  toErl 97
erlps__to_hex__1 [(ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 11) =
  toErl 98
erlps__to_hex__1 [(ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 12) =
  toErl 99
erlps__to_hex__1 [(ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 13) =
  toErl 100
erlps__to_hex__1 [(ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 14) =
  toErl 101
erlps__to_hex__1 [(ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 15) =
  toErl 102
erlps__to_hex__1 [x_0] =
  let rop_2 = toErl 48
  in BIF.erlang__op_plus [x_0, rop_2]
erlps__to_hex__1 [arg_3] = EXC.function_clause unit
erlps__to_hex__1 args =
  EXC.badarity (ErlangFun 1 erlps__to_hex__1) args

erlps__number__5 :: ErlangFun
erlps__number__5 [(ErlangBinary binSeg_0), handler_7, acc_8,
                  (ErlangCons (ErlangAtom "integer") stack_9), config_10]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 101)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    head_16 = toErl 46
  in let head_18 = toErl 48
  in let head_20 = toErl 101
  in
    erlps__number__5
      [rest_6, handler_7,
       ErlangCons acc_8
         (ErlangCons head_16
            (ErlangCons head_18 (ErlangCons head_20 ErlangEmptyList))),
       ErlangCons (ErlangAtom "e") stack_9, config_10]
erlps__number__5 [(ErlangBinary binSeg_0), handler_7, acc_8,
                  (ErlangCons (ErlangAtom "integer") stack_9), config_10]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 69)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    head_16 = toErl 46
  in let head_18 = toErl 48
  in let head_20 = toErl 101
  in
    erlps__number__5
      [rest_6, handler_7,
       ErlangCons acc_8
         (ErlangCons head_16
            (ErlangCons head_18 (ErlangCons head_20 ErlangEmptyList))),
       ErlangCons (ErlangAtom "e") stack_9, config_10]
erlps__number__5 [(ErlangBinary binSeg_0), handler_7, acc_8,
                  (ErlangCons (ErlangAtom "zero") stack_9), config_10]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 101)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    head_16 = toErl 46
  in let head_18 = toErl 48
  in let head_20 = toErl 101
  in
    erlps__number__5
      [rest_6, handler_7,
       ErlangCons acc_8
         (ErlangCons head_16
            (ErlangCons head_18 (ErlangCons head_20 ErlangEmptyList))),
       ErlangCons (ErlangAtom "e") stack_9, config_10]
erlps__number__5 [(ErlangBinary binSeg_0), handler_7, acc_8,
                  (ErlangCons (ErlangAtom "zero") stack_9), config_10]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 69)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    head_16 = toErl 46
  in let head_18 = toErl 48
  in let head_20 = toErl 101
  in
    erlps__number__5
      [rest_6, handler_7,
       ErlangCons acc_8
         (ErlangCons head_16
            (ErlangCons head_18 (ErlangCons head_20 ErlangEmptyList))),
       ErlangCons (ErlangAtom "e") stack_9, config_10]
erlps__number__5 [(ErlangBinary binEnd_0), handler_1, acc_2,
                  (ErlangCons state_3 stack_4),
                  config_5@(ErlangTuple [(ErlangAtom "config"), _, _, _, _, _,
                                         _, _, _, _, (ErlangAtom "false"), _, _,
                                         _, _, _])]
  | BIN.empty binEnd_0 =
  let   
    numtype_7 =
      case state_3 of
        (ErlangAtom "zero") -> ErlangAtom "integer"
        (ErlangAtom "integer") -> ErlangAtom "integer"
        (ErlangAtom "decimal") -> ErlangAtom "float"
        (ErlangAtom "exp") -> ErlangAtom "float"
        something_else -> EXC.case_clause something_else
  in let arg_8 = ErlangBinary (BIN.concat [])
  in let tup_el_12 = BIF.erlang__iolist_to_binary__1 [acc_2]
  in let arg_10 = ErlangTuple [numtype_7, tup_el_12]
  in
    erlps__finish_number__5
      [arg_8, handler_1, arg_10, stack_4, config_5]
erlps__number__5 [(ErlangBinary binEnd_0), handler_1, acc_2,
                  stack_3, config_4]
  | BIN.empty binEnd_0 =
  let arg_6 = ErlangBinary (BIN.concat [])
  in
    erlps__incomplete__6
      [ErlangAtom "number", arg_6, handler_1, acc_2, stack_3, config_4]
erlps__number__5 [bin_0, handler_1, acc_2,
                  (ErlangCons state_3 stack_4), config_5]
  =
  let
    counted_23 =
      case state_3 of
        (ErlangAtom "zero") ->
          let arg_8 = toErl 0
          in erlps__zero__2 [bin_0, arg_8]
        (ErlangAtom "integer") ->
          let arg_10 = toErl 0
          in erlps__integer__2 [bin_0, arg_10]
        (ErlangAtom "negative") ->
          let arg_12 = toErl 0
          in erlps__negative__2 [bin_0, arg_12]
        (ErlangAtom "initialdecimal") ->
          let arg_14 = toErl 0
          in erlps__initialdecimal__2 [bin_0, arg_14]
        (ErlangAtom "decimal") ->
          let arg_16 = toErl 0
          in erlps__decimal__2 [bin_0, arg_16]
        (ErlangAtom "e") ->
          let arg_18 = toErl 0
          in erlps__e__2 [bin_0, arg_18]
        (ErlangAtom "ex") ->
          let arg_20 = toErl 0
          in erlps__ex__2 [bin_0, arg_20]
        (ErlangAtom "exp") ->
          let arg_22 = toErl 0
          in erlps__exp__2 [bin_0, arg_22]
        something_else -> EXC.case_clause something_else
  in
    case counted_23 of
      (ErlangTuple [(ErlangAtom "finish_integer"), size_25]) ->
        case bin_0 of
          (ErlangBinary binSeg_26) | (ErlangInt size_27) <- (size_25)
                                   , (BIN.Ok clean_29 bin_28) <-
                                       (BIN.chopBin binSeg_26 size_27 8)
                                   , (ErlangInt size_30) <- (BIN.size bin_28)
                                   , (BIN.Ok rest_32 bin_31) <-
                                       (BIN.chopBin bin_28 size_30 8)
                                   , BIN.empty bin_31 ->
            let   
              tup_el_38 =
                BIF.erlang__iolist_to_binary__1
                  [ErlangCons acc_2 (ErlangCons clean_29 ErlangEmptyList)]
            in let arg_36 = ErlangTuple [ErlangAtom "integer", tup_el_38]
            in
              erlps__finish_number__5
                [rest_32, handler_1, arg_36, stack_4, config_5]
          _ -> EXC.badmatch bin_0
      (ErlangTuple [(ErlangAtom "finish_float"), size_46]) ->
        case bin_0 of
          (ErlangBinary binSeg_47) | (ErlangInt size_48) <- (size_46)
                                   , (BIN.Ok clean_50 bin_49) <-
                                       (BIN.chopBin binSeg_47 size_48 8)
                                   , (ErlangInt size_51) <- (BIN.size bin_49)
                                   , (BIN.Ok rest_53 bin_52) <-
                                       (BIN.chopBin bin_49 size_51 8)
                                   , BIN.empty bin_52 ->
            let   
              tup_el_59 =
                BIF.erlang__iolist_to_binary__1
                  [ErlangCons acc_2 (ErlangCons clean_50 ErlangEmptyList)]
            in let arg_57 = ErlangTuple [ErlangAtom "float", tup_el_59]
            in
              erlps__finish_number__5
                [rest_53, handler_1, arg_57, stack_4, config_5]
          _ -> EXC.badmatch bin_0
      (ErlangTuple [(ErlangAtom "error"), size_67]) ->
        case bin_0 of
          (ErlangBinary binSeg_68) | (ErlangInt size_69) <- (size_67)
                                   , (BIN.Ok clean_71 bin_70) <-
                                       (BIN.chopBin binSeg_68 size_69 8)
                                   , (ErlangInt size_72) <- (BIN.size bin_70)
                                   , (BIN.Ok rest_74 bin_73) <-
                                       (BIN.chopBin bin_70 size_72 8)
                                   , BIN.empty bin_73 ->
            let
              case_76 =
                case config_5 of
                  (ErlangTuple arr_79) | (DM.Just field_78) <-
                                           (arr_79 DA.!! 14) ->
                    field_78
                  _ -> EXC.badrecord (ErlangAtom "config")
            in
              case case_76 of
                (ErlangAtom "false") ->
                  BIF.erlang__error__1 [ErlangAtom "badarg"]
                f_81 ->
                  let   
                    arg_83 =
                      ErlangTuple
                        [ErlangAtom "decoder", ErlangAtom "number", handler_1,
                         ErlangCons acc_2 (ErlangCons clean_71 ErlangEmptyList),
                         stack_4]
                  in let
                    arg_93 =
                      BIF.do_remote_fun_call "Jsx.Config"
                        "erlps__config_to_list__1" [config_5]
                  in
                    BIF.erlang__apply__2
                      [f_81,
                       ErlangCons rest_74
                         (ErlangCons arg_83
                            (ErlangCons arg_93 ErlangEmptyList))]
          _ -> EXC.badmatch bin_0
      (ErlangTuple [newstate_96, size_97]) ->
        case bin_0 of
          (ErlangBinary binSeg_98) | (ErlangInt size_99) <- (size_97)
                                   , (BIN.Ok clean_101 bin_100) <-
                                       (BIN.chopBin binSeg_98 size_99 8)
                                   , (ErlangInt size_102) <- (BIN.size bin_100)
                                   , (BIN.Ok rest_104 bin_103) <-
                                       (BIN.chopBin bin_100 size_102 8)
                                   , BIN.empty bin_103 ->
            erlps__number__5
              [rest_104, handler_1,
               ErlangCons acc_2 (ErlangCons clean_101 ErlangEmptyList),
               ErlangCons newstate_96 stack_4, config_5]
          _ -> EXC.badmatch bin_0
      something_else -> EXC.case_clause something_else
erlps__number__5 [arg_117, arg_118, arg_119, arg_120, arg_121] =
  EXC.function_clause unit
erlps__number__5 args =
  EXC.badarity (ErlangFun 5 erlps__number__5) args

erlps__zero__2 :: ErlangFun
erlps__zero__2 [(ErlangBinary binSeg_0), n_7]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 46)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_11 = toErl 1
  in let arg_9 = BIF.erlang__op_plus [n_7, rop_11]
  in erlps__initialdecimal__2 [rest_6, arg_9]
erlps__zero__2 [(ErlangBinary binSeg_0), n_4]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 101) =
  ErlangTuple [ErlangAtom "integer", n_4]
erlps__zero__2 [(ErlangBinary binSeg_0), n_4]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 69) =
  ErlangTuple [ErlangAtom "integer", n_4]
erlps__zero__2 [(ErlangBinary binEnd_0), n_1]
  | BIN.empty binEnd_0 =
  ErlangTuple [ErlangAtom "zero", n_1]
erlps__zero__2 [_, n_0] =
  ErlangTuple [ErlangAtom "finish_integer", n_0]
erlps__zero__2 [arg_3, arg_4] = EXC.function_clause unit
erlps__zero__2 args =
  EXC.badarity (ErlangFun 2 erlps__zero__2) args

erlps__integer__2 :: ErlangFun
erlps__integer__2 [(ErlangBinary binSeg_0), n_7]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 48)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_11 = toErl 1
  in let arg_9 = BIF.erlang__op_plus [n_7, rop_11]
  in erlps__integer__2 [rest_6, arg_9]
erlps__integer__2 [(ErlangBinary binSeg_0), n_7]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 49)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_11 = toErl 1
  in let arg_9 = BIF.erlang__op_plus [n_7, rop_11]
  in erlps__integer__2 [rest_6, arg_9]
erlps__integer__2 [(ErlangBinary binSeg_0), n_7]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 50)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_11 = toErl 1
  in let arg_9 = BIF.erlang__op_plus [n_7, rop_11]
  in erlps__integer__2 [rest_6, arg_9]
erlps__integer__2 [(ErlangBinary binSeg_0), n_7]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 51)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_11 = toErl 1
  in let arg_9 = BIF.erlang__op_plus [n_7, rop_11]
  in erlps__integer__2 [rest_6, arg_9]
erlps__integer__2 [(ErlangBinary binSeg_0), n_7]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 52)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_11 = toErl 1
  in let arg_9 = BIF.erlang__op_plus [n_7, rop_11]
  in erlps__integer__2 [rest_6, arg_9]
erlps__integer__2 [(ErlangBinary binSeg_0), n_7]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 53)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_11 = toErl 1
  in let arg_9 = BIF.erlang__op_plus [n_7, rop_11]
  in erlps__integer__2 [rest_6, arg_9]
erlps__integer__2 [(ErlangBinary binSeg_0), n_7]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 54)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_11 = toErl 1
  in let arg_9 = BIF.erlang__op_plus [n_7, rop_11]
  in erlps__integer__2 [rest_6, arg_9]
erlps__integer__2 [(ErlangBinary binSeg_0), n_7]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 55)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_11 = toErl 1
  in let arg_9 = BIF.erlang__op_plus [n_7, rop_11]
  in erlps__integer__2 [rest_6, arg_9]
erlps__integer__2 [(ErlangBinary binSeg_0), n_7]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 56)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_11 = toErl 1
  in let arg_9 = BIF.erlang__op_plus [n_7, rop_11]
  in erlps__integer__2 [rest_6, arg_9]
erlps__integer__2 [(ErlangBinary binSeg_0), n_7]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 57)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_11 = toErl 1
  in let arg_9 = BIF.erlang__op_plus [n_7, rop_11]
  in erlps__integer__2 [rest_6, arg_9]
erlps__integer__2 [(ErlangBinary binSeg_0), n_7]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 46)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_11 = toErl 1
  in let arg_9 = BIF.erlang__op_plus [n_7, rop_11]
  in erlps__initialdecimal__2 [rest_6, arg_9]
erlps__integer__2 [(ErlangBinary binSeg_0), n_4]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 101) =
  ErlangTuple [ErlangAtom "integer", n_4]
erlps__integer__2 [(ErlangBinary binSeg_0), n_4]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 69) =
  ErlangTuple [ErlangAtom "integer", n_4]
erlps__integer__2 [(ErlangBinary binEnd_0), n_1]
  | BIN.empty binEnd_0 =
  ErlangTuple [ErlangAtom "integer", n_1]
erlps__integer__2 [_, n_0] =
  ErlangTuple [ErlangAtom "finish_integer", n_0]
erlps__integer__2 [arg_3, arg_4] = EXC.function_clause unit
erlps__integer__2 args =
  EXC.badarity (ErlangFun 2 erlps__integer__2) args

erlps__negative__2 :: ErlangFun
erlps__negative__2 [(ErlangBinary binSeg_0), n_7]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 48)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_11 = toErl 1
  in let arg_9 = BIF.erlang__op_plus [n_7, rop_11]
  in erlps__zero__2 [rest_6, arg_9]
erlps__negative__2 [(ErlangBinary binSeg_0), n_7]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 49)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_11 = toErl 1
  in let arg_9 = BIF.erlang__op_plus [n_7, rop_11]
  in erlps__integer__2 [rest_6, arg_9]
erlps__negative__2 [(ErlangBinary binSeg_0), n_7]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 50)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_11 = toErl 1
  in let arg_9 = BIF.erlang__op_plus [n_7, rop_11]
  in erlps__integer__2 [rest_6, arg_9]
erlps__negative__2 [(ErlangBinary binSeg_0), n_7]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 51)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_11 = toErl 1
  in let arg_9 = BIF.erlang__op_plus [n_7, rop_11]
  in erlps__integer__2 [rest_6, arg_9]
erlps__negative__2 [(ErlangBinary binSeg_0), n_7]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 52)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_11 = toErl 1
  in let arg_9 = BIF.erlang__op_plus [n_7, rop_11]
  in erlps__integer__2 [rest_6, arg_9]
erlps__negative__2 [(ErlangBinary binSeg_0), n_7]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 53)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_11 = toErl 1
  in let arg_9 = BIF.erlang__op_plus [n_7, rop_11]
  in erlps__integer__2 [rest_6, arg_9]
erlps__negative__2 [(ErlangBinary binSeg_0), n_7]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 54)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_11 = toErl 1
  in let arg_9 = BIF.erlang__op_plus [n_7, rop_11]
  in erlps__integer__2 [rest_6, arg_9]
erlps__negative__2 [(ErlangBinary binSeg_0), n_7]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 55)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_11 = toErl 1
  in let arg_9 = BIF.erlang__op_plus [n_7, rop_11]
  in erlps__integer__2 [rest_6, arg_9]
erlps__negative__2 [(ErlangBinary binSeg_0), n_7]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 56)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_11 = toErl 1
  in let arg_9 = BIF.erlang__op_plus [n_7, rop_11]
  in erlps__integer__2 [rest_6, arg_9]
erlps__negative__2 [(ErlangBinary binSeg_0), n_7]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 57)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_11 = toErl 1
  in let arg_9 = BIF.erlang__op_plus [n_7, rop_11]
  in erlps__integer__2 [rest_6, arg_9]
erlps__negative__2 [(ErlangBinary binEnd_0), n_1]
  | BIN.empty binEnd_0 =
  ErlangTuple [ErlangAtom "negative", n_1]
erlps__negative__2 [_, n_0] =
  ErlangTuple [ErlangAtom "error", n_0]
erlps__negative__2 [arg_3, arg_4] = EXC.function_clause unit
erlps__negative__2 args =
  EXC.badarity (ErlangFun 2 erlps__negative__2) args

erlps__initialdecimal__2 :: ErlangFun
erlps__initialdecimal__2 [(ErlangBinary binSeg_0), n_7]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 48)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_11 = toErl 1
  in let arg_9 = BIF.erlang__op_plus [n_7, rop_11]
  in erlps__decimal__2 [rest_6, arg_9]
erlps__initialdecimal__2 [(ErlangBinary binSeg_0), n_7]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 49)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_11 = toErl 1
  in let arg_9 = BIF.erlang__op_plus [n_7, rop_11]
  in erlps__decimal__2 [rest_6, arg_9]
erlps__initialdecimal__2 [(ErlangBinary binSeg_0), n_7]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 50)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_11 = toErl 1
  in let arg_9 = BIF.erlang__op_plus [n_7, rop_11]
  in erlps__decimal__2 [rest_6, arg_9]
erlps__initialdecimal__2 [(ErlangBinary binSeg_0), n_7]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 51)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_11 = toErl 1
  in let arg_9 = BIF.erlang__op_plus [n_7, rop_11]
  in erlps__decimal__2 [rest_6, arg_9]
erlps__initialdecimal__2 [(ErlangBinary binSeg_0), n_7]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 52)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_11 = toErl 1
  in let arg_9 = BIF.erlang__op_plus [n_7, rop_11]
  in erlps__decimal__2 [rest_6, arg_9]
erlps__initialdecimal__2 [(ErlangBinary binSeg_0), n_7]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 53)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_11 = toErl 1
  in let arg_9 = BIF.erlang__op_plus [n_7, rop_11]
  in erlps__decimal__2 [rest_6, arg_9]
erlps__initialdecimal__2 [(ErlangBinary binSeg_0), n_7]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 54)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_11 = toErl 1
  in let arg_9 = BIF.erlang__op_plus [n_7, rop_11]
  in erlps__decimal__2 [rest_6, arg_9]
erlps__initialdecimal__2 [(ErlangBinary binSeg_0), n_7]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 55)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_11 = toErl 1
  in let arg_9 = BIF.erlang__op_plus [n_7, rop_11]
  in erlps__decimal__2 [rest_6, arg_9]
erlps__initialdecimal__2 [(ErlangBinary binSeg_0), n_7]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 56)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_11 = toErl 1
  in let arg_9 = BIF.erlang__op_plus [n_7, rop_11]
  in erlps__decimal__2 [rest_6, arg_9]
erlps__initialdecimal__2 [(ErlangBinary binSeg_0), n_7]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 57)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_11 = toErl 1
  in let arg_9 = BIF.erlang__op_plus [n_7, rop_11]
  in erlps__decimal__2 [rest_6, arg_9]
erlps__initialdecimal__2 [(ErlangBinary binEnd_0), n_1]
  | BIN.empty binEnd_0 =
  ErlangTuple [ErlangAtom "initialdecimal", n_1]
erlps__initialdecimal__2 [_, n_0] =
  ErlangTuple [ErlangAtom "error", n_0]
erlps__initialdecimal__2 [arg_3, arg_4] =
  EXC.function_clause unit
erlps__initialdecimal__2 args =
  EXC.badarity (ErlangFun 2 erlps__initialdecimal__2) args

erlps__decimal__2 :: ErlangFun
erlps__decimal__2 [(ErlangBinary binSeg_0), n_7]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 48)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_11 = toErl 1
  in let arg_9 = BIF.erlang__op_plus [n_7, rop_11]
  in erlps__decimal__2 [rest_6, arg_9]
erlps__decimal__2 [(ErlangBinary binSeg_0), n_7]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 49)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_11 = toErl 1
  in let arg_9 = BIF.erlang__op_plus [n_7, rop_11]
  in erlps__decimal__2 [rest_6, arg_9]
erlps__decimal__2 [(ErlangBinary binSeg_0), n_7]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 50)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_11 = toErl 1
  in let arg_9 = BIF.erlang__op_plus [n_7, rop_11]
  in erlps__decimal__2 [rest_6, arg_9]
erlps__decimal__2 [(ErlangBinary binSeg_0), n_7]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 51)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_11 = toErl 1
  in let arg_9 = BIF.erlang__op_plus [n_7, rop_11]
  in erlps__decimal__2 [rest_6, arg_9]
erlps__decimal__2 [(ErlangBinary binSeg_0), n_7]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 52)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_11 = toErl 1
  in let arg_9 = BIF.erlang__op_plus [n_7, rop_11]
  in erlps__decimal__2 [rest_6, arg_9]
erlps__decimal__2 [(ErlangBinary binSeg_0), n_7]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 53)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_11 = toErl 1
  in let arg_9 = BIF.erlang__op_plus [n_7, rop_11]
  in erlps__decimal__2 [rest_6, arg_9]
erlps__decimal__2 [(ErlangBinary binSeg_0), n_7]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 54)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_11 = toErl 1
  in let arg_9 = BIF.erlang__op_plus [n_7, rop_11]
  in erlps__decimal__2 [rest_6, arg_9]
erlps__decimal__2 [(ErlangBinary binSeg_0), n_7]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 55)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_11 = toErl 1
  in let arg_9 = BIF.erlang__op_plus [n_7, rop_11]
  in erlps__decimal__2 [rest_6, arg_9]
erlps__decimal__2 [(ErlangBinary binSeg_0), n_7]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 56)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_11 = toErl 1
  in let arg_9 = BIF.erlang__op_plus [n_7, rop_11]
  in erlps__decimal__2 [rest_6, arg_9]
erlps__decimal__2 [(ErlangBinary binSeg_0), n_7]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 57)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_11 = toErl 1
  in let arg_9 = BIF.erlang__op_plus [n_7, rop_11]
  in erlps__decimal__2 [rest_6, arg_9]
erlps__decimal__2 [(ErlangBinary binSeg_0), n_7]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 101)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_11 = toErl 1
  in let arg_9 = BIF.erlang__op_plus [n_7, rop_11]
  in erlps__e__2 [rest_6, arg_9]
erlps__decimal__2 [(ErlangBinary binSeg_0), n_7]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 69)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_11 = toErl 1
  in let arg_9 = BIF.erlang__op_plus [n_7, rop_11]
  in erlps__e__2 [rest_6, arg_9]
erlps__decimal__2 [(ErlangBinary binEnd_0), n_1]
  | BIN.empty binEnd_0 =
  ErlangTuple [ErlangAtom "decimal", n_1]
erlps__decimal__2 [_, n_0] =
  ErlangTuple [ErlangAtom "finish_float", n_0]
erlps__decimal__2 [arg_3, arg_4] = EXC.function_clause unit
erlps__decimal__2 args =
  EXC.badarity (ErlangFun 2 erlps__decimal__2) args

erlps__e__2 :: ErlangFun
erlps__e__2 [(ErlangBinary binSeg_0), n_7]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 48)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_11 = toErl 1
  in let arg_9 = BIF.erlang__op_plus [n_7, rop_11]
  in erlps__exp__2 [rest_6, arg_9]
erlps__e__2 [(ErlangBinary binSeg_0), n_7]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 49)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_11 = toErl 1
  in let arg_9 = BIF.erlang__op_plus [n_7, rop_11]
  in erlps__exp__2 [rest_6, arg_9]
erlps__e__2 [(ErlangBinary binSeg_0), n_7]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 50)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_11 = toErl 1
  in let arg_9 = BIF.erlang__op_plus [n_7, rop_11]
  in erlps__exp__2 [rest_6, arg_9]
erlps__e__2 [(ErlangBinary binSeg_0), n_7]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 51)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_11 = toErl 1
  in let arg_9 = BIF.erlang__op_plus [n_7, rop_11]
  in erlps__exp__2 [rest_6, arg_9]
erlps__e__2 [(ErlangBinary binSeg_0), n_7]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 52)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_11 = toErl 1
  in let arg_9 = BIF.erlang__op_plus [n_7, rop_11]
  in erlps__exp__2 [rest_6, arg_9]
erlps__e__2 [(ErlangBinary binSeg_0), n_7]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 53)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_11 = toErl 1
  in let arg_9 = BIF.erlang__op_plus [n_7, rop_11]
  in erlps__exp__2 [rest_6, arg_9]
erlps__e__2 [(ErlangBinary binSeg_0), n_7]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 54)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_11 = toErl 1
  in let arg_9 = BIF.erlang__op_plus [n_7, rop_11]
  in erlps__exp__2 [rest_6, arg_9]
erlps__e__2 [(ErlangBinary binSeg_0), n_7]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 55)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_11 = toErl 1
  in let arg_9 = BIF.erlang__op_plus [n_7, rop_11]
  in erlps__exp__2 [rest_6, arg_9]
erlps__e__2 [(ErlangBinary binSeg_0), n_7]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 56)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_11 = toErl 1
  in let arg_9 = BIF.erlang__op_plus [n_7, rop_11]
  in erlps__exp__2 [rest_6, arg_9]
erlps__e__2 [(ErlangBinary binSeg_0), n_7]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 57)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_11 = toErl 1
  in let arg_9 = BIF.erlang__op_plus [n_7, rop_11]
  in erlps__exp__2 [rest_6, arg_9]
erlps__e__2 [(ErlangBinary binSeg_0), n_7]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 43)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_11 = toErl 1
  in let arg_9 = BIF.erlang__op_plus [n_7, rop_11]
  in erlps__ex__2 [rest_6, arg_9]
erlps__e__2 [(ErlangBinary binSeg_0), n_7]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 45)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_11 = toErl 1
  in let arg_9 = BIF.erlang__op_plus [n_7, rop_11]
  in erlps__ex__2 [rest_6, arg_9]
erlps__e__2 [(ErlangBinary binEnd_0), n_1] | BIN.empty binEnd_0 =
  ErlangTuple [ErlangAtom "e", n_1]
erlps__e__2 [_, n_0] = ErlangTuple [ErlangAtom "error", n_0]
erlps__e__2 [arg_3, arg_4] = EXC.function_clause unit
erlps__e__2 args = EXC.badarity (ErlangFun 2 erlps__e__2) args

erlps__ex__2 :: ErlangFun
erlps__ex__2 [(ErlangBinary binSeg_0), n_7]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 48)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_11 = toErl 1
  in let arg_9 = BIF.erlang__op_plus [n_7, rop_11]
  in erlps__exp__2 [rest_6, arg_9]
erlps__ex__2 [(ErlangBinary binSeg_0), n_7]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 49)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_11 = toErl 1
  in let arg_9 = BIF.erlang__op_plus [n_7, rop_11]
  in erlps__exp__2 [rest_6, arg_9]
erlps__ex__2 [(ErlangBinary binSeg_0), n_7]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 50)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_11 = toErl 1
  in let arg_9 = BIF.erlang__op_plus [n_7, rop_11]
  in erlps__exp__2 [rest_6, arg_9]
erlps__ex__2 [(ErlangBinary binSeg_0), n_7]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 51)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_11 = toErl 1
  in let arg_9 = BIF.erlang__op_plus [n_7, rop_11]
  in erlps__exp__2 [rest_6, arg_9]
erlps__ex__2 [(ErlangBinary binSeg_0), n_7]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 52)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_11 = toErl 1
  in let arg_9 = BIF.erlang__op_plus [n_7, rop_11]
  in erlps__exp__2 [rest_6, arg_9]
erlps__ex__2 [(ErlangBinary binSeg_0), n_7]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 53)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_11 = toErl 1
  in let arg_9 = BIF.erlang__op_plus [n_7, rop_11]
  in erlps__exp__2 [rest_6, arg_9]
erlps__ex__2 [(ErlangBinary binSeg_0), n_7]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 54)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_11 = toErl 1
  in let arg_9 = BIF.erlang__op_plus [n_7, rop_11]
  in erlps__exp__2 [rest_6, arg_9]
erlps__ex__2 [(ErlangBinary binSeg_0), n_7]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 55)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_11 = toErl 1
  in let arg_9 = BIF.erlang__op_plus [n_7, rop_11]
  in erlps__exp__2 [rest_6, arg_9]
erlps__ex__2 [(ErlangBinary binSeg_0), n_7]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 56)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_11 = toErl 1
  in let arg_9 = BIF.erlang__op_plus [n_7, rop_11]
  in erlps__exp__2 [rest_6, arg_9]
erlps__ex__2 [(ErlangBinary binSeg_0), n_7]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 57)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_11 = toErl 1
  in let arg_9 = BIF.erlang__op_plus [n_7, rop_11]
  in erlps__exp__2 [rest_6, arg_9]
erlps__ex__2 [(ErlangBinary binEnd_0), n_1]
  | BIN.empty binEnd_0 =
  ErlangTuple [ErlangAtom "ex", n_1]
erlps__ex__2 [_, n_0] = ErlangTuple [ErlangAtom "error", n_0]
erlps__ex__2 [arg_3, arg_4] = EXC.function_clause unit
erlps__ex__2 args = EXC.badarity (ErlangFun 2 erlps__ex__2) args

erlps__exp__2 :: ErlangFun
erlps__exp__2 [(ErlangBinary binSeg_0), n_7]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 48)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_11 = toErl 1
  in let arg_9 = BIF.erlang__op_plus [n_7, rop_11]
  in erlps__exp__2 [rest_6, arg_9]
erlps__exp__2 [(ErlangBinary binSeg_0), n_7]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 49)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_11 = toErl 1
  in let arg_9 = BIF.erlang__op_plus [n_7, rop_11]
  in erlps__exp__2 [rest_6, arg_9]
erlps__exp__2 [(ErlangBinary binSeg_0), n_7]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 50)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_11 = toErl 1
  in let arg_9 = BIF.erlang__op_plus [n_7, rop_11]
  in erlps__exp__2 [rest_6, arg_9]
erlps__exp__2 [(ErlangBinary binSeg_0), n_7]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 51)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_11 = toErl 1
  in let arg_9 = BIF.erlang__op_plus [n_7, rop_11]
  in erlps__exp__2 [rest_6, arg_9]
erlps__exp__2 [(ErlangBinary binSeg_0), n_7]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 52)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_11 = toErl 1
  in let arg_9 = BIF.erlang__op_plus [n_7, rop_11]
  in erlps__exp__2 [rest_6, arg_9]
erlps__exp__2 [(ErlangBinary binSeg_0), n_7]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 53)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_11 = toErl 1
  in let arg_9 = BIF.erlang__op_plus [n_7, rop_11]
  in erlps__exp__2 [rest_6, arg_9]
erlps__exp__2 [(ErlangBinary binSeg_0), n_7]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 54)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_11 = toErl 1
  in let arg_9 = BIF.erlang__op_plus [n_7, rop_11]
  in erlps__exp__2 [rest_6, arg_9]
erlps__exp__2 [(ErlangBinary binSeg_0), n_7]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 55)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_11 = toErl 1
  in let arg_9 = BIF.erlang__op_plus [n_7, rop_11]
  in erlps__exp__2 [rest_6, arg_9]
erlps__exp__2 [(ErlangBinary binSeg_0), n_7]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 56)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_11 = toErl 1
  in let arg_9 = BIF.erlang__op_plus [n_7, rop_11]
  in erlps__exp__2 [rest_6, arg_9]
erlps__exp__2 [(ErlangBinary binSeg_0), n_7]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 57)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let    rop_11 = toErl 1
  in let arg_9 = BIF.erlang__op_plus [n_7, rop_11]
  in erlps__exp__2 [rest_6, arg_9]
erlps__exp__2 [(ErlangBinary binEnd_0), n_1]
  | BIN.empty binEnd_0 =
  ErlangTuple [ErlangAtom "exp", n_1]
erlps__exp__2 [_, n_0] =
  ErlangTuple [ErlangAtom "finish_float", n_0]
erlps__exp__2 [arg_3, arg_4] = EXC.function_clause unit
erlps__exp__2 args =
  EXC.badarity (ErlangFun 2 erlps__exp__2) args

erlps__finish_number__5 :: ErlangFun
erlps__finish_number__5 [rest_0, handler_1, acc_2, stack_3,
                         config_4]
  =
  let    arg_7 = erlps__format_number__1 [acc_2]
  in let
    arg_6 = erlps__handle_event__3 [arg_7, handler_1, config_4]
  in erlps__maybe_done__4 [rest_0, arg_6, stack_3, config_4]
erlps__finish_number__5 [arg_13, arg_14, arg_15, arg_16, arg_17]
  =
  EXC.function_clause unit
erlps__finish_number__5 args =
  EXC.badarity (ErlangFun 5 erlps__finish_number__5) args

erlps__format_number__1 :: ErlangFun
erlps__format_number__1 [(ErlangTuple [(ErlangAtom "integer"),
                                       acc_0])]
  =
  let tup_el_2 = BIF.erlang__binary_to_integer__1 [acc_0]
  in ErlangTuple [ErlangAtom "integer", tup_el_2]
erlps__format_number__1 [(ErlangTuple [(ErlangAtom "float"),
                                       acc_0])]
  =
  let tup_el_2 = BIF.erlang__binary_to_float__1 [acc_0]
  in ErlangTuple [ErlangAtom "float", tup_el_2]
erlps__format_number__1 [arg_4] = EXC.function_clause unit
erlps__format_number__1 args =
  EXC.badarity (ErlangFun 1 erlps__format_number__1) args

erlps__true__4 :: ErlangFun
erlps__true__4 [(ErlangBinary binSeg_0), handler_13, stack_14,
                config_15]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 114)
  , (ErlangInt size_4) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      (BIN.chopInt bin_2 size_4 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_6) == (toErl 117)
  , (ErlangInt size_7) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_9) bin_8) <-
      (BIN.chopInt bin_5 size_7 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_9) == (toErl 101)
  , (ErlangInt size_10) <- (BIN.size bin_8)
  , (BIN.Ok rest_12 bin_11) <- (BIN.chopBin bin_8 size_10 8)
  , BIN.empty bin_11 =
  let   
    arg_18 = ErlangTuple [ErlangAtom "literal", ErlangAtom "true"]
  in let
    arg_17 = erlps__handle_event__3 [arg_18, handler_13, config_15]
  in erlps__maybe_done__4 [rest_12, arg_17, stack_14, config_15]
erlps__true__4 [(ErlangBinary binSeg_0), handler_7, stack_8,
                config_9]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 114)
  , (ErlangInt size_4) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      (BIN.chopInt bin_2 size_4 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_6) == (toErl 117)
  , BIN.empty bin_5 =
  let    bin_el_12 = toErl 114
  in let bin_el_13 = toErl 117
  in let
    arg_11 =
      ErlangBinary
        (BIN.concat
           [BIN.fromInt bin_el_12 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_13 (toErl 8) 1 BIN.Big])
  in
    erlps__incomplete__5
      [ErlangAtom "true", arg_11, handler_7, stack_8, config_9]
erlps__true__4 [(ErlangBinary binSeg_0), handler_4, stack_5,
                config_6]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 114)
  , BIN.empty bin_2 =
  let    bin_el_9 = toErl 114
  in let
    arg_8 = ErlangBinary (BIN.fromInt bin_el_9 (toErl 8) 1 BIN.Big)
  in
    erlps__incomplete__5
      [ErlangAtom "true", arg_8, handler_4, stack_5, config_6]
erlps__true__4 [(ErlangBinary binEnd_0), handler_1, stack_2,
                config_3]
  | BIN.empty binEnd_0 =
  let arg_5 = ErlangBinary (BIN.concat [])
  in
    erlps__incomplete__5
      [ErlangAtom "true", arg_5, handler_1, stack_2, config_3]
erlps__true__4 [bin_0, handler_1, stack_2, config_3] =
  let
    case_4 =
      case config_3 of
        (ErlangTuple arr_7) | (DM.Just field_6) <- (arr_7 DA.!! 14) ->
          field_6
        _ -> EXC.badrecord (ErlangAtom "config")
  in
    case case_4 of
      (ErlangAtom "false") ->
        BIF.erlang__error__1 [ErlangAtom "badarg"]
      f_9 ->
        let   
          arg_11 =
            ErlangTuple
              [ErlangAtom "decoder", ErlangAtom "true", handler_1,
               ErlangAtom "null", stack_2]
        in let
          arg_17 =
            BIF.do_remote_fun_call "Jsx.Config" "erlps__config_to_list__1"
              [config_3]
        in
          BIF.erlang__apply__2
            [f_9,
             ErlangCons bin_0
               (ErlangCons arg_11 (ErlangCons arg_17 ErlangEmptyList))]
erlps__true__4 [arg_20, arg_21, arg_22, arg_23] =
  EXC.function_clause unit
erlps__true__4 args =
  EXC.badarity (ErlangFun 4 erlps__true__4) args

erlps__false__4 :: ErlangFun
erlps__false__4 [(ErlangBinary binSeg_0), handler_16, stack_17,
                 config_18]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 97)
  , (ErlangInt size_4) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      (BIN.chopInt bin_2 size_4 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_6) == (toErl 108)
  , (ErlangInt size_7) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_9) bin_8) <-
      (BIN.chopInt bin_5 size_7 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_9) == (toErl 115)
  , (ErlangInt size_10) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_12) bin_11) <-
      (BIN.chopInt bin_8 size_10 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_12) == (toErl 101)
  , (ErlangInt size_13) <- (BIN.size bin_11)
  , (BIN.Ok rest_15 bin_14) <- (BIN.chopBin bin_11 size_13 8)
  , BIN.empty bin_14 =
  let   
    arg_21 = ErlangTuple [ErlangAtom "literal", ErlangAtom "false"]
  in let
    arg_20 = erlps__handle_event__3 [arg_21, handler_16, config_18]
  in erlps__maybe_done__4 [rest_15, arg_20, stack_17, config_18]
erlps__false__4 [(ErlangBinary binSeg_0), handler_10, stack_11,
                 config_12]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 97)
  , (ErlangInt size_4) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      (BIN.chopInt bin_2 size_4 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_6) == (toErl 108)
  , (ErlangInt size_7) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_9) bin_8) <-
      (BIN.chopInt bin_5 size_7 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_9) == (toErl 115)
  , BIN.empty bin_8 =
  let    bin_el_15 = toErl 97
  in let bin_el_16 = toErl 108
  in let bin_el_17 = toErl 115
  in let
    arg_14 =
      ErlangBinary
        (BIN.concat
           [BIN.fromInt bin_el_15 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_16 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_17 (toErl 8) 1 BIN.Big])
  in
    erlps__incomplete__5
      [ErlangAtom "false", arg_14, handler_10, stack_11, config_12]
erlps__false__4 [(ErlangBinary binSeg_0), handler_7, stack_8,
                 config_9]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 97)
  , (ErlangInt size_4) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      (BIN.chopInt bin_2 size_4 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_6) == (toErl 108)
  , BIN.empty bin_5 =
  let    bin_el_12 = toErl 97
  in let bin_el_13 = toErl 108
  in let
    arg_11 =
      ErlangBinary
        (BIN.concat
           [BIN.fromInt bin_el_12 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_13 (toErl 8) 1 BIN.Big])
  in
    erlps__incomplete__5
      [ErlangAtom "false", arg_11, handler_7, stack_8, config_9]
erlps__false__4 [(ErlangBinary binSeg_0), handler_4, stack_5,
                 config_6]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 97)
  , BIN.empty bin_2 =
  let    bin_el_9 = toErl 97
  in let
    arg_8 = ErlangBinary (BIN.fromInt bin_el_9 (toErl 8) 1 BIN.Big)
  in
    erlps__incomplete__5
      [ErlangAtom "false", arg_8, handler_4, stack_5, config_6]
erlps__false__4 [(ErlangBinary binEnd_0), handler_1, stack_2,
                 config_3]
  | BIN.empty binEnd_0 =
  let arg_5 = ErlangBinary (BIN.concat [])
  in
    erlps__incomplete__5
      [ErlangAtom "false", arg_5, handler_1, stack_2, config_3]
erlps__false__4 [bin_0, handler_1, stack_2, config_3] =
  let
    case_4 =
      case config_3 of
        (ErlangTuple arr_7) | (DM.Just field_6) <- (arr_7 DA.!! 14) ->
          field_6
        _ -> EXC.badrecord (ErlangAtom "config")
  in
    case case_4 of
      (ErlangAtom "false") ->
        BIF.erlang__error__1 [ErlangAtom "badarg"]
      f_9 ->
        let   
          arg_11 =
            ErlangTuple
              [ErlangAtom "decoder", ErlangAtom "false", handler_1,
               ErlangAtom "null", stack_2]
        in let
          arg_17 =
            BIF.do_remote_fun_call "Jsx.Config" "erlps__config_to_list__1"
              [config_3]
        in
          BIF.erlang__apply__2
            [f_9,
             ErlangCons bin_0
               (ErlangCons arg_11 (ErlangCons arg_17 ErlangEmptyList))]
erlps__false__4 [arg_20, arg_21, arg_22, arg_23] =
  EXC.function_clause unit
erlps__false__4 args =
  EXC.badarity (ErlangFun 4 erlps__false__4) args

erlps__null__4 :: ErlangFun
erlps__null__4 [(ErlangBinary binSeg_0), handler_13, stack_14,
                config_15]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 117)
  , (ErlangInt size_4) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      (BIN.chopInt bin_2 size_4 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_6) == (toErl 108)
  , (ErlangInt size_7) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_9) bin_8) <-
      (BIN.chopInt bin_5 size_7 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_9) == (toErl 108)
  , (ErlangInt size_10) <- (BIN.size bin_8)
  , (BIN.Ok rest_12 bin_11) <- (BIN.chopBin bin_8 size_10 8)
  , BIN.empty bin_11 =
  let   
    arg_18 = ErlangTuple [ErlangAtom "literal", ErlangAtom "null"]
  in let
    arg_17 = erlps__handle_event__3 [arg_18, handler_13, config_15]
  in erlps__maybe_done__4 [rest_12, arg_17, stack_14, config_15]
erlps__null__4 [(ErlangBinary binSeg_0), handler_7, stack_8,
                config_9]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 117)
  , (ErlangInt size_4) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      (BIN.chopInt bin_2 size_4 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_6) == (toErl 108)
  , BIN.empty bin_5 =
  let    bin_el_12 = toErl 117
  in let bin_el_13 = toErl 108
  in let
    arg_11 =
      ErlangBinary
        (BIN.concat
           [BIN.fromInt bin_el_12 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_13 (toErl 8) 1 BIN.Big])
  in
    erlps__incomplete__5
      [ErlangAtom "null", arg_11, handler_7, stack_8, config_9]
erlps__null__4 [(ErlangBinary binSeg_0), handler_4, stack_5,
                config_6]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 117)
  , BIN.empty bin_2 =
  let    bin_el_9 = toErl 117
  in let
    arg_8 = ErlangBinary (BIN.fromInt bin_el_9 (toErl 8) 1 BIN.Big)
  in
    erlps__incomplete__5
      [ErlangAtom "null", arg_8, handler_4, stack_5, config_6]
erlps__null__4 [(ErlangBinary binEnd_0), handler_1, stack_2,
                config_3]
  | BIN.empty binEnd_0 =
  let arg_5 = ErlangBinary (BIN.concat [])
  in
    erlps__incomplete__5
      [ErlangAtom "null", arg_5, handler_1, stack_2, config_3]
erlps__null__4 [bin_0, handler_1, stack_2, config_3] =
  let
    case_4 =
      case config_3 of
        (ErlangTuple arr_7) | (DM.Just field_6) <- (arr_7 DA.!! 14) ->
          field_6
        _ -> EXC.badrecord (ErlangAtom "config")
  in
    case case_4 of
      (ErlangAtom "false") ->
        BIF.erlang__error__1 [ErlangAtom "badarg"]
      f_9 ->
        let   
          arg_11 =
            ErlangTuple
              [ErlangAtom "decoder", ErlangAtom "null", handler_1,
               ErlangAtom "null", stack_2]
        in let
          arg_17 =
            BIF.do_remote_fun_call "Jsx.Config" "erlps__config_to_list__1"
              [config_3]
        in
          BIF.erlang__apply__2
            [f_9,
             ErlangCons bin_0
               (ErlangCons arg_11 (ErlangCons arg_17 ErlangEmptyList))]
erlps__null__4 [arg_20, arg_21, arg_22, arg_23] =
  EXC.function_clause unit
erlps__null__4 args =
  EXC.badarity (ErlangFun 4 erlps__null__4) args

erlps__comment__5 :: ErlangFun
erlps__comment__5 [(ErlangBinary binSeg_0), handler_7, resume_8,
                   (ErlangCons (ErlangAtom "comment") stack_9), config_10]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 10)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  erlps__resume__6
    [rest_6, resume_8, handler_7, ErlangAtom "unused", stack_9,
     config_10]
erlps__comment__5 [(ErlangBinary binSeg_0), handler_10,
                   resume_11, stack_12, config_13]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 47)
  , (ErlangInt size_4) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      (BIN.chopInt bin_2 size_4 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_6) == (toErl 42)
  , (ErlangInt size_7) <- (BIN.size bin_5)
  , (BIN.Ok rest_9 bin_8) <- (BIN.chopBin bin_5 size_7 8)
  , BIN.empty bin_8 =
  erlps__comment__5
    [rest_9, handler_10, resume_11,
     ErlangCons (ErlangAtom "multicomment") stack_12, config_13]
erlps__comment__5 [(ErlangBinary binSeg_0), handler_4, resume_5,
                   stack_6@(ErlangCons (ErlangAtom "multicomment") _), config_7]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 47)
  , BIN.empty bin_2 =
  let    bin_el_10 = toErl 47
  in let
    arg_9 = ErlangBinary (BIN.fromInt bin_el_10 (toErl 8) 1 BIN.Big)
  in
    erlps__incomplete__6
      [ErlangAtom "comment", arg_9, handler_4, resume_5, stack_6,
       config_7]
erlps__comment__5 [(ErlangBinary binSeg_0), handler_10,
                   resume_11, (ErlangCons (ErlangAtom "multicomment") stack_12),
                   config_13]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 42)
  , (ErlangInt size_4) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      (BIN.chopInt bin_2 size_4 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_6) == (toErl 47)
  , (ErlangInt size_7) <- (BIN.size bin_5)
  , (BIN.Ok rest_9 bin_8) <- (BIN.chopBin bin_5 size_7 8)
  , BIN.empty bin_8 =
  case stack_12 of
    (ErlangCons (ErlangAtom "multicomment") _) ->
      erlps__comment__5
        [rest_9, handler_10, resume_11, stack_12, config_13]
    _ ->
      erlps__resume__6
        [rest_9, resume_11, handler_10, ErlangAtom "unused", stack_12,
         config_13]
erlps__comment__5 [(ErlangBinary binSeg_0), handler_4, resume_5,
                   stack_6@(ErlangCons (ErlangAtom "multicomment") _), config_7]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 42)
  , BIN.empty bin_2 =
  let    bin_el_10 = toErl 42
  in let
    arg_9 = ErlangBinary (BIN.fromInt bin_el_10 (toErl 8) 1 BIN.Big)
  in
    erlps__incomplete__6
      [ErlangAtom "comment", arg_9, handler_4, resume_5, stack_6,
       config_7]
erlps__comment__5 [(ErlangBinary binSeg_0), handler_6, resume_7,
                   stack_8, config_9]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok _ bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt size_3) <- (BIN.size bin_2)
  , (BIN.Ok rest_5 bin_4) <- (BIN.chopBin bin_2 size_3 8)
  , BIN.empty bin_4 =
  erlps__comment__5
    [rest_5, handler_6, resume_7, stack_8, config_9]
erlps__comment__5 [(ErlangBinary binSeg_0), handler_6, resume_7,
                   stack_8,
                   config_9@(ErlangTuple [(ErlangAtom "config"), _, _, _, _, _,
                                          _, (ErlangAtom "false"), _, _, _, _,
                                          _, _, _, _])]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok _ bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt size_3) <- (BIN.size bin_2)
  , (BIN.Ok rest_5 bin_4) <- (BIN.chopBin bin_2 size_3 8)
  , BIN.empty bin_4 =
  erlps__comment__5
    [rest_5, handler_6, resume_7, stack_8, config_9]
erlps__comment__5 [(ErlangBinary binEnd_0), handler_1,
                   (ErlangAtom "done"),
                   (ErlangCons comment_2 (ErlangEmptyList)),
                   config_3@(ErlangTuple [(ErlangAtom "config"), _, _, _, _, _,
                                          _, _, _, _, (ErlangAtom "false"), _,
                                          _, _, _, _])]
  | BIN.empty binEnd_0
  , (weakEq comment_2 (ErlangAtom "comment")) ||
      (weakEq comment_2 (ErlangAtom "multicomment")) =
  let arg_4 = ErlangBinary (BIN.concat [])
  in
    erlps__resume__6
      [arg_4, ErlangAtom "done", handler_1, ErlangAtom "unused",
       ErlangEmptyList, config_3]
erlps__comment__5 [(ErlangBinary binEnd_0), handler_1, resume_2,
                   stack_3, config_4]
  | BIN.empty binEnd_0 =
  let arg_6 = ErlangBinary (BIN.concat [])
  in
    erlps__incomplete__6
      [ErlangAtom "comment", arg_6, handler_1, resume_2, stack_3,
       config_4]
erlps__comment__5 [bin_0, handler_1, resume_2, stack_3, config_4]
  =
  let
    case_5 =
      case config_4 of
        (ErlangTuple arr_8) | (DM.Just field_7) <- (arr_8 DA.!! 14) ->
          field_7
        _ -> EXC.badrecord (ErlangAtom "config")
  in
    case case_5 of
      (ErlangAtom "false") ->
        BIF.erlang__error__1 [ErlangAtom "badarg"]
      f_10 ->
        let   
          arg_12 =
            ErlangTuple
              [ErlangAtom "decoder", ErlangAtom "comment", handler_1, resume_2,
               stack_3]
        in let
          arg_18 =
            BIF.do_remote_fun_call "Jsx.Config" "erlps__config_to_list__1"
              [config_4]
        in
          BIF.erlang__apply__2
            [f_10,
             ErlangCons bin_0
               (ErlangCons arg_12 (ErlangCons arg_18 ErlangEmptyList))]
erlps__comment__5 [arg_21, arg_22, arg_23, arg_24, arg_25] =
  EXC.function_clause unit
erlps__comment__5 args =
  EXC.badarity (ErlangFun 5 erlps__comment__5) args

erlps__maybe_done__4 :: ErlangFun
erlps__maybe_done__4 [(ErlangBinary binSeg_0), handler_4,
                      (ErlangEmptyList), config_5]
  | (ErlangInt size_1) <- (BIN.size binSeg_0)
  , (BIN.Ok rest_3 bin_2) <- (BIN.chopBin binSeg_0 size_1 8)
  , BIN.empty bin_2 =
  let
    arg_7 =
      erlps__handle_event__3
        [ErlangAtom "end_json", handler_4, config_5]
  in erlps__done__4 [rest_3, arg_7, ErlangEmptyList, config_5]
erlps__maybe_done__4 [(ErlangBinary binSeg_0), handler_7,
                      stack_8, config_9]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 32)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  erlps__maybe_done__4 [rest_6, handler_7, stack_8, config_9]
erlps__maybe_done__4 [(ErlangBinary binSeg_0), handler_7,
                      (ErlangCons (ErlangAtom "object") stack_8), config_9]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 125)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let
    arg_11 =
      erlps__handle_event__3
        [ErlangAtom "end_object", handler_7, config_9]
  in erlps__maybe_done__4 [rest_6, arg_11, stack_8, config_9]
erlps__maybe_done__4 [(ErlangBinary binSeg_0), handler_7,
                      (ErlangCons (ErlangAtom "array") stack_8), config_9]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 93)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let
    arg_11 =
      erlps__handle_event__3
        [ErlangAtom "end_array", handler_7, config_9]
  in erlps__maybe_done__4 [rest_6, arg_11, stack_8, config_9]
erlps__maybe_done__4 [(ErlangBinary binSeg_0), handler_7,
                      (ErlangCons (ErlangAtom "object") stack_8), config_9]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 44)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  erlps__key__4
    [rest_6, handler_7, ErlangCons (ErlangAtom "key") stack_8,
     config_9]
erlps__maybe_done__4 [(ErlangBinary binSeg_0), handler_7,
                      stack_8@(ErlangCons (ErlangAtom "array") _), config_9]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 44)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  erlps__value__4 [rest_6, handler_7, stack_8, config_9]
erlps__maybe_done__4 [(ErlangBinary binSeg_0), handler_7,
                      stack_8, config_9]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 10)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  erlps__maybe_done__4 [rest_6, handler_7, stack_8, config_9]
erlps__maybe_done__4 [(ErlangBinary binSeg_0), handler_7,
                      stack_8, config_9]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 9)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  erlps__maybe_done__4 [rest_6, handler_7, stack_8, config_9]
erlps__maybe_done__4 [(ErlangBinary binSeg_0), handler_7,
                      stack_8, config_9]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 13)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  erlps__maybe_done__4 [rest_6, handler_7, stack_8, config_9]
erlps__maybe_done__4 [(ErlangBinary binSeg_0), handler_7,
                      stack_8,
                      config_9@(ErlangTuple [(ErlangAtom "config"), _, _, _, _,
                                             (ErlangAtom "true"), _, _, _, _, _,
                                             _, _, _, _, _])]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 47)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let
    case_10 =
      case config_9 of
        (ErlangTuple arr_13) | (DM.Just field_12) <- (arr_13 DA.!! 14) ->
          field_12
        _ -> EXC.badrecord (ErlangAtom "config")
  in
    case case_10 of
      (ErlangAtom "false") ->
        BIF.erlang__error__1 [ErlangAtom "badarg"]
      f_15 ->
        let    bin_el_17 = toErl 47
        in let
          arg_16 =
            ErlangBinary
              (BIN.concat
                 [BIN.fromInt bin_el_17 (toErl 8) 1 BIN.Big,
                  BIN.binPrefix rest_6 (BIN.packedSize rest_6) 8])
        in let
          arg_19 =
            ErlangTuple
              [ErlangAtom "decoder", ErlangAtom "maybe_done", handler_7,
               ErlangAtom "null", stack_8]
        in let
          arg_25 =
            BIF.do_remote_fun_call "Jsx.Config" "erlps__config_to_list__1"
              [config_9]
        in
          BIF.erlang__apply__2
            [f_15,
             ErlangCons arg_16
               (ErlangCons arg_19 (ErlangCons arg_25 ErlangEmptyList))]
erlps__maybe_done__4 [(ErlangBinary binSeg_0), handler_10,
                      stack_11, config_12]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 47)
  , (ErlangInt size_4) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      (BIN.chopInt bin_2 size_4 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_6) == (toErl 47)
  , (ErlangInt size_7) <- (BIN.size bin_5)
  , (BIN.Ok rest_9 bin_8) <- (BIN.chopBin bin_5 size_7 8)
  , BIN.empty bin_8 =
  erlps__comment__5
    [rest_9, handler_10, ErlangAtom "maybe_done",
     ErlangCons (ErlangAtom "comment") stack_11, config_12]
erlps__maybe_done__4 [(ErlangBinary binSeg_0), handler_10,
                      stack_11, config_12]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 47)
  , (ErlangInt size_4) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      (BIN.chopInt bin_2 size_4 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_6) == (toErl 42)
  , (ErlangInt size_7) <- (BIN.size bin_5)
  , (BIN.Ok rest_9 bin_8) <- (BIN.chopBin bin_5 size_7 8)
  , BIN.empty bin_8 =
  erlps__comment__5
    [rest_9, handler_10, ErlangAtom "maybe_done",
     ErlangCons (ErlangAtom "multicomment") stack_11, config_12]
erlps__maybe_done__4 [(ErlangBinary binSeg_0), handler_4,
                      stack_5, config_6]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 47)
  , BIN.empty bin_2 =
  let    bin_el_9 = toErl 47
  in let
    arg_8 = ErlangBinary (BIN.fromInt bin_el_9 (toErl 8) 1 BIN.Big)
  in
    erlps__incomplete__5
      [ErlangAtom "maybe_done", arg_8, handler_4, stack_5, config_6]
erlps__maybe_done__4 [(ErlangBinary binEnd_0), handler_1,
                      stack_2, config_3]
  | BIN.empty binEnd_0
  , (ErlangAtom "true") ==
      (falsifyErrors
         (\ _ ->
            let    lop_9 = BIF.erlang__length__1 [stack_2]
            in let rop_11 = toErl 0
            in BIF.erlang__op_greater [lop_9, rop_11])) =
  let arg_5 = ErlangBinary (BIN.concat [])
  in
    erlps__incomplete__5
      [ErlangAtom "maybe_done", arg_5, handler_1, stack_2, config_3]
erlps__maybe_done__4 [bin_0, handler_1, stack_2, config_3] =
  let
    case_4 =
      case config_3 of
        (ErlangTuple arr_7) | (DM.Just field_6) <- (arr_7 DA.!! 14) ->
          field_6
        _ -> EXC.badrecord (ErlangAtom "config")
  in
    case case_4 of
      (ErlangAtom "false") ->
        BIF.erlang__error__1 [ErlangAtom "badarg"]
      f_9 ->
        let   
          arg_11 =
            ErlangTuple
              [ErlangAtom "decoder", ErlangAtom "maybe_done", handler_1,
               ErlangAtom "null", stack_2]
        in let
          arg_17 =
            BIF.do_remote_fun_call "Jsx.Config" "erlps__config_to_list__1"
              [config_3]
        in
          BIF.erlang__apply__2
            [f_9,
             ErlangCons bin_0
               (ErlangCons arg_11 (ErlangCons arg_17 ErlangEmptyList))]
erlps__maybe_done__4 [arg_20, arg_21, arg_22, arg_23] =
  EXC.function_clause unit
erlps__maybe_done__4 args =
  EXC.badarity (ErlangFun 4 erlps__maybe_done__4) args

erlps__done__4 :: ErlangFun
erlps__done__4 [(ErlangBinary binSeg_0), handler_7,
                (ErlangEmptyList), config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 32)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  erlps__done__4 [rest_6, handler_7, ErlangEmptyList, config_8]
erlps__done__4 [(ErlangBinary binSeg_0), handler_7,
                (ErlangEmptyList), config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 10)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  erlps__done__4 [rest_6, handler_7, ErlangEmptyList, config_8]
erlps__done__4 [(ErlangBinary binSeg_0), handler_7,
                (ErlangEmptyList), config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 9)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  erlps__done__4 [rest_6, handler_7, ErlangEmptyList, config_8]
erlps__done__4 [(ErlangBinary binSeg_0), handler_7,
                (ErlangEmptyList), config_8]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 13)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  erlps__done__4 [rest_6, handler_7, ErlangEmptyList, config_8]
erlps__done__4 [(ErlangBinary binSeg_0), handler_7, stack_8,
                config_9@(ErlangTuple [(ErlangAtom "config"), _, _, _, _,
                                       (ErlangAtom "true"), _, _, _, _, _, _, _,
                                       _, _, _])]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 47)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  let
    case_10 =
      case config_9 of
        (ErlangTuple arr_13) | (DM.Just field_12) <- (arr_13 DA.!! 14) ->
          field_12
        _ -> EXC.badrecord (ErlangAtom "config")
  in
    case case_10 of
      (ErlangAtom "false") ->
        BIF.erlang__error__1 [ErlangAtom "badarg"]
      f_15 ->
        let    bin_el_17 = toErl 47
        in let
          arg_16 =
            ErlangBinary
              (BIN.concat
                 [BIN.fromInt bin_el_17 (toErl 8) 1 BIN.Big,
                  BIN.binPrefix rest_6 (BIN.packedSize rest_6) 8])
        in let
          arg_19 =
            ErlangTuple
              [ErlangAtom "decoder", ErlangAtom "done", handler_7,
               ErlangAtom "null", stack_8]
        in let
          arg_25 =
            BIF.do_remote_fun_call "Jsx.Config" "erlps__config_to_list__1"
              [config_9]
        in
          BIF.erlang__apply__2
            [f_15,
             ErlangCons arg_16
               (ErlangCons arg_19 (ErlangCons arg_25 ErlangEmptyList))]
erlps__done__4 [(ErlangBinary binSeg_0), handler_10, stack_11,
                config_12]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 47)
  , (ErlangInt size_4) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      (BIN.chopInt bin_2 size_4 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_6) == (toErl 47)
  , (ErlangInt size_7) <- (BIN.size bin_5)
  , (BIN.Ok rest_9 bin_8) <- (BIN.chopBin bin_5 size_7 8)
  , BIN.empty bin_8 =
  erlps__comment__5
    [rest_9, handler_10, ErlangAtom "done",
     ErlangCons (ErlangAtom "comment") stack_11, config_12]
erlps__done__4 [(ErlangBinary binSeg_0), handler_10, stack_11,
                config_12]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 47)
  , (ErlangInt size_4) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      (BIN.chopInt bin_2 size_4 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_6) == (toErl 42)
  , (ErlangInt size_7) <- (BIN.size bin_5)
  , (BIN.Ok rest_9 bin_8) <- (BIN.chopBin bin_5 size_7 8)
  , BIN.empty bin_8 =
  erlps__comment__5
    [rest_9, handler_10, ErlangAtom "done",
     ErlangCons (ErlangAtom "multicomment") stack_11, config_12]
erlps__done__4 [(ErlangBinary binSeg_0), handler_4, stack_5,
                config_6]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt num_3) == (toErl 47)
  , BIN.empty bin_2 =
  let    bin_el_9 = toErl 47
  in let
    arg_8 = ErlangBinary (BIN.fromInt bin_el_9 (toErl 8) 1 BIN.Big)
  in
    erlps__incomplete__5
      [ErlangAtom "done", arg_8, handler_4, stack_5, config_6]
erlps__done__4 [bin_0, (ErlangTuple [_handler_1, state_2]),
                _stack_3,
                (ErlangTuple [(ErlangAtom "config"), _, _, _, _, _, _, _, _, _,
                              _, (ErlangAtom "true"), _, _, _, _])]
  =
  ErlangTuple [ErlangAtom "with_tail", state_2, bin_0]
erlps__done__4 [(ErlangBinary binEnd_0),
                (ErlangTuple [handler_1, state_2]), (ErlangEmptyList),
                config_3@(ErlangTuple [(ErlangAtom "config"), _, _, _, _, _, _,
                                       _, _, _, (ErlangAtom "true"), _, _, _, _,
                                       _])]
  | BIN.empty binEnd_0 =
  let    arg_5 = ErlangBinary (BIN.concat [])
  in let arg_6 = ErlangTuple [handler_1, state_2]
  in
    erlps__incomplete__5
      [ErlangAtom "done", arg_5, arg_6, ErlangEmptyList, config_3]
erlps__done__4 [(ErlangBinary binEnd_0),
                (ErlangTuple [_handler_1, state_2]), (ErlangEmptyList),
                _config_3]
  | BIN.empty binEnd_0 =
  state_2
erlps__done__4 [bin_0, (ErlangTuple [handler_1, state_2]),
                _stack_3,
                config_4@(ErlangTuple [(ErlangAtom "config"), _, _, _,
                                       (ErlangAtom "true"), _, _, _, _, _, _, _,
                                       _, _, _, _])]
  =
  let   
    tup_el_8 =
      BIF.erlang__apply__3
        [handler_1, ErlangAtom "reset",
         ErlangCons state_2 ErlangEmptyList]
  in let arg_6 = ErlangTuple [handler_1, tup_el_8]
  in erlps__value__4 [bin_0, arg_6, ErlangEmptyList, config_4]
erlps__done__4 [bin_0, handler_1, stack_2, config_3] =
  let
    case_4 =
      case config_3 of
        (ErlangTuple arr_7) | (DM.Just field_6) <- (arr_7 DA.!! 14) ->
          field_6
        _ -> EXC.badrecord (ErlangAtom "config")
  in
    case case_4 of
      (ErlangAtom "false") ->
        BIF.erlang__error__1 [ErlangAtom "badarg"]
      f_9 ->
        let   
          arg_11 =
            ErlangTuple
              [ErlangAtom "decoder", ErlangAtom "done", handler_1,
               ErlangAtom "null", stack_2]
        in let
          arg_17 =
            BIF.do_remote_fun_call "Jsx.Config" "erlps__config_to_list__1"
              [config_3]
        in
          BIF.erlang__apply__2
            [f_9,
             ErlangCons bin_0
               (ErlangCons arg_11 (ErlangCons arg_17 ErlangEmptyList))]
erlps__done__4 [arg_20, arg_21, arg_22, arg_23] =
  EXC.function_clause unit
erlps__done__4 args =
  EXC.badarity (ErlangFun 4 erlps__done__4) args