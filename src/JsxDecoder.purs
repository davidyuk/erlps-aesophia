module Jsx.Decoder(erlps__decoder__3, erlps__resume__6) where
{-
This file has been autogenerated
DO NOT EDIT - Your changes WILL be overwritten
Use this code at your own risk - the authors are just a mischievous raccoon and a haskell devote
Erlscripten v0.1.0
-}

import Prelude
import Data.Array as DA
import Data.List as DL
import Data.Maybe as DM
import Data.Map as Map
import Data.Tuple as Tup
import Data.BigInt as DBI
import Erlang.Builtins as BIF
import Erlang.Binary as BIN
import Erlang.Helpers as H
import Erlang.Exception as EXC
import Erlang.Type (ErlangFun, ErlangTerm(..), weakCmp, weakEq,
                    weakNEq, weakLt, weakLeq, weakGeq, weakGt)
import Effect (Effect)
import Effect.Unsafe (unsafePerformEffect)
import Effect.Exception (throw)
import Partial.Unsafe (unsafePartial)


erlps__decoder__3 :: ErlangFun
erlps__decoder__3 [handler_0, state_1, config_2] =
  (ErlangFun 1
     let
       lambda_3 [json_5] =
         let   
           tup_el_9 =
             (BIF.erlang__apply__3
                [handler_0, (ErlangAtom "init"),
                 (ErlangCons state_1 ErlangEmptyList)])
         in let arg_7 = (ErlangTuple [handler_0, tup_el_9])
         in let
           arg_16 =
             (BIF.do_remote_fun_call "Jsx.Config" "erlps__parse_config__1"
                [config_2])
         in (erlps__start__4 [json_5, arg_7, ErlangEmptyList, arg_16])
       lambda_3 [arg_4] = (EXC.function_clause unit)
       lambda_3 args = (EXC.badarity (ErlangFun 1 lambda_3) args)
     in lambda_3)
erlps__decoder__3 [arg_18, arg_19, arg_20] =
  (EXC.function_clause unit)
erlps__decoder__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__resume__6 :: ErlangFun
erlps__resume__6 [rest_0, state_1, handler_2, acc_3, stack_4,
                  config_5]
  =
  case state_1 of
    (ErlangAtom "start") ->
      (erlps__start__4 [rest_0, handler_2, stack_4, config_5])
    (ErlangAtom "value") ->
      (erlps__value__4 [rest_0, handler_2, stack_4, config_5])
    (ErlangAtom "object") ->
      (erlps__object__4 [rest_0, handler_2, stack_4, config_5])
    (ErlangAtom "array") ->
      (erlps__array__4 [rest_0, handler_2, stack_4, config_5])
    (ErlangAtom "colon") ->
      (erlps__colon__4 [rest_0, handler_2, stack_4, config_5])
    (ErlangAtom "key") ->
      (erlps__key__4 [rest_0, handler_2, stack_4, config_5])
    (ErlangAtom "string") ->
      (erlps__string__5 [rest_0, handler_2, acc_3, stack_4, config_5])
    (ErlangAtom "number") ->
      (erlps__number__5 [rest_0, handler_2, acc_3, stack_4, config_5])
    (ErlangAtom "true") ->
      (erlps__true__4 [rest_0, handler_2, stack_4, config_5])
    (ErlangAtom "false") ->
      (erlps__false__4 [rest_0, handler_2, stack_4, config_5])
    (ErlangAtom "null") ->
      (erlps__null__4 [rest_0, handler_2, stack_4, config_5])
    (ErlangAtom "comment") ->
      (erlps__comment__5 [rest_0, handler_2, acc_3, stack_4, config_5])
    (ErlangAtom "maybe_done") ->
      (erlps__maybe_done__4 [rest_0, handler_2, stack_4, config_5])
    (ErlangAtom "done") ->
      (erlps__done__4 [rest_0, handler_2, stack_4, config_5])
    something_else -> (EXC.case_clause something_else)
erlps__resume__6 [arg_66, arg_67, arg_68, arg_69, arg_70, arg_71]
  =
  (EXC.function_clause unit)
erlps__resume__6 args =
  (EXC.badarity
     (ErlangFun 6 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__incomplete__5 :: ErlangFun
erlps__incomplete__5 [state_0, rest_1, handler_2, stack_3,
                      config_4@(ErlangTuple [(ErlangAtom "config"), _, _, _, _,
                                             _, _, _, _, _,
                                             (ErlangAtom "false"), _, _, _, _,
                                             _])]
  =
  let
    case_5 =
      case config_4 of
        (ErlangTuple arr_8) | (DM.Just field_7) <- ((arr_8 DA.!! 14)) ->
          field_7
        _ -> (EXC.badrecord (ErlangAtom "config"))
  in
    case case_5 of
      (ErlangAtom "false") ->
        (BIF.erlang__error__1 [(ErlangAtom "badarg")])
      f_10 ->
        let   
          arg_12 =
            (ErlangTuple
               [(ErlangAtom "decoder"), state_0, handler_2, (ErlangAtom "null"),
                stack_3])
        in let
          arg_18 =
            (BIF.do_remote_fun_call "Jsx.Config" "erlps__config_to_list__1"
               [config_4])
        in
          (BIF.erlang__apply__2
             [f_10,
              (ErlangCons rest_1
                 (ErlangCons arg_12 (ErlangCons arg_18 ErlangEmptyList)))])
erlps__incomplete__5 [state_0, rest_1, handler_2, stack_3,
                      config_4]
  =
  (erlps__incomplete__6
     [state_0, rest_1, handler_2, (ErlangAtom "unused"), stack_3,
      config_4])
erlps__incomplete__5 [arg_11, arg_12, arg_13, arg_14, arg_15] =
  (EXC.function_clause unit)
erlps__incomplete__5 args =
  (EXC.badarity
     (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__incomplete__6 :: ErlangFun
erlps__incomplete__6 [state_0, rest_1, handler_2, acc_3, stack_4,
                      config_5@(ErlangTuple [(ErlangAtom "config"), _, _, _, _,
                                             _, _, _, _, _,
                                             (ErlangAtom "false"), _, _, _, _,
                                             _])]
  =
  let
    case_6 =
      case config_5 of
        (ErlangTuple arr_9) | (DM.Just field_8) <- ((arr_9 DA.!! 14)) ->
          field_8
        _ -> (EXC.badrecord (ErlangAtom "config"))
  in
    case case_6 of
      (ErlangAtom "false") ->
        (BIF.erlang__error__1 [(ErlangAtom "badarg")])
      f_11 ->
        let   
          arg_13 =
            (ErlangTuple
               [(ErlangAtom "decoder"), state_0, handler_2, acc_3, stack_4])
        in let
          arg_19 =
            (BIF.do_remote_fun_call "Jsx.Config" "erlps__config_to_list__1"
               [config_5])
        in
          (BIF.erlang__apply__2
             [f_11,
              (ErlangCons rest_1
                 (ErlangCons arg_13 (ErlangCons arg_19 ErlangEmptyList)))])
erlps__incomplete__6 [state_0, rest_1, handler_2, acc_3, stack_4,
                      config_5@(ErlangTuple [(ErlangAtom "config"), _, _, _, _,
                                             _, _, _, _, _, _, _, _, _, _,
                                             (ErlangAtom "false")])]
  =
  let
    tup_el_7 =
      (ErlangFun 1
         let
           lambda_8 [stream_10]
             | ((ErlangAtom "true") ==
                  (H.falsifyErrors
                     (\ _ -> (BIF.erlang__is_binary__1 [stream_10])))) =
             let
               arg_12 =
                 (ErlangBinary
                    (BIN.concat
                       [(BIN.format_bin rest_1 (BIN.packed_size rest_1) 8),
                        (BIN.format_bin stream_10 (BIN.packed_size stream_10)
                           8)]))
             in
               (erlps__resume__6
                  [arg_12, state_0, handler_2, acc_3, stack_4, config_5])
           lambda_8 [end_20]
             | ((ErlangAtom "true") ==
                  (H.falsifyErrors
                     (\ _ ->
                        let
                          lop_21 =
                            (BIF.erlang__op_eq
                               [end_20, (ErlangAtom "end_stream")])
                        in
                          case lop_21 of
                            (ErlangAtom "true") -> (ErlangAtom "true")
                            (ErlangAtom "false") ->
                              (BIF.erlang__op_eq
                                 [end_20, (ErlangAtom "end_json")])
                            _ -> (EXC.badarg1 lop_21)))) =
             let   
               arg_27 =
                 (ErlangBinary
                    (BIN.concat
                       [(BIN.format_bin rest_1 (BIN.packed_size rest_1) 8),
                        (BIN.from_int (ErlangInt (DBI.fromInt 32))
                           (ErlangInt (DBI.fromInt 8)) 1 BIN.Big)]))
             in let
               arg_34 =
                 case config_5 of
                   (ErlangTuple [(ErlangAtom "config"), dirty_strings_37,
                                 escaped_forward_slashes_38, escaped_strings_39,
                                 multi_term_40, strict_comments_41,
                                 strict_commas_42, strict_utf8_43,
                                 strict_single_quotes_44, strict_escapes_45,
                                 stream_46, return_tail_47, uescape_48,
                                 unescaped_jsonp_49, error_handler_50,
                                 incomplete_handler_51]) ->
                     (ErlangTuple
                        [(ErlangAtom "config"), dirty_strings_37,
                         escaped_forward_slashes_38, escaped_strings_39,
                         multi_term_40, strict_comments_41, strict_commas_42,
                         strict_utf8_43, strict_single_quotes_44,
                         strict_escapes_45, (ErlangAtom "false"),
                         return_tail_47, uescape_48, unescaped_jsonp_49,
                         error_handler_50, incomplete_handler_51])
                   _ -> (EXC.badrecord (ErlangAtom "config"))
             in let
               case_26 =
                 (erlps__resume__6
                    [arg_27, state_0, handler_2, acc_3, stack_4, arg_34])
             in
               case case_26 of
                 (ErlangTuple [(ErlangAtom "incomplete"), _]) ->
                   let
                     case_52 =
                       case config_5 of
                         (ErlangTuple arr_55) | (DM.Just field_54) <-
                                                  ((arr_55 DA.!! 14)) ->
                           field_54
                         _ -> (EXC.badrecord (ErlangAtom "config"))
                   in
                     case case_52 of
                       (ErlangAtom "false") ->
                         (BIF.erlang__error__1 [(ErlangAtom "badarg")])
                       f_57 ->
                         let   
                           arg_59 =
                             (ErlangTuple
                                [(ErlangAtom "decoder"), state_0, handler_2,
                                 acc_3, stack_4])
                         in let
                           arg_65 =
                             (BIF.do_remote_fun_call "Jsx.Config"
                                "erlps__config_to_list__1" [config_5])
                         in
                           (BIF.erlang__apply__2
                              [f_57,
                               (ErlangCons rest_1
                                  (ErlangCons arg_59
                                     (ErlangCons arg_65 ErlangEmptyList)))])
                 else_68 -> else_68
           lambda_8 [arg_9] = (EXC.function_clause unit)
           lambda_8 args = (EXC.badarity (ErlangFun 1 lambda_8) args)
         in lambda_8)
  in (ErlangTuple [(ErlangAtom "incomplete"), tup_el_7])
erlps__incomplete__6 [state_0, rest_1, handler_2, acc_3, stack_4,
                      config_6@(ErlangTuple [(ErlangAtom "config"), _, _, _, _,
                                             _, _, _, _, _, _, _, _, _, _,
                                             f_5])]
  =
  let   
    arg_8 =
      (ErlangTuple
         [(ErlangAtom "decoder"), state_0, handler_2, acc_3, stack_4])
  in let
    arg_14 =
      (BIF.do_remote_fun_call "Jsx.Config" "erlps__config_to_list__1"
         [config_6])
  in
    (BIF.erlang__apply__2
       [f_5,
        (ErlangCons rest_1
           (ErlangCons arg_8 (ErlangCons arg_14 ErlangEmptyList)))])
erlps__incomplete__6 [arg_17, arg_18, arg_19, arg_20, arg_21,
                      arg_22]
  =
  (EXC.function_clause unit)
erlps__incomplete__6 args =
  (EXC.badarity
     (ErlangFun 6 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__handle_event__3 :: ErlangFun
erlps__handle_event__3 [event_0,
                        (ErlangTuple [handler_1, state_2]), _config_3]
  =
  let
    tup_el_5 =
      (BIF.erlang__apply__3
         [handler_1, (ErlangAtom "handle_event"),
          (ErlangCons event_0 (ErlangCons state_2 ErlangEmptyList))])
  in (ErlangTuple [handler_1, tup_el_5])
erlps__handle_event__3 [arg_13, arg_14, arg_15] =
  (EXC.function_clause unit)
erlps__handle_event__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__start__4 :: ErlangFun
erlps__start__4 [(ErlangBinary bin_c_0), handler_13, stack_14,
                 config_15]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 239)))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_6) == (ErlangInt (DBI.fromInt 187)))
  , size_7 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_9) bin_8) <-
      ((BIN.chop_int bin_5 size_7 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_9) == (ErlangInt (DBI.fromInt 191)))
  , (ErlangInt size_10) <- ((BIN.size bin_8))
  , (BIN.Ok rest_12 bin_11) <- ((BIN.chop_bin bin_8 size_10 8))
  , (BIN.empty bin_11) =
  (erlps__value__4 [rest_12, handler_13, stack_14, config_15])
erlps__start__4 [(ErlangBinary bin_c_0), handler_7, stack_8,
                 config_9]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 239)))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_6) == (ErlangInt (DBI.fromInt 187)))
  , (BIN.empty bin_5) =
  let
    arg_11 =
      (ErlangBinary
         (BIN.concat
            [(BIN.from_int (ErlangInt (DBI.fromInt 239))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 187))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big)]))
  in
    (erlps__incomplete__5
       [(ErlangAtom "start"), arg_11, handler_7, stack_8, config_9])
erlps__start__4 [(ErlangBinary bin_c_0), handler_4, stack_5,
                 config_6]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 239)))
  , (BIN.empty bin_2) =
  let
    arg_8 =
      (ErlangBinary
         (BIN.from_int (ErlangInt (DBI.fromInt 239))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big))
  in
    (erlps__incomplete__5
       [(ErlangAtom "start"), arg_8, handler_4, stack_5, config_6])
erlps__start__4 [(ErlangBinary bin_e_0), handler_1, stack_2,
                 config_3]
  | (BIN.empty bin_e_0) =
  let arg_5 = (ErlangBinary (BIN.concat []))
  in
    (erlps__incomplete__5
       [(ErlangAtom "start"), arg_5, handler_1, stack_2, config_3])
erlps__start__4 [bin_0, handler_1, stack_2, config_3] =
  (erlps__value__4 [bin_0, handler_1, stack_2, config_3])
erlps__start__4 [arg_8, arg_9, arg_10, arg_11] =
  (EXC.function_clause unit)
erlps__start__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__value__4 :: ErlangFun
erlps__value__4 [(ErlangBinary bin_c_0), handler_7, stack_8,
                 config_9]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 34)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  (erlps__string__4 [rest_6, handler_7, stack_8, config_9])
erlps__value__4 [(ErlangBinary bin_c_0), handler_7, stack_8,
                 config_9]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 32)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  (erlps__value__4 [rest_6, handler_7, stack_8, config_9])
erlps__value__4 [(ErlangBinary bin_c_0), handler_7, stack_8,
                 config_9]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 123)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_11 =
      (erlps__handle_event__3
         [(ErlangAtom "start_object"), handler_7, config_9])
  in
    (erlps__object__4
       [rest_6, arg_11, (ErlangCons (ErlangAtom "key") stack_8),
        config_9])
erlps__value__4 [(ErlangBinary bin_c_0), handler_7, stack_8,
                 config_9]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 91)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_11 =
      (erlps__handle_event__3
         [(ErlangAtom "start_array"), handler_7, config_9])
  in
    (erlps__array__4
       [rest_6, arg_11, (ErlangCons (ErlangAtom "array") stack_8),
        config_9])
erlps__value__4 [(ErlangBinary bin_c_0), handler_16, stack_17,
                 config_18]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 116)))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_6) == (ErlangInt (DBI.fromInt 114)))
  , size_7 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_9) bin_8) <-
      ((BIN.chop_int bin_5 size_7 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_9) == (ErlangInt (DBI.fromInt 117)))
  , size_10 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_12) bin_11) <-
      ((BIN.chop_int bin_8 size_10 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_12) == (ErlangInt (DBI.fromInt 101)))
  , (ErlangInt size_13) <- ((BIN.size bin_11))
  , (BIN.Ok rest_15 bin_14) <- ((BIN.chop_bin bin_11 size_13 8))
  , (BIN.empty bin_14) =
  let   
    arg_21 =
      (ErlangTuple [(ErlangAtom "literal"), (ErlangAtom "true")])
  in let
    arg_20 = (erlps__handle_event__3 [arg_21, handler_16, config_18])
  in (erlps__maybe_done__4 [rest_15, arg_20, stack_17, config_18])
erlps__value__4 args = (erlps__value__4__p1 args)

erlps__value__4__p1 :: ErlangFun
erlps__value__4__p1 [(ErlangBinary bin_c_0), handler_19,
                     stack_20, config_21]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 102)))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_6) == (ErlangInt (DBI.fromInt 97)))
  , size_7 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_9) bin_8) <-
      ((BIN.chop_int bin_5 size_7 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_9) == (ErlangInt (DBI.fromInt 108)))
  , size_10 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_12) bin_11) <-
      ((BIN.chop_int bin_8 size_10 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_12) == (ErlangInt (DBI.fromInt 115)))
  , size_13 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_15) bin_14) <-
      ((BIN.chop_int bin_11 size_13 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_15) == (ErlangInt (DBI.fromInt 101)))
  , (ErlangInt size_16) <- ((BIN.size bin_14))
  , (BIN.Ok rest_18 bin_17) <- ((BIN.chop_bin bin_14 size_16 8))
  , (BIN.empty bin_17) =
  let   
    arg_24 =
      (ErlangTuple [(ErlangAtom "literal"), (ErlangAtom "false")])
  in let
    arg_23 = (erlps__handle_event__3 [arg_24, handler_19, config_21])
  in (erlps__maybe_done__4 [rest_18, arg_23, stack_20, config_21])
erlps__value__4__p1 [(ErlangBinary bin_c_0), handler_16,
                     stack_17, config_18]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 110)))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_6) == (ErlangInt (DBI.fromInt 117)))
  , size_7 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_9) bin_8) <-
      ((BIN.chop_int bin_5 size_7 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_9) == (ErlangInt (DBI.fromInt 108)))
  , size_10 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_12) bin_11) <-
      ((BIN.chop_int bin_8 size_10 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_12) == (ErlangInt (DBI.fromInt 108)))
  , (ErlangInt size_13) <- ((BIN.size bin_11))
  , (BIN.Ok rest_15 bin_14) <- ((BIN.chop_bin bin_11 size_13 8))
  , (BIN.empty bin_14) =
  let   
    arg_21 =
      (ErlangTuple [(ErlangAtom "literal"), (ErlangAtom "null")])
  in let
    arg_20 = (erlps__handle_event__3 [arg_21, handler_16, config_18])
  in (erlps__maybe_done__4 [rest_15, arg_20, stack_17, config_18])
erlps__value__4__p1 [(ErlangBinary bin_c_0), handler_7, stack_8,
                     config_9]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 48)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  (erlps__number__5
     [rest_6, handler_7,
      (ErlangCons (ErlangInt (DBI.fromInt 48)) ErlangEmptyList),
      (ErlangCons (ErlangAtom "zero") stack_8), config_9])
erlps__value__4__p1 [(ErlangBinary bin_c_0), handler_7, stack_8,
                     config_9]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 49)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  (erlps__number__5
     [rest_6, handler_7,
      (ErlangCons (ErlangInt (DBI.fromInt 49)) ErlangEmptyList),
      (ErlangCons (ErlangAtom "integer") stack_8), config_9])
erlps__value__4__p1 [(ErlangBinary bin_c_0), handler_7, stack_8,
                     config_9]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 50)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  (erlps__number__5
     [rest_6, handler_7,
      (ErlangCons (ErlangInt (DBI.fromInt 50)) ErlangEmptyList),
      (ErlangCons (ErlangAtom "integer") stack_8), config_9])
erlps__value__4__p1 args = (erlps__value__4__p2 args)

erlps__value__4__p2 :: ErlangFun
erlps__value__4__p2 [(ErlangBinary bin_c_0), handler_7, stack_8,
                     config_9]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 51)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  (erlps__number__5
     [rest_6, handler_7,
      (ErlangCons (ErlangInt (DBI.fromInt 51)) ErlangEmptyList),
      (ErlangCons (ErlangAtom "integer") stack_8), config_9])
erlps__value__4__p2 [(ErlangBinary bin_c_0), handler_7, stack_8,
                     config_9]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 52)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  (erlps__number__5
     [rest_6, handler_7,
      (ErlangCons (ErlangInt (DBI.fromInt 52)) ErlangEmptyList),
      (ErlangCons (ErlangAtom "integer") stack_8), config_9])
erlps__value__4__p2 [(ErlangBinary bin_c_0), handler_7, stack_8,
                     config_9]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 53)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  (erlps__number__5
     [rest_6, handler_7,
      (ErlangCons (ErlangInt (DBI.fromInt 53)) ErlangEmptyList),
      (ErlangCons (ErlangAtom "integer") stack_8), config_9])
erlps__value__4__p2 [(ErlangBinary bin_c_0), handler_7, stack_8,
                     config_9]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 54)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  (erlps__number__5
     [rest_6, handler_7,
      (ErlangCons (ErlangInt (DBI.fromInt 54)) ErlangEmptyList),
      (ErlangCons (ErlangAtom "integer") stack_8), config_9])
erlps__value__4__p2 [(ErlangBinary bin_c_0), handler_7, stack_8,
                     config_9]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 55)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  (erlps__number__5
     [rest_6, handler_7,
      (ErlangCons (ErlangInt (DBI.fromInt 55)) ErlangEmptyList),
      (ErlangCons (ErlangAtom "integer") stack_8), config_9])
erlps__value__4__p2 args = (erlps__value__4__p3 args)

erlps__value__4__p3 :: ErlangFun
erlps__value__4__p3 [(ErlangBinary bin_c_0), handler_7, stack_8,
                     config_9]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 56)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  (erlps__number__5
     [rest_6, handler_7,
      (ErlangCons (ErlangInt (DBI.fromInt 56)) ErlangEmptyList),
      (ErlangCons (ErlangAtom "integer") stack_8), config_9])
erlps__value__4__p3 [(ErlangBinary bin_c_0), handler_7, stack_8,
                     config_9]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 57)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  (erlps__number__5
     [rest_6, handler_7,
      (ErlangCons (ErlangInt (DBI.fromInt 57)) ErlangEmptyList),
      (ErlangCons (ErlangAtom "integer") stack_8), config_9])
erlps__value__4__p3 [(ErlangBinary bin_c_0), handler_7, stack_8,
                     config_9]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 45)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  (erlps__number__5
     [rest_6, handler_7,
      (ErlangCons (ErlangInt (DBI.fromInt 45)) ErlangEmptyList),
      (ErlangCons (ErlangAtom "negative") stack_8), config_9])
erlps__value__4__p3 [(ErlangBinary bin_c_0), handler_7, stack_8,
                     config_9]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 10)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  (erlps__value__4 [rest_6, handler_7, stack_8, config_9])
erlps__value__4__p3 [(ErlangBinary bin_c_0), handler_7, stack_8,
                     config_9]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 116)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  (erlps__true__4 [rest_6, handler_7, stack_8, config_9])
erlps__value__4__p3 args = (erlps__value__4__p4 args)

erlps__value__4__p4 :: ErlangFun
erlps__value__4__p4 [(ErlangBinary bin_c_0), handler_7, stack_8,
                     config_9]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 102)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  (erlps__false__4 [rest_6, handler_7, stack_8, config_9])
erlps__value__4__p4 [(ErlangBinary bin_c_0), handler_7, stack_8,
                     config_9]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 110)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  (erlps__null__4 [rest_6, handler_7, stack_8, config_9])
erlps__value__4__p4 [(ErlangBinary bin_c_0), handler_7, stack_8,
                     config_9]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 9)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  (erlps__value__4 [rest_6, handler_7, stack_8, config_9])
erlps__value__4__p4 [(ErlangBinary bin_c_0), handler_7, stack_8,
                     config_9]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 13)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  (erlps__value__4 [rest_6, handler_7, stack_8, config_9])
erlps__value__4__p4 [(ErlangBinary bin_c_0), handler_7, stack_8,
                     config_9@(ErlangTuple [(ErlangAtom "config"), _, _, _, _,
                                            _, _, _, (ErlangAtom "false"), _, _,
                                            _, _, _, _, _])]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 39)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  (erlps__string__4
     [rest_6, handler_7,
      (ErlangCons (ErlangAtom "singlequote") stack_8), config_9])
erlps__value__4__p4 args = (erlps__value__4__p5 args)

erlps__value__4__p5 :: ErlangFun
erlps__value__4__p5 [rest_4@(ErlangBinary bin_c_0), handler_5,
                     stack_6,
                     config_7@(ErlangTuple [(ErlangAtom "config"), _, _, _, _,
                                            _, (ErlangAtom "false"), _, _, _, _,
                                            _, _, _, _, _])]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 93))) =
  (erlps__maybe_done__4 [rest_4, handler_5, stack_6, config_7])
erlps__value__4__p5 [(ErlangBinary bin_c_0), handler_7, stack_8,
                     config_9@(ErlangTuple [(ErlangAtom "config"), _, _, _, _,
                                            (ErlangAtom "true"), _, _, _, _, _,
                                            _, _, _, _, _])]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 47)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    case_10 =
      case config_9 of
        (ErlangTuple arr_13) | (DM.Just field_12) <-
                                 ((arr_13 DA.!! 14)) ->
          field_12
        _ -> (EXC.badrecord (ErlangAtom "config"))
  in
    case case_10 of
      (ErlangAtom "false") ->
        (BIF.erlang__error__1 [(ErlangAtom "badarg")])
      f_15 ->
        let   
          arg_16 =
            (ErlangBinary
               (BIN.concat
                  [(BIN.from_int (ErlangInt (DBI.fromInt 47))
                      (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
                   (BIN.format_bin rest_6 (BIN.packed_size rest_6) 8)]))
        in let
          arg_19 =
            (ErlangTuple
               [(ErlangAtom "decoder"), (ErlangAtom "value"), handler_7,
                (ErlangAtom "null"), stack_8])
        in let
          arg_25 =
            (BIF.do_remote_fun_call "Jsx.Config" "erlps__config_to_list__1"
               [config_9])
        in
          (BIF.erlang__apply__2
             [f_15,
              (ErlangCons arg_16
                 (ErlangCons arg_19 (ErlangCons arg_25 ErlangEmptyList)))])
erlps__value__4__p5 [(ErlangBinary bin_c_0), handler_10,
                     stack_11, config_12]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 47)))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_6) == (ErlangInt (DBI.fromInt 47)))
  , (ErlangInt size_7) <- ((BIN.size bin_5))
  , (BIN.Ok rest_9 bin_8) <- ((BIN.chop_bin bin_5 size_7 8))
  , (BIN.empty bin_8) =
  (erlps__comment__5
     [rest_9, handler_10, (ErlangAtom "value"),
      (ErlangCons (ErlangAtom "comment") stack_11), config_12])
erlps__value__4__p5 [(ErlangBinary bin_c_0), handler_10,
                     stack_11, config_12]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 47)))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_6) == (ErlangInt (DBI.fromInt 42)))
  , (ErlangInt size_7) <- ((BIN.size bin_5))
  , (BIN.Ok rest_9 bin_8) <- ((BIN.chop_bin bin_5 size_7 8))
  , (BIN.empty bin_8) =
  (erlps__comment__5
     [rest_9, handler_10, (ErlangAtom "value"),
      (ErlangCons (ErlangAtom "multicomment") stack_11), config_12])
erlps__value__4__p5 [(ErlangBinary bin_c_0), handler_4, stack_5,
                     config_6]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 47)))
  , (BIN.empty bin_2) =
  let
    arg_8 =
      (ErlangBinary
         (BIN.from_int (ErlangInt (DBI.fromInt 47))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big))
  in
    (erlps__incomplete__5
       [(ErlangAtom "value"), arg_8, handler_4, stack_5, config_6])
erlps__value__4__p5 args = (erlps__value__4__p6 args)

erlps__value__4__p6 :: ErlangFun
erlps__value__4__p6 [(ErlangBinary bin_e_0), handler_1, stack_2,
                     config_3]
  | (BIN.empty bin_e_0) =
  let arg_5 = (ErlangBinary (BIN.concat []))
  in
    (erlps__incomplete__5
       [(ErlangAtom "value"), arg_5, handler_1, stack_2, config_3])
erlps__value__4__p6 [bin_0, handler_1, stack_2, config_3] =
  let
    case_4 =
      case config_3 of
        (ErlangTuple arr_7) | (DM.Just field_6) <- ((arr_7 DA.!! 14)) ->
          field_6
        _ -> (EXC.badrecord (ErlangAtom "config"))
  in
    case case_4 of
      (ErlangAtom "false") ->
        (BIF.erlang__error__1 [(ErlangAtom "badarg")])
      f_9 ->
        let   
          arg_11 =
            (ErlangTuple
               [(ErlangAtom "decoder"), (ErlangAtom "value"), handler_1,
                (ErlangAtom "null"), stack_2])
        in let
          arg_17 =
            (BIF.do_remote_fun_call "Jsx.Config" "erlps__config_to_list__1"
               [config_3])
        in
          (BIF.erlang__apply__2
             [f_9,
              (ErlangCons bin_0
                 (ErlangCons arg_11 (ErlangCons arg_17 ErlangEmptyList)))])
erlps__value__4__p6 [arg_20, arg_21, arg_22, arg_23] =
  (EXC.function_clause unit)
erlps__value__4__p6 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__object__4 :: ErlangFun
erlps__object__4 [(ErlangBinary bin_c_0), handler_7, stack_8,
                  config_9]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 34)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  (erlps__string__4 [rest_6, handler_7, stack_8, config_9])
erlps__object__4 [(ErlangBinary bin_c_0), handler_7, stack_8,
                  config_9]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 32)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  (erlps__object__4 [rest_6, handler_7, stack_8, config_9])
erlps__object__4 [(ErlangBinary bin_c_0), handler_7,
                  (ErlangCons (ErlangAtom "key") stack_8), config_9]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 125)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_11 =
      (erlps__handle_event__3
         [(ErlangAtom "end_object"), handler_7, config_9])
  in (erlps__maybe_done__4 [rest_6, arg_11, stack_8, config_9])
erlps__object__4 [(ErlangBinary bin_c_0), handler_7, stack_8,
                  config_9]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 10)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  (erlps__object__4 [rest_6, handler_7, stack_8, config_9])
erlps__object__4 [(ErlangBinary bin_c_0), handler_7, stack_8,
                  config_9]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 9)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  (erlps__object__4 [rest_6, handler_7, stack_8, config_9])
erlps__object__4 args = (erlps__object__4__p1 args)

erlps__object__4__p1 :: ErlangFun
erlps__object__4__p1 [(ErlangBinary bin_c_0), handler_7, stack_8,
                      config_9]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 13)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  (erlps__object__4 [rest_6, handler_7, stack_8, config_9])
erlps__object__4__p1 [(ErlangBinary bin_c_0), handler_7, stack_8,
                      config_9@(ErlangTuple [(ErlangAtom "config"), _, _, _, _,
                                             _, _, _, (ErlangAtom "false"), _,
                                             _, _, _, _, _, _])]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 39)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  (erlps__string__4
     [rest_6, handler_7,
      (ErlangCons (ErlangAtom "singlequote") stack_8), config_9])
erlps__object__4__p1 [(ErlangBinary bin_c_0), handler_7, stack_8,
                      config_9@(ErlangTuple [(ErlangAtom "config"), _, _, _, _,
                                             (ErlangAtom "true"), _, _, _, _, _,
                                             _, _, _, _, _])]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 47)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    case_10 =
      case config_9 of
        (ErlangTuple arr_13) | (DM.Just field_12) <-
                                 ((arr_13 DA.!! 14)) ->
          field_12
        _ -> (EXC.badrecord (ErlangAtom "config"))
  in
    case case_10 of
      (ErlangAtom "false") ->
        (BIF.erlang__error__1 [(ErlangAtom "badarg")])
      f_15 ->
        let   
          arg_16 =
            (ErlangBinary
               (BIN.concat
                  [(BIN.from_int (ErlangInt (DBI.fromInt 47))
                      (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
                   (BIN.format_bin rest_6 (BIN.packed_size rest_6) 8)]))
        in let
          arg_19 =
            (ErlangTuple
               [(ErlangAtom "decoder"), (ErlangAtom "object"), handler_7,
                (ErlangAtom "null"), stack_8])
        in let
          arg_25 =
            (BIF.do_remote_fun_call "Jsx.Config" "erlps__config_to_list__1"
               [config_9])
        in
          (BIF.erlang__apply__2
             [f_15,
              (ErlangCons arg_16
                 (ErlangCons arg_19 (ErlangCons arg_25 ErlangEmptyList)))])
erlps__object__4__p1 [(ErlangBinary bin_c_0), handler_10,
                      stack_11, config_12]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 47)))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_6) == (ErlangInt (DBI.fromInt 47)))
  , (ErlangInt size_7) <- ((BIN.size bin_5))
  , (BIN.Ok rest_9 bin_8) <- ((BIN.chop_bin bin_5 size_7 8))
  , (BIN.empty bin_8) =
  (erlps__comment__5
     [rest_9, handler_10, (ErlangAtom "object"),
      (ErlangCons (ErlangAtom "comment") stack_11), config_12])
erlps__object__4__p1 [(ErlangBinary bin_c_0), handler_10,
                      stack_11, config_12]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 47)))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_6) == (ErlangInt (DBI.fromInt 42)))
  , (ErlangInt size_7) <- ((BIN.size bin_5))
  , (BIN.Ok rest_9 bin_8) <- ((BIN.chop_bin bin_5 size_7 8))
  , (BIN.empty bin_8) =
  (erlps__comment__5
     [rest_9, handler_10, (ErlangAtom "object"),
      (ErlangCons (ErlangAtom "multicomment") stack_11), config_12])
erlps__object__4__p1 args = (erlps__object__4__p2 args)

erlps__object__4__p2 :: ErlangFun
erlps__object__4__p2 [(ErlangBinary bin_c_0), handler_4, stack_5,
                      config_6]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 47)))
  , (BIN.empty bin_2) =
  let
    arg_8 =
      (ErlangBinary
         (BIN.from_int (ErlangInt (DBI.fromInt 47))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big))
  in
    (erlps__incomplete__5
       [(ErlangAtom "object"), arg_8, handler_4, stack_5, config_6])
erlps__object__4__p2 [(ErlangBinary bin_e_0), handler_1, stack_2,
                      config_3]
  | (BIN.empty bin_e_0) =
  let arg_5 = (ErlangBinary (BIN.concat []))
  in
    (erlps__incomplete__5
       [(ErlangAtom "object"), arg_5, handler_1, stack_2, config_3])
erlps__object__4__p2 [bin_0, handler_1, stack_2, config_3] =
  let
    case_4 =
      case config_3 of
        (ErlangTuple arr_7) | (DM.Just field_6) <- ((arr_7 DA.!! 14)) ->
          field_6
        _ -> (EXC.badrecord (ErlangAtom "config"))
  in
    case case_4 of
      (ErlangAtom "false") ->
        (BIF.erlang__error__1 [(ErlangAtom "badarg")])
      f_9 ->
        let   
          arg_11 =
            (ErlangTuple
               [(ErlangAtom "decoder"), (ErlangAtom "object"), handler_1,
                (ErlangAtom "null"), stack_2])
        in let
          arg_17 =
            (BIF.do_remote_fun_call "Jsx.Config" "erlps__config_to_list__1"
               [config_3])
        in
          (BIF.erlang__apply__2
             [f_9,
              (ErlangCons bin_0
                 (ErlangCons arg_11 (ErlangCons arg_17 ErlangEmptyList)))])
erlps__object__4__p2 [arg_20, arg_21, arg_22, arg_23] =
  (EXC.function_clause unit)
erlps__object__4__p2 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__array__4 :: ErlangFun
erlps__array__4 [(ErlangBinary bin_c_0), handler_7,
                 (ErlangCons (ErlangAtom "array") stack_8), config_9]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 93)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_11 =
      (erlps__handle_event__3
         [(ErlangAtom "end_array"), handler_7, config_9])
  in (erlps__maybe_done__4 [rest_6, arg_11, stack_8, config_9])
erlps__array__4 [(ErlangBinary bin_c_0), handler_7, stack_8,
                 config_9]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 32)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  (erlps__array__4 [rest_6, handler_7, stack_8, config_9])
erlps__array__4 [(ErlangBinary bin_c_0), handler_7, stack_8,
                 config_9]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 10)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  (erlps__array__4 [rest_6, handler_7, stack_8, config_9])
erlps__array__4 [(ErlangBinary bin_c_0), handler_7, stack_8,
                 config_9]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 9)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  (erlps__array__4 [rest_6, handler_7, stack_8, config_9])
erlps__array__4 [(ErlangBinary bin_c_0), handler_7, stack_8,
                 config_9]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 13)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  (erlps__array__4 [rest_6, handler_7, stack_8, config_9])
erlps__array__4 args = (erlps__array__4__p1 args)

erlps__array__4__p1 :: ErlangFun
erlps__array__4__p1 [(ErlangBinary bin_c_0), handler_7, stack_8,
                     config_9@(ErlangTuple [(ErlangAtom "config"), _, _, _, _,
                                            (ErlangAtom "true"), _, _, _, _, _,
                                            _, _, _, _, _])]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 47)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 =
      (ErlangBinary
         (BIN.concat
            [(BIN.from_int (ErlangInt (DBI.fromInt 47))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.format_bin rest_6 (BIN.packed_size rest_6) 8)]))
  in (erlps__value__4 [arg_10, handler_7, stack_8, config_9])
erlps__array__4__p1 [(ErlangBinary bin_c_0), handler_10,
                     stack_11, config_12]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 47)))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_6) == (ErlangInt (DBI.fromInt 47)))
  , (ErlangInt size_7) <- ((BIN.size bin_5))
  , (BIN.Ok rest_9 bin_8) <- ((BIN.chop_bin bin_5 size_7 8))
  , (BIN.empty bin_8) =
  (erlps__comment__5
     [rest_9, handler_10, (ErlangAtom "array"),
      (ErlangCons (ErlangAtom "comment") stack_11), config_12])
erlps__array__4__p1 [(ErlangBinary bin_c_0), handler_10,
                     stack_11, config_12]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 47)))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_6) == (ErlangInt (DBI.fromInt 42)))
  , (ErlangInt size_7) <- ((BIN.size bin_5))
  , (BIN.Ok rest_9 bin_8) <- ((BIN.chop_bin bin_5 size_7 8))
  , (BIN.empty bin_8) =
  (erlps__comment__5
     [rest_9, handler_10, (ErlangAtom "array"),
      (ErlangCons (ErlangAtom "multicomment") stack_11), config_12])
erlps__array__4__p1 [(ErlangBinary bin_c_0), handler_4, stack_5,
                     config_6]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 47)))
  , (BIN.empty bin_2) =
  let
    arg_8 =
      (ErlangBinary
         (BIN.from_int (ErlangInt (DBI.fromInt 47))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big))
  in
    (erlps__incomplete__5
       [(ErlangAtom "array"), arg_8, handler_4, stack_5, config_6])
erlps__array__4__p1 [(ErlangBinary bin_e_0), handler_1, stack_2,
                     config_3]
  | (BIN.empty bin_e_0) =
  let arg_5 = (ErlangBinary (BIN.concat []))
  in
    (erlps__incomplete__5
       [(ErlangAtom "array"), arg_5, handler_1, stack_2, config_3])
erlps__array__4__p1 args = (erlps__array__4__p2 args)

erlps__array__4__p2 :: ErlangFun
erlps__array__4__p2 [bin_0, handler_1, stack_2, config_3] =
  (erlps__value__4 [bin_0, handler_1, stack_2, config_3])
erlps__array__4__p2 [arg_8, arg_9, arg_10, arg_11] =
  (EXC.function_clause unit)
erlps__array__4__p2 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__colon__4 :: ErlangFun
erlps__colon__4 [(ErlangBinary bin_c_0), handler_7,
                 (ErlangCons (ErlangAtom "key") stack_8), config_9]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 58)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  (erlps__value__4
     [rest_6, handler_7, (ErlangCons (ErlangAtom "object") stack_8),
      config_9])
erlps__colon__4 [(ErlangBinary bin_c_0), handler_7, stack_8,
                 config_9]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 32)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  (erlps__colon__4 [rest_6, handler_7, stack_8, config_9])
erlps__colon__4 [(ErlangBinary bin_c_0), handler_7, stack_8,
                 config_9]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 10)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  (erlps__colon__4 [rest_6, handler_7, stack_8, config_9])
erlps__colon__4 [(ErlangBinary bin_c_0), handler_7, stack_8,
                 config_9]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 9)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  (erlps__colon__4 [rest_6, handler_7, stack_8, config_9])
erlps__colon__4 [(ErlangBinary bin_c_0), handler_7, stack_8,
                 config_9]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 13)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  (erlps__colon__4 [rest_6, handler_7, stack_8, config_9])
erlps__colon__4 args = (erlps__colon__4__p1 args)

erlps__colon__4__p1 :: ErlangFun
erlps__colon__4__p1 [(ErlangBinary bin_c_0), handler_7, stack_8,
                     config_9@(ErlangTuple [(ErlangAtom "config"), _, _, _, _,
                                            (ErlangAtom "true"), _, _, _, _, _,
                                            _, _, _, _, _])]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 47)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    case_10 =
      case config_9 of
        (ErlangTuple arr_13) | (DM.Just field_12) <-
                                 ((arr_13 DA.!! 14)) ->
          field_12
        _ -> (EXC.badrecord (ErlangAtom "config"))
  in
    case case_10 of
      (ErlangAtom "false") ->
        (BIF.erlang__error__1 [(ErlangAtom "badarg")])
      f_15 ->
        let   
          arg_16 =
            (ErlangBinary
               (BIN.concat
                  [(BIN.from_int (ErlangInt (DBI.fromInt 47))
                      (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
                   (BIN.format_bin rest_6 (BIN.packed_size rest_6) 8)]))
        in let
          arg_19 =
            (ErlangTuple
               [(ErlangAtom "decoder"), (ErlangAtom "colon"), handler_7,
                (ErlangAtom "null"), stack_8])
        in let
          arg_25 =
            (BIF.do_remote_fun_call "Jsx.Config" "erlps__config_to_list__1"
               [config_9])
        in
          (BIF.erlang__apply__2
             [f_15,
              (ErlangCons arg_16
                 (ErlangCons arg_19 (ErlangCons arg_25 ErlangEmptyList)))])
erlps__colon__4__p1 [(ErlangBinary bin_c_0), handler_10,
                     stack_11, config_12]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 47)))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_6) == (ErlangInt (DBI.fromInt 47)))
  , (ErlangInt size_7) <- ((BIN.size bin_5))
  , (BIN.Ok rest_9 bin_8) <- ((BIN.chop_bin bin_5 size_7 8))
  , (BIN.empty bin_8) =
  (erlps__comment__5
     [rest_9, handler_10, (ErlangAtom "colon"),
      (ErlangCons (ErlangAtom "comment") stack_11), config_12])
erlps__colon__4__p1 [(ErlangBinary bin_c_0), handler_10,
                     stack_11, config_12]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 47)))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_6) == (ErlangInt (DBI.fromInt 42)))
  , (ErlangInt size_7) <- ((BIN.size bin_5))
  , (BIN.Ok rest_9 bin_8) <- ((BIN.chop_bin bin_5 size_7 8))
  , (BIN.empty bin_8) =
  (erlps__comment__5
     [rest_9, handler_10, (ErlangAtom "colon"),
      (ErlangCons (ErlangAtom "multicomment") stack_11), config_12])
erlps__colon__4__p1 [(ErlangBinary bin_c_0), handler_4, stack_5,
                     config_6]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 47)))
  , (BIN.empty bin_2) =
  let
    arg_8 =
      (ErlangBinary
         (BIN.from_int (ErlangInt (DBI.fromInt 47))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big))
  in
    (erlps__incomplete__5
       [(ErlangAtom "colon"), arg_8, handler_4, stack_5, config_6])
erlps__colon__4__p1 [(ErlangBinary bin_e_0), handler_1, stack_2,
                     config_3]
  | (BIN.empty bin_e_0) =
  let arg_5 = (ErlangBinary (BIN.concat []))
  in
    (erlps__incomplete__5
       [(ErlangAtom "colon"), arg_5, handler_1, stack_2, config_3])
erlps__colon__4__p1 args = (erlps__colon__4__p2 args)

erlps__colon__4__p2 :: ErlangFun
erlps__colon__4__p2 [bin_0, handler_1, stack_2, config_3] =
  let
    case_4 =
      case config_3 of
        (ErlangTuple arr_7) | (DM.Just field_6) <- ((arr_7 DA.!! 14)) ->
          field_6
        _ -> (EXC.badrecord (ErlangAtom "config"))
  in
    case case_4 of
      (ErlangAtom "false") ->
        (BIF.erlang__error__1 [(ErlangAtom "badarg")])
      f_9 ->
        let   
          arg_11 =
            (ErlangTuple
               [(ErlangAtom "decoder"), (ErlangAtom "colon"), handler_1,
                (ErlangAtom "null"), stack_2])
        in let
          arg_17 =
            (BIF.do_remote_fun_call "Jsx.Config" "erlps__config_to_list__1"
               [config_3])
        in
          (BIF.erlang__apply__2
             [f_9,
              (ErlangCons bin_0
                 (ErlangCons arg_11 (ErlangCons arg_17 ErlangEmptyList)))])
erlps__colon__4__p2 [arg_20, arg_21, arg_22, arg_23] =
  (EXC.function_clause unit)
erlps__colon__4__p2 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__key__4 :: ErlangFun
erlps__key__4 [(ErlangBinary bin_c_0), handler_7, stack_8,
               config_9]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 34)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  (erlps__string__4 [rest_6, handler_7, stack_8, config_9])
erlps__key__4 [(ErlangBinary bin_c_0), handler_7, stack_8,
               config_9]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 32)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  (erlps__key__4 [rest_6, handler_7, stack_8, config_9])
erlps__key__4 [(ErlangBinary bin_c_0), handler_7,
               (ErlangCons (ErlangAtom "key") stack_8),
               config_9@(ErlangTuple [(ErlangAtom "config"), _, _, _, _, _,
                                      (ErlangAtom "false"), _, _, _, _, _, _, _,
                                      _, _])]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 125)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 =
      (ErlangBinary
         (BIN.concat
            [(BIN.from_int (ErlangInt (DBI.fromInt 125))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.format_bin rest_6 (BIN.packed_size rest_6) 8)]))
  in
    (erlps__maybe_done__4
       [arg_10, handler_7, (ErlangCons (ErlangAtom "object") stack_8),
        config_9])
erlps__key__4 [(ErlangBinary bin_c_0), handler_7, stack_8,
               config_9]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 10)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  (erlps__key__4 [rest_6, handler_7, stack_8, config_9])
erlps__key__4 [(ErlangBinary bin_c_0), handler_7, stack_8,
               config_9]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 9)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  (erlps__key__4 [rest_6, handler_7, stack_8, config_9])
erlps__key__4 args = (erlps__key__4__p1 args)

erlps__key__4__p1 :: ErlangFun
erlps__key__4__p1 [(ErlangBinary bin_c_0), handler_7, stack_8,
                   config_9]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 13)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  (erlps__key__4 [rest_6, handler_7, stack_8, config_9])
erlps__key__4__p1 [(ErlangBinary bin_c_0), handler_7, stack_8,
                   config_9@(ErlangTuple [(ErlangAtom "config"), _, _, _, _, _,
                                          _, _, (ErlangAtom "false"), _, _, _,
                                          _, _, _, _])]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 39)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  (erlps__string__4
     [rest_6, handler_7,
      (ErlangCons (ErlangAtom "singlequote") stack_8), config_9])
erlps__key__4__p1 [(ErlangBinary bin_c_0), handler_7, stack_8,
                   config_9@(ErlangTuple [(ErlangAtom "config"), _, _, _, _,
                                          (ErlangAtom "true"), _, _, _, _, _, _,
                                          _, _, _, _])]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 47)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    case_10 =
      case config_9 of
        (ErlangTuple arr_13) | (DM.Just field_12) <-
                                 ((arr_13 DA.!! 14)) ->
          field_12
        _ -> (EXC.badrecord (ErlangAtom "config"))
  in
    case case_10 of
      (ErlangAtom "false") ->
        (BIF.erlang__error__1 [(ErlangAtom "badarg")])
      f_15 ->
        let   
          arg_16 =
            (ErlangBinary
               (BIN.concat
                  [(BIN.from_int (ErlangInt (DBI.fromInt 47))
                      (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
                   (BIN.format_bin rest_6 (BIN.packed_size rest_6) 8)]))
        in let
          arg_19 =
            (ErlangTuple
               [(ErlangAtom "decoder"), (ErlangAtom "key"), handler_7,
                (ErlangAtom "null"), stack_8])
        in let
          arg_25 =
            (BIF.do_remote_fun_call "Jsx.Config" "erlps__config_to_list__1"
               [config_9])
        in
          (BIF.erlang__apply__2
             [f_15,
              (ErlangCons arg_16
                 (ErlangCons arg_19 (ErlangCons arg_25 ErlangEmptyList)))])
erlps__key__4__p1 [(ErlangBinary bin_c_0), handler_10, stack_11,
                   config_12]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 47)))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_6) == (ErlangInt (DBI.fromInt 47)))
  , (ErlangInt size_7) <- ((BIN.size bin_5))
  , (BIN.Ok rest_9 bin_8) <- ((BIN.chop_bin bin_5 size_7 8))
  , (BIN.empty bin_8) =
  (erlps__comment__5
     [rest_9, handler_10, (ErlangAtom "key"),
      (ErlangCons (ErlangAtom "comment") stack_11), config_12])
erlps__key__4__p1 [(ErlangBinary bin_c_0), handler_10, stack_11,
                   config_12]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 47)))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_6) == (ErlangInt (DBI.fromInt 42)))
  , (ErlangInt size_7) <- ((BIN.size bin_5))
  , (BIN.Ok rest_9 bin_8) <- ((BIN.chop_bin bin_5 size_7 8))
  , (BIN.empty bin_8) =
  (erlps__comment__5
     [rest_9, handler_10, (ErlangAtom "key"),
      (ErlangCons (ErlangAtom "multicomment") stack_11), config_12])
erlps__key__4__p1 args = (erlps__key__4__p2 args)

erlps__key__4__p2 :: ErlangFun
erlps__key__4__p2 [(ErlangBinary bin_c_0), handler_4, stack_5,
                   config_6]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 47)))
  , (BIN.empty bin_2) =
  let
    arg_8 =
      (ErlangBinary
         (BIN.from_int (ErlangInt (DBI.fromInt 47))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big))
  in
    (erlps__incomplete__5
       [(ErlangAtom "key"), arg_8, handler_4, stack_5, config_6])
erlps__key__4__p2 [(ErlangBinary bin_e_0), handler_1, stack_2,
                   config_3]
  | (BIN.empty bin_e_0) =
  let arg_5 = (ErlangBinary (BIN.concat []))
  in
    (erlps__incomplete__5
       [(ErlangAtom "key"), arg_5, handler_1, stack_2, config_3])
erlps__key__4__p2 [bin_0, handler_1, stack_2, config_3] =
  let
    case_4 =
      case config_3 of
        (ErlangTuple arr_7) | (DM.Just field_6) <- ((arr_7 DA.!! 14)) ->
          field_6
        _ -> (EXC.badrecord (ErlangAtom "config"))
  in
    case case_4 of
      (ErlangAtom "false") ->
        (BIF.erlang__error__1 [(ErlangAtom "badarg")])
      f_9 ->
        let   
          arg_11 =
            (ErlangTuple
               [(ErlangAtom "decoder"), (ErlangAtom "key"), handler_1,
                (ErlangAtom "null"), stack_2])
        in let
          arg_17 =
            (BIF.do_remote_fun_call "Jsx.Config" "erlps__config_to_list__1"
               [config_3])
        in
          (BIF.erlang__apply__2
             [f_9,
              (ErlangCons bin_0
                 (ErlangCons arg_11 (ErlangCons arg_17 ErlangEmptyList)))])
erlps__key__4__p2 [arg_20, arg_21, arg_22, arg_23] =
  (EXC.function_clause unit)
erlps__key__4__p2 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__string__4 :: ErlangFun
erlps__string__4 [bin_0, handler_1, stack_2, config_3] =
  (erlps__string__5
     [bin_0, handler_1, ErlangEmptyList, stack_2, config_3])
erlps__string__4 [arg_9, arg_10, arg_11, arg_12] =
  (EXC.function_clause unit)
erlps__string__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__string__5 :: ErlangFun
erlps__string__5 [(ErlangBinary bin_c_0), handler_7, acc_8,
                  stack_9, config_10]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 34)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  (erlps__doublequote__5
     [rest_6, handler_7, acc_8, stack_9, config_10])
erlps__string__5 [(ErlangBinary bin_c_0), handler_7, acc_8,
                  stack_9, config_10]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 39)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  (erlps__singlequote__5
     [rest_6, handler_7, acc_8, stack_9, config_10])
erlps__string__5 [(ErlangBinary bin_c_0), handler_7, acc_8,
                  stack_9, config_10]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 47)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    head_16 =
      (erlps__maybe_replace__2
         [(ErlangInt (DBI.fromInt 47)), config_10])
  in
    (erlps__string__5
       [rest_6, handler_7,
        (ErlangCons acc_8 (ErlangCons head_16 ErlangEmptyList)), stack_9,
        config_10])
erlps__string__5 [(ErlangBinary bin_c_0), handler_7, acc_8,
                  stack_9, config_10]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 92)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  (erlps__unescape__5
     [rest_6, handler_7, acc_8, stack_9, config_10])
erlps__string__5 [bin_7@(ErlangBinary bin_c_0), handler_8, acc_9,
                  stack_10,
                  config_11@(ErlangTuple [(ErlangAtom "config"), _, _, _, _, _,
                                          _, _, _, _, _, _, (ErlangAtom "true"),
                                          _, _, _])]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok x_3 bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  case x_3 of
    x_13 | (x_13 == x_3)
         , (weakLt x_3 (ErlangInt (DBI.fromInt 128))) ->
      (erlps__count__5 [bin_7, handler_8, acc_9, stack_10, config_11])
    x_19 | (x_19 == x_3) ->
      let head_25 = (erlps__json_escape_sequence__1 [x_3])
      in
        (erlps__string__5
           [rest_6, handler_8,
            (ErlangCons acc_9 (ErlangCons head_25 ErlangEmptyList)),
            stack_10, config_11])
    something_else -> (EXC.case_clause something_else)
erlps__string__5 args = (erlps__string__5__p1 args)

erlps__string__5__p1 :: ErlangFun
erlps__string__5__p1 [(ErlangBinary bin_c_0), handler_13, acc_14,
                      stack_15, config_16]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 226)))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_6) == (ErlangInt (DBI.fromInt 128)))
  , size_7 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_9) bin_8) <-
      ((BIN.chop_int bin_5 size_7 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_9) == (ErlangInt (DBI.fromInt 168)))
  , (ErlangInt size_10) <- ((BIN.size bin_8))
  , (BIN.Ok rest_12 bin_11) <- ((BIN.chop_bin bin_8 size_10 8))
  , (BIN.empty bin_11) =
  let
    head_22 =
      (erlps__maybe_replace__2
         [(ErlangInt (DBI.fromInt 8232)), config_16])
  in
    (erlps__string__5
       [rest_12, handler_13,
        (ErlangCons acc_14 (ErlangCons head_22 ErlangEmptyList)),
        stack_15, config_16])
erlps__string__5__p1 [(ErlangBinary bin_c_0), handler_13, acc_14,
                      stack_15, config_16]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 226)))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_6) == (ErlangInt (DBI.fromInt 128)))
  , size_7 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_9) bin_8) <-
      ((BIN.chop_int bin_5 size_7 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_9) == (ErlangInt (DBI.fromInt 169)))
  , (ErlangInt size_10) <- ((BIN.size bin_8))
  , (BIN.Ok rest_12 bin_11) <- ((BIN.chop_bin bin_8 size_10 8))
  , (BIN.empty bin_11) =
  let
    head_22 =
      (erlps__maybe_replace__2
         [(ErlangInt (DBI.fromInt 8233)), config_16])
  in
    (erlps__string__5
       [rest_12, handler_13,
        (ErlangCons acc_14 (ErlangCons head_22 ErlangEmptyList)),
        stack_15, config_16])
erlps__string__5__p1 [bin_3@(ErlangBinary bin_c_0), handler_4,
                      acc_5, stack_6, config_7]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok _ bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned)) =
  (erlps__count__5 [bin_3, handler_4, acc_5, stack_6, config_7])
erlps__string__5__p1 [(ErlangBinary bin_c_0), handler_7, acc_8,
                      stack_9,
                      config_10@(ErlangTuple [(ErlangAtom "config"),
                                              (ErlangAtom "true"), _, _, _, _,
                                              _, _, _, _, _, _, _, _, _, _])]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok x_3 bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  (erlps__string__5
     [rest_6, handler_7,
      (ErlangCons acc_8 (ErlangCons x_3 ErlangEmptyList)), stack_9,
      config_10])
erlps__string__5__p1 [(ErlangBinary bin_c_0), handler_13, acc_14,
                      stack_15, config_16]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 239)))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_6) == (ErlangInt (DBI.fromInt 191)))
  , size_7 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_9) bin_8) <-
      ((BIN.chop_int bin_5 size_7 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_9) == (ErlangInt (DBI.fromInt 190)))
  , (ErlangInt size_10) <- ((BIN.size bin_8))
  , (BIN.Ok rest_12 bin_11) <- ((BIN.chop_bin bin_8 size_10 8))
  , (BIN.empty bin_11) =
  let
    head_22 =
      (ErlangBinary
         (BIN.from_int (ErlangInt (DBI.fromInt 65534))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big))
  in
    (erlps__string__5
       [rest_12, handler_13,
        (ErlangCons acc_14 (ErlangCons head_22 ErlangEmptyList)),
        stack_15, config_16])
erlps__string__5__p1 args = (erlps__string__5__p2 args)

erlps__string__5__p2 :: ErlangFun
erlps__string__5__p2 [(ErlangBinary bin_c_0), handler_13, acc_14,
                      stack_15, config_16]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 239)))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_6) == (ErlangInt (DBI.fromInt 191)))
  , size_7 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_9) bin_8) <-
      ((BIN.chop_int bin_5 size_7 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_9) == (ErlangInt (DBI.fromInt 191)))
  , (ErlangInt size_10) <- ((BIN.size bin_8))
  , (BIN.Ok rest_12 bin_11) <- ((BIN.chop_bin bin_8 size_10 8))
  , (BIN.empty bin_11) =
  let
    head_22 =
      (ErlangBinary
         (BIN.from_int (ErlangInt (DBI.fromInt 65535))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big))
  in
    (erlps__string__5
       [rest_12, handler_13,
        (ErlangCons acc_14 (ErlangCons head_22 ErlangEmptyList)),
        stack_15, config_16])
erlps__string__5__p2 [(ErlangBinary bin_e_0), handler_1, acc_2,
                      stack_3, config_4]
  | (BIN.empty bin_e_0) =
  let arg_6 = (ErlangBinary (BIN.concat []))
  in
    (erlps__incomplete__6
       [(ErlangAtom "string"), arg_6, handler_1, acc_2, stack_3,
        config_4])
erlps__string__5__p2 [(ErlangBinary bin_c_0), handler_4, acc_5,
                      stack_6, config_7]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok x_3 bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , (BIN.empty bin_2)
  , (weakGeq x_3 (ErlangInt (DBI.fromInt 192))) =
  let
    arg_9 =
      (ErlangBinary
         (BIN.from_int x_3 (ErlangInt (DBI.fromInt 8)) 1 BIN.Big))
  in
    (erlps__incomplete__6
       [(ErlangAtom "string"), arg_9, handler_4, acc_5, stack_6,
        config_7])
erlps__string__5__p2 [(ErlangBinary bin_c_0), handler_7, acc_8,
                      stack_9, config_10]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok x_3 bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok y_6 bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , (BIN.empty bin_5)
  , ((weakGeq x_3 (ErlangInt (DBI.fromInt 224))) &&
       (weakGeq y_6 (ErlangInt (DBI.fromInt 128)))) =
  let
    arg_12 =
      (ErlangBinary
         (BIN.concat
            [(BIN.from_int x_3 (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int y_6 (ErlangInt (DBI.fromInt 8)) 1 BIN.Big)]))
  in
    (erlps__incomplete__6
       [(ErlangAtom "string"), arg_12, handler_7, acc_8, stack_9,
        config_10])
erlps__string__5__p2 [(ErlangBinary bin_c_0), handler_10, acc_11,
                      stack_12, config_13]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok x_3 bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok y_6 bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , size_7 <- ((DBI.fromInt 8))
  , (BIN.Ok z_9 bin_8) <-
      ((BIN.chop_int bin_5 size_7 1 BIN.Big BIN.Unsigned))
  , (BIN.empty bin_8)
  , (((weakGeq x_3 (ErlangInt (DBI.fromInt 224))) &&
        (weakGeq y_6 (ErlangInt (DBI.fromInt 128)))) &&
       (weakGeq z_9 (ErlangInt (DBI.fromInt 128)))) =
  let
    arg_15 =
      (ErlangBinary
         (BIN.concat
            [(BIN.from_int x_3 (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int y_6 (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int z_9 (ErlangInt (DBI.fromInt 8)) 1 BIN.Big)]))
  in
    (erlps__incomplete__6
       [(ErlangAtom "string"), arg_15, handler_10, acc_11, stack_12,
        config_13])
erlps__string__5__p2 args = (erlps__string__5__p3 args)

erlps__string__5__p3 :: ErlangFun
erlps__string__5__p3 [(ErlangBinary bin_c_0), handler_12, acc_13,
                      stack_14,
                      config_15@(ErlangTuple [(ErlangAtom "config"), _, _, _, _,
                                              _, _, (ErlangAtom "false"), _, _,
                                              _, _, _, _, _, _])]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 237)))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok x_6 bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , size_7 <- ((DBI.fromInt 8))
  , (BIN.Ok _ bin_8) <-
      ((BIN.chop_int bin_5 size_7 1 BIN.Big BIN.Unsigned))
  , (ErlangInt size_9) <- ((BIN.size bin_8))
  , (BIN.Ok rest_11 bin_10) <- ((BIN.chop_bin bin_8 size_9 8))
  , (BIN.empty bin_10)
  , (weakGeq x_6 (ErlangInt (DBI.fromInt 160))) =
  let
    head_21 =
      (ErlangBinary
         (BIN.from_int (ErlangInt (DBI.fromInt 65533))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big))
  in
    (erlps__string__5
       [rest_11, handler_12,
        (ErlangCons acc_13 (ErlangCons head_21 ErlangEmptyList)),
        stack_14, config_15])
erlps__string__5__p3 [(ErlangBinary bin_c_0), handler_7, acc_8,
                      stack_9,
                      config_10@(ErlangTuple [(ErlangAtom "config"), _, _, _, _,
                                              _, _, (ErlangAtom "false"), _, _,
                                              _, _, _, _, _, _])]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok x_3 bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5)
  , ((weakGeq x_3 (ErlangInt (DBI.fromInt 192))) &&
       (weakLeq x_3 (ErlangInt (DBI.fromInt 223)))) =
  (erlps__strip_continuations__6
     [rest_6, handler_7, acc_8, stack_9, config_10,
      (ErlangInt (DBI.fromInt 1))])
erlps__string__5__p3 [(ErlangBinary bin_c_0), handler_7, acc_8,
                      stack_9,
                      config_10@(ErlangTuple [(ErlangAtom "config"), _, _, _, _,
                                              _, _, (ErlangAtom "false"), _, _,
                                              _, _, _, _, _, _])]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok x_3 bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5)
  , ((weakGeq x_3 (ErlangInt (DBI.fromInt 224))) &&
       (weakLeq x_3 (ErlangInt (DBI.fromInt 239)))) =
  (erlps__strip_continuations__6
     [rest_6, handler_7, acc_8, stack_9, config_10,
      (ErlangInt (DBI.fromInt 2))])
erlps__string__5__p3 [(ErlangBinary bin_c_0), handler_7, acc_8,
                      stack_9,
                      config_10@(ErlangTuple [(ErlangAtom "config"), _, _, _, _,
                                              _, _, (ErlangAtom "false"), _, _,
                                              _, _, _, _, _, _])]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok x_3 bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5)
  , ((weakGeq x_3 (ErlangInt (DBI.fromInt 240))) &&
       (weakLeq x_3 (ErlangInt (DBI.fromInt 247)))) =
  (erlps__strip_continuations__6
     [rest_6, handler_7, acc_8, stack_9, config_10,
      (ErlangInt (DBI.fromInt 3))])
erlps__string__5__p3 [(ErlangBinary bin_c_0), handler_6, acc_7,
                      stack_8,
                      config_9@(ErlangTuple [(ErlangAtom "config"), _, _, _, _,
                                             _, _, (ErlangAtom "false"), _, _,
                                             _, _, _, _, _, _])]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok _ bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , (ErlangInt size_3) <- ((BIN.size bin_2))
  , (BIN.Ok rest_5 bin_4) <- ((BIN.chop_bin bin_2 size_3 8))
  , (BIN.empty bin_4) =
  let
    head_15 =
      (ErlangBinary
         (BIN.from_int (ErlangInt (DBI.fromInt 65533))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big))
  in
    (erlps__string__5
       [rest_5, handler_6,
        (ErlangCons acc_7 (ErlangCons head_15 ErlangEmptyList)), stack_8,
        config_9])
erlps__string__5__p3 args = (erlps__string__5__p4 args)

erlps__string__5__p4 :: ErlangFun
erlps__string__5__p4 [bin_0, handler_1, acc_2, stack_3, config_4]
  =
  let
    case_5 =
      case config_4 of
        (ErlangTuple arr_8) | (DM.Just field_7) <- ((arr_8 DA.!! 14)) ->
          field_7
        _ -> (EXC.badrecord (ErlangAtom "config"))
  in
    case case_5 of
      (ErlangAtom "false") ->
        (BIF.erlang__error__1 [(ErlangAtom "badarg")])
      f_10 ->
        let   
          arg_12 =
            (ErlangTuple
               [(ErlangAtom "decoder"), (ErlangAtom "string"), handler_1, acc_2,
                stack_3])
        in let
          arg_18 =
            (BIF.do_remote_fun_call "Jsx.Config" "erlps__config_to_list__1"
               [config_4])
        in
          (BIF.erlang__apply__2
             [f_10,
              (ErlangCons bin_0
                 (ErlangCons arg_12 (ErlangCons arg_18 ErlangEmptyList)))])
erlps__string__5__p4 [arg_21, arg_22, arg_23, arg_24, arg_25] =
  (EXC.function_clause unit)
erlps__string__5__p4 args =
  (EXC.badarity
     (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__count__5 :: ErlangFun
erlps__count__5 [bin_0, handler_1, acc_2, stack_3, config_4] =
  let
    size_8 =
      (erlps__count__3 [bin_0, (ErlangInt (DBI.fromInt 0)), config_4])
  in
    case bin_0 of
      (ErlangBinary bin_c_9) | (ErlangInt size_10) <- (size_8)
                             , (BIN.Ok clean_12 bin_11) <-
                                 ((BIN.chop_bin bin_c_9 size_10 8))
                             , (ErlangInt size_13) <- ((BIN.size bin_11))
                             , (BIN.Ok rest_15 bin_14) <-
                                 ((BIN.chop_bin bin_11 size_13 8))
                             , (BIN.empty bin_14) ->
        (erlps__string__5
           [rest_15, handler_1,
            (ErlangCons acc_2 (ErlangCons clean_12 ErlangEmptyList)),
            stack_3, config_4])
      _ -> (EXC.badmatch bin_0)
erlps__count__5 [arg_26, arg_27, arg_28, arg_29, arg_30] =
  (EXC.function_clause unit)
erlps__count__5 args =
  (EXC.badarity
     (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__count__3 :: ErlangFun
erlps__count__3 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 0)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 1)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 2)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 3)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 4)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3 args = (erlps__count__3__p1 args)

erlps__count__3__p1 :: ErlangFun
erlps__count__3__p1 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 5)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p1 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 6)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p1 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 7)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p1 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 8)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p1 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 9)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p1 args = (erlps__count__3__p2 args)

erlps__count__3__p2 :: ErlangFun
erlps__count__3__p2 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 10)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p2 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 11)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p2 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 12)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p2 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 13)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p2 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 14)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p2 args = (erlps__count__3__p3 args)

erlps__count__3__p3 :: ErlangFun
erlps__count__3__p3 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 15)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p3 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 16)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p3 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 17)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p3 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 18)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p3 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 19)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p3 args = (erlps__count__3__p4 args)

erlps__count__3__p4 :: ErlangFun
erlps__count__3__p4 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 20)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p4 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 21)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p4 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 22)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p4 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 23)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p4 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 24)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p4 args = (erlps__count__3__p5 args)

erlps__count__3__p5 :: ErlangFun
erlps__count__3__p5 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 25)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p5 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 26)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p5 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 27)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p5 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 28)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p5 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 29)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p5 args = (erlps__count__3__p6 args)

erlps__count__3__p6 :: ErlangFun
erlps__count__3__p6 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 30)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p6 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 31)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p6 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 32)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p6 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 33)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p6 [(ErlangBinary bin_c_0), n_4, _]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 34))) =
  n_4
erlps__count__3__p6 args = (erlps__count__3__p7 args)

erlps__count__3__p7 :: ErlangFun
erlps__count__3__p7 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 35)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p7 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 36)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p7 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 37)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p7 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 38)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p7 [(ErlangBinary bin_c_0), n_4, _]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 39))) =
  n_4
erlps__count__3__p7 args = (erlps__count__3__p8 args)

erlps__count__3__p8 :: ErlangFun
erlps__count__3__p8 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 40)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p8 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 41)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p8 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 42)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p8 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 43)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p8 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 44)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p8 args = (erlps__count__3__p9 args)

erlps__count__3__p9 :: ErlangFun
erlps__count__3__p9 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 45)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p9 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 46)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p9 [(ErlangBinary bin_c_0), n_4, _]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 47))) =
  n_4
erlps__count__3__p9 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 48)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p9 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 49)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p9 args = (erlps__count__3__p10 args)

erlps__count__3__p10 :: ErlangFun
erlps__count__3__p10 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 50)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p10 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 51)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p10 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 52)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p10 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 53)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p10 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 54)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p10 args = (erlps__count__3__p11 args)

erlps__count__3__p11 :: ErlangFun
erlps__count__3__p11 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 55)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p11 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 56)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p11 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 57)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p11 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 58)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p11 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 59)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p11 args = (erlps__count__3__p12 args)

erlps__count__3__p12 :: ErlangFun
erlps__count__3__p12 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 60)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p12 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 61)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p12 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 62)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p12 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 63)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p12 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 64)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p12 args = (erlps__count__3__p13 args)

erlps__count__3__p13 :: ErlangFun
erlps__count__3__p13 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 65)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p13 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 66)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p13 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 67)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p13 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 68)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p13 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 69)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p13 args = (erlps__count__3__p14 args)

erlps__count__3__p14 :: ErlangFun
erlps__count__3__p14 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 70)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p14 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 71)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p14 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 72)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p14 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 73)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p14 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 74)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p14 args = (erlps__count__3__p15 args)

erlps__count__3__p15 :: ErlangFun
erlps__count__3__p15 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 75)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p15 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 76)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p15 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 77)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p15 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 78)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p15 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 79)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p15 args = (erlps__count__3__p16 args)

erlps__count__3__p16 :: ErlangFun
erlps__count__3__p16 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 80)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p16 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 81)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p16 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 82)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p16 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 83)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p16 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 84)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p16 args = (erlps__count__3__p17 args)

erlps__count__3__p17 :: ErlangFun
erlps__count__3__p17 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 85)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p17 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 86)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p17 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 87)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p17 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 88)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p17 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 89)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p17 args = (erlps__count__3__p18 args)

erlps__count__3__p18 :: ErlangFun
erlps__count__3__p18 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 90)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p18 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 91)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p18 [(ErlangBinary bin_c_0), n_4, _]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 92))) =
  n_4
erlps__count__3__p18 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 93)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p18 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 94)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p18 args = (erlps__count__3__p19 args)

erlps__count__3__p19 :: ErlangFun
erlps__count__3__p19 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 95)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p19 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 96)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p19 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 97)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p19 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 98)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p19 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 99)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p19 args = (erlps__count__3__p20 args)

erlps__count__3__p20 :: ErlangFun
erlps__count__3__p20 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 100)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p20 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 101)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p20 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 102)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p20 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 103)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p20 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 104)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p20 args = (erlps__count__3__p21 args)

erlps__count__3__p21 :: ErlangFun
erlps__count__3__p21 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 105)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p21 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 106)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p21 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 107)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p21 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 108)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p21 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 109)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p21 args = (erlps__count__3__p22 args)

erlps__count__3__p22 :: ErlangFun
erlps__count__3__p22 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 110)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p22 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 111)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p22 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 112)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p22 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 113)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p22 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 114)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p22 args = (erlps__count__3__p23 args)

erlps__count__3__p23 :: ErlangFun
erlps__count__3__p23 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 115)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p23 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 116)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p23 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 117)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p23 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 118)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p23 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 119)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p23 args = (erlps__count__3__p24 args)

erlps__count__3__p24 :: ErlangFun
erlps__count__3__p24 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 120)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p24 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 121)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p24 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 122)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p24 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 123)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p24 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 124)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p24 args = (erlps__count__3__p25 args)

erlps__count__3__p25 :: ErlangFun
erlps__count__3__p25 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 125)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p25 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 126)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p25 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 127)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_10 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_6, arg_10, config_8])
erlps__count__3__p25 [(ErlangBinary bin_c_0), n_6,
                      config_7@(ErlangTuple [(ErlangAtom "config"),
                                             (ErlangAtom "true"), _, _, _, _, _,
                                             _, _, _, _, _, _, _, _, _])]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok _ bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , (ErlangInt size_3) <- ((BIN.size bin_2))
  , (BIN.Ok rest_5 bin_4) <- ((BIN.chop_bin bin_2 size_3 8))
  , (BIN.empty bin_4) =
  let
    arg_9 = (BIF.erlang__op_plus [n_6, (ErlangInt (DBI.fromInt 1))])
  in (erlps__count__3 [rest_5, arg_9, config_7])
erlps__count__3__p25 [(ErlangBinary bin_c_0), n_3,
                      (ErlangTuple [(ErlangAtom "config"), _, _, _, _, _, _, _,
                                    _, _, _, _, (ErlangAtom "true"), _, _, _])]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok _ bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned)) =
  n_3
erlps__count__3__p25 args = (erlps__count__3__p26 args)

erlps__count__3__p26 :: ErlangFun
erlps__count__3__p26 [(ErlangBinary bin_c_0), n_7, config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok x_3 bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  case x_3 of
    x_10 | (x_10 == x_3)
         , (weakLt x_3 (ErlangInt (DBI.fromInt 2048))) ->
      let
        arg_12 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 2))])
      in (erlps__count__3 [rest_6, arg_12, config_8])
    (ErlangInt num_16) | ((ErlangInt num_16) ==
                            (ErlangInt (DBI.fromInt 8232))) ->
      n_7
    (ErlangInt num_17) | ((ErlangInt num_17) ==
                            (ErlangInt (DBI.fromInt 8233))) ->
      n_7
    x_18 | (x_18 == x_3)
         , (weakLt x_3 (ErlangInt (DBI.fromInt 65536))) ->
      let
        arg_20 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 3))])
      in (erlps__count__3 [rest_6, arg_20, config_8])
    _ ->
      let
        arg_25 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 4))])
      in (erlps__count__3 [rest_6, arg_25, config_8])
erlps__count__3__p26 [_, n_0, _] = n_0
erlps__count__3__p26 [arg_1, arg_2, arg_3] =
  (EXC.function_clause unit)
erlps__count__3__p26 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__doublequote__5 :: ErlangFun
erlps__doublequote__5 [rest_0, handler_1, acc_2,
                       stack_3@(ErlangCons (ErlangAtom "key") _), config_4]
  =
  let    tup_el_9 = (BIF.erlang__iolist_to_binary__1 [acc_2])
  in let arg_7 = (ErlangTuple [(ErlangAtom "key"), tup_el_9])
  in let
    arg_6 = (erlps__handle_event__3 [arg_7, handler_1, config_4])
  in (erlps__colon__4 [rest_0, arg_6, stack_3, config_4])
erlps__doublequote__5 [rest_0, handler_1, acc_2,
                       stack_3@(ErlangCons (ErlangAtom "singlequote") _),
                       config_4]
  =
  let
    head_10 =
      (erlps__maybe_replace__2
         [(ErlangInt (DBI.fromInt 34)), config_4])
  in
    (erlps__string__5
       [rest_0, handler_1,
        (ErlangCons acc_2 (ErlangCons head_10 ErlangEmptyList)), stack_3,
        config_4])
erlps__doublequote__5 [(ErlangBinary bin_e_0), handler_1, acc_2,
                       stack_3@(ErlangCons (ErlangAtom "singlequote") _),
                       config_4]
  | (BIN.empty bin_e_0) =
  let
    arg_6 =
      (ErlangBinary
         (BIN.from_int (ErlangInt (DBI.fromInt 34))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big))
  in
    (erlps__incomplete__6
       [(ErlangAtom "string"), arg_6, handler_1, acc_2, stack_3,
        config_4])
erlps__doublequote__5 [rest_0, handler_1, acc_2, stack_3,
                       config_4]
  =
  let    tup_el_9 = (BIF.erlang__iolist_to_binary__1 [acc_2])
  in let arg_7 = (ErlangTuple [(ErlangAtom "string"), tup_el_9])
  in let
    arg_6 = (erlps__handle_event__3 [arg_7, handler_1, config_4])
  in (erlps__maybe_done__4 [rest_0, arg_6, stack_3, config_4])
erlps__doublequote__5 [arg_15, arg_16, arg_17, arg_18, arg_19] =
  (EXC.function_clause unit)
erlps__doublequote__5 args =
  (EXC.badarity
     (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__singlequote__5 :: ErlangFun
erlps__singlequote__5 [rest_0, handler_1, acc_2,
                       (ErlangCons (ErlangAtom "singlequote") (ErlangCons (ErlangAtom "key") stack_3)),
                       config_4]
  =
  let    tup_el_9 = (BIF.erlang__iolist_to_binary__1 [acc_2])
  in let arg_7 = (ErlangTuple [(ErlangAtom "key"), tup_el_9])
  in let
    arg_6 = (erlps__handle_event__3 [arg_7, handler_1, config_4])
  in
    (erlps__colon__4
       [rest_0, arg_6, (ErlangCons (ErlangAtom "key") stack_3),
        config_4])
erlps__singlequote__5 [rest_0, handler_1, acc_2,
                       (ErlangCons (ErlangAtom "singlequote") stack_3),
                       config_4]
  =
  let    tup_el_9 = (BIF.erlang__iolist_to_binary__1 [acc_2])
  in let arg_7 = (ErlangTuple [(ErlangAtom "string"), tup_el_9])
  in let
    arg_6 = (erlps__handle_event__3 [arg_7, handler_1, config_4])
  in (erlps__maybe_done__4 [rest_0, arg_6, stack_3, config_4])
erlps__singlequote__5 [rest_0, handler_1, acc_2, stack_3,
                       config_4]
  =
  (erlps__string__5
     [rest_0, handler_1,
      (ErlangCons acc_2
         (ErlangCons (ErlangInt (DBI.fromInt 39)) ErlangEmptyList)),
      stack_3, config_4])
erlps__singlequote__5 [arg_14, arg_15, arg_16, arg_17, arg_18] =
  (EXC.function_clause unit)
erlps__singlequote__5 args =
  (EXC.badarity
     (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__strip_continuations__6 :: ErlangFun
erlps__strip_continuations__6 [(ErlangBinary bin_c_0), handler_4,
                               acc_5, stack_6, config_7, (ErlangInt num_8)]
  | (ErlangInt size_1) <- ((BIN.size bin_c_0))
  , (BIN.Ok rest_3 bin_2) <- ((BIN.chop_bin bin_c_0 size_1 8))
  , (BIN.empty bin_2)
  , ((ErlangInt num_8) == (ErlangInt (DBI.fromInt 0))) =
  let
    head_14 =
      (ErlangBinary
         (BIN.from_int (ErlangInt (DBI.fromInt 65533))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big))
  in
    (erlps__string__5
       [rest_3, handler_4,
        (ErlangCons acc_5 (ErlangCons head_14 ErlangEmptyList)), stack_6,
        config_7])
erlps__strip_continuations__6 [(ErlangBinary bin_c_0), handler_7,
                               acc_8, stack_9, config_10, n_11]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok x_3 bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5)
  , ((weakGeq x_3 (ErlangInt (DBI.fromInt 128))) &&
       (weakLeq x_3 (ErlangInt (DBI.fromInt 191)))) =
  let
    arg_17 =
      (BIF.erlang__op_minus [n_11, (ErlangInt (DBI.fromInt 1))])
  in
    (erlps__strip_continuations__6
       [rest_6, handler_7, acc_8, stack_9, config_10, arg_17])
erlps__strip_continuations__6 [(ErlangBinary bin_e_0), handler_1,
                               acc_2, stack_3, config_4, n_5]
  | (BIN.empty bin_e_0) =
  case n_5 of
    (ErlangInt num_7) | ((ErlangInt num_7) ==
                           (ErlangInt (DBI.fromInt 1))) ->
      let
        arg_9 =
          (ErlangBinary
             (BIN.from_int (ErlangInt (DBI.fromInt 192))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big))
      in
        (erlps__incomplete__6
           [(ErlangAtom "string"), arg_9, handler_1, acc_2, stack_3,
            config_4])
    (ErlangInt num_15) | ((ErlangInt num_15) ==
                            (ErlangInt (DBI.fromInt 2))) ->
      let
        arg_17 =
          (ErlangBinary
             (BIN.from_int (ErlangInt (DBI.fromInt 224))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big))
      in
        (erlps__incomplete__6
           [(ErlangAtom "string"), arg_17, handler_1, acc_2, stack_3,
            config_4])
    (ErlangInt num_23) | ((ErlangInt num_23) ==
                            (ErlangInt (DBI.fromInt 3))) ->
      let
        arg_25 =
          (ErlangBinary
             (BIN.from_int (ErlangInt (DBI.fromInt 240))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big))
      in
        (erlps__incomplete__6
           [(ErlangAtom "string"), arg_25, handler_1, acc_2, stack_3,
            config_4])
    something_else -> (EXC.case_clause something_else)
erlps__strip_continuations__6 [(ErlangBinary bin_c_0), handler_4,
                               acc_5, stack_6, config_7, _]
  | (ErlangInt size_1) <- ((BIN.size bin_c_0))
  , (BIN.Ok rest_3 bin_2) <- ((BIN.chop_bin bin_c_0 size_1 8))
  , (BIN.empty bin_2) =
  let
    head_13 =
      (ErlangBinary
         (BIN.from_int (ErlangInt (DBI.fromInt 65533))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big))
  in
    (erlps__string__5
       [rest_3, handler_4,
        (ErlangCons acc_5 (ErlangCons head_13 ErlangEmptyList)), stack_6,
        config_7])
erlps__strip_continuations__6 [arg_18, arg_19, arg_20, arg_21,
                               arg_22, arg_23]
  =
  (EXC.function_clause unit)
erlps__strip_continuations__6 args =
  (EXC.badarity
     (ErlangFun 6 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__unescape__5 :: ErlangFun
erlps__unescape__5 [(ErlangBinary bin_c_0), handler_7, acc_8,
                    stack_9,
                    config_10@(ErlangTuple [(ErlangAtom "config"),
                                            (ErlangAtom "true"), _, _, _, _, _,
                                            _, _, _, _, _, _, _, _, _])]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 92)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let   
    arg_11 =
      (ErlangBinary
         (BIN.concat
            [(BIN.from_int (ErlangInt (DBI.fromInt 92))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.format_bin rest_6 (BIN.packed_size rest_6) 8)]))
  in let
    head_18 =
      (ErlangBinary
         (BIN.from_int (ErlangInt (DBI.fromInt 92))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big))
  in
    (erlps__string__5
       [arg_11, handler_7,
        (ErlangCons acc_8 (ErlangCons head_18 ErlangEmptyList)), stack_9,
        config_10])
erlps__unescape__5 [(ErlangBinary bin_c_0), handler_7, acc_8,
                    stack_9,
                    config_10@(ErlangTuple [(ErlangAtom "config"),
                                            (ErlangAtom "true"), _, _, _, _, _,
                                            _, _, _, _, _, _, _, _, _])]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok c_3 bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    head_16 =
      (ErlangBinary
         (BIN.concat
            [(BIN.from_int (ErlangInt (DBI.fromInt 92))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int c_3 (ErlangInt (DBI.fromInt 8)) 1 BIN.Big)]))
  in
    (erlps__string__5
       [rest_6, handler_7,
        (ErlangCons acc_8 (ErlangCons head_16 ErlangEmptyList)), stack_9,
        config_10])
erlps__unescape__5 [(ErlangBinary bin_c_0), handler_7, acc_8,
                    stack_9, config_10]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 98)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    head_16 =
      (erlps__maybe_replace__2
         [(ErlangInt (DBI.fromInt 8)), config_10])
  in
    (erlps__string__5
       [rest_6, handler_7,
        (ErlangCons acc_8 (ErlangCons head_16 ErlangEmptyList)), stack_9,
        config_10])
erlps__unescape__5 [(ErlangBinary bin_c_0), handler_7, acc_8,
                    stack_9, config_10]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 102)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    head_16 =
      (erlps__maybe_replace__2
         [(ErlangInt (DBI.fromInt 12)), config_10])
  in
    (erlps__string__5
       [rest_6, handler_7,
        (ErlangCons acc_8 (ErlangCons head_16 ErlangEmptyList)), stack_9,
        config_10])
erlps__unescape__5 [(ErlangBinary bin_c_0), handler_7, acc_8,
                    stack_9, config_10]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 110)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    head_16 =
      (erlps__maybe_replace__2
         [(ErlangInt (DBI.fromInt 10)), config_10])
  in
    (erlps__string__5
       [rest_6, handler_7,
        (ErlangCons acc_8 (ErlangCons head_16 ErlangEmptyList)), stack_9,
        config_10])
erlps__unescape__5 args = (erlps__unescape__5__p1 args)

erlps__unescape__5__p1 :: ErlangFun
erlps__unescape__5__p1 [(ErlangBinary bin_c_0), handler_7, acc_8,
                        stack_9, config_10]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 114)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    head_16 =
      (erlps__maybe_replace__2
         [(ErlangInt (DBI.fromInt 13)), config_10])
  in
    (erlps__string__5
       [rest_6, handler_7,
        (ErlangCons acc_8 (ErlangCons head_16 ErlangEmptyList)), stack_9,
        config_10])
erlps__unescape__5__p1 [(ErlangBinary bin_c_0), handler_7, acc_8,
                        stack_9, config_10]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 116)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    head_16 =
      (erlps__maybe_replace__2
         [(ErlangInt (DBI.fromInt 9)), config_10])
  in
    (erlps__string__5
       [rest_6, handler_7,
        (ErlangCons acc_8 (ErlangCons head_16 ErlangEmptyList)), stack_9,
        config_10])
erlps__unescape__5__p1 [(ErlangBinary bin_c_0), handler_7, acc_8,
                        stack_9, config_10]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 34)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    head_16 =
      (erlps__maybe_replace__2
         [(ErlangInt (DBI.fromInt 34)), config_10])
  in
    (erlps__string__5
       [rest_6, handler_7,
        (ErlangCons acc_8 (ErlangCons head_16 ErlangEmptyList)), stack_9,
        config_10])
erlps__unescape__5__p1 [(ErlangBinary bin_c_0), handler_7, acc_8,
                        stack_9,
                        config_10@(ErlangTuple [(ErlangAtom "config"), _, _, _,
                                                _, _, _, _,
                                                (ErlangAtom "false"), _, _, _,
                                                _, _, _, _])]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 39)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    head_16 =
      (ErlangBinary
         (BIN.from_int (ErlangInt (DBI.fromInt 39))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big))
  in
    (erlps__string__5
       [rest_6, handler_7,
        (ErlangCons acc_8 (ErlangCons head_16 ErlangEmptyList)), stack_9,
        config_10])
erlps__unescape__5__p1 [(ErlangBinary bin_c_0), handler_7, acc_8,
                        stack_9, config_10]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 92)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    head_16 =
      (erlps__maybe_replace__2
         [(ErlangInt (DBI.fromInt 92)), config_10])
  in
    (erlps__string__5
       [rest_6, handler_7,
        (ErlangCons acc_8 (ErlangCons head_16 ErlangEmptyList)), stack_9,
        config_10])
erlps__unescape__5__p1 args = (erlps__unescape__5__p2 args)

erlps__unescape__5__p2 :: ErlangFun
erlps__unescape__5__p2 [(ErlangBinary bin_c_0), handler_7, acc_8,
                        stack_9, config_10]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 47)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    head_16 =
      (erlps__maybe_replace__2
         [(ErlangInt (DBI.fromInt 47)), config_10])
  in
    (erlps__string__5
       [rest_6, handler_7,
        (ErlangCons acc_8 (ErlangCons head_16 ErlangEmptyList)), stack_9,
        config_10])
erlps__unescape__5__p2 [(ErlangBinary bin_c_0), handler_37,
                        acc_38, stack_39, config_40]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 117)))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok f_6 bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , size_7 <- ((DBI.fromInt 8))
  , (BIN.Ok a_9 bin_8) <-
      ((BIN.chop_int bin_5 size_7 1 BIN.Big BIN.Unsigned))
  , size_10 <- ((DBI.fromInt 8))
  , (BIN.Ok b_12 bin_11) <-
      ((BIN.chop_int bin_8 size_10 1 BIN.Big BIN.Unsigned))
  , size_13 <- ((DBI.fromInt 8))
  , (BIN.Ok c_15 bin_14) <-
      ((BIN.chop_int bin_11 size_13 1 BIN.Big BIN.Unsigned))
  , size_16 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_18) bin_17) <-
      ((BIN.chop_int bin_14 size_16 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_18) == (ErlangInt (DBI.fromInt 92)))
  , size_19 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_21) bin_20) <-
      ((BIN.chop_int bin_17 size_19 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_21) == (ErlangInt (DBI.fromInt 117)))
  , size_22 <- ((DBI.fromInt 8))
  , (BIN.Ok g_24 bin_23) <-
      ((BIN.chop_int bin_20 size_22 1 BIN.Big BIN.Unsigned))
  , size_25 <- ((DBI.fromInt 8))
  , (BIN.Ok x_27 bin_26) <-
      ((BIN.chop_int bin_23 size_25 1 BIN.Big BIN.Unsigned))
  , size_28 <- ((DBI.fromInt 8))
  , (BIN.Ok y_30 bin_29) <-
      ((BIN.chop_int bin_26 size_28 1 BIN.Big BIN.Unsigned))
  , size_31 <- ((DBI.fromInt 8))
  , (BIN.Ok z_33 bin_32) <-
      ((BIN.chop_int bin_29 size_31 1 BIN.Big BIN.Unsigned))
  , (ErlangInt size_34) <- ((BIN.size bin_32))
  , (BIN.Ok rest_36 bin_35) <- ((BIN.chop_bin bin_32 size_34 8))
  , (BIN.empty bin_35)
  , ((ErlangAtom "true") ==
       (H.falsifyErrors
          (\ _ ->
             let   
               lop_91 = (BIF.erlang__op_eq [a_9, (ErlangInt (DBI.fromInt 56))])
             in let
               lop_90 =
                 case lop_91 of
                   (ErlangAtom "true") -> (ErlangAtom "true")
                   (ErlangAtom "false") ->
                     let
                       lop_94 =
                         (BIF.erlang__op_eq [a_9, (ErlangInt (DBI.fromInt 57))])
                     in
                       case lop_94 of
                         (ErlangAtom "true") -> (ErlangAtom "true")
                         (ErlangAtom "false") ->
                           let
                             lop_97 =
                               (BIF.erlang__op_eq
                                  [a_9, (ErlangInt (DBI.fromInt 97))])
                           in
                             case lop_97 of
                               (ErlangAtom "true") -> (ErlangAtom "true")
                               (ErlangAtom "false") ->
                                 let
                                   lop_100 =
                                     (BIF.erlang__op_eq
                                        [a_9, (ErlangInt (DBI.fromInt 98))])
                                 in
                                   case lop_100 of
                                     (ErlangAtom "true") -> (ErlangAtom "true")
                                     (ErlangAtom "false") ->
                                       let
                                         lop_103 =
                                           (BIF.erlang__op_eq
                                              [a_9,
                                               (ErlangInt (DBI.fromInt 65))])
                                       in
                                         case lop_103 of
                                           (ErlangAtom "true") ->
                                             (ErlangAtom "true")
                                           (ErlangAtom "false") ->
                                             (BIF.erlang__op_eq
                                                [a_9,
                                                 (ErlangInt (DBI.fromInt 66))])
                                           _ -> (EXC.badarg1 lop_103)
                                     _ -> (EXC.badarg1 lop_100)
                               _ -> (EXC.badarg1 lop_97)
                         _ -> (EXC.badarg1 lop_94)
                   _ -> (EXC.badarg1 lop_91)
             in let
               lop_89 =
                 case lop_90 of
                   (ErlangAtom "false") -> (ErlangAtom "false")
                   (ErlangAtom "true") ->
                     let
                       lop_108 =
                         (BIF.erlang__op_eq
                            [x_27, (ErlangInt (DBI.fromInt 99))])
                     in
                       case lop_108 of
                         (ErlangAtom "true") -> (ErlangAtom "true")
                         (ErlangAtom "false") ->
                           let
                             lop_111 =
                               (BIF.erlang__op_eq
                                  [x_27, (ErlangInt (DBI.fromInt 100))])
                           in
                             case lop_111 of
                               (ErlangAtom "true") -> (ErlangAtom "true")
                               (ErlangAtom "false") ->
                                 let
                                   lop_114 =
                                     (BIF.erlang__op_eq
                                        [x_27, (ErlangInt (DBI.fromInt 101))])
                                 in
                                   case lop_114 of
                                     (ErlangAtom "true") -> (ErlangAtom "true")
                                     (ErlangAtom "false") ->
                                       let
                                         lop_117 =
                                           (BIF.erlang__op_eq
                                              [x_27,
                                               (ErlangInt (DBI.fromInt 102))])
                                       in
                                         case lop_117 of
                                           (ErlangAtom "true") ->
                                             (ErlangAtom "true")
                                           (ErlangAtom "false") ->
                                             let
                                               lop_120 =
                                                 (BIF.erlang__op_eq
                                                    [x_27,
                                                     (ErlangInt
                                                        (DBI.fromInt 67))])
                                             in
                                               case lop_120 of
                                                 (ErlangAtom "true") ->
                                                   (ErlangAtom "true")
                                                 (ErlangAtom "false") ->
                                                   let
                                                     lop_123 =
                                                       (BIF.erlang__op_eq
                                                          [x_27,
                                                           (ErlangInt
                                                              (DBI.fromInt
                                                                 68))])
                                                   in
                                                     case lop_123 of
                                                       (ErlangAtom "true") ->
                                                         (ErlangAtom "true")
                                                       (ErlangAtom "false") ->
                                                         let
                                                           lop_126 =
                                                             (BIF.erlang__op_eq
                                                                [x_27,
                                                                 (ErlangInt
                                                                    (DBI.fromInt
                                                                       69))])
                                                         in
                                                           case lop_126 of
                                                             (ErlangAtom "true") ->
                                                               (ErlangAtom
                                                                  "true")
                                                             (ErlangAtom "false") ->
                                                               (BIF.erlang__op_eq
                                                                  [x_27,
                                                                   (ErlangInt
                                                                      (DBI.fromInt
                                                                         70))])
                                                             _ ->
                                                               (EXC.badarg1
                                                                  lop_126)
                                                       _ ->
                                                         (EXC.badarg1 lop_123)
                                                 _ -> (EXC.badarg1 lop_120)
                                           _ -> (EXC.badarg1 lop_117)
                                     _ -> (EXC.badarg1 lop_114)
                               _ -> (EXC.badarg1 lop_111)
                         _ -> (EXC.badarg1 lop_108)
                   _ -> (EXC.badarg1 lop_90)
             in let
               lop_88 =
                 case lop_89 of
                   (ErlangAtom "false") -> (ErlangAtom "false")
                   (ErlangAtom "true") ->
                     let
                       lop_131 =
                         (BIF.erlang__op_eq
                            [f_6, (ErlangInt (DBI.fromInt 100))])
                     in
                       case lop_131 of
                         (ErlangAtom "true") -> (ErlangAtom "true")
                         (ErlangAtom "false") ->
                           (BIF.erlang__op_eq
                              [f_6, (ErlangInt (DBI.fromInt 68))])
                         _ -> (EXC.badarg1 lop_131)
                   _ -> (EXC.badarg1 lop_89)
             in let
               lop_87 =
                 case lop_88 of
                   (ErlangAtom "false") -> (ErlangAtom "false")
                   (ErlangAtom "true") ->
                     let
                       lop_136 =
                         (BIF.erlang__op_eq
                            [g_24, (ErlangInt (DBI.fromInt 100))])
                     in
                       case lop_136 of
                         (ErlangAtom "true") -> (ErlangAtom "true")
                         (ErlangAtom "false") ->
                           (BIF.erlang__op_eq
                              [g_24, (ErlangInt (DBI.fromInt 68))])
                         _ -> (EXC.badarg1 lop_136)
                   _ -> (EXC.badarg1 lop_88)
             in let
               lop_86 =
                 case lop_87 of
                   (ErlangAtom "false") -> (ErlangAtom "false")
                   (ErlangAtom "true") ->
                     let   
                       lop_142 =
                         (BIF.erlang__op_greaterEq
                            [b_12, (ErlangInt (DBI.fromInt 97))])
                     in let
                       lop_141 =
                         case lop_142 of
                           (ErlangAtom "false") -> (ErlangAtom "false")
                           (ErlangAtom "true") ->
                             (BIF.erlang__op_lesserEq
                                [b_12, (ErlangInt (DBI.fromInt 102))])
                           _ -> (EXC.badarg1 lop_142)
                     in
                       case lop_141 of
                         (ErlangAtom "true") -> (ErlangAtom "true")
                         (ErlangAtom "false") ->
                           let   
                             lop_148 =
                               (BIF.erlang__op_greaterEq
                                  [b_12, (ErlangInt (DBI.fromInt 65))])
                           in let
                             lop_147 =
                               case lop_148 of
                                 (ErlangAtom "false") -> (ErlangAtom "false")
                                 (ErlangAtom "true") ->
                                   (BIF.erlang__op_lesserEq
                                      [b_12, (ErlangInt (DBI.fromInt 70))])
                                 _ -> (EXC.badarg1 lop_148)
                           in
                             case lop_147 of
                               (ErlangAtom "true") -> (ErlangAtom "true")
                               (ErlangAtom "false") ->
                                 let
                                   lop_153 =
                                     (BIF.erlang__op_greaterEq
                                        [b_12, (ErlangInt (DBI.fromInt 48))])
                                 in
                                   case lop_153 of
                                     (ErlangAtom "false") ->
                                       (ErlangAtom "false")
                                     (ErlangAtom "true") ->
                                       (BIF.erlang__op_lesserEq
                                          [b_12, (ErlangInt (DBI.fromInt 57))])
                                     _ -> (EXC.badarg1 lop_153)
                               _ -> (EXC.badarg1 lop_147)
                         _ -> (EXC.badarg1 lop_141)
                   _ -> (EXC.badarg1 lop_87)
             in let
               lop_85 =
                 case lop_86 of
                   (ErlangAtom "false") -> (ErlangAtom "false")
                   (ErlangAtom "true") ->
                     let   
                       lop_159 =
                         (BIF.erlang__op_greaterEq
                            [c_15, (ErlangInt (DBI.fromInt 97))])
                     in let
                       lop_158 =
                         case lop_159 of
                           (ErlangAtom "false") -> (ErlangAtom "false")
                           (ErlangAtom "true") ->
                             (BIF.erlang__op_lesserEq
                                [c_15, (ErlangInt (DBI.fromInt 102))])
                           _ -> (EXC.badarg1 lop_159)
                     in
                       case lop_158 of
                         (ErlangAtom "true") -> (ErlangAtom "true")
                         (ErlangAtom "false") ->
                           let   
                             lop_165 =
                               (BIF.erlang__op_greaterEq
                                  [c_15, (ErlangInt (DBI.fromInt 65))])
                           in let
                             lop_164 =
                               case lop_165 of
                                 (ErlangAtom "false") -> (ErlangAtom "false")
                                 (ErlangAtom "true") ->
                                   (BIF.erlang__op_lesserEq
                                      [c_15, (ErlangInt (DBI.fromInt 70))])
                                 _ -> (EXC.badarg1 lop_165)
                           in
                             case lop_164 of
                               (ErlangAtom "true") -> (ErlangAtom "true")
                               (ErlangAtom "false") ->
                                 let
                                   lop_170 =
                                     (BIF.erlang__op_greaterEq
                                        [c_15, (ErlangInt (DBI.fromInt 48))])
                                 in
                                   case lop_170 of
                                     (ErlangAtom "false") ->
                                       (ErlangAtom "false")
                                     (ErlangAtom "true") ->
                                       (BIF.erlang__op_lesserEq
                                          [c_15, (ErlangInt (DBI.fromInt 57))])
                                     _ -> (EXC.badarg1 lop_170)
                               _ -> (EXC.badarg1 lop_164)
                         _ -> (EXC.badarg1 lop_158)
                   _ -> (EXC.badarg1 lop_86)
             in let
               lop_84 =
                 case lop_85 of
                   (ErlangAtom "false") -> (ErlangAtom "false")
                   (ErlangAtom "true") ->
                     let   
                       lop_176 =
                         (BIF.erlang__op_greaterEq
                            [y_30, (ErlangInt (DBI.fromInt 97))])
                     in let
                       lop_175 =
                         case lop_176 of
                           (ErlangAtom "false") -> (ErlangAtom "false")
                           (ErlangAtom "true") ->
                             (BIF.erlang__op_lesserEq
                                [y_30, (ErlangInt (DBI.fromInt 102))])
                           _ -> (EXC.badarg1 lop_176)
                     in
                       case lop_175 of
                         (ErlangAtom "true") -> (ErlangAtom "true")
                         (ErlangAtom "false") ->
                           let   
                             lop_182 =
                               (BIF.erlang__op_greaterEq
                                  [y_30, (ErlangInt (DBI.fromInt 65))])
                           in let
                             lop_181 =
                               case lop_182 of
                                 (ErlangAtom "false") -> (ErlangAtom "false")
                                 (ErlangAtom "true") ->
                                   (BIF.erlang__op_lesserEq
                                      [y_30, (ErlangInt (DBI.fromInt 70))])
                                 _ -> (EXC.badarg1 lop_182)
                           in
                             case lop_181 of
                               (ErlangAtom "true") -> (ErlangAtom "true")
                               (ErlangAtom "false") ->
                                 let
                                   lop_187 =
                                     (BIF.erlang__op_greaterEq
                                        [y_30, (ErlangInt (DBI.fromInt 48))])
                                 in
                                   case lop_187 of
                                     (ErlangAtom "false") ->
                                       (ErlangAtom "false")
                                     (ErlangAtom "true") ->
                                       (BIF.erlang__op_lesserEq
                                          [y_30, (ErlangInt (DBI.fromInt 57))])
                                     _ -> (EXC.badarg1 lop_187)
                               _ -> (EXC.badarg1 lop_181)
                         _ -> (EXC.badarg1 lop_175)
                   _ -> (EXC.badarg1 lop_85)
             in
               case lop_84 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") ->
                   let   
                     lop_193 =
                       (BIF.erlang__op_greaterEq
                          [z_33, (ErlangInt (DBI.fromInt 97))])
                   in let
                     lop_192 =
                       case lop_193 of
                         (ErlangAtom "false") -> (ErlangAtom "false")
                         (ErlangAtom "true") ->
                           (BIF.erlang__op_lesserEq
                              [z_33, (ErlangInt (DBI.fromInt 102))])
                         _ -> (EXC.badarg1 lop_193)
                   in
                     case lop_192 of
                       (ErlangAtom "true") -> (ErlangAtom "true")
                       (ErlangAtom "false") ->
                         let   
                           lop_199 =
                             (BIF.erlang__op_greaterEq
                                [z_33, (ErlangInt (DBI.fromInt 65))])
                         in let
                           lop_198 =
                             case lop_199 of
                               (ErlangAtom "false") -> (ErlangAtom "false")
                               (ErlangAtom "true") ->
                                 (BIF.erlang__op_lesserEq
                                    [z_33, (ErlangInt (DBI.fromInt 70))])
                               _ -> (EXC.badarg1 lop_199)
                         in
                           case lop_198 of
                             (ErlangAtom "true") -> (ErlangAtom "true")
                             (ErlangAtom "false") ->
                               let
                                 lop_204 =
                                   (BIF.erlang__op_greaterEq
                                      [z_33, (ErlangInt (DBI.fromInt 48))])
                               in
                                 case lop_204 of
                                   (ErlangAtom "false") -> (ErlangAtom "false")
                                   (ErlangAtom "true") ->
                                     (BIF.erlang__op_lesserEq
                                        [z_33, (ErlangInt (DBI.fromInt 57))])
                                   _ -> (EXC.badarg1 lop_204)
                             _ -> (EXC.badarg1 lop_198)
                       _ -> (EXC.badarg1 lop_192)
                 _ -> (EXC.badarg1 lop_84)))) =
  let   
    high_51 =
      (BIF.erlang__list_to_integer__2
         [(ErlangCons (ErlangInt (DBI.fromInt 100))
             (ErlangCons a_9
                (ErlangCons b_12 (ErlangCons c_15 ErlangEmptyList)))),
          (ErlangInt (DBI.fromInt 16))])
  in let
    low_62 =
      (BIF.erlang__list_to_integer__2
         [(ErlangCons (ErlangInt (DBI.fromInt 100))
             (ErlangCons x_27
                (ErlangCons y_30 (ErlangCons z_33 ErlangEmptyList)))),
          (ErlangInt (DBI.fromInt 16))])
  in let
    lop_65 =
      (BIF.erlang__op_minus [high_51, (ErlangInt (DBI.fromInt 55296))])
  in let
    lop_64 =
      (BIF.erlang__op_mult [lop_65, (ErlangInt (DBI.fromInt 1024))])
  in let
    rop_69 =
      (BIF.erlang__op_minus [low_62, (ErlangInt (DBI.fromInt 56320))])
  in let lop_63 = (BIF.erlang__op_plus [lop_64, rop_69])
  in let
    codepoint_73 =
      (BIF.erlang__op_plus [lop_63, (ErlangInt (DBI.fromInt 65536))])
  in let
    head_79 =
      (ErlangBinary
         (BIN.from_int codepoint_73 (ErlangInt (DBI.fromInt 8)) 1
            BIN.Big))
  in
    (erlps__string__5
       [rest_36, handler_37,
        (ErlangCons acc_38 (ErlangCons head_79 ErlangEmptyList)),
        stack_39, config_40])
erlps__unescape__5__p2 [(ErlangBinary bin_c_0), handler_37,
                        acc_38, stack_39, config_40]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 117)))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok f_6 bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , size_7 <- ((DBI.fromInt 8))
  , (BIN.Ok a_9 bin_8) <-
      ((BIN.chop_int bin_5 size_7 1 BIN.Big BIN.Unsigned))
  , size_10 <- ((DBI.fromInt 8))
  , (BIN.Ok b_12 bin_11) <-
      ((BIN.chop_int bin_8 size_10 1 BIN.Big BIN.Unsigned))
  , size_13 <- ((DBI.fromInt 8))
  , (BIN.Ok c_15 bin_14) <-
      ((BIN.chop_int bin_11 size_13 1 BIN.Big BIN.Unsigned))
  , size_16 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_18) bin_17) <-
      ((BIN.chop_int bin_14 size_16 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_18) == (ErlangInt (DBI.fromInt 92)))
  , size_19 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_21) bin_20) <-
      ((BIN.chop_int bin_17 size_19 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_21) == (ErlangInt (DBI.fromInt 117)))
  , size_22 <- ((DBI.fromInt 8))
  , (BIN.Ok w_24 bin_23) <-
      ((BIN.chop_int bin_20 size_22 1 BIN.Big BIN.Unsigned))
  , size_25 <- ((DBI.fromInt 8))
  , (BIN.Ok x_27 bin_26) <-
      ((BIN.chop_int bin_23 size_25 1 BIN.Big BIN.Unsigned))
  , size_28 <- ((DBI.fromInt 8))
  , (BIN.Ok y_30 bin_29) <-
      ((BIN.chop_int bin_26 size_28 1 BIN.Big BIN.Unsigned))
  , size_31 <- ((DBI.fromInt 8))
  , (BIN.Ok z_33 bin_32) <-
      ((BIN.chop_int bin_29 size_31 1 BIN.Big BIN.Unsigned))
  , (ErlangInt size_34) <- ((BIN.size bin_32))
  , (BIN.Ok rest_36 bin_35) <- ((BIN.chop_bin bin_32 size_34 8))
  , (BIN.empty bin_35)
  , ((ErlangAtom "true") ==
       (H.falsifyErrors
          (\ _ ->
             let   
               lop_93 = (BIF.erlang__op_eq [a_9, (ErlangInt (DBI.fromInt 56))])
             in let
               lop_92 =
                 case lop_93 of
                   (ErlangAtom "true") -> (ErlangAtom "true")
                   (ErlangAtom "false") ->
                     let
                       lop_96 =
                         (BIF.erlang__op_eq [a_9, (ErlangInt (DBI.fromInt 57))])
                     in
                       case lop_96 of
                         (ErlangAtom "true") -> (ErlangAtom "true")
                         (ErlangAtom "false") ->
                           let
                             lop_99 =
                               (BIF.erlang__op_eq
                                  [a_9, (ErlangInt (DBI.fromInt 97))])
                           in
                             case lop_99 of
                               (ErlangAtom "true") -> (ErlangAtom "true")
                               (ErlangAtom "false") ->
                                 let
                                   lop_102 =
                                     (BIF.erlang__op_eq
                                        [a_9, (ErlangInt (DBI.fromInt 98))])
                                 in
                                   case lop_102 of
                                     (ErlangAtom "true") -> (ErlangAtom "true")
                                     (ErlangAtom "false") ->
                                       let
                                         lop_105 =
                                           (BIF.erlang__op_eq
                                              [a_9,
                                               (ErlangInt (DBI.fromInt 65))])
                                       in
                                         case lop_105 of
                                           (ErlangAtom "true") ->
                                             (ErlangAtom "true")
                                           (ErlangAtom "false") ->
                                             (BIF.erlang__op_eq
                                                [a_9,
                                                 (ErlangInt (DBI.fromInt 66))])
                                           _ -> (EXC.badarg1 lop_105)
                                     _ -> (EXC.badarg1 lop_102)
                               _ -> (EXC.badarg1 lop_99)
                         _ -> (EXC.badarg1 lop_96)
                   _ -> (EXC.badarg1 lop_93)
             in let
               lop_91 =
                 case lop_92 of
                   (ErlangAtom "false") -> (ErlangAtom "false")
                   (ErlangAtom "true") ->
                     let
                       lop_110 =
                         (BIF.erlang__op_eq
                            [f_6, (ErlangInt (DBI.fromInt 100))])
                     in
                       case lop_110 of
                         (ErlangAtom "true") -> (ErlangAtom "true")
                         (ErlangAtom "false") ->
                           (BIF.erlang__op_eq
                              [f_6, (ErlangInt (DBI.fromInt 68))])
                         _ -> (EXC.badarg1 lop_110)
                   _ -> (EXC.badarg1 lop_92)
             in let
               lop_90 =
                 case lop_91 of
                   (ErlangAtom "false") -> (ErlangAtom "false")
                   (ErlangAtom "true") ->
                     let   
                       lop_116 =
                         (BIF.erlang__op_greaterEq
                            [b_12, (ErlangInt (DBI.fromInt 97))])
                     in let
                       lop_115 =
                         case lop_116 of
                           (ErlangAtom "false") -> (ErlangAtom "false")
                           (ErlangAtom "true") ->
                             (BIF.erlang__op_lesserEq
                                [b_12, (ErlangInt (DBI.fromInt 102))])
                           _ -> (EXC.badarg1 lop_116)
                     in
                       case lop_115 of
                         (ErlangAtom "true") -> (ErlangAtom "true")
                         (ErlangAtom "false") ->
                           let   
                             lop_122 =
                               (BIF.erlang__op_greaterEq
                                  [b_12, (ErlangInt (DBI.fromInt 65))])
                           in let
                             lop_121 =
                               case lop_122 of
                                 (ErlangAtom "false") -> (ErlangAtom "false")
                                 (ErlangAtom "true") ->
                                   (BIF.erlang__op_lesserEq
                                      [b_12, (ErlangInt (DBI.fromInt 70))])
                                 _ -> (EXC.badarg1 lop_122)
                           in
                             case lop_121 of
                               (ErlangAtom "true") -> (ErlangAtom "true")
                               (ErlangAtom "false") ->
                                 let
                                   lop_127 =
                                     (BIF.erlang__op_greaterEq
                                        [b_12, (ErlangInt (DBI.fromInt 48))])
                                 in
                                   case lop_127 of
                                     (ErlangAtom "false") ->
                                       (ErlangAtom "false")
                                     (ErlangAtom "true") ->
                                       (BIF.erlang__op_lesserEq
                                          [b_12, (ErlangInt (DBI.fromInt 57))])
                                     _ -> (EXC.badarg1 lop_127)
                               _ -> (EXC.badarg1 lop_121)
                         _ -> (EXC.badarg1 lop_115)
                   _ -> (EXC.badarg1 lop_91)
             in let
               lop_89 =
                 case lop_90 of
                   (ErlangAtom "false") -> (ErlangAtom "false")
                   (ErlangAtom "true") ->
                     let   
                       lop_133 =
                         (BIF.erlang__op_greaterEq
                            [c_15, (ErlangInt (DBI.fromInt 97))])
                     in let
                       lop_132 =
                         case lop_133 of
                           (ErlangAtom "false") -> (ErlangAtom "false")
                           (ErlangAtom "true") ->
                             (BIF.erlang__op_lesserEq
                                [c_15, (ErlangInt (DBI.fromInt 102))])
                           _ -> (EXC.badarg1 lop_133)
                     in
                       case lop_132 of
                         (ErlangAtom "true") -> (ErlangAtom "true")
                         (ErlangAtom "false") ->
                           let   
                             lop_139 =
                               (BIF.erlang__op_greaterEq
                                  [c_15, (ErlangInt (DBI.fromInt 65))])
                           in let
                             lop_138 =
                               case lop_139 of
                                 (ErlangAtom "false") -> (ErlangAtom "false")
                                 (ErlangAtom "true") ->
                                   (BIF.erlang__op_lesserEq
                                      [c_15, (ErlangInt (DBI.fromInt 70))])
                                 _ -> (EXC.badarg1 lop_139)
                           in
                             case lop_138 of
                               (ErlangAtom "true") -> (ErlangAtom "true")
                               (ErlangAtom "false") ->
                                 let
                                   lop_144 =
                                     (BIF.erlang__op_greaterEq
                                        [c_15, (ErlangInt (DBI.fromInt 48))])
                                 in
                                   case lop_144 of
                                     (ErlangAtom "false") ->
                                       (ErlangAtom "false")
                                     (ErlangAtom "true") ->
                                       (BIF.erlang__op_lesserEq
                                          [c_15, (ErlangInt (DBI.fromInt 57))])
                                     _ -> (EXC.badarg1 lop_144)
                               _ -> (EXC.badarg1 lop_138)
                         _ -> (EXC.badarg1 lop_132)
                   _ -> (EXC.badarg1 lop_90)
             in let
               lop_88 =
                 case lop_89 of
                   (ErlangAtom "false") -> (ErlangAtom "false")
                   (ErlangAtom "true") ->
                     let   
                       lop_150 =
                         (BIF.erlang__op_greaterEq
                            [w_24, (ErlangInt (DBI.fromInt 97))])
                     in let
                       lop_149 =
                         case lop_150 of
                           (ErlangAtom "false") -> (ErlangAtom "false")
                           (ErlangAtom "true") ->
                             (BIF.erlang__op_lesserEq
                                [w_24, (ErlangInt (DBI.fromInt 102))])
                           _ -> (EXC.badarg1 lop_150)
                     in
                       case lop_149 of
                         (ErlangAtom "true") -> (ErlangAtom "true")
                         (ErlangAtom "false") ->
                           let   
                             lop_156 =
                               (BIF.erlang__op_greaterEq
                                  [w_24, (ErlangInt (DBI.fromInt 65))])
                           in let
                             lop_155 =
                               case lop_156 of
                                 (ErlangAtom "false") -> (ErlangAtom "false")
                                 (ErlangAtom "true") ->
                                   (BIF.erlang__op_lesserEq
                                      [w_24, (ErlangInt (DBI.fromInt 70))])
                                 _ -> (EXC.badarg1 lop_156)
                           in
                             case lop_155 of
                               (ErlangAtom "true") -> (ErlangAtom "true")
                               (ErlangAtom "false") ->
                                 let
                                   lop_161 =
                                     (BIF.erlang__op_greaterEq
                                        [w_24, (ErlangInt (DBI.fromInt 48))])
                                 in
                                   case lop_161 of
                                     (ErlangAtom "false") ->
                                       (ErlangAtom "false")
                                     (ErlangAtom "true") ->
                                       (BIF.erlang__op_lesserEq
                                          [w_24, (ErlangInt (DBI.fromInt 57))])
                                     _ -> (EXC.badarg1 lop_161)
                               _ -> (EXC.badarg1 lop_155)
                         _ -> (EXC.badarg1 lop_149)
                   _ -> (EXC.badarg1 lop_89)
             in let
               lop_87 =
                 case lop_88 of
                   (ErlangAtom "false") -> (ErlangAtom "false")
                   (ErlangAtom "true") ->
                     let   
                       lop_167 =
                         (BIF.erlang__op_greaterEq
                            [x_27, (ErlangInt (DBI.fromInt 97))])
                     in let
                       lop_166 =
                         case lop_167 of
                           (ErlangAtom "false") -> (ErlangAtom "false")
                           (ErlangAtom "true") ->
                             (BIF.erlang__op_lesserEq
                                [x_27, (ErlangInt (DBI.fromInt 102))])
                           _ -> (EXC.badarg1 lop_167)
                     in
                       case lop_166 of
                         (ErlangAtom "true") -> (ErlangAtom "true")
                         (ErlangAtom "false") ->
                           let   
                             lop_173 =
                               (BIF.erlang__op_greaterEq
                                  [x_27, (ErlangInt (DBI.fromInt 65))])
                           in let
                             lop_172 =
                               case lop_173 of
                                 (ErlangAtom "false") -> (ErlangAtom "false")
                                 (ErlangAtom "true") ->
                                   (BIF.erlang__op_lesserEq
                                      [x_27, (ErlangInt (DBI.fromInt 70))])
                                 _ -> (EXC.badarg1 lop_173)
                           in
                             case lop_172 of
                               (ErlangAtom "true") -> (ErlangAtom "true")
                               (ErlangAtom "false") ->
                                 let
                                   lop_178 =
                                     (BIF.erlang__op_greaterEq
                                        [x_27, (ErlangInt (DBI.fromInt 48))])
                                 in
                                   case lop_178 of
                                     (ErlangAtom "false") ->
                                       (ErlangAtom "false")
                                     (ErlangAtom "true") ->
                                       (BIF.erlang__op_lesserEq
                                          [x_27, (ErlangInt (DBI.fromInt 57))])
                                     _ -> (EXC.badarg1 lop_178)
                               _ -> (EXC.badarg1 lop_172)
                         _ -> (EXC.badarg1 lop_166)
                   _ -> (EXC.badarg1 lop_88)
             in let
               lop_86 =
                 case lop_87 of
                   (ErlangAtom "false") -> (ErlangAtom "false")
                   (ErlangAtom "true") ->
                     let   
                       lop_184 =
                         (BIF.erlang__op_greaterEq
                            [y_30, (ErlangInt (DBI.fromInt 97))])
                     in let
                       lop_183 =
                         case lop_184 of
                           (ErlangAtom "false") -> (ErlangAtom "false")
                           (ErlangAtom "true") ->
                             (BIF.erlang__op_lesserEq
                                [y_30, (ErlangInt (DBI.fromInt 102))])
                           _ -> (EXC.badarg1 lop_184)
                     in
                       case lop_183 of
                         (ErlangAtom "true") -> (ErlangAtom "true")
                         (ErlangAtom "false") ->
                           let   
                             lop_190 =
                               (BIF.erlang__op_greaterEq
                                  [y_30, (ErlangInt (DBI.fromInt 65))])
                           in let
                             lop_189 =
                               case lop_190 of
                                 (ErlangAtom "false") -> (ErlangAtom "false")
                                 (ErlangAtom "true") ->
                                   (BIF.erlang__op_lesserEq
                                      [y_30, (ErlangInt (DBI.fromInt 70))])
                                 _ -> (EXC.badarg1 lop_190)
                           in
                             case lop_189 of
                               (ErlangAtom "true") -> (ErlangAtom "true")
                               (ErlangAtom "false") ->
                                 let
                                   lop_195 =
                                     (BIF.erlang__op_greaterEq
                                        [y_30, (ErlangInt (DBI.fromInt 48))])
                                 in
                                   case lop_195 of
                                     (ErlangAtom "false") ->
                                       (ErlangAtom "false")
                                     (ErlangAtom "true") ->
                                       (BIF.erlang__op_lesserEq
                                          [y_30, (ErlangInt (DBI.fromInt 57))])
                                     _ -> (EXC.badarg1 lop_195)
                               _ -> (EXC.badarg1 lop_189)
                         _ -> (EXC.badarg1 lop_183)
                   _ -> (EXC.badarg1 lop_87)
             in
               case lop_86 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") ->
                   let   
                     lop_201 =
                       (BIF.erlang__op_greaterEq
                          [z_33, (ErlangInt (DBI.fromInt 97))])
                   in let
                     lop_200 =
                       case lop_201 of
                         (ErlangAtom "false") -> (ErlangAtom "false")
                         (ErlangAtom "true") ->
                           (BIF.erlang__op_lesserEq
                              [z_33, (ErlangInt (DBI.fromInt 102))])
                         _ -> (EXC.badarg1 lop_201)
                   in
                     case lop_200 of
                       (ErlangAtom "true") -> (ErlangAtom "true")
                       (ErlangAtom "false") ->
                         let   
                           lop_207 =
                             (BIF.erlang__op_greaterEq
                                [z_33, (ErlangInt (DBI.fromInt 65))])
                         in let
                           lop_206 =
                             case lop_207 of
                               (ErlangAtom "false") -> (ErlangAtom "false")
                               (ErlangAtom "true") ->
                                 (BIF.erlang__op_lesserEq
                                    [z_33, (ErlangInt (DBI.fromInt 70))])
                               _ -> (EXC.badarg1 lop_207)
                         in
                           case lop_206 of
                             (ErlangAtom "true") -> (ErlangAtom "true")
                             (ErlangAtom "false") ->
                               let
                                 lop_212 =
                                   (BIF.erlang__op_greaterEq
                                      [z_33, (ErlangInt (DBI.fromInt 48))])
                               in
                                 case lop_212 of
                                   (ErlangAtom "false") -> (ErlangAtom "false")
                                   (ErlangAtom "true") ->
                                     (BIF.erlang__op_lesserEq
                                        [z_33, (ErlangInt (DBI.fromInt 57))])
                                   _ -> (EXC.badarg1 lop_212)
                             _ -> (EXC.badarg1 lop_206)
                       _ -> (EXC.badarg1 lop_200)
                 _ -> (EXC.badarg1 lop_86)))) =
  let
    case_41 =
      case config_40 of
        (ErlangTuple arr_44) | (DM.Just field_43) <-
                                 ((arr_44 DA.!! 7)) ->
          field_43
        _ -> (EXC.badrecord (ErlangAtom "config"))
  in
    case case_41 of
      (ErlangAtom "true") ->
        let
          case_45 =
            case config_40 of
              (ErlangTuple arr_48) | (DM.Just field_47) <-
                                       ((arr_48 DA.!! 14)) ->
                field_47
              _ -> (EXC.badrecord (ErlangAtom "config"))
        in
          case case_45 of
            (ErlangAtom "false") ->
              (BIF.erlang__error__1 [(ErlangAtom "badarg")])
            f_50 | (f_50 == f_6) ->
              let   
                tup_el_54 =
                  (ErlangBinary
                     (BIN.concat
                        [(BIN.from_int (ErlangInt (DBI.fromInt 117))
                            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
                         (BIN.from_int (ErlangInt (DBI.fromInt 100))
                            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
                         (BIN.from_int a_9 (ErlangInt (DBI.fromInt 8)) 1
                            BIN.Big),
                         (BIN.from_int b_12 (ErlangInt (DBI.fromInt 8)) 1
                            BIN.Big),
                         (BIN.from_int c_15 (ErlangInt (DBI.fromInt 8)) 1
                            BIN.Big),
                         (BIN.from_int (ErlangInt (DBI.fromInt 92))
                            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
                         (BIN.from_int (ErlangInt (DBI.fromInt 117))
                            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
                         (BIN.from_int w_24 (ErlangInt (DBI.fromInt 8)) 1
                            BIN.Big),
                         (BIN.from_int x_27 (ErlangInt (DBI.fromInt 8)) 1
                            BIN.Big),
                         (BIN.from_int y_30 (ErlangInt (DBI.fromInt 8)) 1
                            BIN.Big),
                         (BIN.from_int z_33 (ErlangInt (DBI.fromInt 8)) 1
                            BIN.Big),
                         (BIN.format_bin rest_36 (BIN.packed_size rest_36) 8)]))
              in let
                arg_52 =
                  (ErlangTuple
                     [(ErlangAtom "decoder"), tup_el_54, acc_38,
                      (ErlangAtom "null"), stack_39])
              in let
                arg_70 =
                  (BIF.do_remote_fun_call "Jsx.Config"
                     "erlps__config_to_list__1" [config_40])
              in
                (BIF.erlang__apply__2
                   [f_6,
                    (ErlangCons handler_37
                       (ErlangCons arg_52
                          (ErlangCons arg_70 ErlangEmptyList)))])
            something_else -> (EXC.case_clause something_else)
      (ErlangAtom "false") ->
        let   
          head_78 =
            (ErlangBinary
               (BIN.from_int (ErlangInt (DBI.fromInt 65533))
                  (ErlangInt (DBI.fromInt 8)) 1 BIN.Big))
        in let
          head_81 =
            (ErlangBinary
               (BIN.from_int (ErlangInt (DBI.fromInt 65533))
                  (ErlangInt (DBI.fromInt 8)) 1 BIN.Big))
        in
          (erlps__string__5
             [rest_36, handler_37,
              (ErlangCons acc_38
                 (ErlangCons head_78 (ErlangCons head_81 ErlangEmptyList))),
              stack_39, config_40])
      something_else -> (EXC.case_clause something_else)
erlps__unescape__5__p2 [(ErlangBinary bin_c_0), handler_22,
                        acc_23, stack_24, config_25]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 117)))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok f_6 bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , size_7 <- ((DBI.fromInt 8))
  , (BIN.Ok a_9 bin_8) <-
      ((BIN.chop_int bin_5 size_7 1 BIN.Big BIN.Unsigned))
  , size_10 <- ((DBI.fromInt 8))
  , (BIN.Ok b_12 bin_11) <-
      ((BIN.chop_int bin_8 size_10 1 BIN.Big BIN.Unsigned))
  , size_13 <- ((DBI.fromInt 8))
  , (BIN.Ok c_15 bin_14) <-
      ((BIN.chop_int bin_11 size_13 1 BIN.Big BIN.Unsigned))
  , size_16 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_18) bin_17) <-
      ((BIN.chop_int bin_14 size_16 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_18) == (ErlangInt (DBI.fromInt 92)))
  , (ErlangInt size_19) <- ((BIN.size bin_17))
  , (BIN.Ok rest_21 bin_20) <- ((BIN.chop_bin bin_17 size_19 8))
  , (BIN.empty bin_20)
  , ((ErlangAtom "true") ==
       (H.falsifyErrors
          (\ _ ->
             let   
               lop_43 = (BIF.erlang__op_eq [a_9, (ErlangInt (DBI.fromInt 56))])
             in let
               lop_42 =
                 case lop_43 of
                   (ErlangAtom "true") -> (ErlangAtom "true")
                   (ErlangAtom "false") ->
                     let
                       lop_46 =
                         (BIF.erlang__op_eq [a_9, (ErlangInt (DBI.fromInt 57))])
                     in
                       case lop_46 of
                         (ErlangAtom "true") -> (ErlangAtom "true")
                         (ErlangAtom "false") ->
                           let
                             lop_49 =
                               (BIF.erlang__op_eq
                                  [a_9, (ErlangInt (DBI.fromInt 97))])
                           in
                             case lop_49 of
                               (ErlangAtom "true") -> (ErlangAtom "true")
                               (ErlangAtom "false") ->
                                 let
                                   lop_52 =
                                     (BIF.erlang__op_eq
                                        [a_9, (ErlangInt (DBI.fromInt 98))])
                                 in
                                   case lop_52 of
                                     (ErlangAtom "true") -> (ErlangAtom "true")
                                     (ErlangAtom "false") ->
                                       let
                                         lop_55 =
                                           (BIF.erlang__op_eq
                                              [a_9,
                                               (ErlangInt (DBI.fromInt 65))])
                                       in
                                         case lop_55 of
                                           (ErlangAtom "true") ->
                                             (ErlangAtom "true")
                                           (ErlangAtom "false") ->
                                             (BIF.erlang__op_eq
                                                [a_9,
                                                 (ErlangInt (DBI.fromInt 66))])
                                           _ -> (EXC.badarg1 lop_55)
                                     _ -> (EXC.badarg1 lop_52)
                               _ -> (EXC.badarg1 lop_49)
                         _ -> (EXC.badarg1 lop_46)
                   _ -> (EXC.badarg1 lop_43)
             in let
               lop_41 =
                 case lop_42 of
                   (ErlangAtom "false") -> (ErlangAtom "false")
                   (ErlangAtom "true") ->
                     let
                       lop_60 =
                         (BIF.erlang__op_eq
                            [f_6, (ErlangInt (DBI.fromInt 100))])
                     in
                       case lop_60 of
                         (ErlangAtom "true") -> (ErlangAtom "true")
                         (ErlangAtom "false") ->
                           (BIF.erlang__op_eq
                              [f_6, (ErlangInt (DBI.fromInt 68))])
                         _ -> (EXC.badarg1 lop_60)
                   _ -> (EXC.badarg1 lop_42)
             in let
               lop_40 =
                 case lop_41 of
                   (ErlangAtom "false") -> (ErlangAtom "false")
                   (ErlangAtom "true") ->
                     let   
                       lop_66 =
                         (BIF.erlang__op_greaterEq
                            [b_12, (ErlangInt (DBI.fromInt 97))])
                     in let
                       lop_65 =
                         case lop_66 of
                           (ErlangAtom "false") -> (ErlangAtom "false")
                           (ErlangAtom "true") ->
                             (BIF.erlang__op_lesserEq
                                [b_12, (ErlangInt (DBI.fromInt 102))])
                           _ -> (EXC.badarg1 lop_66)
                     in
                       case lop_65 of
                         (ErlangAtom "true") -> (ErlangAtom "true")
                         (ErlangAtom "false") ->
                           let   
                             lop_72 =
                               (BIF.erlang__op_greaterEq
                                  [b_12, (ErlangInt (DBI.fromInt 65))])
                           in let
                             lop_71 =
                               case lop_72 of
                                 (ErlangAtom "false") -> (ErlangAtom "false")
                                 (ErlangAtom "true") ->
                                   (BIF.erlang__op_lesserEq
                                      [b_12, (ErlangInt (DBI.fromInt 70))])
                                 _ -> (EXC.badarg1 lop_72)
                           in
                             case lop_71 of
                               (ErlangAtom "true") -> (ErlangAtom "true")
                               (ErlangAtom "false") ->
                                 let
                                   lop_77 =
                                     (BIF.erlang__op_greaterEq
                                        [b_12, (ErlangInt (DBI.fromInt 48))])
                                 in
                                   case lop_77 of
                                     (ErlangAtom "false") ->
                                       (ErlangAtom "false")
                                     (ErlangAtom "true") ->
                                       (BIF.erlang__op_lesserEq
                                          [b_12, (ErlangInt (DBI.fromInt 57))])
                                     _ -> (EXC.badarg1 lop_77)
                               _ -> (EXC.badarg1 lop_71)
                         _ -> (EXC.badarg1 lop_65)
                   _ -> (EXC.badarg1 lop_41)
             in
               case lop_40 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") ->
                   let   
                     lop_83 =
                       (BIF.erlang__op_greaterEq
                          [c_15, (ErlangInt (DBI.fromInt 97))])
                   in let
                     lop_82 =
                       case lop_83 of
                         (ErlangAtom "false") -> (ErlangAtom "false")
                         (ErlangAtom "true") ->
                           (BIF.erlang__op_lesserEq
                              [c_15, (ErlangInt (DBI.fromInt 102))])
                         _ -> (EXC.badarg1 lop_83)
                   in
                     case lop_82 of
                       (ErlangAtom "true") -> (ErlangAtom "true")
                       (ErlangAtom "false") ->
                         let   
                           lop_89 =
                             (BIF.erlang__op_greaterEq
                                [c_15, (ErlangInt (DBI.fromInt 65))])
                         in let
                           lop_88 =
                             case lop_89 of
                               (ErlangAtom "false") -> (ErlangAtom "false")
                               (ErlangAtom "true") ->
                                 (BIF.erlang__op_lesserEq
                                    [c_15, (ErlangInt (DBI.fromInt 70))])
                               _ -> (EXC.badarg1 lop_89)
                         in
                           case lop_88 of
                             (ErlangAtom "true") -> (ErlangAtom "true")
                             (ErlangAtom "false") ->
                               let
                                 lop_94 =
                                   (BIF.erlang__op_greaterEq
                                      [c_15, (ErlangInt (DBI.fromInt 48))])
                               in
                                 case lop_94 of
                                   (ErlangAtom "false") -> (ErlangAtom "false")
                                   (ErlangAtom "true") ->
                                     (BIF.erlang__op_lesserEq
                                        [c_15, (ErlangInt (DBI.fromInt 57))])
                                   _ -> (EXC.badarg1 lop_94)
                             _ -> (EXC.badarg1 lop_88)
                       _ -> (EXC.badarg1 lop_82)
                 _ -> (EXC.badarg1 lop_40)))) =
  let
    arg_27 =
      (ErlangBinary
         (BIN.concat
            [(BIN.from_int (ErlangInt (DBI.fromInt 92))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 117))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 100))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int a_9 (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int b_12 (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int c_15 (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 92))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.format_bin rest_21 (BIN.packed_size rest_21) 8)]))
  in
    (erlps__incomplete__6
       [(ErlangAtom "string"), arg_27, handler_22, acc_23, stack_24,
        config_25])
erlps__unescape__5__p2 [(ErlangBinary bin_c_0), handler_16,
                        acc_17, stack_18, config_19]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 117)))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok f_6 bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , size_7 <- ((DBI.fromInt 8))
  , (BIN.Ok a_9 bin_8) <-
      ((BIN.chop_int bin_5 size_7 1 BIN.Big BIN.Unsigned))
  , size_10 <- ((DBI.fromInt 8))
  , (BIN.Ok b_12 bin_11) <-
      ((BIN.chop_int bin_8 size_10 1 BIN.Big BIN.Unsigned))
  , size_13 <- ((DBI.fromInt 8))
  , (BIN.Ok c_15 bin_14) <-
      ((BIN.chop_int bin_11 size_13 1 BIN.Big BIN.Unsigned))
  , (BIN.empty bin_14)
  , ((ErlangAtom "true") ==
       (H.falsifyErrors
          (\ _ ->
             let   
               lop_35 = (BIF.erlang__op_eq [a_9, (ErlangInt (DBI.fromInt 56))])
             in let
               lop_34 =
                 case lop_35 of
                   (ErlangAtom "true") -> (ErlangAtom "true")
                   (ErlangAtom "false") ->
                     let
                       lop_38 =
                         (BIF.erlang__op_eq [a_9, (ErlangInt (DBI.fromInt 57))])
                     in
                       case lop_38 of
                         (ErlangAtom "true") -> (ErlangAtom "true")
                         (ErlangAtom "false") ->
                           let
                             lop_41 =
                               (BIF.erlang__op_eq
                                  [a_9, (ErlangInt (DBI.fromInt 97))])
                           in
                             case lop_41 of
                               (ErlangAtom "true") -> (ErlangAtom "true")
                               (ErlangAtom "false") ->
                                 let
                                   lop_44 =
                                     (BIF.erlang__op_eq
                                        [a_9, (ErlangInt (DBI.fromInt 98))])
                                 in
                                   case lop_44 of
                                     (ErlangAtom "true") -> (ErlangAtom "true")
                                     (ErlangAtom "false") ->
                                       let
                                         lop_47 =
                                           (BIF.erlang__op_eq
                                              [a_9,
                                               (ErlangInt (DBI.fromInt 65))])
                                       in
                                         case lop_47 of
                                           (ErlangAtom "true") ->
                                             (ErlangAtom "true")
                                           (ErlangAtom "false") ->
                                             (BIF.erlang__op_eq
                                                [a_9,
                                                 (ErlangInt (DBI.fromInt 66))])
                                           _ -> (EXC.badarg1 lop_47)
                                     _ -> (EXC.badarg1 lop_44)
                               _ -> (EXC.badarg1 lop_41)
                         _ -> (EXC.badarg1 lop_38)
                   _ -> (EXC.badarg1 lop_35)
             in let
               lop_33 =
                 case lop_34 of
                   (ErlangAtom "false") -> (ErlangAtom "false")
                   (ErlangAtom "true") ->
                     let
                       lop_52 =
                         (BIF.erlang__op_eq
                            [f_6, (ErlangInt (DBI.fromInt 100))])
                     in
                       case lop_52 of
                         (ErlangAtom "true") -> (ErlangAtom "true")
                         (ErlangAtom "false") ->
                           (BIF.erlang__op_eq
                              [f_6, (ErlangInt (DBI.fromInt 68))])
                         _ -> (EXC.badarg1 lop_52)
                   _ -> (EXC.badarg1 lop_34)
             in let
               lop_32 =
                 case lop_33 of
                   (ErlangAtom "false") -> (ErlangAtom "false")
                   (ErlangAtom "true") ->
                     let   
                       lop_58 =
                         (BIF.erlang__op_greaterEq
                            [b_12, (ErlangInt (DBI.fromInt 97))])
                     in let
                       lop_57 =
                         case lop_58 of
                           (ErlangAtom "false") -> (ErlangAtom "false")
                           (ErlangAtom "true") ->
                             (BIF.erlang__op_lesserEq
                                [b_12, (ErlangInt (DBI.fromInt 102))])
                           _ -> (EXC.badarg1 lop_58)
                     in
                       case lop_57 of
                         (ErlangAtom "true") -> (ErlangAtom "true")
                         (ErlangAtom "false") ->
                           let   
                             lop_64 =
                               (BIF.erlang__op_greaterEq
                                  [b_12, (ErlangInt (DBI.fromInt 65))])
                           in let
                             lop_63 =
                               case lop_64 of
                                 (ErlangAtom "false") -> (ErlangAtom "false")
                                 (ErlangAtom "true") ->
                                   (BIF.erlang__op_lesserEq
                                      [b_12, (ErlangInt (DBI.fromInt 70))])
                                 _ -> (EXC.badarg1 lop_64)
                           in
                             case lop_63 of
                               (ErlangAtom "true") -> (ErlangAtom "true")
                               (ErlangAtom "false") ->
                                 let
                                   lop_69 =
                                     (BIF.erlang__op_greaterEq
                                        [b_12, (ErlangInt (DBI.fromInt 48))])
                                 in
                                   case lop_69 of
                                     (ErlangAtom "false") ->
                                       (ErlangAtom "false")
                                     (ErlangAtom "true") ->
                                       (BIF.erlang__op_lesserEq
                                          [b_12, (ErlangInt (DBI.fromInt 57))])
                                     _ -> (EXC.badarg1 lop_69)
                               _ -> (EXC.badarg1 lop_63)
                         _ -> (EXC.badarg1 lop_57)
                   _ -> (EXC.badarg1 lop_33)
             in
               case lop_32 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") ->
                   let   
                     lop_75 =
                       (BIF.erlang__op_greaterEq
                          [c_15, (ErlangInt (DBI.fromInt 97))])
                   in let
                     lop_74 =
                       case lop_75 of
                         (ErlangAtom "false") -> (ErlangAtom "false")
                         (ErlangAtom "true") ->
                           (BIF.erlang__op_lesserEq
                              [c_15, (ErlangInt (DBI.fromInt 102))])
                         _ -> (EXC.badarg1 lop_75)
                   in
                     case lop_74 of
                       (ErlangAtom "true") -> (ErlangAtom "true")
                       (ErlangAtom "false") ->
                         let   
                           lop_81 =
                             (BIF.erlang__op_greaterEq
                                [c_15, (ErlangInt (DBI.fromInt 65))])
                         in let
                           lop_80 =
                             case lop_81 of
                               (ErlangAtom "false") -> (ErlangAtom "false")
                               (ErlangAtom "true") ->
                                 (BIF.erlang__op_lesserEq
                                    [c_15, (ErlangInt (DBI.fromInt 70))])
                               _ -> (EXC.badarg1 lop_81)
                         in
                           case lop_80 of
                             (ErlangAtom "true") -> (ErlangAtom "true")
                             (ErlangAtom "false") ->
                               let
                                 lop_86 =
                                   (BIF.erlang__op_greaterEq
                                      [c_15, (ErlangInt (DBI.fromInt 48))])
                               in
                                 case lop_86 of
                                   (ErlangAtom "false") -> (ErlangAtom "false")
                                   (ErlangAtom "true") ->
                                     (BIF.erlang__op_lesserEq
                                        [c_15, (ErlangInt (DBI.fromInt 57))])
                                   _ -> (EXC.badarg1 lop_86)
                             _ -> (EXC.badarg1 lop_80)
                       _ -> (EXC.badarg1 lop_74)
                 _ -> (EXC.badarg1 lop_32)))) =
  let
    arg_21 =
      (ErlangBinary
         (BIN.concat
            [(BIN.from_int (ErlangInt (DBI.fromInt 92))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 117))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 100))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int a_9 (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int b_12 (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int c_15 (ErlangInt (DBI.fromInt 8)) 1 BIN.Big)]))
  in
    (erlps__incomplete__6
       [(ErlangAtom "string"), arg_21, handler_16, acc_17, stack_18,
        config_19])
erlps__unescape__5__p2 args = (erlps__unescape__5__p3 args)

erlps__unescape__5__p3 :: ErlangFun
erlps__unescape__5__p3 [(ErlangBinary bin_c_0), handler_19,
                        acc_20, stack_21, config_22]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 117)))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok a_6 bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , size_7 <- ((DBI.fromInt 8))
  , (BIN.Ok b_9 bin_8) <-
      ((BIN.chop_int bin_5 size_7 1 BIN.Big BIN.Unsigned))
  , size_10 <- ((DBI.fromInt 8))
  , (BIN.Ok c_12 bin_11) <-
      ((BIN.chop_int bin_8 size_10 1 BIN.Big BIN.Unsigned))
  , size_13 <- ((DBI.fromInt 8))
  , (BIN.Ok d_15 bin_14) <-
      ((BIN.chop_int bin_11 size_13 1 BIN.Big BIN.Unsigned))
  , (ErlangInt size_16) <- ((BIN.size bin_14))
  , (BIN.Ok rest_18 bin_17) <- ((BIN.chop_bin bin_14 size_16 8))
  , (BIN.empty bin_17)
  , ((ErlangAtom "true") ==
       (H.falsifyErrors
          (\ _ ->
             let   
               lop_91 =
                 (BIF.erlang__op_greaterEq [a_6, (ErlangInt (DBI.fromInt 97))])
             in let
               lop_90 =
                 case lop_91 of
                   (ErlangAtom "false") -> (ErlangAtom "false")
                   (ErlangAtom "true") ->
                     (BIF.erlang__op_lesserEq
                        [a_6, (ErlangInt (DBI.fromInt 102))])
                   _ -> (EXC.badarg1 lop_91)
             in let
               lop_89 =
                 case lop_90 of
                   (ErlangAtom "true") -> (ErlangAtom "true")
                   (ErlangAtom "false") ->
                     let   
                       lop_97 =
                         (BIF.erlang__op_greaterEq
                            [a_6, (ErlangInt (DBI.fromInt 65))])
                     in let
                       lop_96 =
                         case lop_97 of
                           (ErlangAtom "false") -> (ErlangAtom "false")
                           (ErlangAtom "true") ->
                             (BIF.erlang__op_lesserEq
                                [a_6, (ErlangInt (DBI.fromInt 70))])
                           _ -> (EXC.badarg1 lop_97)
                     in
                       case lop_96 of
                         (ErlangAtom "true") -> (ErlangAtom "true")
                         (ErlangAtom "false") ->
                           let
                             lop_102 =
                               (BIF.erlang__op_greaterEq
                                  [a_6, (ErlangInt (DBI.fromInt 48))])
                           in
                             case lop_102 of
                               (ErlangAtom "false") -> (ErlangAtom "false")
                               (ErlangAtom "true") ->
                                 (BIF.erlang__op_lesserEq
                                    [a_6, (ErlangInt (DBI.fromInt 57))])
                               _ -> (EXC.badarg1 lop_102)
                         _ -> (EXC.badarg1 lop_96)
                   _ -> (EXC.badarg1 lop_90)
             in let
               lop_88 =
                 case lop_89 of
                   (ErlangAtom "false") -> (ErlangAtom "false")
                   (ErlangAtom "true") ->
                     let   
                       lop_108 =
                         (BIF.erlang__op_greaterEq
                            [b_9, (ErlangInt (DBI.fromInt 97))])
                     in let
                       lop_107 =
                         case lop_108 of
                           (ErlangAtom "false") -> (ErlangAtom "false")
                           (ErlangAtom "true") ->
                             (BIF.erlang__op_lesserEq
                                [b_9, (ErlangInt (DBI.fromInt 102))])
                           _ -> (EXC.badarg1 lop_108)
                     in
                       case lop_107 of
                         (ErlangAtom "true") -> (ErlangAtom "true")
                         (ErlangAtom "false") ->
                           let   
                             lop_114 =
                               (BIF.erlang__op_greaterEq
                                  [b_9, (ErlangInt (DBI.fromInt 65))])
                           in let
                             lop_113 =
                               case lop_114 of
                                 (ErlangAtom "false") -> (ErlangAtom "false")
                                 (ErlangAtom "true") ->
                                   (BIF.erlang__op_lesserEq
                                      [b_9, (ErlangInt (DBI.fromInt 70))])
                                 _ -> (EXC.badarg1 lop_114)
                           in
                             case lop_113 of
                               (ErlangAtom "true") -> (ErlangAtom "true")
                               (ErlangAtom "false") ->
                                 let
                                   lop_119 =
                                     (BIF.erlang__op_greaterEq
                                        [b_9, (ErlangInt (DBI.fromInt 48))])
                                 in
                                   case lop_119 of
                                     (ErlangAtom "false") ->
                                       (ErlangAtom "false")
                                     (ErlangAtom "true") ->
                                       (BIF.erlang__op_lesserEq
                                          [b_9, (ErlangInt (DBI.fromInt 57))])
                                     _ -> (EXC.badarg1 lop_119)
                               _ -> (EXC.badarg1 lop_113)
                         _ -> (EXC.badarg1 lop_107)
                   _ -> (EXC.badarg1 lop_89)
             in let
               lop_87 =
                 case lop_88 of
                   (ErlangAtom "false") -> (ErlangAtom "false")
                   (ErlangAtom "true") ->
                     let   
                       lop_125 =
                         (BIF.erlang__op_greaterEq
                            [c_12, (ErlangInt (DBI.fromInt 97))])
                     in let
                       lop_124 =
                         case lop_125 of
                           (ErlangAtom "false") -> (ErlangAtom "false")
                           (ErlangAtom "true") ->
                             (BIF.erlang__op_lesserEq
                                [c_12, (ErlangInt (DBI.fromInt 102))])
                           _ -> (EXC.badarg1 lop_125)
                     in
                       case lop_124 of
                         (ErlangAtom "true") -> (ErlangAtom "true")
                         (ErlangAtom "false") ->
                           let   
                             lop_131 =
                               (BIF.erlang__op_greaterEq
                                  [c_12, (ErlangInt (DBI.fromInt 65))])
                           in let
                             lop_130 =
                               case lop_131 of
                                 (ErlangAtom "false") -> (ErlangAtom "false")
                                 (ErlangAtom "true") ->
                                   (BIF.erlang__op_lesserEq
                                      [c_12, (ErlangInt (DBI.fromInt 70))])
                                 _ -> (EXC.badarg1 lop_131)
                           in
                             case lop_130 of
                               (ErlangAtom "true") -> (ErlangAtom "true")
                               (ErlangAtom "false") ->
                                 let
                                   lop_136 =
                                     (BIF.erlang__op_greaterEq
                                        [c_12, (ErlangInt (DBI.fromInt 48))])
                                 in
                                   case lop_136 of
                                     (ErlangAtom "false") ->
                                       (ErlangAtom "false")
                                     (ErlangAtom "true") ->
                                       (BIF.erlang__op_lesserEq
                                          [c_12, (ErlangInt (DBI.fromInt 57))])
                                     _ -> (EXC.badarg1 lop_136)
                               _ -> (EXC.badarg1 lop_130)
                         _ -> (EXC.badarg1 lop_124)
                   _ -> (EXC.badarg1 lop_88)
             in
               case lop_87 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") ->
                   let   
                     lop_142 =
                       (BIF.erlang__op_greaterEq
                          [d_15, (ErlangInt (DBI.fromInt 97))])
                   in let
                     lop_141 =
                       case lop_142 of
                         (ErlangAtom "false") -> (ErlangAtom "false")
                         (ErlangAtom "true") ->
                           (BIF.erlang__op_lesserEq
                              [d_15, (ErlangInt (DBI.fromInt 102))])
                         _ -> (EXC.badarg1 lop_142)
                   in
                     case lop_141 of
                       (ErlangAtom "true") -> (ErlangAtom "true")
                       (ErlangAtom "false") ->
                         let   
                           lop_148 =
                             (BIF.erlang__op_greaterEq
                                [d_15, (ErlangInt (DBI.fromInt 65))])
                         in let
                           lop_147 =
                             case lop_148 of
                               (ErlangAtom "false") -> (ErlangAtom "false")
                               (ErlangAtom "true") ->
                                 (BIF.erlang__op_lesserEq
                                    [d_15, (ErlangInt (DBI.fromInt 70))])
                               _ -> (EXC.badarg1 lop_148)
                         in
                           case lop_147 of
                             (ErlangAtom "true") -> (ErlangAtom "true")
                             (ErlangAtom "false") ->
                               let
                                 lop_153 =
                                   (BIF.erlang__op_greaterEq
                                      [d_15, (ErlangInt (DBI.fromInt 48))])
                               in
                                 case lop_153 of
                                   (ErlangAtom "false") -> (ErlangAtom "false")
                                   (ErlangAtom "true") ->
                                     (BIF.erlang__op_lesserEq
                                        [d_15, (ErlangInt (DBI.fromInt 57))])
                                   _ -> (EXC.badarg1 lop_153)
                             _ -> (EXC.badarg1 lop_147)
                       _ -> (EXC.badarg1 lop_141)
                 _ -> (EXC.badarg1 lop_87)))) =
  let
    case_23 =
      (BIF.erlang__list_to_integer__2
         [(ErlangCons a_6
             (ErlangCons b_9
                (ErlangCons c_12 (ErlangCons d_15 ErlangEmptyList)))),
          (ErlangInt (DBI.fromInt 16))])
  in
    case case_23 of
      codepoint_34 | ((ErlangAtom "true") ==
                        (H.falsifyErrors
                           (\ _ ->
                              let
                                lop_35 =
                                  (BIF.erlang__op_lesser
                                     [codepoint_34,
                                      (ErlangInt (DBI.fromInt 55296))])
                              in
                                case lop_35 of
                                  (ErlangAtom "true") -> (ErlangAtom "true")
                                  (ErlangAtom "false") ->
                                    (BIF.erlang__op_greater
                                       [codepoint_34,
                                        (ErlangInt (DBI.fromInt 57343))])
                                  _ -> (EXC.badarg1 lop_35)))) ->
        let head_45 = (erlps__maybe_replace__2 [codepoint_34, config_22])
        in
          (erlps__string__5
             [rest_18, handler_19,
              (ErlangCons acc_20 (ErlangCons head_45 ErlangEmptyList)),
              stack_21, config_22])
      _ | ((ErlangAtom "true") ==
             (H.falsifyErrors
                (\ _ ->
                   case config_22 of
                     (ErlangTuple arr_53) | (DM.Just field_52) <-
                                              ((arr_53 DA.!! 7)) ->
                       field_52
                     _ -> (EXC.badrecord (ErlangAtom "config"))))) ->
        let
          case_54 =
            case config_22 of
              (ErlangTuple arr_57) | (DM.Just field_56) <-
                                       ((arr_57 DA.!! 14)) ->
                field_56
              _ -> (EXC.badrecord (ErlangAtom "config"))
        in
          case case_54 of
            (ErlangAtom "false") ->
              (BIF.erlang__error__1 [(ErlangAtom "badarg")])
            f_59 ->
              let   
                arg_60 =
                  (ErlangBinary
                     (BIN.concat
                        [(BIN.from_int (ErlangInt (DBI.fromInt 92))
                            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
                         (BIN.from_int (ErlangInt (DBI.fromInt 117))
                            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
                         (BIN.from_int a_6 (ErlangInt (DBI.fromInt 8)) 1
                            BIN.Big),
                         (BIN.from_int b_9 (ErlangInt (DBI.fromInt 8)) 1
                            BIN.Big),
                         (BIN.from_int c_12 (ErlangInt (DBI.fromInt 8)) 1
                            BIN.Big),
                         (BIN.from_int d_15 (ErlangInt (DBI.fromInt 8)) 1
                            BIN.Big),
                         (BIN.format_bin rest_18 (BIN.packed_size rest_18) 8)]))
              in let
                arg_68 =
                  (ErlangTuple
                     [(ErlangAtom "decoder"), (ErlangAtom "string"), handler_19,
                      acc_20, stack_21])
              in let
                arg_74 =
                  (BIF.do_remote_fun_call "Jsx.Config"
                     "erlps__config_to_list__1" [config_22])
              in
                (BIF.erlang__apply__2
                   [f_59,
                    (ErlangCons arg_60
                       (ErlangCons arg_68
                          (ErlangCons arg_74 ErlangEmptyList)))])
      _ ->
        let
          head_82 =
            (ErlangBinary
               (BIN.from_int (ErlangInt (DBI.fromInt 65533))
                  (ErlangInt (DBI.fromInt 8)) 1 BIN.Big))
        in
          (erlps__string__5
             [rest_18, handler_19,
              (ErlangCons acc_20 (ErlangCons head_82 ErlangEmptyList)),
              stack_21, config_22])
erlps__unescape__5__p3 [bin_0, handler_1, acc_2, stack_3,
                        config_4]
  =
  let case_5 = (erlps__is_partial_escape__1 [bin_0])
  in
    case case_5 of
      (ErlangAtom "true") ->
        let
          arg_8 =
            (ErlangBinary
               (BIN.concat
                  [(BIN.from_int (ErlangInt (DBI.fromInt 92))
                      (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
                   (BIN.format_bin bin_0 (BIN.packed_size bin_0) 8)]))
        in
          (erlps__incomplete__6
             [(ErlangAtom "string"), arg_8, handler_1, acc_2, stack_3,
              config_4])
      (ErlangAtom "false") ->
        let
          case_15 =
            case config_4 of
              (ErlangTuple arr_18) | (DM.Just field_17) <-
                                       ((arr_18 DA.!! 9)) ->
                field_17
              _ -> (EXC.badrecord (ErlangAtom "config"))
        in
          case case_15 of
            (ErlangAtom "true") ->
              let
                case_19 =
                  case config_4 of
                    (ErlangTuple arr_22) | (DM.Just field_21) <-
                                             ((arr_22 DA.!! 14)) ->
                      field_21
                    _ -> (EXC.badrecord (ErlangAtom "config"))
              in
                case case_19 of
                  (ErlangAtom "false") ->
                    (BIF.erlang__error__1 [(ErlangAtom "badarg")])
                  f_24 ->
                    let   
                      arg_25 =
                        (ErlangBinary
                           (BIN.concat
                              [(BIN.from_int (ErlangInt (DBI.fromInt 92))
                                  (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
                               (BIN.format_bin bin_0 (BIN.packed_size bin_0)
                                  8)]))
                    in let
                      arg_28 =
                        (ErlangTuple
                           [(ErlangAtom "decoder"), (ErlangAtom "string"),
                            handler_1, acc_2, stack_3])
                    in let
                      arg_34 =
                        (BIF.do_remote_fun_call "Jsx.Config"
                           "erlps__config_to_list__1" [config_4])
                    in
                      (BIF.erlang__apply__2
                         [f_24,
                          (ErlangCons arg_25
                             (ErlangCons arg_28
                                (ErlangCons arg_34 ErlangEmptyList)))])
            (ErlangAtom "false") ->
              let
                head_42 =
                  (ErlangBinary
                     (BIN.from_int (ErlangInt (DBI.fromInt 92))
                        (ErlangInt (DBI.fromInt 8)) 1 BIN.Big))
              in
                (erlps__string__5
                   [bin_0, handler_1,
                    (ErlangCons acc_2 (ErlangCons head_42 ErlangEmptyList)),
                    stack_3, config_4])
            something_else -> (EXC.case_clause something_else)
      something_else -> (EXC.case_clause something_else)
erlps__unescape__5__p3 [arg_47, arg_48, arg_49, arg_50, arg_51] =
  (EXC.function_clause unit)
erlps__unescape__5__p3 args =
  (EXC.badarity
     (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__is_partial_escape__1 :: ErlangFun
erlps__is_partial_escape__1 [(ErlangBinary bin_c_0)]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 117)))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok a_6 bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , size_7 <- ((DBI.fromInt 8))
  , (BIN.Ok b_9 bin_8) <-
      ((BIN.chop_int bin_5 size_7 1 BIN.Big BIN.Unsigned))
  , size_10 <- ((DBI.fromInt 8))
  , (BIN.Ok c_12 bin_11) <-
      ((BIN.chop_int bin_8 size_10 1 BIN.Big BIN.Unsigned))
  , (BIN.empty bin_11)
  , ((ErlangAtom "true") ==
       (H.falsifyErrors
          (\ _ ->
             let   
               lop_16 =
                 (BIF.erlang__op_greaterEq [a_6, (ErlangInt (DBI.fromInt 97))])
             in let
               lop_15 =
                 case lop_16 of
                   (ErlangAtom "false") -> (ErlangAtom "false")
                   (ErlangAtom "true") ->
                     (BIF.erlang__op_lesserEq
                        [a_6, (ErlangInt (DBI.fromInt 102))])
                   _ -> (EXC.badarg1 lop_16)
             in let
               lop_14 =
                 case lop_15 of
                   (ErlangAtom "true") -> (ErlangAtom "true")
                   (ErlangAtom "false") ->
                     let   
                       lop_22 =
                         (BIF.erlang__op_greaterEq
                            [a_6, (ErlangInt (DBI.fromInt 65))])
                     in let
                       lop_21 =
                         case lop_22 of
                           (ErlangAtom "false") -> (ErlangAtom "false")
                           (ErlangAtom "true") ->
                             (BIF.erlang__op_lesserEq
                                [a_6, (ErlangInt (DBI.fromInt 70))])
                           _ -> (EXC.badarg1 lop_22)
                     in
                       case lop_21 of
                         (ErlangAtom "true") -> (ErlangAtom "true")
                         (ErlangAtom "false") ->
                           let
                             lop_27 =
                               (BIF.erlang__op_greaterEq
                                  [a_6, (ErlangInt (DBI.fromInt 48))])
                           in
                             case lop_27 of
                               (ErlangAtom "false") -> (ErlangAtom "false")
                               (ErlangAtom "true") ->
                                 (BIF.erlang__op_lesserEq
                                    [a_6, (ErlangInt (DBI.fromInt 57))])
                               _ -> (EXC.badarg1 lop_27)
                         _ -> (EXC.badarg1 lop_21)
                   _ -> (EXC.badarg1 lop_15)
             in let
               lop_13 =
                 case lop_14 of
                   (ErlangAtom "false") -> (ErlangAtom "false")
                   (ErlangAtom "true") ->
                     let   
                       lop_33 =
                         (BIF.erlang__op_greaterEq
                            [b_9, (ErlangInt (DBI.fromInt 97))])
                     in let
                       lop_32 =
                         case lop_33 of
                           (ErlangAtom "false") -> (ErlangAtom "false")
                           (ErlangAtom "true") ->
                             (BIF.erlang__op_lesserEq
                                [b_9, (ErlangInt (DBI.fromInt 102))])
                           _ -> (EXC.badarg1 lop_33)
                     in
                       case lop_32 of
                         (ErlangAtom "true") -> (ErlangAtom "true")
                         (ErlangAtom "false") ->
                           let   
                             lop_39 =
                               (BIF.erlang__op_greaterEq
                                  [b_9, (ErlangInt (DBI.fromInt 65))])
                           in let
                             lop_38 =
                               case lop_39 of
                                 (ErlangAtom "false") -> (ErlangAtom "false")
                                 (ErlangAtom "true") ->
                                   (BIF.erlang__op_lesserEq
                                      [b_9, (ErlangInt (DBI.fromInt 70))])
                                 _ -> (EXC.badarg1 lop_39)
                           in
                             case lop_38 of
                               (ErlangAtom "true") -> (ErlangAtom "true")
                               (ErlangAtom "false") ->
                                 let
                                   lop_44 =
                                     (BIF.erlang__op_greaterEq
                                        [b_9, (ErlangInt (DBI.fromInt 48))])
                                 in
                                   case lop_44 of
                                     (ErlangAtom "false") ->
                                       (ErlangAtom "false")
                                     (ErlangAtom "true") ->
                                       (BIF.erlang__op_lesserEq
                                          [b_9, (ErlangInt (DBI.fromInt 57))])
                                     _ -> (EXC.badarg1 lop_44)
                               _ -> (EXC.badarg1 lop_38)
                         _ -> (EXC.badarg1 lop_32)
                   _ -> (EXC.badarg1 lop_14)
             in
               case lop_13 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") ->
                   let   
                     lop_50 =
                       (BIF.erlang__op_greaterEq
                          [c_12, (ErlangInt (DBI.fromInt 97))])
                   in let
                     lop_49 =
                       case lop_50 of
                         (ErlangAtom "false") -> (ErlangAtom "false")
                         (ErlangAtom "true") ->
                           (BIF.erlang__op_lesserEq
                              [c_12, (ErlangInt (DBI.fromInt 102))])
                         _ -> (EXC.badarg1 lop_50)
                   in
                     case lop_49 of
                       (ErlangAtom "true") -> (ErlangAtom "true")
                       (ErlangAtom "false") ->
                         let   
                           lop_56 =
                             (BIF.erlang__op_greaterEq
                                [c_12, (ErlangInt (DBI.fromInt 65))])
                         in let
                           lop_55 =
                             case lop_56 of
                               (ErlangAtom "false") -> (ErlangAtom "false")
                               (ErlangAtom "true") ->
                                 (BIF.erlang__op_lesserEq
                                    [c_12, (ErlangInt (DBI.fromInt 70))])
                               _ -> (EXC.badarg1 lop_56)
                         in
                           case lop_55 of
                             (ErlangAtom "true") -> (ErlangAtom "true")
                             (ErlangAtom "false") ->
                               let
                                 lop_61 =
                                   (BIF.erlang__op_greaterEq
                                      [c_12, (ErlangInt (DBI.fromInt 48))])
                               in
                                 case lop_61 of
                                   (ErlangAtom "false") -> (ErlangAtom "false")
                                   (ErlangAtom "true") ->
                                     (BIF.erlang__op_lesserEq
                                        [c_12, (ErlangInt (DBI.fromInt 57))])
                                   _ -> (EXC.badarg1 lop_61)
                             _ -> (EXC.badarg1 lop_55)
                       _ -> (EXC.badarg1 lop_49)
                 _ -> (EXC.badarg1 lop_13)))) =
  (ErlangAtom "true")
erlps__is_partial_escape__1 [(ErlangBinary bin_c_0)]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 117)))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok a_6 bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , size_7 <- ((DBI.fromInt 8))
  , (BIN.Ok b_9 bin_8) <-
      ((BIN.chop_int bin_5 size_7 1 BIN.Big BIN.Unsigned))
  , (BIN.empty bin_8)
  , ((ErlangAtom "true") ==
       (H.falsifyErrors
          (\ _ ->
             let   
               lop_12 =
                 (BIF.erlang__op_greaterEq [a_6, (ErlangInt (DBI.fromInt 97))])
             in let
               lop_11 =
                 case lop_12 of
                   (ErlangAtom "false") -> (ErlangAtom "false")
                   (ErlangAtom "true") ->
                     (BIF.erlang__op_lesserEq
                        [a_6, (ErlangInt (DBI.fromInt 102))])
                   _ -> (EXC.badarg1 lop_12)
             in let
               lop_10 =
                 case lop_11 of
                   (ErlangAtom "true") -> (ErlangAtom "true")
                   (ErlangAtom "false") ->
                     let   
                       lop_18 =
                         (BIF.erlang__op_greaterEq
                            [a_6, (ErlangInt (DBI.fromInt 65))])
                     in let
                       lop_17 =
                         case lop_18 of
                           (ErlangAtom "false") -> (ErlangAtom "false")
                           (ErlangAtom "true") ->
                             (BIF.erlang__op_lesserEq
                                [a_6, (ErlangInt (DBI.fromInt 70))])
                           _ -> (EXC.badarg1 lop_18)
                     in
                       case lop_17 of
                         (ErlangAtom "true") -> (ErlangAtom "true")
                         (ErlangAtom "false") ->
                           let
                             lop_23 =
                               (BIF.erlang__op_greaterEq
                                  [a_6, (ErlangInt (DBI.fromInt 48))])
                           in
                             case lop_23 of
                               (ErlangAtom "false") -> (ErlangAtom "false")
                               (ErlangAtom "true") ->
                                 (BIF.erlang__op_lesserEq
                                    [a_6, (ErlangInt (DBI.fromInt 57))])
                               _ -> (EXC.badarg1 lop_23)
                         _ -> (EXC.badarg1 lop_17)
                   _ -> (EXC.badarg1 lop_11)
             in
               case lop_10 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") ->
                   let   
                     lop_29 =
                       (BIF.erlang__op_greaterEq
                          [b_9, (ErlangInt (DBI.fromInt 97))])
                   in let
                     lop_28 =
                       case lop_29 of
                         (ErlangAtom "false") -> (ErlangAtom "false")
                         (ErlangAtom "true") ->
                           (BIF.erlang__op_lesserEq
                              [b_9, (ErlangInt (DBI.fromInt 102))])
                         _ -> (EXC.badarg1 lop_29)
                   in
                     case lop_28 of
                       (ErlangAtom "true") -> (ErlangAtom "true")
                       (ErlangAtom "false") ->
                         let   
                           lop_35 =
                             (BIF.erlang__op_greaterEq
                                [b_9, (ErlangInt (DBI.fromInt 65))])
                         in let
                           lop_34 =
                             case lop_35 of
                               (ErlangAtom "false") -> (ErlangAtom "false")
                               (ErlangAtom "true") ->
                                 (BIF.erlang__op_lesserEq
                                    [b_9, (ErlangInt (DBI.fromInt 70))])
                               _ -> (EXC.badarg1 lop_35)
                         in
                           case lop_34 of
                             (ErlangAtom "true") -> (ErlangAtom "true")
                             (ErlangAtom "false") ->
                               let
                                 lop_40 =
                                   (BIF.erlang__op_greaterEq
                                      [b_9, (ErlangInt (DBI.fromInt 48))])
                               in
                                 case lop_40 of
                                   (ErlangAtom "false") -> (ErlangAtom "false")
                                   (ErlangAtom "true") ->
                                     (BIF.erlang__op_lesserEq
                                        [b_9, (ErlangInt (DBI.fromInt 57))])
                                   _ -> (EXC.badarg1 lop_40)
                             _ -> (EXC.badarg1 lop_34)
                       _ -> (EXC.badarg1 lop_28)
                 _ -> (EXC.badarg1 lop_10)))) =
  (ErlangAtom "true")
erlps__is_partial_escape__1 [(ErlangBinary bin_c_0)]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 117)))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok a_6 bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , (BIN.empty bin_5)
  , ((ErlangAtom "true") ==
       (H.falsifyErrors
          (\ _ ->
             let   
               lop_8 =
                 (BIF.erlang__op_greaterEq [a_6, (ErlangInt (DBI.fromInt 97))])
             in let
               lop_7 =
                 case lop_8 of
                   (ErlangAtom "false") -> (ErlangAtom "false")
                   (ErlangAtom "true") ->
                     (BIF.erlang__op_lesserEq
                        [a_6, (ErlangInt (DBI.fromInt 102))])
                   _ -> (EXC.badarg1 lop_8)
             in
               case lop_7 of
                 (ErlangAtom "true") -> (ErlangAtom "true")
                 (ErlangAtom "false") ->
                   let   
                     lop_14 =
                       (BIF.erlang__op_greaterEq
                          [a_6, (ErlangInt (DBI.fromInt 65))])
                   in let
                     lop_13 =
                       case lop_14 of
                         (ErlangAtom "false") -> (ErlangAtom "false")
                         (ErlangAtom "true") ->
                           (BIF.erlang__op_lesserEq
                              [a_6, (ErlangInt (DBI.fromInt 70))])
                         _ -> (EXC.badarg1 lop_14)
                   in
                     case lop_13 of
                       (ErlangAtom "true") -> (ErlangAtom "true")
                       (ErlangAtom "false") ->
                         let
                           lop_19 =
                             (BIF.erlang__op_greaterEq
                                [a_6, (ErlangInt (DBI.fromInt 48))])
                         in
                           case lop_19 of
                             (ErlangAtom "false") -> (ErlangAtom "false")
                             (ErlangAtom "true") ->
                               (BIF.erlang__op_lesserEq
                                  [a_6, (ErlangInt (DBI.fromInt 57))])
                             _ -> (EXC.badarg1 lop_19)
                       _ -> (EXC.badarg1 lop_13)
                 _ -> (EXC.badarg1 lop_7)))) =
  (ErlangAtom "true")
erlps__is_partial_escape__1 [(ErlangBinary bin_c_0)]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 117)))
  , (BIN.empty bin_2) =
  (ErlangAtom "true")
erlps__is_partial_escape__1 [(ErlangBinary bin_e_0)]
  | (BIN.empty bin_e_0) =
  (ErlangAtom "true")
erlps__is_partial_escape__1 [_] = (ErlangAtom "false")
erlps__is_partial_escape__1 [arg_0] = (EXC.function_clause unit)
erlps__is_partial_escape__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__maybe_replace__2 :: ErlangFun
erlps__maybe_replace__2 [c_0,
                         (ErlangTuple [(ErlangAtom "config"),
                                       (ErlangAtom "true"), _, _, _, _, _, _, _,
                                       _, _, _, _, _, _, _])]
  =
  (ErlangBinary
     (BIN.from_int c_0 (ErlangInt (DBI.fromInt 8)) 1 BIN.Big))
erlps__maybe_replace__2 [(ErlangInt num_0),
                         (ErlangTuple [(ErlangAtom "config"), _, _,
                                       (ErlangAtom "true"), _, _, _, _, _, _, _,
                                       _, _, _, _, _])]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 8))) =
  (ErlangBinary
     (BIN.concat
        [(BIN.from_int (ErlangInt (DBI.fromInt 92))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
         (BIN.from_int (ErlangInt (DBI.fromInt 98))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big)]))
erlps__maybe_replace__2 [(ErlangInt num_0),
                         (ErlangTuple [(ErlangAtom "config"), _, _,
                                       (ErlangAtom "true"), _, _, _, _, _, _, _,
                                       _, _, _, _, _])]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 9))) =
  (ErlangBinary
     (BIN.concat
        [(BIN.from_int (ErlangInt (DBI.fromInt 92))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
         (BIN.from_int (ErlangInt (DBI.fromInt 116))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big)]))
erlps__maybe_replace__2 [(ErlangInt num_0),
                         (ErlangTuple [(ErlangAtom "config"), _, _,
                                       (ErlangAtom "true"), _, _, _, _, _, _, _,
                                       _, _, _, _, _])]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 10))) =
  (ErlangBinary
     (BIN.concat
        [(BIN.from_int (ErlangInt (DBI.fromInt 92))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
         (BIN.from_int (ErlangInt (DBI.fromInt 110))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big)]))
erlps__maybe_replace__2 [(ErlangInt num_0),
                         (ErlangTuple [(ErlangAtom "config"), _, _,
                                       (ErlangAtom "true"), _, _, _, _, _, _, _,
                                       _, _, _, _, _])]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 12))) =
  (ErlangBinary
     (BIN.concat
        [(BIN.from_int (ErlangInt (DBI.fromInt 92))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
         (BIN.from_int (ErlangInt (DBI.fromInt 102))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big)]))
erlps__maybe_replace__2 [(ErlangInt num_0),
                         (ErlangTuple [(ErlangAtom "config"), _, _,
                                       (ErlangAtom "true"), _, _, _, _, _, _, _,
                                       _, _, _, _, _])]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 13))) =
  (ErlangBinary
     (BIN.concat
        [(BIN.from_int (ErlangInt (DBI.fromInt 92))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
         (BIN.from_int (ErlangInt (DBI.fromInt 114))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big)]))
erlps__maybe_replace__2 [(ErlangInt num_0),
                         (ErlangTuple [(ErlangAtom "config"), _, _,
                                       (ErlangAtom "true"), _, _, _, _, _, _, _,
                                       _, _, _, _, _])]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 34))) =
  (ErlangBinary
     (BIN.concat
        [(BIN.from_int (ErlangInt (DBI.fromInt 92))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
         (BIN.from_int (ErlangInt (DBI.fromInt 34))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big)]))
erlps__maybe_replace__2 [(ErlangInt num_0),
                         config_1@(ErlangTuple [(ErlangAtom "config"), _, _,
                                                (ErlangAtom "true"), _, _, _, _,
                                                _, _, _, _, _, _, _, _])]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 47))) =
  let
    case_2 =
      case config_1 of
        (ErlangTuple arr_5) | (DM.Just field_4) <- ((arr_5 DA.!! 2)) ->
          field_4
        _ -> (EXC.badrecord (ErlangAtom "config"))
  in
    case case_2 of
      (ErlangAtom "true") ->
        (ErlangBinary
           (BIN.concat
              [(BIN.from_int (ErlangInt (DBI.fromInt 92))
                  (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
               (BIN.from_int (ErlangInt (DBI.fromInt 47))
                  (ErlangInt (DBI.fromInt 8)) 1 BIN.Big)]))
      (ErlangAtom "false") ->
        (ErlangBinary
           (BIN.from_int (ErlangInt (DBI.fromInt 47))
              (ErlangInt (DBI.fromInt 8)) 1 BIN.Big))
      something_else -> (EXC.case_clause something_else)
erlps__maybe_replace__2 [(ErlangInt num_0),
                         (ErlangTuple [(ErlangAtom "config"), _, _,
                                       (ErlangAtom "true"), _, _, _, _, _, _, _,
                                       _, _, _, _, _])]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 92))) =
  (ErlangBinary
     (BIN.concat
        [(BIN.from_int (ErlangInt (DBI.fromInt 92))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
         (BIN.from_int (ErlangInt (DBI.fromInt 92))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big)]))
erlps__maybe_replace__2 [x_0,
                         config_1@(ErlangTuple [(ErlangAtom "config"), _, _,
                                                (ErlangAtom "true"), _, _, _, _,
                                                _, _, _, _, _, _, _, _])]
  | ((ErlangAtom "true") ==
       (H.falsifyErrors
          (\ _ ->
             let
               lop_8 = (BIF.erlang__op_eq [x_0, (ErlangInt (DBI.fromInt 8232))])
             in
               case lop_8 of
                 (ErlangAtom "true") -> (ErlangAtom "true")
                 (ErlangAtom "false") ->
                   (BIF.erlang__op_eq [x_0, (ErlangInt (DBI.fromInt 8233))])
                 _ -> (EXC.badarg1 lop_8)))) =
  let
    case_2 =
      case config_1 of
        (ErlangTuple arr_5) | (DM.Just field_4) <- ((arr_5 DA.!! 13)) ->
          field_4
        _ -> (EXC.badrecord (ErlangAtom "config"))
  in
    case case_2 of
      (ErlangAtom "true") ->
        (ErlangBinary
           (BIN.from_int x_0 (ErlangInt (DBI.fromInt 8)) 1 BIN.Big))
      (ErlangAtom "false") -> (erlps__json_escape_sequence__1 [x_0])
      something_else -> (EXC.case_clause something_else)
erlps__maybe_replace__2 [x_0,
                         (ErlangTuple [(ErlangAtom "config"), _, _,
                                       (ErlangAtom "true"), _, _, _, _, _, _, _,
                                       _, _, _, _, _])]
  | (weakLt x_0 (ErlangInt (DBI.fromInt 32))) =
  (erlps__json_escape_sequence__1 [x_0])
erlps__maybe_replace__2 [x_0, _config_1] =
  (ErlangBinary
     (BIN.from_int x_0 (ErlangInt (DBI.fromInt 8)) 1 BIN.Big))
erlps__maybe_replace__2 [arg_3, arg_4] =
  (EXC.function_clause unit)
erlps__maybe_replace__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__json_escape_sequence__1 :: ErlangFun
erlps__json_escape_sequence__1 [x_0]
  | (weakLt x_0 (ErlangInt (DBI.fromInt 65536))) =
  let
    match_expr_15 =
      (ErlangBinary
         (BIN.from_int x_0 (ErlangInt (DBI.fromInt 16)) 1 BIN.Big))
  in
    case match_expr_15 of
      (ErlangBinary bin_c_2) | size_3 <- ((DBI.fromInt 4))
                             , (BIN.Ok a_5 bin_4) <-
                                 ((BIN.chop_int bin_c_2 size_3 1 BIN.Big
                                     BIN.Unsigned))
                             , size_6 <- ((DBI.fromInt 4))
                             , (BIN.Ok b_8 bin_7) <-
                                 ((BIN.chop_int bin_4 size_6 1 BIN.Big
                                     BIN.Unsigned))
                             , size_9 <- ((DBI.fromInt 4))
                             , (BIN.Ok c_11 bin_10) <-
                                 ((BIN.chop_int bin_7 size_9 1 BIN.Big
                                     BIN.Unsigned))
                             , size_12 <- ((DBI.fromInt 4))
                             , (BIN.Ok d_14 bin_13) <-
                                 ((BIN.chop_int bin_10 size_12 1 BIN.Big
                                     BIN.Unsigned))
                             , (BIN.empty bin_13) ->
        let    bin_el_18 = (erlps__to_hex__1 [a_5])
        in let bin_el_20 = (erlps__to_hex__1 [b_8])
        in let bin_el_22 = (erlps__to_hex__1 [c_11])
        in let bin_el_24 = (erlps__to_hex__1 [d_14])
        in
          (ErlangBinary
             (BIN.concat
                [(BIN.from_int (ErlangInt (DBI.fromInt 92))
                    (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
                 (BIN.from_int (ErlangInt (DBI.fromInt 117))
                    (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
                 (BIN.from_int bin_el_18 (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
                 (BIN.from_int bin_el_20 (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
                 (BIN.from_int bin_el_22 (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
                 (BIN.from_int bin_el_24 (ErlangInt (DBI.fromInt 8)) 1
                    BIN.Big)]))
      _ -> (EXC.badmatch match_expr_15)
erlps__json_escape_sequence__1 [x_0] =
  let   
    adjusted_3 =
      (BIF.erlang__op_minus [x_0, (ErlangInt (DBI.fromInt 65536))])
  in let
    match_expr_12 =
      (ErlangBinary
         (BIN.from_int adjusted_3 (ErlangInt (DBI.fromInt 20)) 1 BIN.Big))
  in
    case match_expr_12 of
      (ErlangBinary bin_c_5) | size_6 <- ((DBI.fromInt 10))
                             , (BIN.Ok a_8 bin_7) <-
                                 ((BIN.chop_int bin_c_5 size_6 1 BIN.Big
                                     BIN.Unsigned))
                             , size_9 <- ((DBI.fromInt 10))
                             , (BIN.Ok b_11 bin_10) <-
                                 ((BIN.chop_int bin_7 size_9 1 BIN.Big
                                     BIN.Unsigned))
                             , (BIN.empty bin_10) ->
        let   
          arg_14 =
            (BIF.erlang__op_plus [a_8, (ErlangInt (DBI.fromInt 55296))])
        in let head_13 = (erlps__json_escape_sequence__1 [arg_14])
        in let
          arg_19 =
            (BIF.erlang__op_plus [b_11, (ErlangInt (DBI.fromInt 56320))])
        in let head_18 = (erlps__json_escape_sequence__1 [arg_19])
        in (ErlangCons head_13 (ErlangCons head_18 ErlangEmptyList))
      _ -> (EXC.badmatch match_expr_12)
erlps__json_escape_sequence__1 [arg_23] =
  (EXC.function_clause unit)
erlps__json_escape_sequence__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__to_hex__1 :: ErlangFun
erlps__to_hex__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 10))) =
  (ErlangInt (DBI.fromInt 97))
erlps__to_hex__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 11))) =
  (ErlangInt (DBI.fromInt 98))
erlps__to_hex__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 12))) =
  (ErlangInt (DBI.fromInt 99))
erlps__to_hex__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 13))) =
  (ErlangInt (DBI.fromInt 100))
erlps__to_hex__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 14))) =
  (ErlangInt (DBI.fromInt 101))
erlps__to_hex__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 15))) =
  (ErlangInt (DBI.fromInt 102))
erlps__to_hex__1 [x_0] =
  (BIF.erlang__op_plus [x_0, (ErlangInt (DBI.fromInt 48))])
erlps__to_hex__1 [arg_3] = (EXC.function_clause unit)
erlps__to_hex__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__number__5 :: ErlangFun
erlps__number__5 [(ErlangBinary bin_c_0), handler_7, acc_8,
                  (ErlangCons (ErlangAtom "integer") stack_9), config_10]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 101)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  (erlps__number__5
     [rest_6, handler_7,
      (ErlangCons acc_8
         (ErlangCons (ErlangInt (DBI.fromInt 46))
            (ErlangCons (ErlangInt (DBI.fromInt 48))
               (ErlangCons (ErlangInt (DBI.fromInt 101)) ErlangEmptyList)))),
      (ErlangCons (ErlangAtom "e") stack_9), config_10])
erlps__number__5 [(ErlangBinary bin_c_0), handler_7, acc_8,
                  (ErlangCons (ErlangAtom "integer") stack_9), config_10]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 69)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  (erlps__number__5
     [rest_6, handler_7,
      (ErlangCons acc_8
         (ErlangCons (ErlangInt (DBI.fromInt 46))
            (ErlangCons (ErlangInt (DBI.fromInt 48))
               (ErlangCons (ErlangInt (DBI.fromInt 101)) ErlangEmptyList)))),
      (ErlangCons (ErlangAtom "e") stack_9), config_10])
erlps__number__5 [(ErlangBinary bin_c_0), handler_7, acc_8,
                  (ErlangCons (ErlangAtom "zero") stack_9), config_10]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 101)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  (erlps__number__5
     [rest_6, handler_7,
      (ErlangCons acc_8
         (ErlangCons (ErlangInt (DBI.fromInt 46))
            (ErlangCons (ErlangInt (DBI.fromInt 48))
               (ErlangCons (ErlangInt (DBI.fromInt 101)) ErlangEmptyList)))),
      (ErlangCons (ErlangAtom "e") stack_9), config_10])
erlps__number__5 [(ErlangBinary bin_c_0), handler_7, acc_8,
                  (ErlangCons (ErlangAtom "zero") stack_9), config_10]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 69)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  (erlps__number__5
     [rest_6, handler_7,
      (ErlangCons acc_8
         (ErlangCons (ErlangInt (DBI.fromInt 46))
            (ErlangCons (ErlangInt (DBI.fromInt 48))
               (ErlangCons (ErlangInt (DBI.fromInt 101)) ErlangEmptyList)))),
      (ErlangCons (ErlangAtom "e") stack_9), config_10])
erlps__number__5 [(ErlangBinary bin_e_0), handler_1, acc_2,
                  (ErlangCons state_3 stack_4),
                  config_5@(ErlangTuple [(ErlangAtom "config"), _, _, _, _, _,
                                         _, _, _, _, (ErlangAtom "false"), _, _,
                                         _, _, _])]
  | (BIN.empty bin_e_0) =
  let   
    numtype_7 =
      case state_3 of
        (ErlangAtom "zero") -> (ErlangAtom "integer")
        (ErlangAtom "integer") -> (ErlangAtom "integer")
        (ErlangAtom "decimal") -> (ErlangAtom "float")
        (ErlangAtom "exp") -> (ErlangAtom "float")
        something_else -> (EXC.case_clause something_else)
  in let arg_8 = (ErlangBinary (BIN.concat []))
  in let tup_el_12 = (BIF.erlang__iolist_to_binary__1 [acc_2])
  in let arg_10 = (ErlangTuple [numtype_7, tup_el_12])
  in
    (erlps__finish_number__5
       [arg_8, handler_1, arg_10, stack_4, config_5])
erlps__number__5 [(ErlangBinary bin_e_0), handler_1, acc_2,
                  stack_3, config_4]
  | (BIN.empty bin_e_0) =
  let arg_6 = (ErlangBinary (BIN.concat []))
  in
    (erlps__incomplete__6
       [(ErlangAtom "number"), arg_6, handler_1, acc_2, stack_3,
        config_4])
erlps__number__5 [bin_0, handler_1, acc_2,
                  (ErlangCons state_3 stack_4), config_5]
  =
  let
    counted_23 =
      case state_3 of
        (ErlangAtom "zero") ->
          (erlps__zero__2 [bin_0, (ErlangInt (DBI.fromInt 0))])
        (ErlangAtom "integer") ->
          (erlps__integer__2 [bin_0, (ErlangInt (DBI.fromInt 0))])
        (ErlangAtom "negative") ->
          (erlps__negative__2 [bin_0, (ErlangInt (DBI.fromInt 0))])
        (ErlangAtom "initialdecimal") ->
          (erlps__initialdecimal__2 [bin_0, (ErlangInt (DBI.fromInt 0))])
        (ErlangAtom "decimal") ->
          (erlps__decimal__2 [bin_0, (ErlangInt (DBI.fromInt 0))])
        (ErlangAtom "e") ->
          (erlps__e__2 [bin_0, (ErlangInt (DBI.fromInt 0))])
        (ErlangAtom "ex") ->
          (erlps__ex__2 [bin_0, (ErlangInt (DBI.fromInt 0))])
        (ErlangAtom "exp") ->
          (erlps__exp__2 [bin_0, (ErlangInt (DBI.fromInt 0))])
        something_else -> (EXC.case_clause something_else)
  in
    case counted_23 of
      (ErlangTuple [(ErlangAtom "finish_integer"), size_25]) ->
        case bin_0 of
          (ErlangBinary bin_c_26) | (ErlangInt size_27) <- (size_25)
                                  , (BIN.Ok clean_29 bin_28) <-
                                      ((BIN.chop_bin bin_c_26 size_27 8))
                                  , (ErlangInt size_30) <- ((BIN.size bin_28))
                                  , (BIN.Ok rest_32 bin_31) <-
                                      ((BIN.chop_bin bin_28 size_30 8))
                                  , (BIN.empty bin_31) ->
            let   
              tup_el_38 =
                (BIF.erlang__iolist_to_binary__1
                   [(ErlangCons acc_2 (ErlangCons clean_29 ErlangEmptyList))])
            in let arg_36 = (ErlangTuple [(ErlangAtom "integer"), tup_el_38])
            in
              (erlps__finish_number__5
                 [rest_32, handler_1, arg_36, stack_4, config_5])
          _ -> (EXC.badmatch bin_0)
      (ErlangTuple [(ErlangAtom "finish_float"), size_46]) ->
        case bin_0 of
          (ErlangBinary bin_c_47) | (ErlangInt size_48) <- (size_46)
                                  , (BIN.Ok clean_50 bin_49) <-
                                      ((BIN.chop_bin bin_c_47 size_48 8))
                                  , (ErlangInt size_51) <- ((BIN.size bin_49))
                                  , (BIN.Ok rest_53 bin_52) <-
                                      ((BIN.chop_bin bin_49 size_51 8))
                                  , (BIN.empty bin_52) ->
            let   
              tup_el_59 =
                (BIF.erlang__iolist_to_binary__1
                   [(ErlangCons acc_2 (ErlangCons clean_50 ErlangEmptyList))])
            in let arg_57 = (ErlangTuple [(ErlangAtom "float"), tup_el_59])
            in
              (erlps__finish_number__5
                 [rest_53, handler_1, arg_57, stack_4, config_5])
          _ -> (EXC.badmatch bin_0)
      (ErlangTuple [(ErlangAtom "error"), size_67]) ->
        case bin_0 of
          (ErlangBinary bin_c_68) | (ErlangInt size_69) <- (size_67)
                                  , (BIN.Ok clean_71 bin_70) <-
                                      ((BIN.chop_bin bin_c_68 size_69 8))
                                  , (ErlangInt size_72) <- ((BIN.size bin_70))
                                  , (BIN.Ok rest_74 bin_73) <-
                                      ((BIN.chop_bin bin_70 size_72 8))
                                  , (BIN.empty bin_73) ->
            let
              case_76 =
                case config_5 of
                  (ErlangTuple arr_79) | (DM.Just field_78) <-
                                           ((arr_79 DA.!! 14)) ->
                    field_78
                  _ -> (EXC.badrecord (ErlangAtom "config"))
            in
              case case_76 of
                (ErlangAtom "false") ->
                  (BIF.erlang__error__1 [(ErlangAtom "badarg")])
                f_81 ->
                  let   
                    arg_83 =
                      (ErlangTuple
                         [(ErlangAtom "decoder"), (ErlangAtom "number"),
                          handler_1,
                          (ErlangCons acc_2
                             (ErlangCons clean_71 ErlangEmptyList)),
                          stack_4])
                  in let
                    arg_93 =
                      (BIF.do_remote_fun_call "Jsx.Config"
                         "erlps__config_to_list__1" [config_5])
                  in
                    (BIF.erlang__apply__2
                       [f_81,
                        (ErlangCons rest_74
                           (ErlangCons arg_83
                              (ErlangCons arg_93 ErlangEmptyList)))])
          _ -> (EXC.badmatch bin_0)
      (ErlangTuple [newstate_96, size_97]) ->
        case bin_0 of
          (ErlangBinary bin_c_98) | (ErlangInt size_99) <- (size_97)
                                  , (BIN.Ok clean_101 bin_100) <-
                                      ((BIN.chop_bin bin_c_98 size_99 8))
                                  , (ErlangInt size_102) <- ((BIN.size bin_100))
                                  , (BIN.Ok rest_104 bin_103) <-
                                      ((BIN.chop_bin bin_100 size_102 8))
                                  , (BIN.empty bin_103) ->
            (erlps__number__5
               [rest_104, handler_1,
                (ErlangCons acc_2 (ErlangCons clean_101 ErlangEmptyList)),
                (ErlangCons newstate_96 stack_4), config_5])
          _ -> (EXC.badmatch bin_0)
      something_else -> (EXC.case_clause something_else)
erlps__number__5 [arg_117, arg_118, arg_119, arg_120, arg_121] =
  (EXC.function_clause unit)
erlps__number__5 args =
  (EXC.badarity
     (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__zero__2 :: ErlangFun
erlps__zero__2 [(ErlangBinary bin_c_0), n_7]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 46)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_9 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__initialdecimal__2 [rest_6, arg_9])
erlps__zero__2 [(ErlangBinary bin_c_0), n_4]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 101))) =
  (ErlangTuple [(ErlangAtom "integer"), n_4])
erlps__zero__2 [(ErlangBinary bin_c_0), n_4]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 69))) =
  (ErlangTuple [(ErlangAtom "integer"), n_4])
erlps__zero__2 [(ErlangBinary bin_e_0), n_1]
  | (BIN.empty bin_e_0) =
  (ErlangTuple [(ErlangAtom "zero"), n_1])
erlps__zero__2 [_, n_0] =
  (ErlangTuple [(ErlangAtom "finish_integer"), n_0])
erlps__zero__2 [arg_3, arg_4] = (EXC.function_clause unit)
erlps__zero__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__integer__2 :: ErlangFun
erlps__integer__2 [(ErlangBinary bin_c_0), n_7]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 48)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_9 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__integer__2 [rest_6, arg_9])
erlps__integer__2 [(ErlangBinary bin_c_0), n_7]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 49)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_9 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__integer__2 [rest_6, arg_9])
erlps__integer__2 [(ErlangBinary bin_c_0), n_7]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 50)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_9 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__integer__2 [rest_6, arg_9])
erlps__integer__2 [(ErlangBinary bin_c_0), n_7]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 51)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_9 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__integer__2 [rest_6, arg_9])
erlps__integer__2 [(ErlangBinary bin_c_0), n_7]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 52)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_9 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__integer__2 [rest_6, arg_9])
erlps__integer__2 [(ErlangBinary bin_c_0), n_7]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 53)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_9 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__integer__2 [rest_6, arg_9])
erlps__integer__2 [(ErlangBinary bin_c_0), n_7]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 54)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_9 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__integer__2 [rest_6, arg_9])
erlps__integer__2 [(ErlangBinary bin_c_0), n_7]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 55)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_9 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__integer__2 [rest_6, arg_9])
erlps__integer__2 [(ErlangBinary bin_c_0), n_7]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 56)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_9 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__integer__2 [rest_6, arg_9])
erlps__integer__2 [(ErlangBinary bin_c_0), n_7]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 57)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_9 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__integer__2 [rest_6, arg_9])
erlps__integer__2 [(ErlangBinary bin_c_0), n_7]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 46)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_9 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__initialdecimal__2 [rest_6, arg_9])
erlps__integer__2 [(ErlangBinary bin_c_0), n_4]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 101))) =
  (ErlangTuple [(ErlangAtom "integer"), n_4])
erlps__integer__2 [(ErlangBinary bin_c_0), n_4]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 69))) =
  (ErlangTuple [(ErlangAtom "integer"), n_4])
erlps__integer__2 [(ErlangBinary bin_e_0), n_1]
  | (BIN.empty bin_e_0) =
  (ErlangTuple [(ErlangAtom "integer"), n_1])
erlps__integer__2 [_, n_0] =
  (ErlangTuple [(ErlangAtom "finish_integer"), n_0])
erlps__integer__2 [arg_3, arg_4] = (EXC.function_clause unit)
erlps__integer__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__negative__2 :: ErlangFun
erlps__negative__2 [(ErlangBinary bin_c_0), n_7]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 48)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_9 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__zero__2 [rest_6, arg_9])
erlps__negative__2 [(ErlangBinary bin_c_0), n_7]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 49)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_9 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__integer__2 [rest_6, arg_9])
erlps__negative__2 [(ErlangBinary bin_c_0), n_7]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 50)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_9 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__integer__2 [rest_6, arg_9])
erlps__negative__2 [(ErlangBinary bin_c_0), n_7]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 51)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_9 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__integer__2 [rest_6, arg_9])
erlps__negative__2 [(ErlangBinary bin_c_0), n_7]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 52)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_9 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__integer__2 [rest_6, arg_9])
erlps__negative__2 [(ErlangBinary bin_c_0), n_7]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 53)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_9 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__integer__2 [rest_6, arg_9])
erlps__negative__2 [(ErlangBinary bin_c_0), n_7]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 54)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_9 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__integer__2 [rest_6, arg_9])
erlps__negative__2 [(ErlangBinary bin_c_0), n_7]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 55)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_9 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__integer__2 [rest_6, arg_9])
erlps__negative__2 [(ErlangBinary bin_c_0), n_7]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 56)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_9 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__integer__2 [rest_6, arg_9])
erlps__negative__2 [(ErlangBinary bin_c_0), n_7]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 57)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_9 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__integer__2 [rest_6, arg_9])
erlps__negative__2 [(ErlangBinary bin_e_0), n_1]
  | (BIN.empty bin_e_0) =
  (ErlangTuple [(ErlangAtom "negative"), n_1])
erlps__negative__2 [_, n_0] =
  (ErlangTuple [(ErlangAtom "error"), n_0])
erlps__negative__2 [arg_3, arg_4] = (EXC.function_clause unit)
erlps__negative__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__initialdecimal__2 :: ErlangFun
erlps__initialdecimal__2 [(ErlangBinary bin_c_0), n_7]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 48)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_9 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__decimal__2 [rest_6, arg_9])
erlps__initialdecimal__2 [(ErlangBinary bin_c_0), n_7]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 49)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_9 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__decimal__2 [rest_6, arg_9])
erlps__initialdecimal__2 [(ErlangBinary bin_c_0), n_7]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 50)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_9 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__decimal__2 [rest_6, arg_9])
erlps__initialdecimal__2 [(ErlangBinary bin_c_0), n_7]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 51)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_9 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__decimal__2 [rest_6, arg_9])
erlps__initialdecimal__2 [(ErlangBinary bin_c_0), n_7]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 52)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_9 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__decimal__2 [rest_6, arg_9])
erlps__initialdecimal__2 [(ErlangBinary bin_c_0), n_7]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 53)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_9 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__decimal__2 [rest_6, arg_9])
erlps__initialdecimal__2 [(ErlangBinary bin_c_0), n_7]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 54)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_9 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__decimal__2 [rest_6, arg_9])
erlps__initialdecimal__2 [(ErlangBinary bin_c_0), n_7]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 55)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_9 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__decimal__2 [rest_6, arg_9])
erlps__initialdecimal__2 [(ErlangBinary bin_c_0), n_7]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 56)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_9 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__decimal__2 [rest_6, arg_9])
erlps__initialdecimal__2 [(ErlangBinary bin_c_0), n_7]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 57)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_9 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__decimal__2 [rest_6, arg_9])
erlps__initialdecimal__2 [(ErlangBinary bin_e_0), n_1]
  | (BIN.empty bin_e_0) =
  (ErlangTuple [(ErlangAtom "initialdecimal"), n_1])
erlps__initialdecimal__2 [_, n_0] =
  (ErlangTuple [(ErlangAtom "error"), n_0])
erlps__initialdecimal__2 [arg_3, arg_4] =
  (EXC.function_clause unit)
erlps__initialdecimal__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__decimal__2 :: ErlangFun
erlps__decimal__2 [(ErlangBinary bin_c_0), n_7]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 48)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_9 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__decimal__2 [rest_6, arg_9])
erlps__decimal__2 [(ErlangBinary bin_c_0), n_7]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 49)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_9 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__decimal__2 [rest_6, arg_9])
erlps__decimal__2 [(ErlangBinary bin_c_0), n_7]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 50)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_9 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__decimal__2 [rest_6, arg_9])
erlps__decimal__2 [(ErlangBinary bin_c_0), n_7]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 51)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_9 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__decimal__2 [rest_6, arg_9])
erlps__decimal__2 [(ErlangBinary bin_c_0), n_7]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 52)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_9 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__decimal__2 [rest_6, arg_9])
erlps__decimal__2 [(ErlangBinary bin_c_0), n_7]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 53)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_9 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__decimal__2 [rest_6, arg_9])
erlps__decimal__2 [(ErlangBinary bin_c_0), n_7]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 54)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_9 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__decimal__2 [rest_6, arg_9])
erlps__decimal__2 [(ErlangBinary bin_c_0), n_7]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 55)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_9 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__decimal__2 [rest_6, arg_9])
erlps__decimal__2 [(ErlangBinary bin_c_0), n_7]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 56)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_9 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__decimal__2 [rest_6, arg_9])
erlps__decimal__2 [(ErlangBinary bin_c_0), n_7]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 57)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_9 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__decimal__2 [rest_6, arg_9])
erlps__decimal__2 [(ErlangBinary bin_c_0), n_7]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 101)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_9 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__e__2 [rest_6, arg_9])
erlps__decimal__2 [(ErlangBinary bin_c_0), n_7]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 69)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_9 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__e__2 [rest_6, arg_9])
erlps__decimal__2 [(ErlangBinary bin_e_0), n_1]
  | (BIN.empty bin_e_0) =
  (ErlangTuple [(ErlangAtom "decimal"), n_1])
erlps__decimal__2 [_, n_0] =
  (ErlangTuple [(ErlangAtom "finish_float"), n_0])
erlps__decimal__2 [arg_3, arg_4] = (EXC.function_clause unit)
erlps__decimal__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__e__2 :: ErlangFun
erlps__e__2 [(ErlangBinary bin_c_0), n_7]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 48)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_9 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__exp__2 [rest_6, arg_9])
erlps__e__2 [(ErlangBinary bin_c_0), n_7]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 49)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_9 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__exp__2 [rest_6, arg_9])
erlps__e__2 [(ErlangBinary bin_c_0), n_7]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 50)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_9 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__exp__2 [rest_6, arg_9])
erlps__e__2 [(ErlangBinary bin_c_0), n_7]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 51)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_9 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__exp__2 [rest_6, arg_9])
erlps__e__2 [(ErlangBinary bin_c_0), n_7]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 52)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_9 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__exp__2 [rest_6, arg_9])
erlps__e__2 [(ErlangBinary bin_c_0), n_7]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 53)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_9 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__exp__2 [rest_6, arg_9])
erlps__e__2 [(ErlangBinary bin_c_0), n_7]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 54)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_9 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__exp__2 [rest_6, arg_9])
erlps__e__2 [(ErlangBinary bin_c_0), n_7]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 55)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_9 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__exp__2 [rest_6, arg_9])
erlps__e__2 [(ErlangBinary bin_c_0), n_7]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 56)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_9 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__exp__2 [rest_6, arg_9])
erlps__e__2 [(ErlangBinary bin_c_0), n_7]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 57)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_9 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__exp__2 [rest_6, arg_9])
erlps__e__2 [(ErlangBinary bin_c_0), n_7]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 43)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_9 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__ex__2 [rest_6, arg_9])
erlps__e__2 [(ErlangBinary bin_c_0), n_7]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 45)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_9 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__ex__2 [rest_6, arg_9])
erlps__e__2 [(ErlangBinary bin_e_0), n_1] | (BIN.empty bin_e_0) =
  (ErlangTuple [(ErlangAtom "e"), n_1])
erlps__e__2 [_, n_0] = (ErlangTuple [(ErlangAtom "error"), n_0])
erlps__e__2 [arg_3, arg_4] = (EXC.function_clause unit)
erlps__e__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__ex__2 :: ErlangFun
erlps__ex__2 [(ErlangBinary bin_c_0), n_7]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 48)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_9 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__exp__2 [rest_6, arg_9])
erlps__ex__2 [(ErlangBinary bin_c_0), n_7]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 49)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_9 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__exp__2 [rest_6, arg_9])
erlps__ex__2 [(ErlangBinary bin_c_0), n_7]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 50)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_9 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__exp__2 [rest_6, arg_9])
erlps__ex__2 [(ErlangBinary bin_c_0), n_7]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 51)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_9 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__exp__2 [rest_6, arg_9])
erlps__ex__2 [(ErlangBinary bin_c_0), n_7]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 52)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_9 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__exp__2 [rest_6, arg_9])
erlps__ex__2 [(ErlangBinary bin_c_0), n_7]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 53)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_9 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__exp__2 [rest_6, arg_9])
erlps__ex__2 [(ErlangBinary bin_c_0), n_7]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 54)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_9 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__exp__2 [rest_6, arg_9])
erlps__ex__2 [(ErlangBinary bin_c_0), n_7]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 55)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_9 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__exp__2 [rest_6, arg_9])
erlps__ex__2 [(ErlangBinary bin_c_0), n_7]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 56)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_9 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__exp__2 [rest_6, arg_9])
erlps__ex__2 [(ErlangBinary bin_c_0), n_7]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 57)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_9 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__exp__2 [rest_6, arg_9])
erlps__ex__2 [(ErlangBinary bin_e_0), n_1]
  | (BIN.empty bin_e_0) =
  (ErlangTuple [(ErlangAtom "ex"), n_1])
erlps__ex__2 [_, n_0] = (ErlangTuple [(ErlangAtom "error"), n_0])
erlps__ex__2 [arg_3, arg_4] = (EXC.function_clause unit)
erlps__ex__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__exp__2 :: ErlangFun
erlps__exp__2 [(ErlangBinary bin_c_0), n_7]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 48)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_9 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__exp__2 [rest_6, arg_9])
erlps__exp__2 [(ErlangBinary bin_c_0), n_7]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 49)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_9 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__exp__2 [rest_6, arg_9])
erlps__exp__2 [(ErlangBinary bin_c_0), n_7]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 50)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_9 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__exp__2 [rest_6, arg_9])
erlps__exp__2 [(ErlangBinary bin_c_0), n_7]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 51)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_9 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__exp__2 [rest_6, arg_9])
erlps__exp__2 [(ErlangBinary bin_c_0), n_7]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 52)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_9 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__exp__2 [rest_6, arg_9])
erlps__exp__2 [(ErlangBinary bin_c_0), n_7]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 53)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_9 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__exp__2 [rest_6, arg_9])
erlps__exp__2 [(ErlangBinary bin_c_0), n_7]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 54)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_9 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__exp__2 [rest_6, arg_9])
erlps__exp__2 [(ErlangBinary bin_c_0), n_7]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 55)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_9 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__exp__2 [rest_6, arg_9])
erlps__exp__2 [(ErlangBinary bin_c_0), n_7]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 56)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_9 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__exp__2 [rest_6, arg_9])
erlps__exp__2 [(ErlangBinary bin_c_0), n_7]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 57)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_9 = (BIF.erlang__op_plus [n_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__exp__2 [rest_6, arg_9])
erlps__exp__2 [(ErlangBinary bin_e_0), n_1]
  | (BIN.empty bin_e_0) =
  (ErlangTuple [(ErlangAtom "exp"), n_1])
erlps__exp__2 [_, n_0] =
  (ErlangTuple [(ErlangAtom "finish_float"), n_0])
erlps__exp__2 [arg_3, arg_4] = (EXC.function_clause unit)
erlps__exp__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__finish_number__5 :: ErlangFun
erlps__finish_number__5 [rest_0, handler_1, acc_2, stack_3,
                         config_4]
  =
  let    arg_7 = (erlps__format_number__1 [acc_2])
  in let
    arg_6 = (erlps__handle_event__3 [arg_7, handler_1, config_4])
  in (erlps__maybe_done__4 [rest_0, arg_6, stack_3, config_4])
erlps__finish_number__5 [arg_13, arg_14, arg_15, arg_16, arg_17]
  =
  (EXC.function_clause unit)
erlps__finish_number__5 args =
  (EXC.badarity
     (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__format_number__1 :: ErlangFun
erlps__format_number__1 [(ErlangTuple [(ErlangAtom "integer"),
                                       acc_0])]
  =
  let tup_el_2 = (BIF.erlang__binary_to_integer__1 [acc_0])
  in (ErlangTuple [(ErlangAtom "integer"), tup_el_2])
erlps__format_number__1 [(ErlangTuple [(ErlangAtom "float"),
                                       acc_0])]
  =
  let tup_el_2 = (BIF.erlang__binary_to_float__1 [acc_0])
  in (ErlangTuple [(ErlangAtom "float"), tup_el_2])
erlps__format_number__1 [arg_4] = (EXC.function_clause unit)
erlps__format_number__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__true__4 :: ErlangFun
erlps__true__4 [(ErlangBinary bin_c_0), handler_13, stack_14,
                config_15]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 114)))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_6) == (ErlangInt (DBI.fromInt 117)))
  , size_7 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_9) bin_8) <-
      ((BIN.chop_int bin_5 size_7 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_9) == (ErlangInt (DBI.fromInt 101)))
  , (ErlangInt size_10) <- ((BIN.size bin_8))
  , (BIN.Ok rest_12 bin_11) <- ((BIN.chop_bin bin_8 size_10 8))
  , (BIN.empty bin_11) =
  let   
    arg_18 =
      (ErlangTuple [(ErlangAtom "literal"), (ErlangAtom "true")])
  in let
    arg_17 = (erlps__handle_event__3 [arg_18, handler_13, config_15])
  in (erlps__maybe_done__4 [rest_12, arg_17, stack_14, config_15])
erlps__true__4 [(ErlangBinary bin_c_0), handler_7, stack_8,
                config_9]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 114)))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_6) == (ErlangInt (DBI.fromInt 117)))
  , (BIN.empty bin_5) =
  let
    arg_11 =
      (ErlangBinary
         (BIN.concat
            [(BIN.from_int (ErlangInt (DBI.fromInt 114))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 117))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big)]))
  in
    (erlps__incomplete__5
       [(ErlangAtom "true"), arg_11, handler_7, stack_8, config_9])
erlps__true__4 [(ErlangBinary bin_c_0), handler_4, stack_5,
                config_6]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 114)))
  , (BIN.empty bin_2) =
  let
    arg_8 =
      (ErlangBinary
         (BIN.from_int (ErlangInt (DBI.fromInt 114))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big))
  in
    (erlps__incomplete__5
       [(ErlangAtom "true"), arg_8, handler_4, stack_5, config_6])
erlps__true__4 [(ErlangBinary bin_e_0), handler_1, stack_2,
                config_3]
  | (BIN.empty bin_e_0) =
  let arg_5 = (ErlangBinary (BIN.concat []))
  in
    (erlps__incomplete__5
       [(ErlangAtom "true"), arg_5, handler_1, stack_2, config_3])
erlps__true__4 [bin_0, handler_1, stack_2, config_3] =
  let
    case_4 =
      case config_3 of
        (ErlangTuple arr_7) | (DM.Just field_6) <- ((arr_7 DA.!! 14)) ->
          field_6
        _ -> (EXC.badrecord (ErlangAtom "config"))
  in
    case case_4 of
      (ErlangAtom "false") ->
        (BIF.erlang__error__1 [(ErlangAtom "badarg")])
      f_9 ->
        let   
          arg_11 =
            (ErlangTuple
               [(ErlangAtom "decoder"), (ErlangAtom "true"), handler_1,
                (ErlangAtom "null"), stack_2])
        in let
          arg_17 =
            (BIF.do_remote_fun_call "Jsx.Config" "erlps__config_to_list__1"
               [config_3])
        in
          (BIF.erlang__apply__2
             [f_9,
              (ErlangCons bin_0
                 (ErlangCons arg_11 (ErlangCons arg_17 ErlangEmptyList)))])
erlps__true__4 [arg_20, arg_21, arg_22, arg_23] =
  (EXC.function_clause unit)
erlps__true__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__false__4 :: ErlangFun
erlps__false__4 [(ErlangBinary bin_c_0), handler_16, stack_17,
                 config_18]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 97)))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_6) == (ErlangInt (DBI.fromInt 108)))
  , size_7 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_9) bin_8) <-
      ((BIN.chop_int bin_5 size_7 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_9) == (ErlangInt (DBI.fromInt 115)))
  , size_10 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_12) bin_11) <-
      ((BIN.chop_int bin_8 size_10 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_12) == (ErlangInt (DBI.fromInt 101)))
  , (ErlangInt size_13) <- ((BIN.size bin_11))
  , (BIN.Ok rest_15 bin_14) <- ((BIN.chop_bin bin_11 size_13 8))
  , (BIN.empty bin_14) =
  let   
    arg_21 =
      (ErlangTuple [(ErlangAtom "literal"), (ErlangAtom "false")])
  in let
    arg_20 = (erlps__handle_event__3 [arg_21, handler_16, config_18])
  in (erlps__maybe_done__4 [rest_15, arg_20, stack_17, config_18])
erlps__false__4 [(ErlangBinary bin_c_0), handler_10, stack_11,
                 config_12]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 97)))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_6) == (ErlangInt (DBI.fromInt 108)))
  , size_7 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_9) bin_8) <-
      ((BIN.chop_int bin_5 size_7 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_9) == (ErlangInt (DBI.fromInt 115)))
  , (BIN.empty bin_8) =
  let
    arg_14 =
      (ErlangBinary
         (BIN.concat
            [(BIN.from_int (ErlangInt (DBI.fromInt 97))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 108))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 115))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big)]))
  in
    (erlps__incomplete__5
       [(ErlangAtom "false"), arg_14, handler_10, stack_11, config_12])
erlps__false__4 [(ErlangBinary bin_c_0), handler_7, stack_8,
                 config_9]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 97)))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_6) == (ErlangInt (DBI.fromInt 108)))
  , (BIN.empty bin_5) =
  let
    arg_11 =
      (ErlangBinary
         (BIN.concat
            [(BIN.from_int (ErlangInt (DBI.fromInt 97))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 108))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big)]))
  in
    (erlps__incomplete__5
       [(ErlangAtom "false"), arg_11, handler_7, stack_8, config_9])
erlps__false__4 [(ErlangBinary bin_c_0), handler_4, stack_5,
                 config_6]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 97)))
  , (BIN.empty bin_2) =
  let
    arg_8 =
      (ErlangBinary
         (BIN.from_int (ErlangInt (DBI.fromInt 97))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big))
  in
    (erlps__incomplete__5
       [(ErlangAtom "false"), arg_8, handler_4, stack_5, config_6])
erlps__false__4 [(ErlangBinary bin_e_0), handler_1, stack_2,
                 config_3]
  | (BIN.empty bin_e_0) =
  let arg_5 = (ErlangBinary (BIN.concat []))
  in
    (erlps__incomplete__5
       [(ErlangAtom "false"), arg_5, handler_1, stack_2, config_3])
erlps__false__4 [bin_0, handler_1, stack_2, config_3] =
  let
    case_4 =
      case config_3 of
        (ErlangTuple arr_7) | (DM.Just field_6) <- ((arr_7 DA.!! 14)) ->
          field_6
        _ -> (EXC.badrecord (ErlangAtom "config"))
  in
    case case_4 of
      (ErlangAtom "false") ->
        (BIF.erlang__error__1 [(ErlangAtom "badarg")])
      f_9 ->
        let   
          arg_11 =
            (ErlangTuple
               [(ErlangAtom "decoder"), (ErlangAtom "false"), handler_1,
                (ErlangAtom "null"), stack_2])
        in let
          arg_17 =
            (BIF.do_remote_fun_call "Jsx.Config" "erlps__config_to_list__1"
               [config_3])
        in
          (BIF.erlang__apply__2
             [f_9,
              (ErlangCons bin_0
                 (ErlangCons arg_11 (ErlangCons arg_17 ErlangEmptyList)))])
erlps__false__4 [arg_20, arg_21, arg_22, arg_23] =
  (EXC.function_clause unit)
erlps__false__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__null__4 :: ErlangFun
erlps__null__4 [(ErlangBinary bin_c_0), handler_13, stack_14,
                config_15]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 117)))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_6) == (ErlangInt (DBI.fromInt 108)))
  , size_7 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_9) bin_8) <-
      ((BIN.chop_int bin_5 size_7 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_9) == (ErlangInt (DBI.fromInt 108)))
  , (ErlangInt size_10) <- ((BIN.size bin_8))
  , (BIN.Ok rest_12 bin_11) <- ((BIN.chop_bin bin_8 size_10 8))
  , (BIN.empty bin_11) =
  let   
    arg_18 =
      (ErlangTuple [(ErlangAtom "literal"), (ErlangAtom "null")])
  in let
    arg_17 = (erlps__handle_event__3 [arg_18, handler_13, config_15])
  in (erlps__maybe_done__4 [rest_12, arg_17, stack_14, config_15])
erlps__null__4 [(ErlangBinary bin_c_0), handler_7, stack_8,
                config_9]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 117)))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_6) == (ErlangInt (DBI.fromInt 108)))
  , (BIN.empty bin_5) =
  let
    arg_11 =
      (ErlangBinary
         (BIN.concat
            [(BIN.from_int (ErlangInt (DBI.fromInt 117))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 108))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big)]))
  in
    (erlps__incomplete__5
       [(ErlangAtom "null"), arg_11, handler_7, stack_8, config_9])
erlps__null__4 [(ErlangBinary bin_c_0), handler_4, stack_5,
                config_6]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 117)))
  , (BIN.empty bin_2) =
  let
    arg_8 =
      (ErlangBinary
         (BIN.from_int (ErlangInt (DBI.fromInt 117))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big))
  in
    (erlps__incomplete__5
       [(ErlangAtom "null"), arg_8, handler_4, stack_5, config_6])
erlps__null__4 [(ErlangBinary bin_e_0), handler_1, stack_2,
                config_3]
  | (BIN.empty bin_e_0) =
  let arg_5 = (ErlangBinary (BIN.concat []))
  in
    (erlps__incomplete__5
       [(ErlangAtom "null"), arg_5, handler_1, stack_2, config_3])
erlps__null__4 [bin_0, handler_1, stack_2, config_3] =
  let
    case_4 =
      case config_3 of
        (ErlangTuple arr_7) | (DM.Just field_6) <- ((arr_7 DA.!! 14)) ->
          field_6
        _ -> (EXC.badrecord (ErlangAtom "config"))
  in
    case case_4 of
      (ErlangAtom "false") ->
        (BIF.erlang__error__1 [(ErlangAtom "badarg")])
      f_9 ->
        let   
          arg_11 =
            (ErlangTuple
               [(ErlangAtom "decoder"), (ErlangAtom "null"), handler_1,
                (ErlangAtom "null"), stack_2])
        in let
          arg_17 =
            (BIF.do_remote_fun_call "Jsx.Config" "erlps__config_to_list__1"
               [config_3])
        in
          (BIF.erlang__apply__2
             [f_9,
              (ErlangCons bin_0
                 (ErlangCons arg_11 (ErlangCons arg_17 ErlangEmptyList)))])
erlps__null__4 [arg_20, arg_21, arg_22, arg_23] =
  (EXC.function_clause unit)
erlps__null__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__comment__5 :: ErlangFun
erlps__comment__5 [(ErlangBinary bin_c_0), handler_7, resume_8,
                   (ErlangCons (ErlangAtom "comment") stack_9), config_10]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 10)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  (erlps__resume__6
     [rest_6, resume_8, handler_7, (ErlangAtom "unused"), stack_9,
      config_10])
erlps__comment__5 [(ErlangBinary bin_c_0), handler_10, resume_11,
                   stack_12, config_13]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 47)))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_6) == (ErlangInt (DBI.fromInt 42)))
  , (ErlangInt size_7) <- ((BIN.size bin_5))
  , (BIN.Ok rest_9 bin_8) <- ((BIN.chop_bin bin_5 size_7 8))
  , (BIN.empty bin_8) =
  (erlps__comment__5
     [rest_9, handler_10, resume_11,
      (ErlangCons (ErlangAtom "multicomment") stack_12), config_13])
erlps__comment__5 [(ErlangBinary bin_c_0), handler_4, resume_5,
                   stack_6@(ErlangCons (ErlangAtom "multicomment") _), config_7]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 47)))
  , (BIN.empty bin_2) =
  let
    arg_9 =
      (ErlangBinary
         (BIN.from_int (ErlangInt (DBI.fromInt 47))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big))
  in
    (erlps__incomplete__6
       [(ErlangAtom "comment"), arg_9, handler_4, resume_5, stack_6,
        config_7])
erlps__comment__5 [(ErlangBinary bin_c_0), handler_10, resume_11,
                   (ErlangCons (ErlangAtom "multicomment") stack_12), config_13]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 42)))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_6) == (ErlangInt (DBI.fromInt 47)))
  , (ErlangInt size_7) <- ((BIN.size bin_5))
  , (BIN.Ok rest_9 bin_8) <- ((BIN.chop_bin bin_5 size_7 8))
  , (BIN.empty bin_8) =
  case stack_12 of
    (ErlangCons (ErlangAtom "multicomment") _) ->
      (erlps__comment__5
         [rest_9, handler_10, resume_11, stack_12, config_13])
    _ ->
      (erlps__resume__6
         [rest_9, resume_11, handler_10, (ErlangAtom "unused"), stack_12,
          config_13])
erlps__comment__5 [(ErlangBinary bin_c_0), handler_4, resume_5,
                   stack_6@(ErlangCons (ErlangAtom "multicomment") _), config_7]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 42)))
  , (BIN.empty bin_2) =
  let
    arg_9 =
      (ErlangBinary
         (BIN.from_int (ErlangInt (DBI.fromInt 42))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big))
  in
    (erlps__incomplete__6
       [(ErlangAtom "comment"), arg_9, handler_4, resume_5, stack_6,
        config_7])
erlps__comment__5 [(ErlangBinary bin_c_0), handler_6, resume_7,
                   stack_8, config_9]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok _ bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , (ErlangInt size_3) <- ((BIN.size bin_2))
  , (BIN.Ok rest_5 bin_4) <- ((BIN.chop_bin bin_2 size_3 8))
  , (BIN.empty bin_4) =
  (erlps__comment__5
     [rest_5, handler_6, resume_7, stack_8, config_9])
erlps__comment__5 [(ErlangBinary bin_c_0), handler_6, resume_7,
                   stack_8,
                   config_9@(ErlangTuple [(ErlangAtom "config"), _, _, _, _, _,
                                          _, (ErlangAtom "false"), _, _, _, _,
                                          _, _, _, _])]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok _ bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , (ErlangInt size_3) <- ((BIN.size bin_2))
  , (BIN.Ok rest_5 bin_4) <- ((BIN.chop_bin bin_2 size_3 8))
  , (BIN.empty bin_4) =
  (erlps__comment__5
     [rest_5, handler_6, resume_7, stack_8, config_9])
erlps__comment__5 [(ErlangBinary bin_e_0), handler_1,
                   (ErlangAtom "done"),
                   (ErlangCons comment_2 (ErlangEmptyList)),
                   config_3@(ErlangTuple [(ErlangAtom "config"), _, _, _, _, _,
                                          _, _, _, _, (ErlangAtom "false"), _,
                                          _, _, _, _])]
  | (BIN.empty bin_e_0)
  , ((ErlangAtom "true") ==
       (H.falsifyErrors
          (\ _ ->
             let
               lop_10 = (BIF.erlang__op_eq [comment_2, (ErlangAtom "comment")])
             in
               case lop_10 of
                 (ErlangAtom "true") -> (ErlangAtom "true")
                 (ErlangAtom "false") ->
                   (BIF.erlang__op_eq [comment_2, (ErlangAtom "multicomment")])
                 _ -> (EXC.badarg1 lop_10)))) =
  let arg_4 = (ErlangBinary (BIN.concat []))
  in
    (erlps__resume__6
       [arg_4, (ErlangAtom "done"), handler_1, (ErlangAtom "unused"),
        ErlangEmptyList, config_3])
erlps__comment__5 [(ErlangBinary bin_e_0), handler_1, resume_2,
                   stack_3, config_4]
  | (BIN.empty bin_e_0) =
  let arg_6 = (ErlangBinary (BIN.concat []))
  in
    (erlps__incomplete__6
       [(ErlangAtom "comment"), arg_6, handler_1, resume_2, stack_3,
        config_4])
erlps__comment__5 [bin_0, handler_1, resume_2, stack_3, config_4]
  =
  let
    case_5 =
      case config_4 of
        (ErlangTuple arr_8) | (DM.Just field_7) <- ((arr_8 DA.!! 14)) ->
          field_7
        _ -> (EXC.badrecord (ErlangAtom "config"))
  in
    case case_5 of
      (ErlangAtom "false") ->
        (BIF.erlang__error__1 [(ErlangAtom "badarg")])
      f_10 ->
        let   
          arg_12 =
            (ErlangTuple
               [(ErlangAtom "decoder"), (ErlangAtom "comment"), handler_1,
                resume_2, stack_3])
        in let
          arg_18 =
            (BIF.do_remote_fun_call "Jsx.Config" "erlps__config_to_list__1"
               [config_4])
        in
          (BIF.erlang__apply__2
             [f_10,
              (ErlangCons bin_0
                 (ErlangCons arg_12 (ErlangCons arg_18 ErlangEmptyList)))])
erlps__comment__5 [arg_21, arg_22, arg_23, arg_24, arg_25] =
  (EXC.function_clause unit)
erlps__comment__5 args =
  (EXC.badarity
     (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__maybe_done__4 :: ErlangFun
erlps__maybe_done__4 [(ErlangBinary bin_c_0), handler_4,
                      (ErlangEmptyList), config_5]
  | (ErlangInt size_1) <- ((BIN.size bin_c_0))
  , (BIN.Ok rest_3 bin_2) <- ((BIN.chop_bin bin_c_0 size_1 8))
  , (BIN.empty bin_2) =
  let
    arg_7 =
      (erlps__handle_event__3
         [(ErlangAtom "end_json"), handler_4, config_5])
  in (erlps__done__4 [rest_3, arg_7, ErlangEmptyList, config_5])
erlps__maybe_done__4 [(ErlangBinary bin_c_0), handler_7, stack_8,
                      config_9]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 32)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  (erlps__maybe_done__4 [rest_6, handler_7, stack_8, config_9])
erlps__maybe_done__4 [(ErlangBinary bin_c_0), handler_7,
                      (ErlangCons (ErlangAtom "object") stack_8), config_9]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 125)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_11 =
      (erlps__handle_event__3
         [(ErlangAtom "end_object"), handler_7, config_9])
  in (erlps__maybe_done__4 [rest_6, arg_11, stack_8, config_9])
erlps__maybe_done__4 [(ErlangBinary bin_c_0), handler_7,
                      (ErlangCons (ErlangAtom "array") stack_8), config_9]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 93)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_11 =
      (erlps__handle_event__3
         [(ErlangAtom "end_array"), handler_7, config_9])
  in (erlps__maybe_done__4 [rest_6, arg_11, stack_8, config_9])
erlps__maybe_done__4 [(ErlangBinary bin_c_0), handler_7,
                      (ErlangCons (ErlangAtom "object") stack_8), config_9]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 44)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  (erlps__key__4
     [rest_6, handler_7, (ErlangCons (ErlangAtom "key") stack_8),
      config_9])
erlps__maybe_done__4 args = (erlps__maybe_done__4__p1 args)

erlps__maybe_done__4__p1 :: ErlangFun
erlps__maybe_done__4__p1 [(ErlangBinary bin_c_0), handler_7,
                          stack_8@(ErlangCons (ErlangAtom "array") _), config_9]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 44)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  (erlps__value__4 [rest_6, handler_7, stack_8, config_9])
erlps__maybe_done__4__p1 [(ErlangBinary bin_c_0), handler_7,
                          stack_8, config_9]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 10)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  (erlps__maybe_done__4 [rest_6, handler_7, stack_8, config_9])
erlps__maybe_done__4__p1 [(ErlangBinary bin_c_0), handler_7,
                          stack_8, config_9]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 9)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  (erlps__maybe_done__4 [rest_6, handler_7, stack_8, config_9])
erlps__maybe_done__4__p1 [(ErlangBinary bin_c_0), handler_7,
                          stack_8, config_9]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 13)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  (erlps__maybe_done__4 [rest_6, handler_7, stack_8, config_9])
erlps__maybe_done__4__p1 [(ErlangBinary bin_c_0), handler_7,
                          stack_8,
                          config_9@(ErlangTuple [(ErlangAtom "config"), _, _, _,
                                                 _, (ErlangAtom "true"), _, _,
                                                 _, _, _, _, _, _, _, _])]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 47)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    case_10 =
      case config_9 of
        (ErlangTuple arr_13) | (DM.Just field_12) <-
                                 ((arr_13 DA.!! 14)) ->
          field_12
        _ -> (EXC.badrecord (ErlangAtom "config"))
  in
    case case_10 of
      (ErlangAtom "false") ->
        (BIF.erlang__error__1 [(ErlangAtom "badarg")])
      f_15 ->
        let   
          arg_16 =
            (ErlangBinary
               (BIN.concat
                  [(BIN.from_int (ErlangInt (DBI.fromInt 47))
                      (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
                   (BIN.format_bin rest_6 (BIN.packed_size rest_6) 8)]))
        in let
          arg_19 =
            (ErlangTuple
               [(ErlangAtom "decoder"), (ErlangAtom "maybe_done"), handler_7,
                (ErlangAtom "null"), stack_8])
        in let
          arg_25 =
            (BIF.do_remote_fun_call "Jsx.Config" "erlps__config_to_list__1"
               [config_9])
        in
          (BIF.erlang__apply__2
             [f_15,
              (ErlangCons arg_16
                 (ErlangCons arg_19 (ErlangCons arg_25 ErlangEmptyList)))])
erlps__maybe_done__4__p1 args = (erlps__maybe_done__4__p2 args)

erlps__maybe_done__4__p2 :: ErlangFun
erlps__maybe_done__4__p2 [(ErlangBinary bin_c_0), handler_10,
                          stack_11, config_12]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 47)))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_6) == (ErlangInt (DBI.fromInt 47)))
  , (ErlangInt size_7) <- ((BIN.size bin_5))
  , (BIN.Ok rest_9 bin_8) <- ((BIN.chop_bin bin_5 size_7 8))
  , (BIN.empty bin_8) =
  (erlps__comment__5
     [rest_9, handler_10, (ErlangAtom "maybe_done"),
      (ErlangCons (ErlangAtom "comment") stack_11), config_12])
erlps__maybe_done__4__p2 [(ErlangBinary bin_c_0), handler_10,
                          stack_11, config_12]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 47)))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_6) == (ErlangInt (DBI.fromInt 42)))
  , (ErlangInt size_7) <- ((BIN.size bin_5))
  , (BIN.Ok rest_9 bin_8) <- ((BIN.chop_bin bin_5 size_7 8))
  , (BIN.empty bin_8) =
  (erlps__comment__5
     [rest_9, handler_10, (ErlangAtom "maybe_done"),
      (ErlangCons (ErlangAtom "multicomment") stack_11), config_12])
erlps__maybe_done__4__p2 [(ErlangBinary bin_c_0), handler_4,
                          stack_5, config_6]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 47)))
  , (BIN.empty bin_2) =
  let
    arg_8 =
      (ErlangBinary
         (BIN.from_int (ErlangInt (DBI.fromInt 47))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big))
  in
    (erlps__incomplete__5
       [(ErlangAtom "maybe_done"), arg_8, handler_4, stack_5, config_6])
erlps__maybe_done__4__p2 [(ErlangBinary bin_e_0), handler_1,
                          stack_2, config_3]
  | (BIN.empty bin_e_0)
  , ((ErlangAtom "true") ==
       (H.falsifyErrors
          (\ _ ->
             let lop_9 = (BIF.erlang__length__1 [stack_2])
             in
               (BIF.erlang__op_greater
                  [lop_9, (ErlangInt (DBI.fromInt 0))])))) =
  let arg_5 = (ErlangBinary (BIN.concat []))
  in
    (erlps__incomplete__5
       [(ErlangAtom "maybe_done"), arg_5, handler_1, stack_2, config_3])
erlps__maybe_done__4__p2 [bin_0, handler_1, stack_2, config_3] =
  let
    case_4 =
      case config_3 of
        (ErlangTuple arr_7) | (DM.Just field_6) <- ((arr_7 DA.!! 14)) ->
          field_6
        _ -> (EXC.badrecord (ErlangAtom "config"))
  in
    case case_4 of
      (ErlangAtom "false") ->
        (BIF.erlang__error__1 [(ErlangAtom "badarg")])
      f_9 ->
        let   
          arg_11 =
            (ErlangTuple
               [(ErlangAtom "decoder"), (ErlangAtom "maybe_done"), handler_1,
                (ErlangAtom "null"), stack_2])
        in let
          arg_17 =
            (BIF.do_remote_fun_call "Jsx.Config" "erlps__config_to_list__1"
               [config_3])
        in
          (BIF.erlang__apply__2
             [f_9,
              (ErlangCons bin_0
                 (ErlangCons arg_11 (ErlangCons arg_17 ErlangEmptyList)))])
erlps__maybe_done__4__p2 [arg_20, arg_21, arg_22, arg_23] =
  (EXC.function_clause unit)
erlps__maybe_done__4__p2 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__done__4 :: ErlangFun
erlps__done__4 [(ErlangBinary bin_c_0), handler_7,
                (ErlangEmptyList), config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 32)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  (erlps__done__4 [rest_6, handler_7, ErlangEmptyList, config_8])
erlps__done__4 [(ErlangBinary bin_c_0), handler_7,
                (ErlangEmptyList), config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 10)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  (erlps__done__4 [rest_6, handler_7, ErlangEmptyList, config_8])
erlps__done__4 [(ErlangBinary bin_c_0), handler_7,
                (ErlangEmptyList), config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 9)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  (erlps__done__4 [rest_6, handler_7, ErlangEmptyList, config_8])
erlps__done__4 [(ErlangBinary bin_c_0), handler_7,
                (ErlangEmptyList), config_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 13)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  (erlps__done__4 [rest_6, handler_7, ErlangEmptyList, config_8])
erlps__done__4 [(ErlangBinary bin_c_0), handler_7, stack_8,
                config_9@(ErlangTuple [(ErlangAtom "config"), _, _, _, _,
                                       (ErlangAtom "true"), _, _, _, _, _, _, _,
                                       _, _, _])]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 47)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    case_10 =
      case config_9 of
        (ErlangTuple arr_13) | (DM.Just field_12) <-
                                 ((arr_13 DA.!! 14)) ->
          field_12
        _ -> (EXC.badrecord (ErlangAtom "config"))
  in
    case case_10 of
      (ErlangAtom "false") ->
        (BIF.erlang__error__1 [(ErlangAtom "badarg")])
      f_15 ->
        let   
          arg_16 =
            (ErlangBinary
               (BIN.concat
                  [(BIN.from_int (ErlangInt (DBI.fromInt 47))
                      (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
                   (BIN.format_bin rest_6 (BIN.packed_size rest_6) 8)]))
        in let
          arg_19 =
            (ErlangTuple
               [(ErlangAtom "decoder"), (ErlangAtom "done"), handler_7,
                (ErlangAtom "null"), stack_8])
        in let
          arg_25 =
            (BIF.do_remote_fun_call "Jsx.Config" "erlps__config_to_list__1"
               [config_9])
        in
          (BIF.erlang__apply__2
             [f_15,
              (ErlangCons arg_16
                 (ErlangCons arg_19 (ErlangCons arg_25 ErlangEmptyList)))])
erlps__done__4 args = (erlps__done__4__p1 args)

erlps__done__4__p1 :: ErlangFun
erlps__done__4__p1 [(ErlangBinary bin_c_0), handler_10, stack_11,
                    config_12]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 47)))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_6) == (ErlangInt (DBI.fromInt 47)))
  , (ErlangInt size_7) <- ((BIN.size bin_5))
  , (BIN.Ok rest_9 bin_8) <- ((BIN.chop_bin bin_5 size_7 8))
  , (BIN.empty bin_8) =
  (erlps__comment__5
     [rest_9, handler_10, (ErlangAtom "done"),
      (ErlangCons (ErlangAtom "comment") stack_11), config_12])
erlps__done__4__p1 [(ErlangBinary bin_c_0), handler_10, stack_11,
                    config_12]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 47)))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_6) == (ErlangInt (DBI.fromInt 42)))
  , (ErlangInt size_7) <- ((BIN.size bin_5))
  , (BIN.Ok rest_9 bin_8) <- ((BIN.chop_bin bin_5 size_7 8))
  , (BIN.empty bin_8) =
  (erlps__comment__5
     [rest_9, handler_10, (ErlangAtom "done"),
      (ErlangCons (ErlangAtom "multicomment") stack_11), config_12])
erlps__done__4__p1 [(ErlangBinary bin_c_0), handler_4, stack_5,
                    config_6]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 47)))
  , (BIN.empty bin_2) =
  let
    arg_8 =
      (ErlangBinary
         (BIN.from_int (ErlangInt (DBI.fromInt 47))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big))
  in
    (erlps__incomplete__5
       [(ErlangAtom "done"), arg_8, handler_4, stack_5, config_6])
erlps__done__4__p1 [bin_0, (ErlangTuple [_handler_1, state_2]),
                    _stack_3,
                    (ErlangTuple [(ErlangAtom "config"), _, _, _, _, _, _, _, _,
                                  _, _, (ErlangAtom "true"), _, _, _, _])]
  =
  (ErlangTuple [(ErlangAtom "with_tail"), state_2, bin_0])
erlps__done__4__p1 [(ErlangBinary bin_e_0),
                    (ErlangTuple [handler_1, state_2]), (ErlangEmptyList),
                    config_3@(ErlangTuple [(ErlangAtom "config"), _, _, _, _, _,
                                           _, _, _, _, (ErlangAtom "true"), _,
                                           _, _, _, _])]
  | (BIN.empty bin_e_0) =
  let    arg_5 = (ErlangBinary (BIN.concat []))
  in let arg_6 = (ErlangTuple [handler_1, state_2])
  in
    (erlps__incomplete__5
       [(ErlangAtom "done"), arg_5, arg_6, ErlangEmptyList, config_3])
erlps__done__4__p1 args = (erlps__done__4__p2 args)

erlps__done__4__p2 :: ErlangFun
erlps__done__4__p2 [(ErlangBinary bin_e_0),
                    (ErlangTuple [_handler_1, state_2]), (ErlangEmptyList),
                    _config_3]
  | (BIN.empty bin_e_0) =
  state_2
erlps__done__4__p2 [bin_0, (ErlangTuple [handler_1, state_2]),
                    _stack_3,
                    config_4@(ErlangTuple [(ErlangAtom "config"), _, _, _,
                                           (ErlangAtom "true"), _, _, _, _, _,
                                           _, _, _, _, _, _])]
  =
  let   
    tup_el_8 =
      (BIF.erlang__apply__3
         [handler_1, (ErlangAtom "reset"),
          (ErlangCons state_2 ErlangEmptyList)])
  in let arg_6 = (ErlangTuple [handler_1, tup_el_8])
  in (erlps__value__4 [bin_0, arg_6, ErlangEmptyList, config_4])
erlps__done__4__p2 [bin_0, handler_1, stack_2, config_3] =
  let
    case_4 =
      case config_3 of
        (ErlangTuple arr_7) | (DM.Just field_6) <- ((arr_7 DA.!! 14)) ->
          field_6
        _ -> (EXC.badrecord (ErlangAtom "config"))
  in
    case case_4 of
      (ErlangAtom "false") ->
        (BIF.erlang__error__1 [(ErlangAtom "badarg")])
      f_9 ->
        let   
          arg_11 =
            (ErlangTuple
               [(ErlangAtom "decoder"), (ErlangAtom "done"), handler_1,
                (ErlangAtom "null"), stack_2])
        in let
          arg_17 =
            (BIF.do_remote_fun_call "Jsx.Config" "erlps__config_to_list__1"
               [config_3])
        in
          (BIF.erlang__apply__2
             [f_9,
              (ErlangCons bin_0
                 (ErlangCons arg_11 (ErlangCons arg_17 ErlangEmptyList)))])
erlps__done__4__p2 [arg_20, arg_21, arg_22, arg_23] =
  (EXC.function_clause unit)
erlps__done__4__p2 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)