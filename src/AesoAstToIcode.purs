module Aeso.Ast.To.Icode(erlps__ast_typerep__1,
                         erlps__ast_typerep__2, erlps__type_value__1,
                         erlps__convert_typed__2, erlps__prim_call__5) where
{-
This file has been autogenerated
DO NOT EDIT - Your changes WILL be overwritten
Use this code at your own risk - the authors are just a mischievous raccoon and a haskell devote
Erlscripten v0.2.0
-}

import Prelude
import Data.BigInt as DBI
import Data.Array as DA
import Data.Maybe as DM
import Data.Map as Map
import Data.Tuple as DT
import Erlang.Builtins as BIF
import Erlang.Binary as BIN
import Erlang.Helpers
import Erlang.Exception as EXC
import Erlang.Type
import Partial.Unsafe (unsafePartial)


erlps__convert_typed__2 :: ErlangFun
erlps__convert_typed__2 [typedtree_0, options_1] =
  let   
    case_2 =
      BIF.do_remote_fun_call "Lists" "erlps__last__1" [typedtree_0]
  in let
    matchExpr_18 =
      case case_2 of
        (ErlangTuple [contr_4, attrs_5,
                      (ErlangTuple [(ErlangAtom "con"), _, con_6]), _]) | ((==)
                                                                             contr_4
                                                                             (ErlangAtom
                                                                                "contract_main")) ||
                                                                            (((==)
                                                                                contr_4
                                                                                (ErlangAtom
                                                                                   "contract_interface")) ||
                                                                               ((==)
                                                                                  contr_4
                                                                                  (ErlangAtom
                                                                                     "contract_child"))) ->
          let
            tup_el_7 =
              BIF.do_remote_fun_call "Proplists" "erlps__get_value__3"
                [ErlangAtom "payable", attrs_5, ErlangAtom "false"]
          in ErlangTuple [tup_el_7, con_6]
        decl_12 ->
          let
            arg_13 =
              ErlangTuple
                [ErlangAtom "last_declaration_must_be_contract", decl_12]
          in erlps__gen_error__1 [arg_13]
  in
    case matchExpr_18 of
      (ErlangTuple [payable_16, name_17]) ->
        let   
          arg_22 =
            BIF.do_remote_fun_call "Aeso.Icode" "erlps__new__1" [options_1]
        in let
          arg_20 =
            BIF.do_remote_fun_call "Aeso.Icode" "erlps__set_name__2"
              [name_17, arg_22]
        in let
          newicode_24 =
            BIF.do_remote_fun_call "Aeso.Icode" "erlps__set_payable__2"
              [payable_16, arg_20]
        in let
          icode_28 = erlps__code__3 [typedtree_0, newicode_24, options_1]
        in erlps__deadcode_elimination__1 [icode_28]
      _ -> EXC.badmatch matchExpr_18
erlps__convert_typed__2 [arg_30, arg_31] =
  EXC.function_clause unit
erlps__convert_typed__2 args =
  EXC.badarity (ErlangFun 2 erlps__convert_typed__2) args

erlps__code__3 :: ErlangFun
erlps__code__3 [(ErlangCons (ErlangTuple [contract_0, _attribs_1,
                                          con_2, code_3]) rest_4),
                icode_5, options_6]
  | ((==) contract_0 (ErlangAtom "contract_main")) ||
      (((==) contract_0 (ErlangAtom "contract_interface")) ||
         ((==) contract_0 (ErlangAtom "contract_child"))) =
  let   
    arg_8 =
      BIF.do_remote_fun_call "Aeso.Icode" "erlps__set_namespace__2"
        [con_2, icode_5]
  in let newicode_11 = erlps__contract_to_icode__2 [code_3, arg_8]
  in erlps__code__3 [rest_4, newicode_11, options_6]
erlps__code__3 [(ErlangCons (ErlangTuple [(ErlangAtom "namespace"),
                                          _ann_0, name_1, code_2]) rest_3),
                icode_4, options_5]
  =
  let   
    arg_7 =
      BIF.do_remote_fun_call "Aeso.Icode" "erlps__set_namespace__2"
        [name_1, icode_4]
  in let newicode_10 = erlps__contract_to_icode__2 [code_2, arg_7]
  in erlps__code__3 [rest_3, newicode_10, options_5]
erlps__code__3 [(ErlangEmptyList), icode_0, options_1] =
  let arg_2 = erlps__add_builtins__1 [icode_0]
  in erlps__add_default_init_function__2 [arg_2, options_1]
erlps__code__3 [arg_5, arg_6, arg_7] = EXC.function_clause unit
erlps__code__3 args =
  EXC.badarity (ErlangFun 3 erlps__code__3) args

erlps__gen_error__1 :: ErlangFun
erlps__gen_error__1 [error_0] =
  let
    arg_1 =
      BIF.do_remote_fun_call "Aeso.Code.Errors" "erlps__format__1"
        [error_0]
  in BIF.do_remote_fun_call "Aeso.Errors" "erlps__throw__1" [arg_1]
erlps__gen_error__1 [arg_3] = EXC.function_clause unit
erlps__gen_error__1 args =
  EXC.badarity (ErlangFun 1 erlps__gen_error__1) args

erlps__add_default_init_function__2 :: ErlangFun
erlps__add_default_init_function__2 [icode_4@(ErlangMap map_0),
                                     options_5]
  | (DM.Just state_3) <-
      (Map.lookup (ErlangAtom "state_type") map_0)
  , (DM.Just funs_2) <- (Map.lookup (ErlangAtom "functions") map_0)
  , (DM.Just ns_1) <- (Map.lookup (ErlangAtom "namespace") map_0) =
  let   
    nocode_9 =
      BIF.do_remote_fun_call "Proplists" "erlps__get_value__3"
        [ErlangAtom "no_code", options_5, ErlangAtom "false"]
  in let tup_el_13 = toErl "init"
  in let
    arg_10 =
      ErlangTuple [ErlangAtom "id", ErlangEmptyList, tup_el_13]
  in let
    matchExpr_16 =
      BIF.do_remote_fun_call "Aeso.Icode" "erlps__qualify__2"
        [arg_10, icode_4]
  in
    case matchExpr_16 of
      (ErlangTuple [_, _, qinit_15]) ->
        let    arg_19 = toErl 1
        in let
          case_17 = BIF.lists__keymember__3 [qinit_15, arg_19, funs_2]
        in
          case case_17 of
            (ErlangAtom "true") -> icode_4
            (ErlangAtom "false") | (==) (ErlangAtom "true") nocode_9 ->
              icode_4
            (ErlangAtom "false") | (ErlangAtom "true") ==
                                     (falsifyErrors
                                        (\ _ ->
                                           let
                                             rop_22 =
                                               ErlangTuple
                                                 [ErlangAtom "tuple",
                                                  ErlangEmptyList]
                                           in
                                             BIF.erlang__op_neq
                                               [state_3, rop_22])) ->
              let
                arg_25 = ErlangTuple [ErlangAtom "missing_init_function", ns_1]
              in erlps__gen_error__1 [arg_25]
            (ErlangAtom "false") ->
              let   
                head_32 = ErlangTuple [ErlangAtom "tuple", ErlangEmptyList]
              in let
                type_36 =
                  ErlangTuple
                    [ErlangAtom "tuple",
                     ErlangCons (ErlangAtom "typerep")
                       (ErlangCons head_32 ErlangEmptyList)]
              in let arg_40 = ErlangTuple [ErlangAtom "tuple", ErlangEmptyList]
              in let head_39 = erlps__type_value__1 [arg_40]
              in let
                head_44 = ErlangTuple [ErlangAtom "tuple", ErlangEmptyList]
              in let
                value_48 =
                  ErlangTuple
                    [ErlangAtom "tuple",
                     ErlangCons head_39 (ErlangCons head_44 ErlangEmptyList)]
              in let
                defaultinit_54 =
                  ErlangTuple
                    [qinit_15, ErlangEmptyList, ErlangEmptyList, value_48,
                     type_36]
              in let
                mapExt_60 =
                  ErlangMap
                    (Map.singleton (ErlangAtom "functions")
                       (ErlangCons defaultinit_54 funs_2))
              in BIF.maps__merge__2 [icode_4, mapExt_60]
            something_else -> EXC.case_clause something_else
      _ -> EXC.badmatch matchExpr_16
erlps__add_default_init_function__2 [arg_62, arg_63] =
  EXC.function_clause unit
erlps__add_default_init_function__2 args =
  EXC.badarity (ErlangFun 2 erlps__add_default_init_function__2)
    args

erlps__contract_to_icode__2 :: ErlangFun
erlps__contract_to_icode__2 [(ErlangCons (ErlangTuple [(ErlangAtom "namespace"),
                                                       _, name_0,
                                                       defs_1]) rest_2),
                             icode_3]
  =
  let   
    ns_5 =
      BIF.do_remote_fun_call "Aeso.Icode" "erlps__get_namespace__1"
        [icode_3]
  in let
    arg_7 =
      BIF.do_remote_fun_call "Aeso.Icode" "erlps__enter_namespace__2"
        [name_0, icode_3]
  in let icode1_10 = erlps__contract_to_icode__2 [defs_1, arg_7]
  in let
    arg_12 =
      BIF.do_remote_fun_call "Aeso.Icode" "erlps__set_namespace__2"
        [ns_5, icode1_10]
  in erlps__contract_to_icode__2 [rest_2, arg_12]
erlps__contract_to_icode__2 [(ErlangCons decl_5@(ErlangTuple [(ErlangAtom "type_def"),
                                                              _attrib_0,
                                                              id_2@(ErlangTuple [(ErlangAtom "id"),
                                                                                 _,
                                                                                 name_1]),
                                                              args_3,
                                                              def_4]) rest_6),
                             icode_10@(ErlangMap map_7)]
  | (DM.Just constructors_9) <-
      (Map.lookup (ErlangAtom "constructors") map_7)
  , (DM.Just types_8) <- (Map.lookup (ErlangAtom "types") map_7) =
  let   
    typedef_14 = erlps__make_type_def__3 [args_3, def_4, icode_10]
  in let
    newconstructors_49 =
      case def_4 of
        (ErlangTuple [(ErlangAtom "variant_t"), cons_16]) ->
          let    arg_17 = toErl 0
          in let lop_19 = BIF.erlang__length__1 [cons_16]
          in let rop_21 = toErl 1
          in let arg_18 = BIF.erlang__op_minus [lop_19, rop_21]
          in let
            tags_22 =
              BIF.do_remote_fun_call "Lists" "erlps__seq__2" [arg_17, arg_18]
          in let
            getname_26 =
              ErlangFun 1
                (let
                   lambda_23 [(ErlangTuple [(ErlangAtom "constr_t"), _, c_25,
                                            _])]
                     =
                     c_25
                   lambda_23 [arg_24] = EXC.function_clause unit
                   lambda_23 args = EXC.badarity (ErlangFun 1 lambda_23) args
                 in lambda_23)
          in let
            qname_36 =
              ErlangFun 1
                (let
                   lambda_27 [con_29] =
                     let   
                       arg_30 =
                         BIF.erlang__apply__2
                           [getname_26, ErlangCons con_29 ErlangEmptyList]
                     in let
                       matchExpr_35 =
                         BIF.do_remote_fun_call "Aeso.Icode" "erlps__qualify__2"
                           [arg_30, icode_10]
                     in
                       case matchExpr_35 of
                         (ErlangTuple [_, _, xs_34]) -> xs_34
                         _ -> EXC.badmatch matchExpr_35
                   lambda_27 [arg_28] = EXC.function_clause unit
                   lambda_27 args = EXC.badarity (ErlangFun 1 lambda_27) args
                 in lambda_27)
          in let
            lcSrc_38 =
              BIF.do_remote_fun_call "Lists" "erlps__zip__2" [tags_22, cons_16]
          in let
            arg_37 =
              flmap
                (\ lc_43 ->
                   case lc_43 of
                     (ErlangTuple [tag_41, con_42]) ->
                       let   
                         tup_el_45 =
                           BIF.erlang__apply__2
                             [qname_36, ErlangCons con_42 ErlangEmptyList]
                       in let lcRet_44 = ErlangTuple [tup_el_45, tag_41]
                       in ErlangCons lcRet_44 ErlangEmptyList
                     _ -> ErlangEmptyList)
                lcSrc_38
          in BIF.maps__from_list__1 [arg_37]
        _ -> ErlangMap Map.empty
  in let
    matchExpr_53 =
      BIF.do_remote_fun_call "Aeso.Icode" "erlps__qualify__2"
        [id_2, icode_10]
  in
    case matchExpr_53 of
      (ErlangTuple [_, _, tname_52]) ->
        let    mapExt_61 = ErlangMap (Map.singleton tname_52 typedef_14)
        in let val_57 = BIF.maps__merge__2 [types_8, mapExt_61]
        in let
          val_63 = BIF.maps__merge__2 [constructors_9, newconstructors_49]
        in let
          mapExt_66 =
            ErlangMap
              (Map.fromFoldable
                 [DT.Tuple (ErlangAtom "types") val_57,
                  DT.Tuple (ErlangAtom "constructors") val_63])
        in let
          icode1_70 =
            case findMissingKey icode_10
                   [ErlangAtom "types", ErlangAtom "constructors"] of
              (DM.Nothing) -> BIF.maps__merge__2 [icode_10, mapExt_66]
              (DM.Just missing_69) -> EXC.badkey missing_69
        in let
          icode2_115 =
            case name_1 of
              (ErlangCons (ErlangInt num_72) (ErlangCons (ErlangInt num_73) (ErlangCons (ErlangInt num_74) (ErlangCons (ErlangInt num_75) (ErlangCons (ErlangInt num_76) (ErlangEmptyList)))))) | (ErlangInt
                                                                                                                                                                                                     num_72) ==
                                                                                                                                                                                                    (toErl
                                                                                                                                                                                                       115)
                                                                                                                                                                                                , (ErlangInt
                                                                                                                                                                                                     num_73) ==
                                                                                                                                                                                                    (toErl
                                                                                                                                                                                                       116)
                                                                                                                                                                                                , (ErlangInt
                                                                                                                                                                                                     num_74) ==
                                                                                                                                                                                                    (toErl
                                                                                                                                                                                                       97)
                                                                                                                                                                                                , (ErlangInt
                                                                                                                                                                                                     num_75) ==
                                                                                                                                                                                                    (toErl
                                                                                                                                                                                                       116)
                                                                                                                                                                                                , (ErlangInt
                                                                                                                                                                                                     num_76) ==
                                                                                                                                                                                                    (toErl
                                                                                                                                                                                                       101)
                                                                                                                                                                                                , weakEq
                                                                                                                                                                                                    args_3
                                                                                                                                                                                                    ErlangEmptyList ->
                let case_77 = erlps__is_first_order_type__1 [def_4]
                in
                  case case_77 of
                    (ErlangAtom "true") ->
                      let    val_81 = erlps__ast_typerep__2 [def_4, icode_10]
                      in let
                        mapExt_84 =
                          ErlangMap
                            (Map.singleton (ErlangAtom "state_type") val_81)
                      in BIF.maps__merge__2 [icode1_70, mapExt_84]
                    (ErlangAtom "false") ->
                      let
                        arg_86 =
                          ErlangTuple [ErlangAtom "higher_order_state", decl_5]
                      in erlps__gen_error__1 [arg_86]
                    something_else -> EXC.case_clause something_else
              (ErlangCons (ErlangInt num_89) (ErlangCons (ErlangInt num_90) (ErlangCons (ErlangInt num_91) (ErlangCons (ErlangInt num_92) (ErlangCons (ErlangInt num_93) (ErlangEmptyList)))))) | (ErlangInt
                                                                                                                                                                                                     num_89) ==
                                                                                                                                                                                                    (toErl
                                                                                                                                                                                                       115)
                                                                                                                                                                                                , (ErlangInt
                                                                                                                                                                                                     num_90) ==
                                                                                                                                                                                                    (toErl
                                                                                                                                                                                                       116)
                                                                                                                                                                                                , (ErlangInt
                                                                                                                                                                                                     num_91) ==
                                                                                                                                                                                                    (toErl
                                                                                                                                                                                                       97)
                                                                                                                                                                                                , (ErlangInt
                                                                                                                                                                                                     num_92) ==
                                                                                                                                                                                                    (toErl
                                                                                                                                                                                                       116)
                                                                                                                                                                                                , (ErlangInt
                                                                                                                                                                                                     num_93) ==
                                                                                                                                                                                                    (toErl
                                                                                                                                                                                                       101) ->
                let
                  arg_94 = ErlangTuple [ErlangAtom "parameterized_state", id_2]
                in erlps__gen_error__1 [arg_94]
              (ErlangCons (ErlangInt num_97) (ErlangCons (ErlangInt num_98) (ErlangCons (ErlangInt num_99) (ErlangCons (ErlangInt num_100) (ErlangCons (ErlangInt num_101) (ErlangEmptyList)))))) | (ErlangInt
                                                                                                                                                                                                       num_97) ==
                                                                                                                                                                                                      (toErl
                                                                                                                                                                                                         101)
                                                                                                                                                                                                  , (ErlangInt
                                                                                                                                                                                                       num_98) ==
                                                                                                                                                                                                      (toErl
                                                                                                                                                                                                         118)
                                                                                                                                                                                                  , (ErlangInt
                                                                                                                                                                                                       num_99) ==
                                                                                                                                                                                                      (toErl
                                                                                                                                                                                                         101)
                                                                                                                                                                                                  , (ErlangInt
                                                                                                                                                                                                       num_100) ==
                                                                                                                                                                                                      (toErl
                                                                                                                                                                                                         110)
                                                                                                                                                                                                  , (ErlangInt
                                                                                                                                                                                                       num_101) ==
                                                                                                                                                                                                      (toErl
                                                                                                                                                                                                         116)
                                                                                                                                                                                                  , weakEq
                                                                                                                                                                                                      args_3
                                                                                                                                                                                                      ErlangEmptyList ->
                let
                  mapExt_105 =
                    ErlangMap (Map.singleton (ErlangAtom "event_type") def_4)
                in BIF.maps__merge__2 [icode1_70, mapExt_105]
              (ErlangCons (ErlangInt num_107) (ErlangCons (ErlangInt num_108) (ErlangCons (ErlangInt num_109) (ErlangCons (ErlangInt num_110) (ErlangCons (ErlangInt num_111) (ErlangEmptyList)))))) | (ErlangInt
                                                                                                                                                                                                          num_107) ==
                                                                                                                                                                                                         (toErl
                                                                                                                                                                                                            101)
                                                                                                                                                                                                     , (ErlangInt
                                                                                                                                                                                                          num_108) ==
                                                                                                                                                                                                         (toErl
                                                                                                                                                                                                            118)
                                                                                                                                                                                                     , (ErlangInt
                                                                                                                                                                                                          num_109) ==
                                                                                                                                                                                                         (toErl
                                                                                                                                                                                                            101)
                                                                                                                                                                                                     , (ErlangInt
                                                                                                                                                                                                          num_110) ==
                                                                                                                                                                                                         (toErl
                                                                                                                                                                                                            110)
                                                                                                                                                                                                     , (ErlangInt
                                                                                                                                                                                                          num_111) ==
                                                                                                                                                                                                         (toErl
                                                                                                                                                                                                            116) ->
                let
                  arg_112 = ErlangTuple [ErlangAtom "parameterized_event", id_2]
                in erlps__gen_error__1 [arg_112]
              _ -> icode1_70
        in erlps__contract_to_icode__2 [rest_6, icode2_115]
      _ -> EXC.badmatch matchExpr_53
erlps__contract_to_icode__2 [(ErlangCons (ErlangTuple [(ErlangAtom "letfun"),
                                                       attrib_0, name_1, args_2,
                                                       _what_3,
                                                       body_5@(ErlangTuple [(ErlangAtom "typed"),
                                                                            _,
                                                                            _,
                                                                            t_4])]) rest_6),
                             icode_7]
  =
  let   
    cond_9 =
      BIF.do_remote_fun_call "Proplists" "erlps__get_value__3"
        [ErlangAtom "stateful", attrib_0, ErlangAtom "false"]
  in let
    lop_8 =
      case cond_9 of
        (ErlangAtom "true") ->
          ErlangCons (ErlangAtom "stateful") ErlangEmptyList
        _ -> ErlangEmptyList
  in let
    cond_16 =
      BIF.do_remote_fun_call "Proplists" "erlps__get_value__3"
        [ErlangAtom "payable", attrib_0, ErlangAtom "false"]
  in let
    lop_15 =
      case cond_16 of
        (ErlangAtom "true") ->
          ErlangCons (ErlangAtom "payable") ErlangEmptyList
        _ -> ErlangEmptyList
  in let cond_22 = erlps__is_private__2 [attrib_0, icode_7]
  in let
    rop_21 =
      case cond_22 of
        (ErlangAtom "true") ->
          ErlangCons (ErlangAtom "private") ErlangEmptyList
        _ -> ErlangEmptyList
  in let rop_14 = BIF.erlang__op_append [lop_15, rop_21]
  in let funattrs_26 = BIF.erlang__op_append [lop_8, rop_14]
  in let
    cond_27 =
      BIF.do_remote_fun_call "Aeso.Syntax" "erlps__get_ann__3"
        [ErlangAtom "entrypoint", attrib_0, ErlangAtom "false"]
  in let
    _ =
      case cond_27 of
        (ErlangAtom "true") ->
          let
            lcRet_31 =
              erlps__check_entrypoint_type__4 [attrib_0, name_1, args_2, t_4]
          in ErlangCons lcRet_31 ErlangEmptyList
        _ -> ErlangEmptyList
  in let funname_37 = erlps__ast_id__1 [name_1]
  in let
    funargs_41 =
      erlps__ast_args__3 [args_2, ErlangEmptyList, icode_7]
  in let
    matchExpr_77 =
      case funname_37 of
        (ErlangCons (ErlangInt num_43) (ErlangCons (ErlangInt num_44) (ErlangCons (ErlangInt num_45) (ErlangCons (ErlangInt num_46) (ErlangEmptyList))))) | (ErlangInt
                                                                                                                                                               num_43) ==
                                                                                                                                                              (toErl
                                                                                                                                                                 105)
                                                                                                                                                          , (ErlangInt
                                                                                                                                                               num_44) ==
                                                                                                                                                              (toErl
                                                                                                                                                                 110)
                                                                                                                                                          , (ErlangInt
                                                                                                                                                               num_45) ==
                                                                                                                                                              (toErl
                                                                                                                                                                 105)
                                                                                                                                                          , (ErlangInt
                                                                                                                                                               num_46) ==
                                                                                                                                                              (toErl
                                                                                                                                                                 116) ->
          case icode_7 of
            (ErlangMap map_47) | (DM.Just statetype_48) <-
                                   (Map.lookup (ErlangAtom "state_type")
                                      map_47) ->
              let    head_53 = erlps__type_value__1 [statetype_48]
              in let head_56 = erlps__ast_body__2 [body_5, icode_7]
              in let
                tup_el_50 =
                  ErlangTuple
                    [ErlangAtom "tuple",
                     ErlangCons head_53 (ErlangCons head_56 ErlangEmptyList)]
              in let head_65 = erlps__ast_typerep__2 [t_4, icode_7]
              in let
                tup_el_60 =
                  ErlangTuple
                    [ErlangAtom "tuple",
                     ErlangCons (ErlangAtom "typerep")
                       (ErlangCons head_65 ErlangEmptyList)]
              in ErlangTuple [tup_el_50, tup_el_60]
            _ -> EXC.badmatch icode_7
        _ ->
          let    tup_el_69 = erlps__ast_body__2 [body_5, icode_7]
          in let tup_el_72 = erlps__ast_typerep1__2 [t_4, icode_7]
          in ErlangTuple [tup_el_69, tup_el_72]
  in
    case matchExpr_77 of
      (ErlangTuple [funbody_75, typerep_76]) ->
        let   
          qname_80 =
            BIF.do_remote_fun_call "Aeso.Icode" "erlps__qualify__2"
              [name_1, icode_7]
        in let arg_81 = erlps__ast_id__1 [qname_80]
        in let
          newicode_88 =
            erlps__ast_fun_to_icode__6
              [arg_81, funattrs_26, funargs_41, funbody_75, typerep_76,
               icode_7]
        in erlps__contract_to_icode__2 [rest_6, newicode_88]
      _ -> EXC.badmatch matchExpr_77
erlps__contract_to_icode__2 [(ErlangEmptyList), icode_0] =
  icode_0
erlps__contract_to_icode__2 [(ErlangCons (ErlangTuple [(ErlangAtom "fun_decl"),
                                                       _, id_0, _]) code_1),
                             icode_4@(ErlangMap map_2)]
  | (DM.Just options_3) <-
      (Map.lookup (ErlangAtom "options") map_2) =
  let   
    nocode_8 =
      BIF.do_remote_fun_call "Proplists" "erlps__get_value__3"
        [ErlangAtom "no_code", options_3, ErlangAtom "false"]
  in let
    lop_10 =
      BIF.do_remote_fun_call "Aeso.Icode" "erlps__in_main_contract__1"
        [icode_4]
  in let
    case_9 =
      case lop_10 of
        (ErlangAtom "false") -> ErlangAtom "false"
        (ErlangAtom "true") -> BIF.erlang__not__1 [nocode_8]
        _ -> EXC.badarg1 lop_10
  in
    case case_9 of
      (ErlangAtom "true") ->
        let arg_13 = ErlangTuple [ErlangAtom "missing_definition", id_0]
        in erlps__gen_error__1 [arg_13]
      (ErlangAtom "false") ->
        erlps__contract_to_icode__2 [code_1, icode_4]
      something_else -> EXC.case_clause something_else
erlps__contract_to_icode__2 [(ErlangCons decl_0 code_1), icode_2]
  =
  let    arg_3 = toErl "Unhandled declaration: ~p\n"
  in let
    _ =
      BIF.do_remote_fun_call "Erlang.Io" "erlps__format__2"
        [arg_3, ErlangCons decl_0 ErlangEmptyList]
  in erlps__contract_to_icode__2 [code_1, icode_2]
erlps__contract_to_icode__2 [arg_9, arg_10] =
  EXC.function_clause unit
erlps__contract_to_icode__2 args =
  EXC.badarity (ErlangFun 2 erlps__contract_to_icode__2) args

erlps__ast_id__1 :: ErlangFun
erlps__ast_id__1 [(ErlangTuple [(ErlangAtom "id"), _, id_0])] =
  id_0
erlps__ast_id__1 [(ErlangTuple [(ErlangAtom "qid"), _, id_0])] =
  id_0
erlps__ast_id__1 [arg_1] = EXC.function_clause unit
erlps__ast_id__1 args =
  EXC.badarity (ErlangFun 1 erlps__ast_id__1) args

erlps__ast_args__3 :: ErlangFun
erlps__ast_args__3 [(ErlangCons (ErlangTuple [(ErlangAtom "typed"),
                                              _, name_0, type_1]) rest_2),
                    acc_3, icode_4]
  =
  let    tup_el_8 = erlps__ast_id__1 [name_0]
  in let tup_el_10 = erlps__ast_typerep1__2 [type_1, icode_4]
  in let head_7 = ErlangTuple [tup_el_8, tup_el_10]
  in erlps__ast_args__3 [rest_2, ErlangCons head_7 acc_3, icode_4]
erlps__ast_args__3 [(ErlangEmptyList), acc_0, _icode_1] =
  BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [acc_0]
erlps__ast_args__3 [arg_3, arg_4, arg_5] =
  EXC.function_clause unit
erlps__ast_args__3 args =
  EXC.badarity (ErlangFun 3 erlps__ast_args__3) args

erlps__ast_type__2 :: ErlangFun
erlps__ast_type__2 [t_0, icode_1] =
  erlps__ast_typerep__2 [t_0, icode_1]
erlps__ast_type__2 [arg_4, arg_5] = EXC.function_clause unit
erlps__ast_type__2 args =
  EXC.badarity (ErlangFun 2 erlps__ast_type__2) args

erlps__ast_body__2 :: ErlangFun
erlps__ast_body__2 [(ErlangTuple [(ErlangAtom "qid"), _,
                                  (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangEmptyList))))))))) (ErlangCons (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangCons (ErlangInt num_10) (ErlangCons (ErlangInt num_11) (ErlangCons (ErlangInt num_12) (ErlangCons (ErlangInt num_13) (ErlangCons (ErlangInt num_14) (ErlangEmptyList)))))))) (ErlangEmptyList)))]),
                    _icode_15]
  | (ErlangInt num_0) == (toErl 67)
  , (ErlangInt num_1) == (toErl 111)
  , (ErlangInt num_2) == (toErl 110)
  , (ErlangInt num_3) == (toErl 116)
  , (ErlangInt num_4) == (toErl 114)
  , (ErlangInt num_5) == (toErl 97)
  , (ErlangInt num_6) == (toErl 99)
  , (ErlangInt num_7) == (toErl 116)
  , (ErlangInt num_8) == (toErl 97)
  , (ErlangInt num_9) == (toErl 100)
  , (ErlangInt num_10) == (toErl 100)
  , (ErlangInt num_11) == (toErl 114)
  , (ErlangInt num_12) == (toErl 101)
  , (ErlangInt num_13) == (toErl 115)
  , (ErlangInt num_14) == (toErl 115) =
  ErlangAtom "prim_contract_address"
erlps__ast_body__2 [(ErlangTuple [(ErlangAtom "qid"), _,
                                  (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangEmptyList))))))))) (ErlangCons (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangCons (ErlangInt num_10) (ErlangCons (ErlangInt num_11) (ErlangCons (ErlangInt num_12) (ErlangCons (ErlangInt num_13) (ErlangCons (ErlangInt num_14) (ErlangEmptyList)))))))) (ErlangEmptyList)))]),
                    _icode_15]
  | (ErlangInt num_0) == (toErl 67)
  , (ErlangInt num_1) == (toErl 111)
  , (ErlangInt num_2) == (toErl 110)
  , (ErlangInt num_3) == (toErl 116)
  , (ErlangInt num_4) == (toErl 114)
  , (ErlangInt num_5) == (toErl 97)
  , (ErlangInt num_6) == (toErl 99)
  , (ErlangInt num_7) == (toErl 116)
  , (ErlangInt num_8) == (toErl 99)
  , (ErlangInt num_9) == (toErl 114)
  , (ErlangInt num_10) == (toErl 101)
  , (ErlangInt num_11) == (toErl 97)
  , (ErlangInt num_12) == (toErl 116)
  , (ErlangInt num_13) == (toErl 111)
  , (ErlangInt num_14) == (toErl 114) =
  ErlangAtom "prim_contract_creator"
erlps__ast_body__2 [(ErlangTuple [(ErlangAtom "qid"), _,
                                  (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangEmptyList))))))))) (ErlangCons (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangCons (ErlangInt num_10) (ErlangCons (ErlangInt num_11) (ErlangCons (ErlangInt num_12) (ErlangCons (ErlangInt num_13) (ErlangCons (ErlangInt num_14) (ErlangEmptyList)))))))) (ErlangEmptyList)))]),
                    _icode_15]
  | (ErlangInt num_0) == (toErl 67)
  , (ErlangInt num_1) == (toErl 111)
  , (ErlangInt num_2) == (toErl 110)
  , (ErlangInt num_3) == (toErl 116)
  , (ErlangInt num_4) == (toErl 114)
  , (ErlangInt num_5) == (toErl 97)
  , (ErlangInt num_6) == (toErl 99)
  , (ErlangInt num_7) == (toErl 116)
  , (ErlangInt num_8) == (toErl 98)
  , (ErlangInt num_9) == (toErl 97)
  , (ErlangInt num_10) == (toErl 108)
  , (ErlangInt num_11) == (toErl 97)
  , (ErlangInt num_12) == (toErl 110)
  , (ErlangInt num_13) == (toErl 99)
  , (ErlangInt num_14) == (toErl 101) =
  ErlangTuple
    [ErlangAtom "prim_balance", ErlangAtom "prim_contract_address"]
erlps__ast_body__2 [(ErlangTuple [(ErlangAtom "qid"), _,
                                  (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangEmptyList))))) (ErlangCons (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangEmptyList))))))) (ErlangEmptyList)))]),
                    _icode_10]
  | (ErlangInt num_0) == (toErl 67)
  , (ErlangInt num_1) == (toErl 97)
  , (ErlangInt num_2) == (toErl 108)
  , (ErlangInt num_3) == (toErl 108)
  , (ErlangInt num_4) == (toErl 111)
  , (ErlangInt num_5) == (toErl 114)
  , (ErlangInt num_6) == (toErl 105)
  , (ErlangInt num_7) == (toErl 103)
  , (ErlangInt num_8) == (toErl 105)
  , (ErlangInt num_9) == (toErl 110) =
  ErlangAtom "prim_call_origin"
erlps__ast_body__2 [(ErlangTuple [(ErlangAtom "qid"), _,
                                  (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangEmptyList))))) (ErlangCons (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangEmptyList))))))) (ErlangEmptyList)))]),
                    _icode_10]
  | (ErlangInt num_0) == (toErl 67)
  , (ErlangInt num_1) == (toErl 97)
  , (ErlangInt num_2) == (toErl 108)
  , (ErlangInt num_3) == (toErl 108)
  , (ErlangInt num_4) == (toErl 99)
  , (ErlangInt num_5) == (toErl 97)
  , (ErlangInt num_6) == (toErl 108)
  , (ErlangInt num_7) == (toErl 108)
  , (ErlangInt num_8) == (toErl 101)
  , (ErlangInt num_9) == (toErl 114) =
  ErlangAtom "prim_caller"
erlps__ast_body__2 [(ErlangTuple [(ErlangAtom "qid"), _,
                                  (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangEmptyList))))) (ErlangCons (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangEmptyList)))))) (ErlangEmptyList)))]),
                    _icode_9]
  | (ErlangInt num_0) == (toErl 67)
  , (ErlangInt num_1) == (toErl 97)
  , (ErlangInt num_2) == (toErl 108)
  , (ErlangInt num_3) == (toErl 108)
  , (ErlangInt num_4) == (toErl 118)
  , (ErlangInt num_5) == (toErl 97)
  , (ErlangInt num_6) == (toErl 108)
  , (ErlangInt num_7) == (toErl 117)
  , (ErlangInt num_8) == (toErl 101) =
  ErlangAtom "prim_call_value"
erlps__ast_body__2 [(ErlangTuple [(ErlangAtom "qid"), _,
                                  (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangEmptyList))))) (ErlangCons (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangCons (ErlangInt num_10) (ErlangCons (ErlangInt num_11) (ErlangCons (ErlangInt num_12) (ErlangEmptyList)))))))))) (ErlangEmptyList)))]),
                    _icode_13]
  | (ErlangInt num_0) == (toErl 67)
  , (ErlangInt num_1) == (toErl 97)
  , (ErlangInt num_2) == (toErl 108)
  , (ErlangInt num_3) == (toErl 108)
  , (ErlangInt num_4) == (toErl 103)
  , (ErlangInt num_5) == (toErl 97)
  , (ErlangInt num_6) == (toErl 115)
  , (ErlangInt num_7) == (toErl 95)
  , (ErlangInt num_8) == (toErl 112)
  , (ErlangInt num_9) == (toErl 114)
  , (ErlangInt num_10) == (toErl 105)
  , (ErlangInt num_11) == (toErl 99)
  , (ErlangInt num_12) == (toErl 101) =
  ErlangAtom "prim_gas_price"
erlps__ast_body__2 [(ErlangTuple [(ErlangAtom "qid"), _,
                                  (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangEmptyList)))))) (ErlangCons (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangCons (ErlangInt num_10) (ErlangCons (ErlangInt num_11) (ErlangCons (ErlangInt num_12) (ErlangEmptyList))))))))) (ErlangEmptyList)))]),
                    _icode_13]
  | (ErlangInt num_0) == (toErl 67)
  , (ErlangInt num_1) == (toErl 104)
  , (ErlangInt num_2) == (toErl 97)
  , (ErlangInt num_3) == (toErl 105)
  , (ErlangInt num_4) == (toErl 110)
  , (ErlangInt num_5) == (toErl 99)
  , (ErlangInt num_6) == (toErl 111)
  , (ErlangInt num_7) == (toErl 105)
  , (ErlangInt num_8) == (toErl 110)
  , (ErlangInt num_9) == (toErl 98)
  , (ErlangInt num_10) == (toErl 97)
  , (ErlangInt num_11) == (toErl 115)
  , (ErlangInt num_12) == (toErl 101) =
  ErlangAtom "prim_coinbase"
erlps__ast_body__2 [(ErlangTuple [(ErlangAtom "qid"), _,
                                  (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangEmptyList)))))) (ErlangCons (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangCons (ErlangInt num_10) (ErlangCons (ErlangInt num_11) (ErlangCons (ErlangInt num_12) (ErlangCons (ErlangInt num_13) (ErlangEmptyList)))))))))) (ErlangEmptyList)))]),
                    _icode_14]
  | (ErlangInt num_0) == (toErl 67)
  , (ErlangInt num_1) == (toErl 104)
  , (ErlangInt num_2) == (toErl 97)
  , (ErlangInt num_3) == (toErl 105)
  , (ErlangInt num_4) == (toErl 110)
  , (ErlangInt num_5) == (toErl 116)
  , (ErlangInt num_6) == (toErl 105)
  , (ErlangInt num_7) == (toErl 109)
  , (ErlangInt num_8) == (toErl 101)
  , (ErlangInt num_9) == (toErl 115)
  , (ErlangInt num_10) == (toErl 116)
  , (ErlangInt num_11) == (toErl 97)
  , (ErlangInt num_12) == (toErl 109)
  , (ErlangInt num_13) == (toErl 112) =
  ErlangAtom "prim_timestamp"
erlps__ast_body__2 [(ErlangTuple [(ErlangAtom "qid"), _,
                                  (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangEmptyList)))))) (ErlangCons (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangCons (ErlangInt num_10) (ErlangCons (ErlangInt num_11) (ErlangCons (ErlangInt num_12) (ErlangCons (ErlangInt num_13) (ErlangCons (ErlangInt num_14) (ErlangCons (ErlangInt num_15) (ErlangCons (ErlangInt num_16) (ErlangEmptyList))))))))))))) (ErlangEmptyList)))]),
                    _icode_17]
  | (ErlangInt num_0) == (toErl 67)
  , (ErlangInt num_1) == (toErl 104)
  , (ErlangInt num_2) == (toErl 97)
  , (ErlangInt num_3) == (toErl 105)
  , (ErlangInt num_4) == (toErl 110)
  , (ErlangInt num_5) == (toErl 98)
  , (ErlangInt num_6) == (toErl 108)
  , (ErlangInt num_7) == (toErl 111)
  , (ErlangInt num_8) == (toErl 99)
  , (ErlangInt num_9) == (toErl 107)
  , (ErlangInt num_10) == (toErl 95)
  , (ErlangInt num_11) == (toErl 104)
  , (ErlangInt num_12) == (toErl 101)
  , (ErlangInt num_13) == (toErl 105)
  , (ErlangInt num_14) == (toErl 103)
  , (ErlangInt num_15) == (toErl 104)
  , (ErlangInt num_16) == (toErl 116) =
  ErlangAtom "prim_block_height"
erlps__ast_body__2 [(ErlangTuple [(ErlangAtom "qid"), _,
                                  (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangEmptyList)))))) (ErlangCons (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangCons (ErlangInt num_10) (ErlangCons (ErlangInt num_11) (ErlangCons (ErlangInt num_12) (ErlangCons (ErlangInt num_13) (ErlangCons (ErlangInt num_14) (ErlangEmptyList))))))))))) (ErlangEmptyList)))]),
                    _icode_15]
  | (ErlangInt num_0) == (toErl 67)
  , (ErlangInt num_1) == (toErl 104)
  , (ErlangInt num_2) == (toErl 97)
  , (ErlangInt num_3) == (toErl 105)
  , (ErlangInt num_4) == (toErl 110)
  , (ErlangInt num_5) == (toErl 100)
  , (ErlangInt num_6) == (toErl 105)
  , (ErlangInt num_7) == (toErl 102)
  , (ErlangInt num_8) == (toErl 102)
  , (ErlangInt num_9) == (toErl 105)
  , (ErlangInt num_10) == (toErl 99)
  , (ErlangInt num_11) == (toErl 117)
  , (ErlangInt num_12) == (toErl 108)
  , (ErlangInt num_13) == (toErl 116)
  , (ErlangInt num_14) == (toErl 121) =
  ErlangAtom "prim_difficulty"
erlps__ast_body__2 [(ErlangTuple [(ErlangAtom "qid"), _,
                                  (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangEmptyList)))))) (ErlangCons (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangCons (ErlangInt num_10) (ErlangCons (ErlangInt num_11) (ErlangCons (ErlangInt num_12) (ErlangCons (ErlangInt num_13) (ErlangEmptyList)))))))))) (ErlangEmptyList)))]),
                    _icode_14]
  | (ErlangInt num_0) == (toErl 67)
  , (ErlangInt num_1) == (toErl 104)
  , (ErlangInt num_2) == (toErl 97)
  , (ErlangInt num_3) == (toErl 105)
  , (ErlangInt num_4) == (toErl 110)
  , (ErlangInt num_5) == (toErl 103)
  , (ErlangInt num_6) == (toErl 97)
  , (ErlangInt num_7) == (toErl 115)
  , (ErlangInt num_8) == (toErl 95)
  , (ErlangInt num_9) == (toErl 108)
  , (ErlangInt num_10) == (toErl 105)
  , (ErlangInt num_11) == (toErl 109)
  , (ErlangInt num_12) == (toErl 105)
  , (ErlangInt num_13) == (toErl 116) =
  ErlangAtom "prim_gas_limit"
erlps__ast_body__2 [(ErlangTuple [(ErlangAtom "qid"), _,
                                  (ErlangCons con_0 (ErlangCons (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangEmptyList)))))) (ErlangEmptyList)))]),
                    (ErlangMap map_6)]
  | (ErlangInt num_1) == (toErl 115)
  , (ErlangInt num_2) == (toErl 116)
  , (ErlangInt num_3) == (toErl 97)
  , (ErlangInt num_4) == (toErl 116)
  , (ErlangInt num_5) == (toErl 101)
  , (DM.Just con_7) <-
      (Map.lookup (ErlangAtom "contract_name") map_6)
  , con_7 == con_0 =
  ErlangAtom "prim_state"
erlps__ast_body__2 [(ErlangTuple [(ErlangAtom "app"), _,
                                  (ErlangTuple [(ErlangAtom "typed"), _,
                                                (ErlangTuple [(ErlangAtom "qid"),
                                                              _,
                                                              (ErlangCons con_0 (ErlangCons (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangEmptyList)))) (ErlangEmptyList)))]),
                                                (ErlangTuple [(ErlangAtom "fun_t"),
                                                              _, _, _, _])]),
                                  (ErlangCons newstate_4 (ErlangEmptyList))]),
                    icode_7@(ErlangMap map_5)]
  | (ErlangInt num_1) == (toErl 112)
  , (ErlangInt num_2) == (toErl 117)
  , (ErlangInt num_3) == (toErl 116)
  , (DM.Just con_6) <-
      (Map.lookup (ErlangAtom "contract_name") map_5)
  , con_6 == con_0 =
  let tup_el_9 = erlps__ast_body__2 [newstate_4, icode_7]
  in ErlangTuple [ErlangAtom "prim_put", tup_el_9]
erlps__ast_body__2 [(ErlangTuple [(ErlangAtom "typed"), _,
                                  id_4@(ErlangTuple [(ErlangAtom "qid"), _,
                                                     (ErlangCons con_0 (ErlangCons (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangEmptyList)))) (ErlangEmptyList)))]),
                                  type_5]),
                    icode_8@(ErlangMap map_6)]
  | (ErlangInt num_1) == (toErl 112)
  , (ErlangInt num_2) == (toErl 117)
  , (ErlangInt num_3) == (toErl 116)
  , (DM.Just con_7) <-
      (Map.lookup (ErlangAtom "contract_name") map_6)
  , con_7 == con_0 =
  erlps__eta_expand__3 [id_4, type_5, icode_8]
erlps__ast_body__2 [(ErlangTuple [(ErlangAtom "qid"), _,
                                  (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangEmptyList))))) (ErlangCons (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangCons (ErlangInt num_10) (ErlangEmptyList)))))))) (ErlangEmptyList)))]),
                    _icode_11]
  | (ErlangInt num_0) == (toErl 65)
  , (ErlangInt num_1) == (toErl 117)
  , (ErlangInt num_2) == (toErl 116)
  , (ErlangInt num_3) == (toErl 104)
  , (ErlangInt num_4) == (toErl 116)
  , (ErlangInt num_5) == (toErl 120)
  , (ErlangInt num_6) == (toErl 95)
  , (ErlangInt num_7) == (toErl 104)
  , (ErlangInt num_8) == (toErl 97)
  , (ErlangInt num_9) == (toErl 115)
  , (ErlangInt num_10) == (toErl 104) =
  let    arg_12 = toErl 500
  in let tup_el_15 = toErl 0
  in let arg_13 = ErlangTuple [ErlangAtom "integer", tup_el_15]
  in let
    arg_18 =
      BIF.do_remote_fun_call "Aeso.Icode" "erlps__option_typerep__1"
        [ErlangAtom "word"]
  in
    erlps__prim_call__5
      [arg_12, arg_13, ErlangEmptyList, ErlangEmptyList, arg_18]
erlps__ast_body__2 [(ErlangTuple [(ErlangAtom "map_get"), _,
                                  map_0, key_1]),
                    icode_2]
  =
  let
    matchExpr_6 = erlps__check_monomorphic_map__2 [map_0, icode_2]
  in
    case matchExpr_6 of
      (ErlangTuple [_, valtype_5]) ->
        let    tup_el_8 = erlps__ast_typerep__2 [valtype_5, icode_2]
        in let fun_11 = ErlangTuple [ErlangAtom "map_get", tup_el_8]
        in let head_14 = erlps__ast_body__2 [map_0, icode_2]
        in let head_18 = erlps__ast_body__2 [key_1, icode_2]
        in
          erlps__builtin_call__2
            [fun_11, ErlangCons head_14 (ErlangCons head_18 ErlangEmptyList)]
      _ -> EXC.badmatch matchExpr_6
erlps__ast_body__2 [(ErlangTuple [(ErlangAtom "map_get"), _,
                                  map_0, key_1, val_2]),
                    icode_3]
  =
  let
    matchExpr_7 = erlps__check_monomorphic_map__2 [map_0, icode_3]
  in
    case matchExpr_7 of
      (ErlangTuple [_, valtype_6]) ->
        let    tup_el_9 = erlps__ast_typerep__2 [valtype_6, icode_3]
        in let
          fun_12 = ErlangTuple [ErlangAtom "map_lookup_default", tup_el_9]
        in let head_15 = erlps__ast_body__2 [map_0, icode_3]
        in let head_19 = erlps__ast_body__2 [key_1, icode_3]
        in let head_23 = erlps__ast_body__2 [val_2, icode_3]
        in
          erlps__builtin_call__2
            [fun_12,
             ErlangCons head_15
               (ErlangCons head_19 (ErlangCons head_23 ErlangEmptyList))]
      _ -> EXC.badmatch matchExpr_7
erlps__ast_body__2 [(ErlangTuple [(ErlangAtom "typed"), ann_0,
                                  (ErlangTuple [(ErlangAtom "map"), _, kvs_1]),
                                  maptype_2]),
                    icode_3]
  =
  let
    matchExpr_9 =
      erlps__check_monomorphic_map__3 [ann_0, maptype_2, icode_3]
  in
    case matchExpr_9 of
      (ErlangTuple [keytype_7, valtype_8]) ->
        let   
          arg_10 =
            ErlangFun 2
              (let
                 lambda_11 [(ErlangTuple [k_14, v_15]), map_16] =
                   let    head_21 = erlps__ast_body__2 [k_14, icode_3]
                   in let head_25 = erlps__ast_body__2 [v_15, icode_3]
                   in
                     erlps__builtin_call__2
                       [ErlangAtom "map_put",
                        ErlangCons map_16
                          (ErlangCons head_21
                             (ErlangCons head_25 ErlangEmptyList))]
                 lambda_11 [arg_12, arg_13] = EXC.function_clause unit
                 lambda_11 args = EXC.badarity (ErlangFun 2 lambda_11) args
               in lambda_11)
        in let
          arg_29 = erlps__map_empty__3 [keytype_7, valtype_8, icode_3]
        in
          BIF.do_remote_fun_call "Lists" "erlps__foldr__3"
            [arg_10, arg_29, kvs_1]
      _ -> EXC.badmatch matchExpr_9
erlps__ast_body__2 [(ErlangTuple [(ErlangAtom "map"), _, map_0,
                                  (ErlangEmptyList)]),
                    icode_1]
  =
  erlps__ast_body__2 [map_0, icode_1]
erlps__ast_body__2 [(ErlangTuple [(ErlangAtom "map"), _, map_0,
                                  (ErlangCons upd_1 (ErlangEmptyList))]),
                    icode_2]
  =
  case upd_1 of
    (ErlangTuple [(ErlangAtom "field"), _,
                  (ErlangCons (ErlangTuple [(ErlangAtom "map_get"), _,
                                            key_4]) (ErlangEmptyList)),
                  val_5]) ->
      erlps__map_put__4 [key_4, val_5, map_0, icode_2]
    (ErlangTuple [(ErlangAtom "field_upd"), _,
                  (ErlangCons (ErlangTuple [(ErlangAtom "map_get"), _,
                                            key_10]) (ErlangEmptyList)),
                  valfun_11]) ->
      erlps__map_upd__4 [key_10, valfun_11, map_0, icode_2]
    (ErlangTuple [(ErlangAtom "field_upd"), _,
                  (ErlangCons (ErlangTuple [(ErlangAtom "map_get"), _, key_16,
                                            val_17]) (ErlangEmptyList)),
                  valfun_18]) ->
      erlps__map_upd__5 [key_16, val_17, valfun_18, map_0, icode_2]
    something_else -> EXC.case_clause something_else
erlps__ast_body__2 [(ErlangTuple [(ErlangAtom "map"), ann_0,
                                  map_1, (ErlangCons upd_2 upds_3)]),
                    icode_4]
  =
  let   
    tup_el_8 =
      ErlangTuple
        [ErlangAtom "map", ann_0, map_1,
         ErlangCons upd_2 ErlangEmptyList]
  in let
    arg_5 = ErlangTuple [ErlangAtom "map", ann_0, tup_el_8, upds_3]
  in erlps__ast_body__2 [arg_5, icode_4]
erlps__ast_body__2 [(ErlangTuple [(ErlangAtom "qid"), _,
                                  (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangEmptyList))))) (ErlangCons (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangEmptyList))))) (ErlangEmptyList)))]),
                    _icode_8]
  | (ErlangInt num_0) == (toErl 66)
  , (ErlangInt num_1) == (toErl 105)
  , (ErlangInt num_2) == (toErl 116)
  , (ErlangInt num_3) == (toErl 115)
  , (ErlangInt num_4) == (toErl 110)
  , (ErlangInt num_5) == (toErl 111)
  , (ErlangInt num_6) == (toErl 110)
  , (ErlangInt num_7) == (toErl 101) =
  let tup_el_10 = toErl 0
  in ErlangTuple [ErlangAtom "integer", tup_el_10]
erlps__ast_body__2 [(ErlangTuple [(ErlangAtom "qid"), _,
                                  (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangEmptyList))))) (ErlangCons (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangEmptyList)))) (ErlangEmptyList)))]),
                    _icode_7]
  | (ErlangInt num_0) == (toErl 66)
  , (ErlangInt num_1) == (toErl 105)
  , (ErlangInt num_2) == (toErl 116)
  , (ErlangInt num_3) == (toErl 115)
  , (ErlangInt num_4) == (toErl 97)
  , (ErlangInt num_5) == (toErl 108)
  , (ErlangInt num_6) == (toErl 108) =
  let    lop_11 = toErl 1
  in let rop_12 = toErl 256
  in let lop_10 = BIF.erlang__bsl__2 [lop_11, rop_12]
  in let rop_13 = toErl 1
  in let tup_el_9 = BIF.erlang__op_minus [lop_10, rop_13]
  in ErlangTuple [ErlangAtom "integer", tup_el_9]
erlps__ast_body__2 [(ErlangTuple [(ErlangAtom "id"), _, name_0]),
                    _icode_1]
  =
  ErlangTuple [ErlangAtom "var_ref", name_0]
erlps__ast_body__2 [(ErlangTuple [(ErlangAtom "typed"), _,
                                  id_0@(ErlangTuple [(ErlangAtom "qid"), _, _]),
                                  type_1]),
                    icode_2]
  =
  let case_3 = erlps__is_builtin_fun__2 [id_0, icode_2]
  in
    case case_3 of
      (ErlangAtom "true") ->
        erlps__eta_expand__3 [id_0, type_1, icode_2]
      (ErlangAtom "false") -> erlps__ast_body__2 [id_0, icode_2]
      something_else -> EXC.case_clause something_else
erlps__ast_body__2 [(ErlangTuple [(ErlangAtom "qid"), _,
                                  name_0]),
                    _icode_1]
  =
  ErlangTuple [ErlangAtom "var_ref", name_0]
erlps__ast_body__2 [(ErlangTuple [(ErlangAtom "bool"), _,
                                  bool_0]),
                    _icode_1]
  =
  let
    value_2 =
      case ErlangAtom "true" of
        _ | (==) (ErlangAtom "true") bool_0 -> toErl 1
        _ -> toErl 0
  in ErlangTuple [ErlangAtom "integer", value_2]
erlps__ast_body__2 [(ErlangTuple [(ErlangAtom "int"), _,
                                  value_0]),
                    _icode_1]
  =
  ErlangTuple [ErlangAtom "integer", value_0]
erlps__ast_body__2 [(ErlangTuple [(ErlangAtom "char"), _,
                                  value_0]),
                    _icode_1]
  =
  ErlangTuple [ErlangAtom "integer", value_0]
erlps__ast_body__2 [(ErlangTuple [(ErlangAtom "bytes"), _,
                                  bin_0]),
                    _icode_1]
  =
  let
    case_2 =
      BIF.do_remote_fun_call "Aeb.Memory" "erlps__binary_to_words__1"
        [bin_0]
  in
    case case_2 of
      (ErlangCons word_4 (ErlangEmptyList)) ->
        ErlangTuple [ErlangAtom "integer", word_4]
      words_7 ->
        let
          tup_el_9 =
            flmap
              (\ lc_12 ->
                 let lcRet_13 = ErlangTuple [ErlangAtom "integer", lc_12]
                 in ErlangCons lcRet_13 ErlangEmptyList)
              words_7
        in ErlangTuple [ErlangAtom "tuple", tup_el_9]
erlps__ast_body__2 [(ErlangTuple [key_0, _, bin_1]), _icode_2]
  | (((weakEq key_0 (ErlangAtom "account_pubkey")) ||
        (weakEq key_0 (ErlangAtom "contract_pubkey"))) ||
       (weakEq key_0 (ErlangAtom "oracle_pubkey"))) ||
      (weakEq key_0 (ErlangAtom "oracle_query_id")) =
  case bin_1 of
    (ErlangBinary binSeg_3) | (ErlangInt size_4) <- (toErl 32)
                            , (BIN.Ok value_6 bin_5) <-
                                (BIN.chopInt binSeg_3 size_4 8 BIN.Big
                                   BIN.Unsigned)
                            , BIN.empty bin_5 ->
      ErlangTuple [ErlangAtom "integer", value_6]
    _ -> EXC.badmatch bin_1
erlps__ast_body__2 [(ErlangTuple [(ErlangAtom "string"), _,
                                  bin_0]),
                    _icode_1]
  =
  let    head_2 = BIF.erlang__size__1 [bin_0]
  in let
    tail_4 =
      BIF.do_remote_fun_call "Aeb.Memory" "erlps__binary_to_words__1"
        [bin_0]
  in let
    tup_el_8 =
      flmap
        (\ lc_11 ->
           let lcRet_12 = ErlangTuple [ErlangAtom "integer", lc_11]
           in ErlangCons lcRet_12 ErlangEmptyList)
        (ErlangCons head_2 tail_4)
  in ErlangTuple [ErlangAtom "tuple", tup_el_8]
erlps__ast_body__2 [(ErlangTuple [(ErlangAtom "tuple"), _,
                                  args_0]),
                    icode_1]
  =
  let
    tup_el_3 =
      flmap
        (\ lc_6 ->
           let lcRet_7 = erlps__ast_body__2 [lc_6, icode_1]
           in ErlangCons lcRet_7 ErlangEmptyList)
        args_0
  in ErlangTuple [ErlangAtom "tuple", tup_el_3]
erlps__ast_body__2 [(ErlangTuple [(ErlangAtom "list"), _,
                                  args_0]),
                    icode_1]
  =
  let
    tup_el_3 =
      flmap
        (\ lc_6 ->
           let lcRet_7 = erlps__ast_body__2 [lc_6, icode_1]
           in ErlangCons lcRet_7 ErlangEmptyList)
        args_0
  in ErlangTuple [ErlangAtom "list", tup_el_3]
erlps__ast_body__2 [(ErlangTuple [(ErlangAtom "proj"), _,
                                  (ErlangTuple [(ErlangAtom "typed"), _, addr_0,
                                                (ErlangTuple [(ErlangAtom "con"),
                                                              _, _])]),
                                  (ErlangTuple [(ErlangAtom "id"), _,
                                                (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangEmptyList))))))))])]),
                    icode_8]
  | (ErlangInt num_1) == (toErl 97)
  , (ErlangInt num_2) == (toErl 100)
  , (ErlangInt num_3) == (toErl 100)
  , (ErlangInt num_4) == (toErl 114)
  , (ErlangInt num_5) == (toErl 101)
  , (ErlangInt num_6) == (toErl 115)
  , (ErlangInt num_7) == (toErl 115) =
  erlps__ast_body__2 [addr_0, icode_8]
erlps__ast_body__2 [(ErlangTuple [(ErlangAtom "app"), _,
                                  (ErlangTuple [(ErlangAtom "typed"), _,
                                                (ErlangTuple [(ErlangAtom "proj"),
                                                              _, addr_0,
                                                              (ErlangTuple [(ErlangAtom "id"),
                                                                            _,
                                                                            funname_1])]),
                                                (ErlangTuple [(ErlangAtom "fun_t"),
                                                              _, namedt_2,
                                                              argst_3,
                                                              outt_4])]),
                                  args0_5]),
                    icode_6]
  =
  let   
    namedargs_11 =
      flmap
        (\ lc_9 ->
           case lc_9 of
             arg_8@(ErlangTuple [(ErlangAtom "named_arg"), _, _, _]) ->
               ErlangCons arg_8 ErlangEmptyList
             _ -> ErlangEmptyList)
        args0_5
  in let args_14 = BIF.erlang__op_unAppend [args0_5, namedargs_11]
  in let
    argopts_24 =
      flmap
        (\ lc_18 ->
           case lc_18 of
             (ErlangTuple [(ErlangAtom "named_arg"), _,
                           (ErlangTuple [(ErlangAtom "id"), _, name_16]),
                           value_17]) ->
               let    tup_el_21 = erlps__ast_body__2 [value_17, icode_6]
               in let lcRet_19 = ErlangTuple [name_16, tup_el_21]
               in ErlangCons lcRet_19 ErlangEmptyList
             _ -> ErlangEmptyList)
        namedargs_11
  in let
    defaults_34 =
      flmap
        (\ lc_28 ->
           case lc_28 of
             (ErlangTuple [(ErlangAtom "named_arg_t"), _,
                           (ErlangTuple [(ErlangAtom "id"), _, name_26]), _,
                           default_27]) ->
               let    tup_el_31 = erlps__ast_body__2 [default_27, icode_6]
               in let lcRet_29 = ErlangTuple [name_26, tup_el_31]
               in ErlangCons lcRet_29 ErlangEmptyList
             _ -> ErlangEmptyList)
        namedt_2
  in let
    argsi_41 =
      flmap
        (\ lc_37 ->
           let lcRet_38 = erlps__ast_body__2 [lc_37, icode_6]
           in ErlangCons lcRet_38 ErlangEmptyList)
        args_14
  in let
    arg_42 =
      ErlangTuple [ErlangAtom "tuple_t", ErlangEmptyList, argst_3]
  in let argtype_46 = erlps__ast_typerep__1 [arg_42]
  in let arg_47 = toErl "gas"
  in let arg_48 = BIF.erlang__op_append [argopts_24, defaults_34]
  in let
    gas_51 =
      BIF.do_remote_fun_call "Proplists" "erlps__get_value__2"
        [arg_47, arg_48]
  in let arg_52 = toErl "value"
  in let arg_53 = BIF.erlang__op_append [argopts_24, defaults_34]
  in let
    value_56 =
      BIF.do_remote_fun_call "Proplists" "erlps__get_value__2"
        [arg_52, arg_53]
  in let outtype_59 = erlps__ast_typerep__2 [outt_4, icode_6]
  in let arg_60 = BIF.erlang__list_to_binary__1 [funname_1]
  in let
    matchExpr_68 =
      BIF.do_remote_fun_call "Aeb.Aevm.Abi"
        "erlps__function_type_hash__3" [arg_60, argtype_46, outtype_59]
  in
    case matchExpr_68 of
      (ErlangBinary binSeg_64) | (ErlangInt size_65) <- (toErl 256)
                               , (BIN.Ok typehash_67 bin_66) <-
                                   (BIN.chopInt binSeg_64 size_65 1 BIN.Big
                                      BIN.Unsigned)
                               , BIN.empty bin_66 ->
        let    fun_71 = ErlangTuple [ErlangAtom "integer", typehash_67]
        in let tup_el_74 = erlps__ast_body__2 [addr_0, icode_6]
        in let head_83 = ErlangTuple [ErlangAtom "tuple", argsi_41]
        in let
          tup_el_78 =
            ErlangTuple
              [ErlangAtom "tuple",
               ErlangCons fun_71 (ErlangCons head_83 ErlangEmptyList)]
        in let tup_el_89 = toErl 0
        in let tup_el_87 = ErlangTuple [ErlangAtom "integer", tup_el_89]
        in
          ErlangTuple
            [ErlangAtom "prim_call_contract", gas_51, tup_el_74, value_56,
             tup_el_78, tup_el_87]
      _ -> EXC.badmatch matchExpr_68
erlps__ast_body__2 [(ErlangTuple [(ErlangAtom "proj"), _,
                                  con_0@(ErlangTuple [(ErlangAtom "typed"), _,
                                                      _,
                                                      (ErlangTuple [(ErlangAtom "con"),
                                                                    _, _])]),
                                  _fun_1]),
                    _icode_2]
  =
  let
    arg_3 = ErlangTuple [ErlangAtom "unapplied_contract_call", con_0]
  in erlps__gen_error__1 [arg_3]
erlps__ast_body__2 [(ErlangTuple [(ErlangAtom "con"), _,
                                  name_0]),
                    icode_1]
  =
  let   
    tag_6 =
      BIF.do_remote_fun_call "Aeso.Icode"
        "erlps__get_constructor_tag__2"
        [ErlangCons name_0 ErlangEmptyList, icode_1]
  in let head_9 = ErlangTuple [ErlangAtom "integer", tag_6]
  in
    ErlangTuple
      [ErlangAtom "tuple", ErlangCons head_9 ErlangEmptyList]
erlps__ast_body__2 [(ErlangTuple [(ErlangAtom "qcon"), _,
                                  name_0]),
                    icode_1]
  =
  let   
    tag_4 =
      BIF.do_remote_fun_call "Aeso.Icode"
        "erlps__get_constructor_tag__2" [name_0, icode_1]
  in let head_7 = ErlangTuple [ErlangAtom "integer", tag_4]
  in
    ErlangTuple
      [ErlangAtom "tuple", ErlangCons head_7 ErlangEmptyList]
erlps__ast_body__2 [(ErlangTuple [(ErlangAtom "app"), _,
                                  (ErlangTuple [(ErlangAtom "typed"), _,
                                                (ErlangTuple [(ErlangAtom "con"),
                                                              _, name_0]),
                                                _]),
                                  args_1]),
                    icode_2]
  =
  let   
    tag_7 =
      BIF.do_remote_fun_call "Aeso.Icode"
        "erlps__get_constructor_tag__2"
        [ErlangCons name_0 ErlangEmptyList, icode_2]
  in let head_10 = ErlangTuple [ErlangAtom "integer", tag_7]
  in let
    tail_13 =
      flmap
        (\ lc_16 ->
           let lcRet_17 = erlps__ast_body__2 [lc_16, icode_2]
           in ErlangCons lcRet_17 ErlangEmptyList)
        args_1
  in ErlangTuple [ErlangAtom "tuple", ErlangCons head_10 tail_13]
erlps__ast_body__2 [(ErlangTuple [(ErlangAtom "app"), _,
                                  (ErlangTuple [(ErlangAtom "typed"), _,
                                                (ErlangTuple [(ErlangAtom "qcon"),
                                                              _, name_0]),
                                                _]),
                                  args_1]),
                    icode_2]
  =
  let   
    tag_5 =
      BIF.do_remote_fun_call "Aeso.Icode"
        "erlps__get_constructor_tag__2" [name_0, icode_2]
  in let head_8 = ErlangTuple [ErlangAtom "integer", tag_5]
  in let
    tail_11 =
      flmap
        (\ lc_14 ->
           let lcRet_15 = erlps__ast_body__2 [lc_14, icode_2]
           in ErlangCons lcRet_15 ErlangEmptyList)
        args_1
  in ErlangTuple [ErlangAtom "tuple", ErlangCons head_8 tail_11]
erlps__ast_body__2 [(ErlangTuple [(ErlangAtom "app"), _,
                                  (ErlangTuple [(ErlangAtom ".."), _]),
                                  (ErlangCons a_0 (ErlangCons b_1 (ErlangEmptyList)))]),
                    icode_2]
  =
  let    head_7 = toErl "ListInternal"
  in let head_9 = toErl "from_to"
  in let
    tup_el_4 =
      ErlangTuple
        [ErlangAtom "var_ref",
         ErlangCons head_7 (ErlangCons head_9 ErlangEmptyList)]
  in let head_12 = erlps__ast_body__2 [a_0, icode_2]
  in let head_16 = erlps__ast_body__2 [b_1, icode_2]
  in
    ErlangTuple
      [ErlangAtom "funcall", tup_el_4,
       ErlangCons head_12 (ErlangCons head_16 ErlangEmptyList)]
erlps__ast_body__2 [(ErlangTuple [(ErlangAtom "app"), as_0,
                                  fun_1, args_2]),
                    icode_3]
  =
  let
    case_4 =
      BIF.do_remote_fun_call "Aeso.Syntax" "erlps__get_ann__2"
        [ErlangAtom "format", as_0]
  in
    case case_4 of
      (ErlangAtom "infix") ->
        case fun_1 of
          (ErlangTuple [op_7, _]) ->
            case args_2 of
              (ErlangCons a_9 (ErlangCons b_10 (ErlangEmptyList))) ->
                erlps__ast_binop__5 [op_7, as_0, a_9, b_10, icode_3]
              _ -> EXC.badmatch args_2
          _ -> EXC.badmatch fun_1
      (ErlangAtom "prefix") ->
        case fun_1 of
          (ErlangTuple [op_17, _]) ->
            case args_2 of
              (ErlangCons a_19 (ErlangEmptyList)) ->
                let tup_el_23 = erlps__ast_body__2 [a_19, icode_3]
                in ErlangTuple [ErlangAtom "unop", op_17, tup_el_23]
              _ -> EXC.badmatch args_2
          _ -> EXC.badmatch fun_1
      _ ->
        case fun_1 of
          (ErlangTuple [(ErlangAtom "typed"), _, fun1_26,
                        (ErlangTuple [(ErlangAtom "fun_t"), _, _, argst_27,
                                      rett_28])]) ->
            let case_30 = erlps__is_builtin_fun__2 [fun1_26, icode_3]
            in
              case case_30 of
                (ErlangAtom "true") ->
                  erlps__builtin_code__6
                    [as_0, fun1_26, args_2, argst_27, rett_28, icode_3]
                (ErlangAtom "false") ->
                  let    tup_el_40 = erlps__ast_body__2 [fun_1, icode_3]
                  in let
                    tup_el_43 =
                      flmap
                        (\ lc_46 ->
                           let lcRet_47 = erlps__ast_body__2 [lc_46, icode_3]
                           in ErlangCons lcRet_47 ErlangEmptyList)
                        args_2
                  in ErlangTuple [ErlangAtom "funcall", tup_el_40, tup_el_43]
                something_else -> EXC.case_clause something_else
          _ -> EXC.badmatch fun_1
erlps__ast_body__2 [(ErlangTuple [(ErlangAtom "list_comp"), _,
                                  yield_0, (ErlangEmptyList)]),
                    icode_1]
  =
  let head_4 = erlps__ast_body__2 [yield_0, icode_1]
  in
    ErlangTuple
      [ErlangAtom "list", ErlangCons head_4 ErlangEmptyList]
erlps__ast_body__2 [(ErlangTuple [(ErlangAtom "list_comp"), as_0,
                                  yield_1,
                                  (ErlangCons (ErlangTuple [(ErlangAtom "comprehension_bind"),
                                                            (ErlangTuple [(ErlangAtom "typed"),
                                                                          _,
                                                                          pat_2,
                                                                          argtype_3]),
                                                            bindexpr_4]) rest_5)]),
                    icode_6]
  =
  let    arg_7 = toErl "%lc"
  in let tup_el_13 = ErlangTuple [ErlangAtom "id", as_0, arg_7]
  in let
    tup_el_10 =
      ErlangTuple [ErlangAtom "typed", as_0, tup_el_13, argtype_3]
  in let
    tup_el_23 =
      ErlangTuple [ErlangAtom "list_comp", as_0, yield_1, rest_5]
  in let
    head_19 = ErlangTuple [ErlangAtom "case", as_0, pat_2, tup_el_23]
  in let tup_el_35 = toErl "_"
  in let tup_el_32 = ErlangTuple [ErlangAtom "id", as_0, tup_el_35]
  in let
    tup_el_36 =
      ErlangTuple [ErlangAtom "list", as_0, ErlangEmptyList]
  in let
    head_29 =
      ErlangTuple [ErlangAtom "case", as_0, tup_el_32, tup_el_36]
  in let
    body_41 =
      ErlangTuple
        [ErlangAtom "switch", as_0, tup_el_10,
         ErlangCons head_19 (ErlangCons head_29 ErlangEmptyList)]
  in let head_46 = toErl "ListInternal"
  in let head_48 = toErl "flat_map"
  in let
    tup_el_43 =
      ErlangTuple
        [ErlangAtom "var_ref",
         ErlangCons head_46 (ErlangCons head_48 ErlangEmptyList)]
  in let tup_el_57 = erlps__ast_type__2 [argtype_3, icode_6]
  in let head_54 = ErlangTuple [ErlangAtom "arg", arg_7, tup_el_57]
  in let tup_el_61 = erlps__ast_body__2 [body_41, icode_6]
  in let
    head_51 =
      ErlangTuple
        [ErlangAtom "lambda", ErlangCons head_54 ErlangEmptyList,
         tup_el_61]
  in let head_65 = erlps__ast_body__2 [bindexpr_4, icode_6]
  in
    ErlangTuple
      [ErlangAtom "funcall", tup_el_43,
       ErlangCons head_51 (ErlangCons head_65 ErlangEmptyList)]
erlps__ast_body__2 [(ErlangTuple [(ErlangAtom "list_comp"), as_0,
                                  yield_1,
                                  (ErlangCons (ErlangTuple [(ErlangAtom "comprehension_if"),
                                                            asif_2,
                                                            cond_3]) rest_4)]),
                    icode_5]
  =
  let   
    tup_el_10 =
      ErlangTuple [ErlangAtom "list_comp", as_0, yield_1, rest_4]
  in let
    tup_el_15 =
      ErlangTuple [ErlangAtom "list", as_0, ErlangEmptyList]
  in let
    arg_6 =
      ErlangTuple
        [ErlangAtom "if", asif_2, cond_3, tup_el_10, tup_el_15]
  in erlps__ast_body__2 [arg_6, icode_5]
erlps__ast_body__2 [(ErlangTuple [(ErlangAtom "list_comp"), as_0,
                                  yield_1,
                                  (ErlangCons lv_2@(ErlangTuple [(ErlangAtom "letval"),
                                                                 _, _,
                                                                 _]) rest_3)]),
                    icode_4]
  =
  let   
    head_11 =
      ErlangTuple [ErlangAtom "list_comp", as_0, yield_1, rest_3]
  in let
    arg_5 =
      ErlangTuple
        [ErlangAtom "block", as_0,
         ErlangCons lv_2 (ErlangCons head_11 ErlangEmptyList)]
  in erlps__ast_body__2 [arg_5, icode_4]
erlps__ast_body__2 [(ErlangTuple [(ErlangAtom "list_comp"), as_0,
                                  yield_1,
                                  (ErlangCons lf_2@(ErlangTuple [(ErlangAtom "letfun"),
                                                                 _, _, _, _,
                                                                 _]) rest_3)]),
                    icode_4]
  =
  let   
    head_11 =
      ErlangTuple [ErlangAtom "list_comp", as_0, yield_1, rest_3]
  in let
    arg_5 =
      ErlangTuple
        [ErlangAtom "block", as_0,
         ErlangCons lf_2 (ErlangCons head_11 ErlangEmptyList)]
  in erlps__ast_body__2 [arg_5, icode_4]
erlps__ast_body__2 [(ErlangTuple [(ErlangAtom "if"), _, dec_0,
                                  then_1, else_2]),
                    icode_3]
  =
  let    tup_el_5 = erlps__ast_body__2 [dec_0, icode_3]
  in let tup_el_8 = erlps__ast_body__2 [then_1, icode_3]
  in let tup_el_11 = erlps__ast_body__2 [else_2, icode_3]
  in ErlangTuple [ErlangAtom "ifte", tup_el_5, tup_el_8, tup_el_11]
erlps__ast_body__2 [(ErlangTuple [(ErlangAtom "switch"), _, a_0,
                                  cases_1]),
                    icode_2]
  =
  let    tup_el_4 = erlps__ast_body__2 [a_0, icode_2]
  in let
    tup_el_7 =
      flmap
        (\ lc_11 ->
           case lc_11 of
             (ErlangTuple [(ErlangAtom "case"), _, pat_9, body_10]) ->
               let    tup_el_13 = erlps__ast_body__2 [pat_9, icode_2]
               in let tup_el_16 = erlps__ast_body__2 [body_10, icode_2]
               in let lcRet_12 = ErlangTuple [tup_el_13, tup_el_16]
               in ErlangCons lcRet_12 ErlangEmptyList
             _ -> ErlangEmptyList)
        cases_1
  in ErlangTuple [ErlangAtom "switch", tup_el_4, tup_el_7]
erlps__ast_body__2 [(ErlangTuple [(ErlangAtom "block"), as_0,
                                  (ErlangCons (ErlangTuple [(ErlangAtom "letval"),
                                                            _, pat_1,
                                                            e_2]) rest_3)]),
                    icode_4]
  =
  let    e1_7 = erlps__ast_body__2 [e_2, icode_4]
  in let pat1_10 = erlps__ast_body__2 [pat_1, icode_4]
  in let arg_11 = ErlangTuple [ErlangAtom "block", as_0, rest_3]
  in let rest1_16 = erlps__ast_body__2 [arg_11, icode_4]
  in let head_20 = ErlangTuple [pat1_10, rest1_16]
  in
    ErlangTuple
      [ErlangAtom "switch", e1_7, ErlangCons head_20 ErlangEmptyList]
erlps__ast_body__2 [(ErlangTuple [(ErlangAtom "block"), as_0,
                                  (ErlangCons (ErlangTuple [(ErlangAtom "letfun"),
                                                            ann_1, f_2, args_3,
                                                            _type_4,
                                                            expr_5]) rest_6)]),
                    icode_7]
  =
  let   
    toarg_17 =
      ErlangFun 1
        (let
           lambda_8 [(ErlangTuple [(ErlangAtom "typed"), ann1_10, id_11,
                                   t_12])]
             =
             ErlangTuple [ErlangAtom "arg", ann1_10, id_11, t_12]
           lambda_8 [arg_9] = EXC.function_clause unit
           lambda_8 args = EXC.badarity (ErlangFun 1 lambda_8) args
         in lambda_8)
  in let
    lamargs_20 =
      BIF.do_remote_fun_call "Lists" "erlps__map__2" [toarg_17, args_3]
  in let
    tup_el_29 =
      ErlangTuple [ErlangAtom "lam", ann_1, lamargs_20, expr_5]
  in let
    head_25 =
      ErlangTuple [ErlangAtom "letval", ann_1, f_2, tup_el_29]
  in let
    arg_21 =
      ErlangTuple [ErlangAtom "block", as_0, ErlangCons head_25 rest_6]
  in erlps__ast_body__2 [arg_21, icode_7]
erlps__ast_body__2 [(ErlangTuple [(ErlangAtom "block"), _,
                                  (ErlangEmptyList)]),
                    _icode_0]
  =
  ErlangTuple [ErlangAtom "tuple", ErlangEmptyList]
erlps__ast_body__2 [(ErlangTuple [(ErlangAtom "block"), _,
                                  (ErlangCons e_0 (ErlangEmptyList))]),
                    icode_1]
  =
  erlps__ast_body__2 [e_0, icode_1]
erlps__ast_body__2 [(ErlangTuple [(ErlangAtom "block"), as_0,
                                  (ErlangCons e_1 rest_2)]),
                    icode_3]
  =
  let    tup_el_5 = erlps__ast_body__2 [e_1, icode_3]
  in let tup_el_12 = toErl "_"
  in let tup_el_10 = ErlangTuple [ErlangAtom "var_ref", tup_el_12]
  in let arg_14 = ErlangTuple [ErlangAtom "block", as_0, rest_2]
  in let tup_el_13 = erlps__ast_body__2 [arg_14, icode_3]
  in let head_9 = ErlangTuple [tup_el_10, tup_el_13]
  in
    ErlangTuple
      [ErlangAtom "switch", tup_el_5,
       ErlangCons head_9 ErlangEmptyList]
erlps__ast_body__2 [(ErlangTuple [(ErlangAtom "lam"), _, args_0,
                                  body_1]),
                    icode_2]
  =
  let   
    tup_el_4 =
      flmap
        (\ lc_8 ->
           case lc_8 of
             (ErlangTuple [(ErlangAtom "arg"), _, p_6, t_7]) ->
               let    tup_el_11 = erlps__ast_id__1 [p_6]
               in let tup_el_13 = erlps__ast_typerep1__2 [t_7, icode_2]
               in let
                 lcRet_9 = ErlangTuple [ErlangAtom "arg", tup_el_11, tup_el_13]
               in ErlangCons lcRet_9 ErlangEmptyList
             _ -> ErlangEmptyList)
        args_0
  in let tup_el_16 = erlps__ast_body__2 [body_1, icode_2]
  in ErlangTuple [ErlangAtom "lambda", tup_el_4, tup_el_16]
erlps__ast_body__2 [(ErlangTuple [(ErlangAtom "typed"), _,
                                  (ErlangTuple [(ErlangAtom "record"), attrs_0,
                                                fields_1]),
                                  (ErlangTuple [(ErlangAtom "record_t"),
                                                deffields_2])]),
                    icode_3]
  =
  let   
    namedfield_10 =
      ErlangFun 1
        (let
           lambda_4 [(ErlangTuple [(ErlangAtom "field"), _,
                                   (ErlangCons (ErlangTuple [(ErlangAtom "proj"),
                                                             _,
                                                             (ErlangTuple [(ErlangAtom "id"),
                                                                           _,
                                                                           name_6])]) (ErlangEmptyList)),
                                   e_7])]
             =
             ErlangTuple [name_6, e_7]
           lambda_4 [arg_5] = EXC.function_clause unit
           lambda_4 args = EXC.badarity (ErlangFun 1 lambda_4) args
         in lambda_4)
  in let
    namedfields_13 =
      BIF.do_remote_fun_call "Lists" "erlps__map__2"
        [namedfield_10, fields_1]
  in let
    tup_el_15 =
      flmap
        (\ lc_18 ->
           case lc_18 of
             (ErlangTuple [(ErlangAtom "field_t"), _,
                           (ErlangTuple [(ErlangAtom "id"), _, name_17]), _]) ->
               let   
                 case_20 =
                   BIF.do_remote_fun_call "Proplists" "erlps__get_value__2"
                     [name_17, namedfields_13]
               in let
                 lcRet_19 =
                   case case_20 of
                     (ErlangAtom "undefined") ->
                       let   
                         line_25 =
                           BIF.do_remote_fun_call "Aeso.Syntax"
                             "erlps__get_ann__2" [ErlangAtom "line", attrs_0]
                       in let
                         tup_el_27 =
                           toErl "Missing field in record: ~s (on line ~p)\n"
                       in
                         ErlangTuple
                           [ErlangAtom "missing_field", tup_el_27,
                            ErlangCons name_17
                              (ErlangCons line_25 ErlangEmptyList)]
                     e_33 -> erlps__ast_body__2 [e_33, icode_3]
               in ErlangCons lcRet_19 ErlangEmptyList
             _ -> ErlangEmptyList)
        deffields_2
  in ErlangTuple [ErlangAtom "tuple", tup_el_15]
erlps__ast_body__2 [(ErlangTuple [(ErlangAtom "proj"), _,
                                  (ErlangTuple [(ErlangAtom "typed"), _,
                                                record_0,
                                                (ErlangTuple [(ErlangAtom "record_t"),
                                                              fields_1])]),
                                  (ErlangTuple [(ErlangAtom "id"), _,
                                                fieldname_2])]),
                    icode_3]
  =
  let    arg_6 = toErl 1
  in let arg_7 = BIF.erlang__length__1 [fields_1]
  in let
    arg_5 =
      BIF.do_remote_fun_call "Lists" "erlps__seq__2" [arg_6, arg_7]
  in let
    lcSrc_4 =
      BIF.do_remote_fun_call "Lists" "erlps__zip__2" [arg_5, fields_1]
  in let
    matchExpr_18 =
      flmap
        (\ lc_12 ->
           case lc_12 of
             (ErlangTuple [i_10,
                           (ErlangTuple [(ErlangAtom "field_t"), _,
                                         (ErlangTuple [(ErlangAtom "id"), _,
                                                       name_11]),
                                         _])]) ->
               let cond_13 = BIF.erlang__op_eq [name_11, fieldname_2]
               in
                 case cond_13 of
                   (ErlangAtom "true") -> ErlangCons i_10 ErlangEmptyList
                   _ -> ErlangEmptyList
             _ -> ErlangEmptyList)
        lcSrc_4
  in
    case matchExpr_18 of
      (ErlangCons index_17 (ErlangEmptyList)) ->
        let    lop_24 = toErl 32
        in let rop_27 = toErl 1
        in let rop_25 = BIF.erlang__op_minus [index_17, rop_27]
        in let tup_el_23 = BIF.erlang__op_mult [lop_24, rop_25]
        in let tup_el_21 = ErlangTuple [ErlangAtom "integer", tup_el_23]
        in let tup_el_28 = erlps__ast_body__2 [record_0, icode_3]
        in
          ErlangTuple
            [ErlangAtom "binop", ErlangAtom "!", tup_el_21, tup_el_28]
      _ -> EXC.badmatch matchExpr_18
erlps__ast_body__2 [(ErlangTuple [(ErlangAtom "record"), attrs_0,
                                  (ErlangTuple [(ErlangAtom "typed"), _,
                                                record_1,
                                                rectype_3@(ErlangTuple [(ErlangAtom "record_t"),
                                                                        fields_2])]),
                                  update_4]),
                    icode_5]
  =
  let   
    updatedname_10 =
      ErlangFun 1
        (let
           lambda_6 [(ErlangTuple [(ErlangAtom "field"), _,
                                   (ErlangCons (ErlangTuple [(ErlangAtom "proj"),
                                                             _,
                                                             (ErlangTuple [(ErlangAtom "id"),
                                                                           _,
                                                                           name_8])]) (ErlangEmptyList)),
                                   _])]
             =
             name_8
           lambda_6 [(ErlangTuple [(ErlangAtom "field_upd"), _,
                                   (ErlangCons (ErlangTuple [(ErlangAtom "proj"),
                                                             _,
                                                             (ErlangTuple [(ErlangAtom "id"),
                                                                           _,
                                                                           name_9])]) (ErlangEmptyList)),
                                   _])]
             =
             name_9
           lambda_6 [arg_7] = EXC.function_clause unit
           lambda_6 args = EXC.badarity (ErlangFun 1 lambda_6) args
         in lambda_6)
  in let
    updatednames_13 =
      BIF.do_remote_fun_call "Lists" "erlps__map__2"
        [updatedname_10, update_4]
  in let tup_el_19 = toErl "_record"
  in let
    tup_el_16 = ErlangTuple [ErlangAtom "id", attrs_0, tup_el_19]
  in let
    rec_21 =
      ErlangTuple [ErlangAtom "typed", attrs_0, tup_el_16, rectype_3]
  in let
    compileupdate_44 =
      ErlangFun 1
        (let
           lambda_22 [fld_24@(ErlangTuple [(ErlangAtom "field"), _, _, _])]
             =
             fld_24
           lambda_22 [(ErlangTuple [(ErlangAtom "field_upd"), ann_25,
                                    lv_28@(ErlangCons (ErlangTuple [(ErlangAtom "proj"),
                                                                    ann1_26,
                                                                    p_27]) (ErlangEmptyList)),
                                    fun_29])]
             =
             let   
               head_38 = ErlangTuple [ErlangAtom "proj", ann1_26, rec_21, p_27]
             in let
               tup_el_33 =
                 ErlangTuple
                   [ErlangAtom "app", ann_25, fun_29,
                    ErlangCons head_38 ErlangEmptyList]
             in ErlangTuple [ErlangAtom "field", ann_25, lv_28, tup_el_33]
           lambda_22 [arg_23] = EXC.function_clause unit
           lambda_22 args = EXC.badarity (ErlangFun 1 lambda_22) args
         in lambda_22)
  in let tup_el_46 = erlps__ast_body__2 [record_1, icode_5]
  in let tup_el_53 = toErl "_record"
  in let tup_el_51 = ErlangTuple [ErlangAtom "var_ref", tup_el_53]
  in let
    lop_62 =
      BIF.do_remote_fun_call "Lists" "erlps__map__2"
        [compileupdate_44, update_4]
  in let
    rop_65 =
      flmap
        (\ lc_68 ->
           case lc_68 of
             (ErlangTuple [(ErlangAtom "field_t"), _,
                           (ErlangTuple [(ErlangAtom "id"), _, name_67]), _]) ->
               let   
                 op_arg_70 = BIF.lists__member__2 [name_67, updatednames_13]
               in let cond_69 = BIF.erlang__not__1 [op_arg_70]
               in
                 case cond_69 of
                   (ErlangAtom "true") ->
                     let   
                       tup_el_80 =
                         ErlangTuple [ErlangAtom "id", attrs_0, name_67]
                     in let
                       head_77 =
                         ErlangTuple [ErlangAtom "proj", attrs_0, tup_el_80]
                     in let
                       tup_el_89 =
                         ErlangTuple [ErlangAtom "id", attrs_0, name_67]
                     in let
                       tup_el_85 =
                         ErlangTuple
                           [ErlangAtom "proj", attrs_0, rec_21, tup_el_89]
                     in let
                       lcRet_73 =
                         ErlangTuple
                           [ErlangAtom "field", attrs_0,
                            ErlangCons head_77 ErlangEmptyList, tup_el_85]
                     in ErlangCons lcRet_73 ErlangEmptyList
                   _ -> ErlangEmptyList
             _ -> ErlangEmptyList)
        fields_2
  in let tup_el_61 = BIF.erlang__op_append [lop_62, rop_65]
  in let
    tup_el_58 = ErlangTuple [ErlangAtom "record", attrs_0, tup_el_61]
  in let
    arg_55 =
      ErlangTuple [ErlangAtom "typed", attrs_0, tup_el_58, rectype_3]
  in let tup_el_54 = erlps__ast_body__2 [arg_55, icode_5]
  in let head_50 = ErlangTuple [tup_el_51, tup_el_54]
  in
    ErlangTuple
      [ErlangAtom "switch", tup_el_46,
       ErlangCons head_50 ErlangEmptyList]
erlps__ast_body__2 [(ErlangTuple [(ErlangAtom "typed"), _,
                                  body_0, _]),
                    icode_1]
  =
  erlps__ast_body__2 [body_0, icode_1]
erlps__ast_body__2 [arg_4, arg_5] = EXC.function_clause unit
erlps__ast_body__2 args =
  EXC.badarity (ErlangFun 2 erlps__ast_body__2) args

erlps__ast_binop__5 :: ErlangFun
erlps__ast_binop__5 [op_0, ann_1,
                     (ErlangTuple [(ErlangAtom "typed"), _, a_2, type_3]), b_4,
                     icode_5]
  | ((((((weakEq op_0 (ErlangAtom "==")) ||
           (weakEq op_0 (ErlangAtom "!="))) ||
          (weakEq op_0 (ErlangAtom "<"))) ||
         (weakEq op_0 (ErlangAtom ">"))) ||
        (weakEq op_0 (ErlangAtom "<="))) ||
       (weakEq op_0 (ErlangAtom "=<"))) ||
      (weakEq op_0 (ErlangAtom ">=")) =
  let    op_arg_7 = erlps__is_simple_type__1 [type_3]
  in let cond_6 = BIF.erlang__not__1 [op_arg_7]
  in let
    _ =
      case cond_6 of
        (ErlangAtom "true") ->
          let   
            arg_10 =
              ErlangTuple
                [ErlangAtom "cant_compare_type_aevm", ann_1, op_0, type_3]
          in let lcRet_9 = erlps__gen_error__1 [arg_10]
          in ErlangCons lcRet_9 ErlangEmptyList
        _ -> ErlangEmptyList
  in let case_15 = erlps__ast_typerep__2 [type_3, icode_5]
  in
    case case_15 of
      (ErlangAtom "word") ->
        let    tup_el_20 = erlps__ast_body__2 [a_2, icode_5]
        in let tup_el_23 = erlps__ast_body__2 [b_4, icode_5]
        in ErlangTuple [ErlangAtom "binop", op_0, tup_el_20, tup_el_23]
      othertype_26 ->
        let   
          neg_42 =
            case op_0 of
              (ErlangAtom "==") ->
                ErlangFun 1
                  (let
                     lambda_28 [x_30] = x_30
                     lambda_28 [arg_29] = EXC.function_clause unit
                     lambda_28 args = EXC.badarity (ErlangFun 1 lambda_28) args
                   in lambda_28)
              (ErlangAtom "!=") ->
                ErlangFun 1
                  (let
                     lambda_31 [x_33] =
                       ErlangTuple [ErlangAtom "unop", ErlangAtom "!", x_33]
                     lambda_31 [arg_32] = EXC.function_clause unit
                     lambda_31 args = EXC.badarity (ErlangFun 1 lambda_31) args
                   in lambda_31)
              _ ->
                let
                  arg_37 =
                    ErlangTuple
                      [ErlangAtom "cant_compare_type_aevm", ann_1, op_0, type_3]
                in erlps__gen_error__1 [arg_37]
        in let head_43 = erlps__ast_body__2 [a_2, icode_5]
        in let head_47 = erlps__ast_body__2 [b_4, icode_5]
        in let
          builtin_77 =
            case othertype_26 of
              (ErlangAtom "string") ->
                erlps__builtin_call__2
                  [ErlangAtom "str_equal",
                   ErlangCons head_43 (ErlangCons head_47 ErlangEmptyList)]
              (ErlangTuple [(ErlangAtom "tuple"), types_55]) ->
                let
                  case_56 =
                    BIF.do_remote_fun_call "Lists" "erlps__usort__1" [types_55]
                in
                  case case_56 of
                    (ErlangCons (ErlangAtom "word") (ErlangEmptyList)) ->
                      let    lop_63 = toErl 32
                      in let rop_64 = BIF.erlang__length__1 [types_55]
                      in let tup_el_62 = BIF.erlang__op_mult [lop_63, rop_64]
                      in let
                        head_60 = ErlangTuple [ErlangAtom "integer", tup_el_62]
                      in
                        erlps__builtin_call__2
                          [ErlangAtom "str_equal_p",
                           ErlangCons head_60
                             (ErlangCons head_43
                                (ErlangCons head_47 ErlangEmptyList))]
                    _ ->
                      let
                        arg_67 =
                          ErlangTuple
                            [ErlangAtom "cant_compare_type_aevm", ann_1, op_0,
                             type_3]
                      in erlps__gen_error__1 [arg_67]
              _ ->
                let
                  arg_72 =
                    ErlangTuple
                      [ErlangAtom "cant_compare_type_aevm", ann_1, op_0, type_3]
                in erlps__gen_error__1 [arg_72]
        in
          BIF.erlang__apply__2
            [neg_42, ErlangCons builtin_77 ErlangEmptyList]
erlps__ast_binop__5 [(ErlangAtom "++"), _, a_0, b_1, icode_2] =
  let    head_5 = erlps__ast_body__2 [a_0, icode_2]
  in let head_9 = erlps__ast_body__2 [b_1, icode_2]
  in
    erlps__builtin_call__2
      [ErlangAtom "list_concat",
       ErlangCons head_5 (ErlangCons head_9 ErlangEmptyList)]
erlps__ast_binop__5 [op_0, _, a_1, b_2, icode_3] =
  let    tup_el_6 = erlps__ast_body__2 [a_1, icode_3]
  in let tup_el_9 = erlps__ast_body__2 [b_2, icode_3]
  in ErlangTuple [ErlangAtom "binop", op_0, tup_el_6, tup_el_9]
erlps__ast_binop__5 [arg_12, arg_13, arg_14, arg_15, arg_16] =
  EXC.function_clause unit
erlps__ast_binop__5 args =
  EXC.badarity (ErlangFun 5 erlps__ast_binop__5) args

erlps__is_builtin_fun__2 :: ErlangFun
erlps__is_builtin_fun__2 [(ErlangTuple [(ErlangAtom "qid"), _,
                                        (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangEmptyList)))))) (ErlangCons (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangEmptyList)))))) (ErlangEmptyList)))]),
                          _icode_10]
  | (ErlangInt num_0) == (toErl 67)
  , (ErlangInt num_1) == (toErl 104)
  , (ErlangInt num_2) == (toErl 97)
  , (ErlangInt num_3) == (toErl 105)
  , (ErlangInt num_4) == (toErl 110)
  , (ErlangInt num_5) == (toErl 115)
  , (ErlangInt num_6) == (toErl 112)
  , (ErlangInt num_7) == (toErl 101)
  , (ErlangInt num_8) == (toErl 110)
  , (ErlangInt num_9) == (toErl 100) =
  ErlangAtom "true"
erlps__is_builtin_fun__2 [(ErlangTuple [(ErlangAtom "qid"), _,
                                        (ErlangCons con_0 (ErlangCons (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangEmptyList)))))) (ErlangCons (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangCons (ErlangInt num_10) (ErlangEmptyList)))))) (ErlangEmptyList))))]),
                          (ErlangMap map_11)]
  | (ErlangInt num_1) == (toErl 67)
  , (ErlangInt num_2) == (toErl 104)
  , (ErlangInt num_3) == (toErl 97)
  , (ErlangInt num_4) == (toErl 105)
  , (ErlangInt num_5) == (toErl 110)
  , (ErlangInt num_6) == (toErl 101)
  , (ErlangInt num_7) == (toErl 118)
  , (ErlangInt num_8) == (toErl 101)
  , (ErlangInt num_9) == (toErl 110)
  , (ErlangInt num_10) == (toErl 116)
  , (DM.Just con_12) <-
      (Map.lookup (ErlangAtom "contract_name") map_11)
  , con_12 == con_0 =
  ErlangAtom "true"
erlps__is_builtin_fun__2 [(ErlangTuple [(ErlangAtom "qid"), _,
                                        (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangEmptyList)))))) (ErlangCons (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangCons (ErlangInt num_10) (ErlangCons (ErlangInt num_11) (ErlangEmptyList)))))))) (ErlangEmptyList)))]),
                          _icode_12]
  | (ErlangInt num_0) == (toErl 67)
  , (ErlangInt num_1) == (toErl 104)
  , (ErlangInt num_2) == (toErl 97)
  , (ErlangInt num_3) == (toErl 105)
  , (ErlangInt num_4) == (toErl 110)
  , (ErlangInt num_5) == (toErl 98)
  , (ErlangInt num_6) == (toErl 97)
  , (ErlangInt num_7) == (toErl 108)
  , (ErlangInt num_8) == (toErl 97)
  , (ErlangInt num_9) == (toErl 110)
  , (ErlangInt num_10) == (toErl 99)
  , (ErlangInt num_11) == (toErl 101) =
  ErlangAtom "true"
erlps__is_builtin_fun__2 [(ErlangTuple [(ErlangAtom "qid"), _,
                                        (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangEmptyList)))))) (ErlangCons (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangCons (ErlangInt num_10) (ErlangCons (ErlangInt num_11) (ErlangCons (ErlangInt num_12) (ErlangCons (ErlangInt num_13) (ErlangCons (ErlangInt num_14) (ErlangEmptyList))))))))))) (ErlangEmptyList)))]),
                          _icode_15]
  | (ErlangInt num_0) == (toErl 67)
  , (ErlangInt num_1) == (toErl 104)
  , (ErlangInt num_2) == (toErl 97)
  , (ErlangInt num_3) == (toErl 105)
  , (ErlangInt num_4) == (toErl 110)
  , (ErlangInt num_5) == (toErl 98)
  , (ErlangInt num_6) == (toErl 108)
  , (ErlangInt num_7) == (toErl 111)
  , (ErlangInt num_8) == (toErl 99)
  , (ErlangInt num_9) == (toErl 107)
  , (ErlangInt num_10) == (toErl 95)
  , (ErlangInt num_11) == (toErl 104)
  , (ErlangInt num_12) == (toErl 97)
  , (ErlangInt num_13) == (toErl 115)
  , (ErlangInt num_14) == (toErl 104) =
  ErlangAtom "true"
erlps__is_builtin_fun__2 [(ErlangTuple [(ErlangAtom "qid"), _,
                                        (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangEmptyList))))) (ErlangCons (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangCons (ErlangInt num_10) (ErlangCons (ErlangInt num_11) (ErlangEmptyList))))))))) (ErlangEmptyList)))]),
                          _icode_12]
  | (ErlangInt num_0) == (toErl 67)
  , (ErlangInt num_1) == (toErl 97)
  , (ErlangInt num_2) == (toErl 108)
  , (ErlangInt num_3) == (toErl 108)
  , (ErlangInt num_4) == (toErl 103)
  , (ErlangInt num_5) == (toErl 97)
  , (ErlangInt num_6) == (toErl 115)
  , (ErlangInt num_7) == (toErl 95)
  , (ErlangInt num_8) == (toErl 108)
  , (ErlangInt num_9) == (toErl 101)
  , (ErlangInt num_10) == (toErl 102)
  , (ErlangInt num_11) == (toErl 116) =
  ErlangAtom "true"
erlps__is_builtin_fun__2 [(ErlangTuple [(ErlangAtom "id"), _,
                                        (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangEmptyList))))))]),
                          _icode_5]
  | (ErlangInt num_0) == (toErl 97)
  , (ErlangInt num_1) == (toErl 98)
  , (ErlangInt num_2) == (toErl 111)
  , (ErlangInt num_3) == (toErl 114)
  , (ErlangInt num_4) == (toErl 116) =
  ErlangAtom "true"
erlps__is_builtin_fun__2 [(ErlangTuple [(ErlangAtom "id"), _,
                                        (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangEmptyList))))))))]),
                          _icode_7]
  | (ErlangInt num_0) == (toErl 114)
  , (ErlangInt num_1) == (toErl 101)
  , (ErlangInt num_2) == (toErl 113)
  , (ErlangInt num_3) == (toErl 117)
  , (ErlangInt num_4) == (toErl 105)
  , (ErlangInt num_5) == (toErl 114)
  , (ErlangInt num_6) == (toErl 101) =
  ErlangAtom "true"
erlps__is_builtin_fun__2 [(ErlangTuple [(ErlangAtom "qid"), _,
                                        (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangEmptyList))))))) (ErlangCons (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangCons (ErlangInt num_10) (ErlangCons (ErlangInt num_11) (ErlangCons (ErlangInt num_12) (ErlangCons (ErlangInt num_13) (ErlangEmptyList))))))))) (ErlangEmptyList)))]),
                          _icode_14]
  | (ErlangInt num_0) == (toErl 79)
  , (ErlangInt num_1) == (toErl 114)
  , (ErlangInt num_2) == (toErl 97)
  , (ErlangInt num_3) == (toErl 99)
  , (ErlangInt num_4) == (toErl 108)
  , (ErlangInt num_5) == (toErl 101)
  , (ErlangInt num_6) == (toErl 114)
  , (ErlangInt num_7) == (toErl 101)
  , (ErlangInt num_8) == (toErl 103)
  , (ErlangInt num_9) == (toErl 105)
  , (ErlangInt num_10) == (toErl 115)
  , (ErlangInt num_11) == (toErl 116)
  , (ErlangInt num_12) == (toErl 101)
  , (ErlangInt num_13) == (toErl 114) =
  ErlangAtom "true"
erlps__is_builtin_fun__2 [(ErlangTuple [(ErlangAtom "qid"), _,
                                        (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangEmptyList))))))) (ErlangCons (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangCons (ErlangInt num_10) (ErlangCons (ErlangInt num_11) (ErlangCons (ErlangInt num_12) (ErlangCons (ErlangInt num_13) (ErlangCons (ErlangInt num_14) (ErlangEmptyList)))))))))) (ErlangEmptyList)))]),
                          _icode_15]
  | (ErlangInt num_0) == (toErl 79)
  , (ErlangInt num_1) == (toErl 114)
  , (ErlangInt num_2) == (toErl 97)
  , (ErlangInt num_3) == (toErl 99)
  , (ErlangInt num_4) == (toErl 108)
  , (ErlangInt num_5) == (toErl 101)
  , (ErlangInt num_6) == (toErl 113)
  , (ErlangInt num_7) == (toErl 117)
  , (ErlangInt num_8) == (toErl 101)
  , (ErlangInt num_9) == (toErl 114)
  , (ErlangInt num_10) == (toErl 121)
  , (ErlangInt num_11) == (toErl 95)
  , (ErlangInt num_12) == (toErl 102)
  , (ErlangInt num_13) == (toErl 101)
  , (ErlangInt num_14) == (toErl 101) =
  ErlangAtom "true"
erlps__is_builtin_fun__2 [(ErlangTuple [(ErlangAtom "qid"), _,
                                        (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangEmptyList))))))) (ErlangCons (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangCons (ErlangInt num_10) (ErlangEmptyList)))))) (ErlangEmptyList)))]),
                          _icode_11]
  | (ErlangInt num_0) == (toErl 79)
  , (ErlangInt num_1) == (toErl 114)
  , (ErlangInt num_2) == (toErl 97)
  , (ErlangInt num_3) == (toErl 99)
  , (ErlangInt num_4) == (toErl 108)
  , (ErlangInt num_5) == (toErl 101)
  , (ErlangInt num_6) == (toErl 113)
  , (ErlangInt num_7) == (toErl 117)
  , (ErlangInt num_8) == (toErl 101)
  , (ErlangInt num_9) == (toErl 114)
  , (ErlangInt num_10) == (toErl 121) =
  ErlangAtom "true"
erlps__is_builtin_fun__2 [(ErlangTuple [(ErlangAtom "qid"), _,
                                        (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangEmptyList))))))) (ErlangCons (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangCons (ErlangInt num_10) (ErlangCons (ErlangInt num_11) (ErlangEmptyList))))))) (ErlangEmptyList)))]),
                          _icode_12]
  | (ErlangInt num_0) == (toErl 79)
  , (ErlangInt num_1) == (toErl 114)
  , (ErlangInt num_2) == (toErl 97)
  , (ErlangInt num_3) == (toErl 99)
  , (ErlangInt num_4) == (toErl 108)
  , (ErlangInt num_5) == (toErl 101)
  , (ErlangInt num_6) == (toErl 101)
  , (ErlangInt num_7) == (toErl 120)
  , (ErlangInt num_8) == (toErl 116)
  , (ErlangInt num_9) == (toErl 101)
  , (ErlangInt num_10) == (toErl 110)
  , (ErlangInt num_11) == (toErl 100) =
  ErlangAtom "true"
erlps__is_builtin_fun__2 [(ErlangTuple [(ErlangAtom "qid"), _,
                                        (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangEmptyList))))))) (ErlangCons (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangCons (ErlangInt num_10) (ErlangCons (ErlangInt num_11) (ErlangCons (ErlangInt num_12) (ErlangEmptyList)))))))) (ErlangEmptyList)))]),
                          _icode_13]
  | (ErlangInt num_0) == (toErl 79)
  , (ErlangInt num_1) == (toErl 114)
  , (ErlangInt num_2) == (toErl 97)
  , (ErlangInt num_3) == (toErl 99)
  , (ErlangInt num_4) == (toErl 108)
  , (ErlangInt num_5) == (toErl 101)
  , (ErlangInt num_6) == (toErl 114)
  , (ErlangInt num_7) == (toErl 101)
  , (ErlangInt num_8) == (toErl 115)
  , (ErlangInt num_9) == (toErl 112)
  , (ErlangInt num_10) == (toErl 111)
  , (ErlangInt num_11) == (toErl 110)
  , (ErlangInt num_12) == (toErl 100) =
  ErlangAtom "true"
erlps__is_builtin_fun__2 [(ErlangTuple [(ErlangAtom "qid"), _,
                                        (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangEmptyList))))))) (ErlangCons (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangCons (ErlangInt num_10) (ErlangCons (ErlangInt num_11) (ErlangCons (ErlangInt num_12) (ErlangCons (ErlangInt num_13) (ErlangCons (ErlangInt num_14) (ErlangCons (ErlangInt num_15) (ErlangCons (ErlangInt num_16) (ErlangCons (ErlangInt num_17) (ErlangEmptyList))))))))))))) (ErlangEmptyList)))]),
                          _icode_18]
  | (ErlangInt num_0) == (toErl 79)
  , (ErlangInt num_1) == (toErl 114)
  , (ErlangInt num_2) == (toErl 97)
  , (ErlangInt num_3) == (toErl 99)
  , (ErlangInt num_4) == (toErl 108)
  , (ErlangInt num_5) == (toErl 101)
  , (ErlangInt num_6) == (toErl 103)
  , (ErlangInt num_7) == (toErl 101)
  , (ErlangInt num_8) == (toErl 116)
  , (ErlangInt num_9) == (toErl 95)
  , (ErlangInt num_10) == (toErl 113)
  , (ErlangInt num_11) == (toErl 117)
  , (ErlangInt num_12) == (toErl 101)
  , (ErlangInt num_13) == (toErl 115)
  , (ErlangInt num_14) == (toErl 116)
  , (ErlangInt num_15) == (toErl 105)
  , (ErlangInt num_16) == (toErl 111)
  , (ErlangInt num_17) == (toErl 110) =
  ErlangAtom "true"
erlps__is_builtin_fun__2 [(ErlangTuple [(ErlangAtom "qid"), _,
                                        (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangEmptyList))))))) (ErlangCons (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangCons (ErlangInt num_10) (ErlangCons (ErlangInt num_11) (ErlangCons (ErlangInt num_12) (ErlangCons (ErlangInt num_13) (ErlangCons (ErlangInt num_14) (ErlangCons (ErlangInt num_15) (ErlangEmptyList))))))))))) (ErlangEmptyList)))]),
                          _icode_16]
  | (ErlangInt num_0) == (toErl 79)
  , (ErlangInt num_1) == (toErl 114)
  , (ErlangInt num_2) == (toErl 97)
  , (ErlangInt num_3) == (toErl 99)
  , (ErlangInt num_4) == (toErl 108)
  , (ErlangInt num_5) == (toErl 101)
  , (ErlangInt num_6) == (toErl 103)
  , (ErlangInt num_7) == (toErl 101)
  , (ErlangInt num_8) == (toErl 116)
  , (ErlangInt num_9) == (toErl 95)
  , (ErlangInt num_10) == (toErl 97)
  , (ErlangInt num_11) == (toErl 110)
  , (ErlangInt num_12) == (toErl 115)
  , (ErlangInt num_13) == (toErl 119)
  , (ErlangInt num_14) == (toErl 101)
  , (ErlangInt num_15) == (toErl 114) =
  ErlangAtom "true"
erlps__is_builtin_fun__2 [(ErlangTuple [(ErlangAtom "qid"), _,
                                        (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangEmptyList))))))) (ErlangCons (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangCons (ErlangInt num_10) (ErlangEmptyList)))))) (ErlangEmptyList)))]),
                          _icode_11]
  | (ErlangInt num_0) == (toErl 79)
  , (ErlangInt num_1) == (toErl 114)
  , (ErlangInt num_2) == (toErl 97)
  , (ErlangInt num_3) == (toErl 99)
  , (ErlangInt num_4) == (toErl 108)
  , (ErlangInt num_5) == (toErl 101)
  , (ErlangInt num_6) == (toErl 99)
  , (ErlangInt num_7) == (toErl 104)
  , (ErlangInt num_8) == (toErl 101)
  , (ErlangInt num_9) == (toErl 99)
  , (ErlangInt num_10) == (toErl 107) =
  ErlangAtom "true"
erlps__is_builtin_fun__2 [(ErlangTuple [(ErlangAtom "qid"), _,
                                        (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangEmptyList))))))) (ErlangCons (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangCons (ErlangInt num_10) (ErlangCons (ErlangInt num_11) (ErlangCons (ErlangInt num_12) (ErlangCons (ErlangInt num_13) (ErlangCons (ErlangInt num_14) (ErlangCons (ErlangInt num_15) (ErlangCons (ErlangInt num_16) (ErlangEmptyList)))))))))))) (ErlangEmptyList)))]),
                          _icode_17]
  | (ErlangInt num_0) == (toErl 79)
  , (ErlangInt num_1) == (toErl 114)
  , (ErlangInt num_2) == (toErl 97)
  , (ErlangInt num_3) == (toErl 99)
  , (ErlangInt num_4) == (toErl 108)
  , (ErlangInt num_5) == (toErl 101)
  , (ErlangInt num_6) == (toErl 99)
  , (ErlangInt num_7) == (toErl 104)
  , (ErlangInt num_8) == (toErl 101)
  , (ErlangInt num_9) == (toErl 99)
  , (ErlangInt num_10) == (toErl 107)
  , (ErlangInt num_11) == (toErl 95)
  , (ErlangInt num_12) == (toErl 113)
  , (ErlangInt num_13) == (toErl 117)
  , (ErlangInt num_14) == (toErl 101)
  , (ErlangInt num_15) == (toErl 114)
  , (ErlangInt num_16) == (toErl 121) =
  ErlangAtom "true"
erlps__is_builtin_fun__2 [(ErlangTuple [(ErlangAtom "qid"), _,
                                        (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangEmptyList))))) (ErlangCons (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangCons (ErlangInt num_10) (ErlangEmptyList)))))))) (ErlangEmptyList)))]),
                          _icode_11]
  | (ErlangInt num_0) == (toErl 65)
  , (ErlangInt num_1) == (toErl 69)
  , (ErlangInt num_2) == (toErl 78)
  , (ErlangInt num_3) == (toErl 83)
  , (ErlangInt num_4) == (toErl 114)
  , (ErlangInt num_5) == (toErl 101)
  , (ErlangInt num_6) == (toErl 115)
  , (ErlangInt num_7) == (toErl 111)
  , (ErlangInt num_8) == (toErl 108)
  , (ErlangInt num_9) == (toErl 118)
  , (ErlangInt num_10) == (toErl 101) =
  ErlangAtom "true"
erlps__is_builtin_fun__2 [(ErlangTuple [(ErlangAtom "qid"), _,
                                        (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangEmptyList))))) (ErlangCons (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangCons (ErlangInt num_10) (ErlangCons (ErlangInt num_11) (ErlangEmptyList))))))))) (ErlangEmptyList)))]),
                          _icode_12]
  | (ErlangInt num_0) == (toErl 65)
  , (ErlangInt num_1) == (toErl 69)
  , (ErlangInt num_2) == (toErl 78)
  , (ErlangInt num_3) == (toErl 83)
  , (ErlangInt num_4) == (toErl 112)
  , (ErlangInt num_5) == (toErl 114)
  , (ErlangInt num_6) == (toErl 101)
  , (ErlangInt num_7) == (toErl 99)
  , (ErlangInt num_8) == (toErl 108)
  , (ErlangInt num_9) == (toErl 97)
  , (ErlangInt num_10) == (toErl 105)
  , (ErlangInt num_11) == (toErl 109) =
  ErlangAtom "true"
erlps__is_builtin_fun__2 [(ErlangTuple [(ErlangAtom "qid"), _,
                                        (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangEmptyList))))) (ErlangCons (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangEmptyList)))))) (ErlangEmptyList)))]),
                          _icode_9]
  | (ErlangInt num_0) == (toErl 65)
  , (ErlangInt num_1) == (toErl 69)
  , (ErlangInt num_2) == (toErl 78)
  , (ErlangInt num_3) == (toErl 83)
  , (ErlangInt num_4) == (toErl 99)
  , (ErlangInt num_5) == (toErl 108)
  , (ErlangInt num_6) == (toErl 97)
  , (ErlangInt num_7) == (toErl 105)
  , (ErlangInt num_8) == (toErl 109) =
  ErlangAtom "true"
erlps__is_builtin_fun__2 [(ErlangTuple [(ErlangAtom "qid"), _,
                                        (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangEmptyList))))) (ErlangCons (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangCons (ErlangInt num_10) (ErlangCons (ErlangInt num_11) (ErlangEmptyList))))))))) (ErlangEmptyList)))]),
                          _icode_12]
  | (ErlangInt num_0) == (toErl 65)
  , (ErlangInt num_1) == (toErl 69)
  , (ErlangInt num_2) == (toErl 78)
  , (ErlangInt num_3) == (toErl 83)
  , (ErlangInt num_4) == (toErl 116)
  , (ErlangInt num_5) == (toErl 114)
  , (ErlangInt num_6) == (toErl 97)
  , (ErlangInt num_7) == (toErl 110)
  , (ErlangInt num_8) == (toErl 115)
  , (ErlangInt num_9) == (toErl 102)
  , (ErlangInt num_10) == (toErl 101)
  , (ErlangInt num_11) == (toErl 114) =
  ErlangAtom "true"
erlps__is_builtin_fun__2 [(ErlangTuple [(ErlangAtom "qid"), _,
                                        (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangEmptyList))))) (ErlangCons (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangEmptyList))))))) (ErlangEmptyList)))]),
                          _icode_10]
  | (ErlangInt num_0) == (toErl 65)
  , (ErlangInt num_1) == (toErl 69)
  , (ErlangInt num_2) == (toErl 78)
  , (ErlangInt num_3) == (toErl 83)
  , (ErlangInt num_4) == (toErl 114)
  , (ErlangInt num_5) == (toErl 101)
  , (ErlangInt num_6) == (toErl 118)
  , (ErlangInt num_7) == (toErl 111)
  , (ErlangInt num_8) == (toErl 107)
  , (ErlangInt num_9) == (toErl 101) =
  ErlangAtom "true"
erlps__is_builtin_fun__2 [(ErlangTuple [(ErlangAtom "qid"), _,
                                        (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangEmptyList))))) (ErlangCons (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangEmptyList))))))) (ErlangEmptyList)))]),
                          _icode_10]
  | (ErlangInt num_0) == (toErl 65)
  , (ErlangInt num_1) == (toErl 69)
  , (ErlangInt num_2) == (toErl 78)
  , (ErlangInt num_3) == (toErl 83)
  , (ErlangInt num_4) == (toErl 117)
  , (ErlangInt num_5) == (toErl 112)
  , (ErlangInt num_6) == (toErl 100)
  , (ErlangInt num_7) == (toErl 97)
  , (ErlangInt num_8) == (toErl 116)
  , (ErlangInt num_9) == (toErl 101) =
  ErlangAtom "true"
erlps__is_builtin_fun__2 [(ErlangTuple [(ErlangAtom "qid"), _,
                                        (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangEmptyList)))) (ErlangCons (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangEmptyList))))))) (ErlangEmptyList)))]),
                          _icode_9]
  | (ErlangInt num_0) == (toErl 77)
  , (ErlangInt num_1) == (toErl 97)
  , (ErlangInt num_2) == (toErl 112)
  , (ErlangInt num_3) == (toErl 108)
  , (ErlangInt num_4) == (toErl 111)
  , (ErlangInt num_5) == (toErl 111)
  , (ErlangInt num_6) == (toErl 107)
  , (ErlangInt num_7) == (toErl 117)
  , (ErlangInt num_8) == (toErl 112) =
  ErlangAtom "true"
erlps__is_builtin_fun__2 [(ErlangTuple [(ErlangAtom "qid"), _,
                                        (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangEmptyList)))) (ErlangCons (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangCons (ErlangInt num_10) (ErlangCons (ErlangInt num_11) (ErlangCons (ErlangInt num_12) (ErlangCons (ErlangInt num_13) (ErlangCons (ErlangInt num_14) (ErlangCons (ErlangInt num_15) (ErlangCons (ErlangInt num_16) (ErlangEmptyList))))))))))))))) (ErlangEmptyList)))]),
                          _icode_17]
  | (ErlangInt num_0) == (toErl 77)
  , (ErlangInt num_1) == (toErl 97)
  , (ErlangInt num_2) == (toErl 112)
  , (ErlangInt num_3) == (toErl 108)
  , (ErlangInt num_4) == (toErl 111)
  , (ErlangInt num_5) == (toErl 111)
  , (ErlangInt num_6) == (toErl 107)
  , (ErlangInt num_7) == (toErl 117)
  , (ErlangInt num_8) == (toErl 112)
  , (ErlangInt num_9) == (toErl 95)
  , (ErlangInt num_10) == (toErl 100)
  , (ErlangInt num_11) == (toErl 101)
  , (ErlangInt num_12) == (toErl 102)
  , (ErlangInt num_13) == (toErl 97)
  , (ErlangInt num_14) == (toErl 117)
  , (ErlangInt num_15) == (toErl 108)
  , (ErlangInt num_16) == (toErl 116) =
  ErlangAtom "true"
erlps__is_builtin_fun__2 [(ErlangTuple [(ErlangAtom "qid"), _,
                                        (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangEmptyList)))) (ErlangCons (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangEmptyList))))))) (ErlangEmptyList)))]),
                          _icode_9]
  | (ErlangInt num_0) == (toErl 77)
  , (ErlangInt num_1) == (toErl 97)
  , (ErlangInt num_2) == (toErl 112)
  , (ErlangInt num_3) == (toErl 109)
  , (ErlangInt num_4) == (toErl 101)
  , (ErlangInt num_5) == (toErl 109)
  , (ErlangInt num_6) == (toErl 98)
  , (ErlangInt num_7) == (toErl 101)
  , (ErlangInt num_8) == (toErl 114) =
  ErlangAtom "true"
erlps__is_builtin_fun__2 [(ErlangTuple [(ErlangAtom "qid"), _,
                                        (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangEmptyList)))) (ErlangCons (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangEmptyList))))) (ErlangEmptyList)))]),
                          _icode_7]
  | (ErlangInt num_0) == (toErl 77)
  , (ErlangInt num_1) == (toErl 97)
  , (ErlangInt num_2) == (toErl 112)
  , (ErlangInt num_3) == (toErl 115)
  , (ErlangInt num_4) == (toErl 105)
  , (ErlangInt num_5) == (toErl 122)
  , (ErlangInt num_6) == (toErl 101) =
  ErlangAtom "true"
erlps__is_builtin_fun__2 [(ErlangTuple [(ErlangAtom "qid"), _,
                                        (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangEmptyList)))) (ErlangCons (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangEmptyList))))))) (ErlangEmptyList)))]),
                          _icode_9]
  | (ErlangInt num_0) == (toErl 77)
  , (ErlangInt num_1) == (toErl 97)
  , (ErlangInt num_2) == (toErl 112)
  , (ErlangInt num_3) == (toErl 100)
  , (ErlangInt num_4) == (toErl 101)
  , (ErlangInt num_5) == (toErl 108)
  , (ErlangInt num_6) == (toErl 101)
  , (ErlangInt num_7) == (toErl 116)
  , (ErlangInt num_8) == (toErl 101) =
  ErlangAtom "true"
erlps__is_builtin_fun__2 [(ErlangTuple [(ErlangAtom "qid"), _,
                                        (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangEmptyList)))) (ErlangCons (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangCons (ErlangInt num_10) (ErlangCons (ErlangInt num_11) (ErlangEmptyList)))))))))) (ErlangEmptyList)))]),
                          _icode_12]
  | (ErlangInt num_0) == (toErl 77)
  , (ErlangInt num_1) == (toErl 97)
  , (ErlangInt num_2) == (toErl 112)
  , (ErlangInt num_3) == (toErl 102)
  , (ErlangInt num_4) == (toErl 114)
  , (ErlangInt num_5) == (toErl 111)
  , (ErlangInt num_6) == (toErl 109)
  , (ErlangInt num_7) == (toErl 95)
  , (ErlangInt num_8) == (toErl 108)
  , (ErlangInt num_9) == (toErl 105)
  , (ErlangInt num_10) == (toErl 115)
  , (ErlangInt num_11) == (toErl 116) =
  ErlangAtom "true"
erlps__is_builtin_fun__2 [(ErlangTuple [(ErlangAtom "qid"), _,
                                        (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangEmptyList)))) (ErlangCons (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangEmptyList)))))))) (ErlangEmptyList)))]),
                          _icode_10]
  | (ErlangInt num_0) == (toErl 77)
  , (ErlangInt num_1) == (toErl 97)
  , (ErlangInt num_2) == (toErl 112)
  , (ErlangInt num_3) == (toErl 116)
  , (ErlangInt num_4) == (toErl 111)
  , (ErlangInt num_5) == (toErl 95)
  , (ErlangInt num_6) == (toErl 108)
  , (ErlangInt num_7) == (toErl 105)
  , (ErlangInt num_8) == (toErl 115)
  , (ErlangInt num_9) == (toErl 116) =
  ErlangAtom "true"
erlps__is_builtin_fun__2 [(ErlangTuple [(ErlangAtom "qid"), _,
                                        (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangEmptyList))))))) (ErlangCons (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangCons (ErlangInt num_10) (ErlangCons (ErlangInt num_11) (ErlangCons (ErlangInt num_12) (ErlangCons (ErlangInt num_13) (ErlangCons (ErlangInt num_14) (ErlangCons (ErlangInt num_15) (ErlangEmptyList))))))))))) (ErlangEmptyList)))]),
                          _icode_16]
  | (ErlangInt num_0) == (toErl 67)
  , (ErlangInt num_1) == (toErl 114)
  , (ErlangInt num_2) == (toErl 121)
  , (ErlangInt num_3) == (toErl 112)
  , (ErlangInt num_4) == (toErl 116)
  , (ErlangInt num_5) == (toErl 111)
  , (ErlangInt num_6) == (toErl 118)
  , (ErlangInt num_7) == (toErl 101)
  , (ErlangInt num_8) == (toErl 114)
  , (ErlangInt num_9) == (toErl 105)
  , (ErlangInt num_10) == (toErl 102)
  , (ErlangInt num_11) == (toErl 121)
  , (ErlangInt num_12) == (toErl 95)
  , (ErlangInt num_13) == (toErl 115)
  , (ErlangInt num_14) == (toErl 105)
  , (ErlangInt num_15) == (toErl 103) =
  ErlangAtom "true"
erlps__is_builtin_fun__2 [(ErlangTuple [(ErlangAtom "qid"), _,
                                        (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangEmptyList))))))) (ErlangCons (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangCons (ErlangInt num_10) (ErlangCons (ErlangInt num_11) (ErlangCons (ErlangInt num_12) (ErlangCons (ErlangInt num_13) (ErlangCons (ErlangInt num_14) (ErlangCons (ErlangInt num_15) (ErlangCons (ErlangInt num_16) (ErlangCons (ErlangInt num_17) (ErlangCons (ErlangInt num_18) (ErlangCons (ErlangInt num_19) (ErlangCons (ErlangInt num_20) (ErlangCons (ErlangInt num_21) (ErlangCons (ErlangInt num_22) (ErlangCons (ErlangInt num_23) (ErlangCons (ErlangInt num_24) (ErlangCons (ErlangInt num_25) (ErlangEmptyList))))))))))))))))))))) (ErlangEmptyList)))]),
                          _icode_26]
  | (ErlangInt num_0) == (toErl 67)
  , (ErlangInt num_1) == (toErl 114)
  , (ErlangInt num_2) == (toErl 121)
  , (ErlangInt num_3) == (toErl 112)
  , (ErlangInt num_4) == (toErl 116)
  , (ErlangInt num_5) == (toErl 111)
  , (ErlangInt num_6) == (toErl 118)
  , (ErlangInt num_7) == (toErl 101)
  , (ErlangInt num_8) == (toErl 114)
  , (ErlangInt num_9) == (toErl 105)
  , (ErlangInt num_10) == (toErl 102)
  , (ErlangInt num_11) == (toErl 121)
  , (ErlangInt num_12) == (toErl 95)
  , (ErlangInt num_13) == (toErl 115)
  , (ErlangInt num_14) == (toErl 105)
  , (ErlangInt num_15) == (toErl 103)
  , (ErlangInt num_16) == (toErl 95)
  , (ErlangInt num_17) == (toErl 115)
  , (ErlangInt num_18) == (toErl 101)
  , (ErlangInt num_19) == (toErl 99)
  , (ErlangInt num_20) == (toErl 112)
  , (ErlangInt num_21) == (toErl 50)
  , (ErlangInt num_22) == (toErl 53)
  , (ErlangInt num_23) == (toErl 54)
  , (ErlangInt num_24) == (toErl 107)
  , (ErlangInt num_25) == (toErl 49) =
  ErlangAtom "true"
erlps__is_builtin_fun__2 [(ErlangTuple [(ErlangAtom "qid"), _,
                                        (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangEmptyList))))))) (ErlangCons (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangCons (ErlangInt num_10) (ErlangCons (ErlangInt num_11) (ErlangCons (ErlangInt num_12) (ErlangCons (ErlangInt num_13) (ErlangCons (ErlangInt num_14) (ErlangCons (ErlangInt num_15) (ErlangCons (ErlangInt num_16) (ErlangCons (ErlangInt num_17) (ErlangCons (ErlangInt num_18) (ErlangCons (ErlangInt num_19) (ErlangCons (ErlangInt num_20) (ErlangCons (ErlangInt num_21) (ErlangCons (ErlangInt num_22) (ErlangCons (ErlangInt num_23) (ErlangEmptyList))))))))))))))))))) (ErlangEmptyList)))]),
                          _icode_24]
  | (ErlangInt num_0) == (toErl 67)
  , (ErlangInt num_1) == (toErl 114)
  , (ErlangInt num_2) == (toErl 121)
  , (ErlangInt num_3) == (toErl 112)
  , (ErlangInt num_4) == (toErl 116)
  , (ErlangInt num_5) == (toErl 111)
  , (ErlangInt num_6) == (toErl 101)
  , (ErlangInt num_7) == (toErl 99)
  , (ErlangInt num_8) == (toErl 118)
  , (ErlangInt num_9) == (toErl 101)
  , (ErlangInt num_10) == (toErl 114)
  , (ErlangInt num_11) == (toErl 105)
  , (ErlangInt num_12) == (toErl 102)
  , (ErlangInt num_13) == (toErl 121)
  , (ErlangInt num_14) == (toErl 95)
  , (ErlangInt num_15) == (toErl 115)
  , (ErlangInt num_16) == (toErl 101)
  , (ErlangInt num_17) == (toErl 99)
  , (ErlangInt num_18) == (toErl 112)
  , (ErlangInt num_19) == (toErl 50)
  , (ErlangInt num_20) == (toErl 53)
  , (ErlangInt num_21) == (toErl 54)
  , (ErlangInt num_22) == (toErl 107)
  , (ErlangInt num_23) == (toErl 49) =
  ErlangAtom "true"
erlps__is_builtin_fun__2 [(ErlangTuple [(ErlangAtom "qid"), _,
                                        (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangEmptyList))))))) (ErlangCons (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangCons (ErlangInt num_10) (ErlangCons (ErlangInt num_11) (ErlangCons (ErlangInt num_12) (ErlangCons (ErlangInt num_13) (ErlangCons (ErlangInt num_14) (ErlangCons (ErlangInt num_15) (ErlangCons (ErlangInt num_16) (ErlangCons (ErlangInt num_17) (ErlangCons (ErlangInt num_18) (ErlangCons (ErlangInt num_19) (ErlangCons (ErlangInt num_20) (ErlangCons (ErlangInt num_21) (ErlangCons (ErlangInt num_22) (ErlangCons (ErlangInt num_23) (ErlangCons (ErlangInt num_24) (ErlangEmptyList)))))))))))))))))))) (ErlangEmptyList)))]),
                          _icode_25]
  | (ErlangInt num_0) == (toErl 67)
  , (ErlangInt num_1) == (toErl 114)
  , (ErlangInt num_2) == (toErl 121)
  , (ErlangInt num_3) == (toErl 112)
  , (ErlangInt num_4) == (toErl 116)
  , (ErlangInt num_5) == (toErl 111)
  , (ErlangInt num_6) == (toErl 101)
  , (ErlangInt num_7) == (toErl 99)
  , (ErlangInt num_8) == (toErl 114)
  , (ErlangInt num_9) == (toErl 101)
  , (ErlangInt num_10) == (toErl 99)
  , (ErlangInt num_11) == (toErl 111)
  , (ErlangInt num_12) == (toErl 118)
  , (ErlangInt num_13) == (toErl 101)
  , (ErlangInt num_14) == (toErl 114)
  , (ErlangInt num_15) == (toErl 95)
  , (ErlangInt num_16) == (toErl 115)
  , (ErlangInt num_17) == (toErl 101)
  , (ErlangInt num_18) == (toErl 99)
  , (ErlangInt num_19) == (toErl 112)
  , (ErlangInt num_20) == (toErl 50)
  , (ErlangInt num_21) == (toErl 53)
  , (ErlangInt num_22) == (toErl 54)
  , (ErlangInt num_23) == (toErl 107)
  , (ErlangInt num_24) == (toErl 49) =
  ErlangAtom "true"
erlps__is_builtin_fun__2 [(ErlangTuple [(ErlangAtom "qid"), _,
                                        (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangEmptyList))))))) (ErlangCons (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangEmptyList))))) (ErlangEmptyList)))]),
                          _icode_10]
  | (ErlangInt num_0) == (toErl 67)
  , (ErlangInt num_1) == (toErl 114)
  , (ErlangInt num_2) == (toErl 121)
  , (ErlangInt num_3) == (toErl 112)
  , (ErlangInt num_4) == (toErl 116)
  , (ErlangInt num_5) == (toErl 111)
  , (ErlangInt num_6) == (toErl 115)
  , (ErlangInt num_7) == (toErl 104)
  , (ErlangInt num_8) == (toErl 97)
  , (ErlangInt num_9) == (toErl 51) =
  ErlangAtom "true"
erlps__is_builtin_fun__2 [(ErlangTuple [(ErlangAtom "qid"), _,
                                        (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangEmptyList))))))) (ErlangCons (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangCons (ErlangInt num_10) (ErlangCons (ErlangInt num_11) (ErlangEmptyList))))))) (ErlangEmptyList)))]),
                          _icode_12]
  | (ErlangInt num_0) == (toErl 67)
  , (ErlangInt num_1) == (toErl 114)
  , (ErlangInt num_2) == (toErl 121)
  , (ErlangInt num_3) == (toErl 112)
  , (ErlangInt num_4) == (toErl 116)
  , (ErlangInt num_5) == (toErl 111)
  , (ErlangInt num_6) == (toErl 115)
  , (ErlangInt num_7) == (toErl 104)
  , (ErlangInt num_8) == (toErl 97)
  , (ErlangInt num_9) == (toErl 50)
  , (ErlangInt num_10) == (toErl 53)
  , (ErlangInt num_11) == (toErl 54) =
  ErlangAtom "true"
erlps__is_builtin_fun__2 [(ErlangTuple [(ErlangAtom "qid"), _,
                                        (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangEmptyList))))))) (ErlangCons (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangCons (ErlangInt num_10) (ErlangCons (ErlangInt num_11) (ErlangCons (ErlangInt num_12) (ErlangEmptyList)))))))) (ErlangEmptyList)))]),
                          _icode_13]
  | (ErlangInt num_0) == (toErl 67)
  , (ErlangInt num_1) == (toErl 114)
  , (ErlangInt num_2) == (toErl 121)
  , (ErlangInt num_3) == (toErl 112)
  , (ErlangInt num_4) == (toErl 116)
  , (ErlangInt num_5) == (toErl 111)
  , (ErlangInt num_6) == (toErl 98)
  , (ErlangInt num_7) == (toErl 108)
  , (ErlangInt num_8) == (toErl 97)
  , (ErlangInt num_9) == (toErl 107)
  , (ErlangInt num_10) == (toErl 101)
  , (ErlangInt num_11) == (toErl 50)
  , (ErlangInt num_12) == (toErl 98) =
  ErlangAtom "true"
erlps__is_builtin_fun__2 [(ErlangTuple [(ErlangAtom "qid"), _,
                                        (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangEmptyList))))))) (ErlangCons (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangCons (ErlangInt num_10) (ErlangCons (ErlangInt num_11) (ErlangEmptyList))))))) (ErlangEmptyList)))]),
                          _icode_12]
  | (ErlangInt num_0) == (toErl 83)
  , (ErlangInt num_1) == (toErl 116)
  , (ErlangInt num_2) == (toErl 114)
  , (ErlangInt num_3) == (toErl 105)
  , (ErlangInt num_4) == (toErl 110)
  , (ErlangInt num_5) == (toErl 103)
  , (ErlangInt num_6) == (toErl 115)
  , (ErlangInt num_7) == (toErl 104)
  , (ErlangInt num_8) == (toErl 97)
  , (ErlangInt num_9) == (toErl 50)
  , (ErlangInt num_10) == (toErl 53)
  , (ErlangInt num_11) == (toErl 54) =
  ErlangAtom "true"
erlps__is_builtin_fun__2 [(ErlangTuple [(ErlangAtom "qid"), _,
                                        (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangEmptyList))))))) (ErlangCons (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangCons (ErlangInt num_10) (ErlangCons (ErlangInt num_11) (ErlangCons (ErlangInt num_12) (ErlangEmptyList)))))))) (ErlangEmptyList)))]),
                          _icode_13]
  | (ErlangInt num_0) == (toErl 83)
  , (ErlangInt num_1) == (toErl 116)
  , (ErlangInt num_2) == (toErl 114)
  , (ErlangInt num_3) == (toErl 105)
  , (ErlangInt num_4) == (toErl 110)
  , (ErlangInt num_5) == (toErl 103)
  , (ErlangInt num_6) == (toErl 98)
  , (ErlangInt num_7) == (toErl 108)
  , (ErlangInt num_8) == (toErl 97)
  , (ErlangInt num_9) == (toErl 107)
  , (ErlangInt num_10) == (toErl 101)
  , (ErlangInt num_11) == (toErl 50)
  , (ErlangInt num_12) == (toErl 98) =
  ErlangAtom "true"
erlps__is_builtin_fun__2 [(ErlangTuple [(ErlangAtom "qid"), _,
                                        (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangEmptyList))))))) (ErlangCons (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangCons (ErlangInt num_10) (ErlangCons (ErlangInt num_11) (ErlangEmptyList))))))) (ErlangEmptyList)))]),
                          _icode_12]
  | (ErlangInt num_0) == (toErl 83)
  , (ErlangInt num_1) == (toErl 116)
  , (ErlangInt num_2) == (toErl 114)
  , (ErlangInt num_3) == (toErl 105)
  , (ErlangInt num_4) == (toErl 110)
  , (ErlangInt num_5) == (toErl 103)
  , (ErlangInt num_6) == (toErl 108)
  , (ErlangInt num_7) == (toErl 101)
  , (ErlangInt num_8) == (toErl 110)
  , (ErlangInt num_9) == (toErl 103)
  , (ErlangInt num_10) == (toErl 116)
  , (ErlangInt num_11) == (toErl 104) =
  ErlangAtom "true"
erlps__is_builtin_fun__2 [(ErlangTuple [(ErlangAtom "qid"), _,
                                        (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangEmptyList))))))) (ErlangCons (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangCons (ErlangInt num_10) (ErlangCons (ErlangInt num_11) (ErlangEmptyList))))))) (ErlangEmptyList)))]),
                          _icode_12]
  | (ErlangInt num_0) == (toErl 83)
  , (ErlangInt num_1) == (toErl 116)
  , (ErlangInt num_2) == (toErl 114)
  , (ErlangInt num_3) == (toErl 105)
  , (ErlangInt num_4) == (toErl 110)
  , (ErlangInt num_5) == (toErl 103)
  , (ErlangInt num_6) == (toErl 99)
  , (ErlangInt num_7) == (toErl 111)
  , (ErlangInt num_8) == (toErl 110)
  , (ErlangInt num_9) == (toErl 99)
  , (ErlangInt num_10) == (toErl 97)
  , (ErlangInt num_11) == (toErl 116) =
  ErlangAtom "true"
erlps__is_builtin_fun__2 [(ErlangTuple [(ErlangAtom "qid"), _,
                                        (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangEmptyList))))))) (ErlangCons (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangEmptyList))))) (ErlangEmptyList)))]),
                          _icode_10]
  | (ErlangInt num_0) == (toErl 83)
  , (ErlangInt num_1) == (toErl 116)
  , (ErlangInt num_2) == (toErl 114)
  , (ErlangInt num_3) == (toErl 105)
  , (ErlangInt num_4) == (toErl 110)
  , (ErlangInt num_5) == (toErl 103)
  , (ErlangInt num_6) == (toErl 115)
  , (ErlangInt num_7) == (toErl 104)
  , (ErlangInt num_8) == (toErl 97)
  , (ErlangInt num_9) == (toErl 51) =
  ErlangAtom "true"
erlps__is_builtin_fun__2 [(ErlangTuple [(ErlangAtom "qid"), _,
                                        (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangEmptyList))))) (ErlangCons (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangEmptyList))))) (ErlangEmptyList)))]),
                          _icode_8]
  | (ErlangInt num_0) == (toErl 66)
  , (ErlangInt num_1) == (toErl 105)
  , (ErlangInt num_2) == (toErl 116)
  , (ErlangInt num_3) == (toErl 115)
  , (ErlangInt num_4) == (toErl 116)
  , (ErlangInt num_5) == (toErl 101)
  , (ErlangInt num_6) == (toErl 115)
  , (ErlangInt num_7) == (toErl 116) =
  ErlangAtom "true"
erlps__is_builtin_fun__2 [(ErlangTuple [(ErlangAtom "qid"), _,
                                        (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangEmptyList))))) (ErlangCons (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangEmptyList)))) (ErlangEmptyList)))]),
                          _icode_7]
  | (ErlangInt num_0) == (toErl 66)
  , (ErlangInt num_1) == (toErl 105)
  , (ErlangInt num_2) == (toErl 116)
  , (ErlangInt num_3) == (toErl 115)
  , (ErlangInt num_4) == (toErl 115)
  , (ErlangInt num_5) == (toErl 101)
  , (ErlangInt num_6) == (toErl 116) =
  ErlangAtom "true"
erlps__is_builtin_fun__2 [(ErlangTuple [(ErlangAtom "qid"), _,
                                        (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangEmptyList))))) (ErlangCons (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangEmptyList)))))) (ErlangEmptyList)))]),
                          _icode_9]
  | (ErlangInt num_0) == (toErl 66)
  , (ErlangInt num_1) == (toErl 105)
  , (ErlangInt num_2) == (toErl 116)
  , (ErlangInt num_3) == (toErl 115)
  , (ErlangInt num_4) == (toErl 99)
  , (ErlangInt num_5) == (toErl 108)
  , (ErlangInt num_6) == (toErl 101)
  , (ErlangInt num_7) == (toErl 97)
  , (ErlangInt num_8) == (toErl 114) =
  ErlangAtom "true"
erlps__is_builtin_fun__2 [(ErlangTuple [(ErlangAtom "qid"), _,
                                        (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangEmptyList))))) (ErlangCons (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangEmptyList)))))) (ErlangEmptyList)))]),
                          _icode_9]
  | (ErlangInt num_0) == (toErl 66)
  , (ErlangInt num_1) == (toErl 105)
  , (ErlangInt num_2) == (toErl 116)
  , (ErlangInt num_3) == (toErl 115)
  , (ErlangInt num_4) == (toErl 117)
  , (ErlangInt num_5) == (toErl 110)
  , (ErlangInt num_6) == (toErl 105)
  , (ErlangInt num_7) == (toErl 111)
  , (ErlangInt num_8) == (toErl 110) =
  ErlangAtom "true"
erlps__is_builtin_fun__2 [(ErlangTuple [(ErlangAtom "qid"), _,
                                        (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangEmptyList))))) (ErlangCons (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangCons (ErlangInt num_10) (ErlangCons (ErlangInt num_11) (ErlangCons (ErlangInt num_12) (ErlangCons (ErlangInt num_13) (ErlangCons (ErlangInt num_14) (ErlangCons (ErlangInt num_15) (ErlangEmptyList))))))))))))) (ErlangEmptyList)))]),
                          _icode_16]
  | (ErlangInt num_0) == (toErl 66)
  , (ErlangInt num_1) == (toErl 105)
  , (ErlangInt num_2) == (toErl 116)
  , (ErlangInt num_3) == (toErl 115)
  , (ErlangInt num_4) == (toErl 105)
  , (ErlangInt num_5) == (toErl 110)
  , (ErlangInt num_6) == (toErl 116)
  , (ErlangInt num_7) == (toErl 101)
  , (ErlangInt num_8) == (toErl 114)
  , (ErlangInt num_9) == (toErl 115)
  , (ErlangInt num_10) == (toErl 101)
  , (ErlangInt num_11) == (toErl 99)
  , (ErlangInt num_12) == (toErl 116)
  , (ErlangInt num_13) == (toErl 105)
  , (ErlangInt num_14) == (toErl 111)
  , (ErlangInt num_15) == (toErl 110) =
  ErlangAtom "true"
erlps__is_builtin_fun__2 [(ErlangTuple [(ErlangAtom "qid"), _,
                                        (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangEmptyList))))) (ErlangCons (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangCons (ErlangInt num_10) (ErlangCons (ErlangInt num_11) (ErlangCons (ErlangInt num_12) (ErlangCons (ErlangInt num_13) (ErlangEmptyList))))))))))) (ErlangEmptyList)))]),
                          _icode_14]
  | (ErlangInt num_0) == (toErl 66)
  , (ErlangInt num_1) == (toErl 105)
  , (ErlangInt num_2) == (toErl 116)
  , (ErlangInt num_3) == (toErl 115)
  , (ErlangInt num_4) == (toErl 100)
  , (ErlangInt num_5) == (toErl 105)
  , (ErlangInt num_6) == (toErl 102)
  , (ErlangInt num_7) == (toErl 102)
  , (ErlangInt num_8) == (toErl 101)
  , (ErlangInt num_9) == (toErl 114)
  , (ErlangInt num_10) == (toErl 101)
  , (ErlangInt num_11) == (toErl 110)
  , (ErlangInt num_12) == (toErl 99)
  , (ErlangInt num_13) == (toErl 101) =
  ErlangAtom "true"
erlps__is_builtin_fun__2 [(ErlangTuple [(ErlangAtom "qid"), _,
                                        (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangEmptyList))))) (ErlangCons (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangEmptyList)))) (ErlangEmptyList)))]),
                          _icode_7]
  | (ErlangInt num_0) == (toErl 66)
  , (ErlangInt num_1) == (toErl 105)
  , (ErlangInt num_2) == (toErl 116)
  , (ErlangInt num_3) == (toErl 115)
  , (ErlangInt num_4) == (toErl 115)
  , (ErlangInt num_5) == (toErl 117)
  , (ErlangInt num_6) == (toErl 109) =
  ErlangAtom "true"
erlps__is_builtin_fun__2 [(ErlangTuple [(ErlangAtom "qid"), _,
                                        (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangEmptyList)))) (ErlangCons (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangEmptyList))))))) (ErlangEmptyList)))]),
                          _icode_9]
  | (ErlangInt num_0) == (toErl 73)
  , (ErlangInt num_1) == (toErl 110)
  , (ErlangInt num_2) == (toErl 116)
  , (ErlangInt num_3) == (toErl 116)
  , (ErlangInt num_4) == (toErl 111)
  , (ErlangInt num_5) == (toErl 95)
  , (ErlangInt num_6) == (toErl 115)
  , (ErlangInt num_7) == (toErl 116)
  , (ErlangInt num_8) == (toErl 114) =
  ErlangAtom "true"
erlps__is_builtin_fun__2 [(ErlangTuple [(ErlangAtom "qid"), _,
                                        (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangEmptyList)))))))) (ErlangCons (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangCons (ErlangInt num_10) (ErlangCons (ErlangInt num_11) (ErlangCons (ErlangInt num_12) (ErlangEmptyList))))))) (ErlangEmptyList)))]),
                          _icode_13]
  | (ErlangInt num_0) == (toErl 65)
  , (ErlangInt num_1) == (toErl 100)
  , (ErlangInt num_2) == (toErl 100)
  , (ErlangInt num_3) == (toErl 114)
  , (ErlangInt num_4) == (toErl 101)
  , (ErlangInt num_5) == (toErl 115)
  , (ErlangInt num_6) == (toErl 115)
  , (ErlangInt num_7) == (toErl 116)
  , (ErlangInt num_8) == (toErl 111)
  , (ErlangInt num_9) == (toErl 95)
  , (ErlangInt num_10) == (toErl 115)
  , (ErlangInt num_11) == (toErl 116)
  , (ErlangInt num_12) == (toErl 114) =
  ErlangAtom "true"
erlps__is_builtin_fun__2 [(ErlangTuple [(ErlangAtom "qid"), _,
                                        (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangEmptyList)))))))) (ErlangCons (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangCons (ErlangInt num_10) (ErlangCons (ErlangInt num_11) (ErlangCons (ErlangInt num_12) (ErlangCons (ErlangInt num_13) (ErlangCons (ErlangInt num_14) (ErlangCons (ErlangInt num_15) (ErlangEmptyList)))))))))) (ErlangEmptyList)))]),
                          _icode_16]
  | (ErlangInt num_0) == (toErl 65)
  , (ErlangInt num_1) == (toErl 100)
  , (ErlangInt num_2) == (toErl 100)
  , (ErlangInt num_3) == (toErl 114)
  , (ErlangInt num_4) == (toErl 101)
  , (ErlangInt num_5) == (toErl 115)
  , (ErlangInt num_6) == (toErl 115)
  , (ErlangInt num_7) == (toErl 105)
  , (ErlangInt num_8) == (toErl 115)
  , (ErlangInt num_9) == (toErl 95)
  , (ErlangInt num_10) == (toErl 111)
  , (ErlangInt num_11) == (toErl 114)
  , (ErlangInt num_12) == (toErl 97)
  , (ErlangInt num_13) == (toErl 99)
  , (ErlangInt num_14) == (toErl 108)
  , (ErlangInt num_15) == (toErl 101) =
  ErlangAtom "true"
erlps__is_builtin_fun__2 [(ErlangTuple [(ErlangAtom "qid"), _,
                                        (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangEmptyList)))))))) (ErlangCons (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangCons (ErlangInt num_10) (ErlangCons (ErlangInt num_11) (ErlangCons (ErlangInt num_12) (ErlangCons (ErlangInt num_13) (ErlangCons (ErlangInt num_14) (ErlangCons (ErlangInt num_15) (ErlangCons (ErlangInt num_16) (ErlangCons (ErlangInt num_17) (ErlangEmptyList)))))))))))) (ErlangEmptyList)))]),
                          _icode_18]
  | (ErlangInt num_0) == (toErl 65)
  , (ErlangInt num_1) == (toErl 100)
  , (ErlangInt num_2) == (toErl 100)
  , (ErlangInt num_3) == (toErl 114)
  , (ErlangInt num_4) == (toErl 101)
  , (ErlangInt num_5) == (toErl 115)
  , (ErlangInt num_6) == (toErl 115)
  , (ErlangInt num_7) == (toErl 105)
  , (ErlangInt num_8) == (toErl 115)
  , (ErlangInt num_9) == (toErl 95)
  , (ErlangInt num_10) == (toErl 99)
  , (ErlangInt num_11) == (toErl 111)
  , (ErlangInt num_12) == (toErl 110)
  , (ErlangInt num_13) == (toErl 116)
  , (ErlangInt num_14) == (toErl 114)
  , (ErlangInt num_15) == (toErl 97)
  , (ErlangInt num_16) == (toErl 99)
  , (ErlangInt num_17) == (toErl 116) =
  ErlangAtom "true"
erlps__is_builtin_fun__2 [(ErlangTuple [(ErlangAtom "qid"), _,
                                        (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangEmptyList)))))))) (ErlangCons (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangCons (ErlangInt num_10) (ErlangCons (ErlangInt num_11) (ErlangCons (ErlangInt num_12) (ErlangCons (ErlangInt num_13) (ErlangCons (ErlangInt num_14) (ErlangCons (ErlangInt num_15) (ErlangCons (ErlangInt num_16) (ErlangEmptyList))))))))))) (ErlangEmptyList)))]),
                          _icode_17]
  | (ErlangInt num_0) == (toErl 65)
  , (ErlangInt num_1) == (toErl 100)
  , (ErlangInt num_2) == (toErl 100)
  , (ErlangInt num_3) == (toErl 114)
  , (ErlangInt num_4) == (toErl 101)
  , (ErlangInt num_5) == (toErl 115)
  , (ErlangInt num_6) == (toErl 115)
  , (ErlangInt num_7) == (toErl 105)
  , (ErlangInt num_8) == (toErl 115)
  , (ErlangInt num_9) == (toErl 95)
  , (ErlangInt num_10) == (toErl 112)
  , (ErlangInt num_11) == (toErl 97)
  , (ErlangInt num_12) == (toErl 121)
  , (ErlangInt num_13) == (toErl 97)
  , (ErlangInt num_14) == (toErl 98)
  , (ErlangInt num_15) == (toErl 108)
  , (ErlangInt num_16) == (toErl 101) =
  ErlangAtom "true"
erlps__is_builtin_fun__2 [(ErlangTuple [(ErlangAtom "qid"), _,
                                        (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangEmptyList)))))))) (ErlangCons (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangCons (ErlangInt num_10) (ErlangCons (ErlangInt num_11) (ErlangCons (ErlangInt num_12) (ErlangCons (ErlangInt num_13) (ErlangCons (ErlangInt num_14) (ErlangCons (ErlangInt num_15) (ErlangCons (ErlangInt num_16) (ErlangCons (ErlangInt num_17) (ErlangEmptyList)))))))))))) (ErlangEmptyList)))]),
                          _icode_18]
  | (ErlangInt num_0) == (toErl 65)
  , (ErlangInt num_1) == (toErl 100)
  , (ErlangInt num_2) == (toErl 100)
  , (ErlangInt num_3) == (toErl 114)
  , (ErlangInt num_4) == (toErl 101)
  , (ErlangInt num_5) == (toErl 115)
  , (ErlangInt num_6) == (toErl 115)
  , (ErlangInt num_7) == (toErl 116)
  , (ErlangInt num_8) == (toErl 111)
  , (ErlangInt num_9) == (toErl 95)
  , (ErlangInt num_10) == (toErl 99)
  , (ErlangInt num_11) == (toErl 111)
  , (ErlangInt num_12) == (toErl 110)
  , (ErlangInt num_13) == (toErl 116)
  , (ErlangInt num_14) == (toErl 114)
  , (ErlangInt num_15) == (toErl 97)
  , (ErlangInt num_16) == (toErl 99)
  , (ErlangInt num_17) == (toErl 116) =
  ErlangAtom "true"
erlps__is_builtin_fun__2 [(ErlangTuple [(ErlangAtom "qid"), _,
                                        (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangEmptyList)))))) (ErlangCons (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangCons (ErlangInt num_10) (ErlangEmptyList))))))) (ErlangEmptyList)))]),
                          _icode_11]
  | (ErlangInt num_0) == (toErl 66)
  , (ErlangInt num_1) == (toErl 121)
  , (ErlangInt num_2) == (toErl 116)
  , (ErlangInt num_3) == (toErl 101)
  , (ErlangInt num_4) == (toErl 115)
  , (ErlangInt num_5) == (toErl 116)
  , (ErlangInt num_6) == (toErl 111)
  , (ErlangInt num_7) == (toErl 95)
  , (ErlangInt num_8) == (toErl 105)
  , (ErlangInt num_9) == (toErl 110)
  , (ErlangInt num_10) == (toErl 116) =
  ErlangAtom "true"
erlps__is_builtin_fun__2 [(ErlangTuple [(ErlangAtom "qid"), _,
                                        (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangEmptyList)))))) (ErlangCons (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangCons (ErlangInt num_10) (ErlangEmptyList))))))) (ErlangEmptyList)))]),
                          _icode_11]
  | (ErlangInt num_0) == (toErl 66)
  , (ErlangInt num_1) == (toErl 121)
  , (ErlangInt num_2) == (toErl 116)
  , (ErlangInt num_3) == (toErl 101)
  , (ErlangInt num_4) == (toErl 115)
  , (ErlangInt num_5) == (toErl 116)
  , (ErlangInt num_6) == (toErl 111)
  , (ErlangInt num_7) == (toErl 95)
  , (ErlangInt num_8) == (toErl 115)
  , (ErlangInt num_9) == (toErl 116)
  , (ErlangInt num_10) == (toErl 114) =
  ErlangAtom "true"
erlps__is_builtin_fun__2 [(ErlangTuple [(ErlangAtom "qid"), _,
                                        (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangEmptyList)))))) (ErlangCons (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangCons (ErlangInt num_10) (ErlangEmptyList))))))) (ErlangEmptyList)))]),
                          _icode_11]
  | (ErlangInt num_0) == (toErl 66)
  , (ErlangInt num_1) == (toErl 121)
  , (ErlangInt num_2) == (toErl 116)
  , (ErlangInt num_3) == (toErl 101)
  , (ErlangInt num_4) == (toErl 115)
  , (ErlangInt num_5) == (toErl 99)
  , (ErlangInt num_6) == (toErl 111)
  , (ErlangInt num_7) == (toErl 110)
  , (ErlangInt num_8) == (toErl 99)
  , (ErlangInt num_9) == (toErl 97)
  , (ErlangInt num_10) == (toErl 116) =
  ErlangAtom "true"
erlps__is_builtin_fun__2 [(ErlangTuple [(ErlangAtom "qid"), _,
                                        (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangEmptyList)))))) (ErlangCons (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangEmptyList)))))) (ErlangEmptyList)))]),
                          _icode_10]
  | (ErlangInt num_0) == (toErl 66)
  , (ErlangInt num_1) == (toErl 121)
  , (ErlangInt num_2) == (toErl 116)
  , (ErlangInt num_3) == (toErl 101)
  , (ErlangInt num_4) == (toErl 115)
  , (ErlangInt num_5) == (toErl 115)
  , (ErlangInt num_6) == (toErl 112)
  , (ErlangInt num_7) == (toErl 108)
  , (ErlangInt num_8) == (toErl 105)
  , (ErlangInt num_9) == (toErl 116) =
  ErlangAtom "true"
erlps__is_builtin_fun__2 [_, _] = ErlangAtom "false"
erlps__is_builtin_fun__2 [arg_0, arg_1] =
  EXC.function_clause unit
erlps__is_builtin_fun__2 args =
  EXC.badarity (ErlangFun 2 erlps__is_builtin_fun__2) args

erlps__builtin_code__6 :: ErlangFun
erlps__builtin_code__6 [_,
                        (ErlangTuple [(ErlangAtom "qid"), _,
                                      (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangEmptyList)))))) (ErlangCons (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangEmptyList)))))) (ErlangEmptyList)))]),
                        (ErlangCons to_10 (ErlangCons amount_11 (ErlangEmptyList))),
                        _, _, icode_12]
  | (ErlangInt num_0) == (toErl 67)
  , (ErlangInt num_1) == (toErl 104)
  , (ErlangInt num_2) == (toErl 97)
  , (ErlangInt num_3) == (toErl 105)
  , (ErlangInt num_4) == (toErl 110)
  , (ErlangInt num_5) == (toErl 115)
  , (ErlangInt num_6) == (toErl 112)
  , (ErlangInt num_7) == (toErl 101)
  , (ErlangInt num_8) == (toErl 110)
  , (ErlangInt num_9) == (toErl 100) =
  let    arg_13 = toErl 1
  in let arg_14 = erlps__ast_body__2 [amount_11, icode_12]
  in let head_18 = erlps__ast_body__2 [to_10, icode_12]
  in let arg_25 = ErlangTuple [ErlangAtom "tuple", ErlangEmptyList]
  in
    erlps__prim_call__5
      [arg_13, arg_14, ErlangCons head_18 ErlangEmptyList,
       ErlangCons (ErlangAtom "word") ErlangEmptyList, arg_25]
erlps__builtin_code__6 [_,
                        (ErlangTuple [(ErlangAtom "qid"), _,
                                      (ErlangCons con_0 (ErlangCons (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangEmptyList)))))) (ErlangCons (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangCons (ErlangInt num_10) (ErlangEmptyList)))))) (ErlangEmptyList))))]),
                        (ErlangCons event_11 (ErlangEmptyList)), _, _,
                        icode_14@(ErlangMap map_12)]
  | (ErlangInt num_1) == (toErl 67)
  , (ErlangInt num_2) == (toErl 104)
  , (ErlangInt num_3) == (toErl 97)
  , (ErlangInt num_4) == (toErl 105)
  , (ErlangInt num_5) == (toErl 110)
  , (ErlangInt num_6) == (toErl 101)
  , (ErlangInt num_7) == (toErl 118)
  , (ErlangInt num_8) == (toErl 101)
  , (ErlangInt num_9) == (toErl 110)
  , (ErlangInt num_10) == (toErl 116)
  , (DM.Just con_13) <-
      (Map.lookup (ErlangAtom "contract_name") map_12)
  , con_13 == con_0 =
  let   
    _ =
      BIF.do_remote_fun_call "Aeso.Builtins"
        "erlps__check_event_type__1" [icode_14]
  in let
    tup_el_18 = BIF.maps__get__2 [ErlangAtom "event_type", icode_14]
  in let arg_16 = ErlangTuple [ErlangAtom "event", tup_el_18]
  in let head_22 = erlps__ast_body__2 [event_11, icode_14]
  in
    erlps__builtin_call__2
      [arg_16, ErlangCons head_22 ErlangEmptyList]
erlps__builtin_code__6 [_,
                        (ErlangTuple [(ErlangAtom "qid"), _,
                                      (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangEmptyList)))))) (ErlangCons (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangCons (ErlangInt num_10) (ErlangCons (ErlangInt num_11) (ErlangEmptyList)))))))) (ErlangEmptyList)))]),
                        (ErlangCons address_12 (ErlangEmptyList)), _, _,
                        icode_13]
  | (ErlangInt num_0) == (toErl 67)
  , (ErlangInt num_1) == (toErl 104)
  , (ErlangInt num_2) == (toErl 97)
  , (ErlangInt num_3) == (toErl 105)
  , (ErlangInt num_4) == (toErl 110)
  , (ErlangInt num_5) == (toErl 98)
  , (ErlangInt num_6) == (toErl 97)
  , (ErlangInt num_7) == (toErl 108)
  , (ErlangInt num_8) == (toErl 97)
  , (ErlangInt num_9) == (toErl 110)
  , (ErlangInt num_10) == (toErl 99)
  , (ErlangInt num_11) == (toErl 101) =
  let tup_el_15 = erlps__ast_body__2 [address_12, icode_13]
  in ErlangTuple [ErlangAtom "prim_balance", tup_el_15]
erlps__builtin_code__6 [_,
                        (ErlangTuple [(ErlangAtom "qid"), _,
                                      (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangEmptyList)))))) (ErlangCons (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangCons (ErlangInt num_10) (ErlangCons (ErlangInt num_11) (ErlangCons (ErlangInt num_12) (ErlangCons (ErlangInt num_13) (ErlangCons (ErlangInt num_14) (ErlangEmptyList))))))))))) (ErlangEmptyList)))]),
                        (ErlangCons height_15 (ErlangEmptyList)), _, _,
                        icode_16]
  | (ErlangInt num_0) == (toErl 67)
  , (ErlangInt num_1) == (toErl 104)
  , (ErlangInt num_2) == (toErl 97)
  , (ErlangInt num_3) == (toErl 105)
  , (ErlangInt num_4) == (toErl 110)
  , (ErlangInt num_5) == (toErl 98)
  , (ErlangInt num_6) == (toErl 108)
  , (ErlangInt num_7) == (toErl 111)
  , (ErlangInt num_8) == (toErl 99)
  , (ErlangInt num_9) == (toErl 107)
  , (ErlangInt num_10) == (toErl 95)
  , (ErlangInt num_11) == (toErl 104)
  , (ErlangInt num_12) == (toErl 97)
  , (ErlangInt num_13) == (toErl 115)
  , (ErlangInt num_14) == (toErl 104) =
  let head_19 = erlps__ast_body__2 [height_15, icode_16]
  in
    erlps__builtin_call__2
      [ErlangAtom "block_hash", ErlangCons head_19 ErlangEmptyList]
erlps__builtin_code__6 [_,
                        (ErlangTuple [(ErlangAtom "qid"), _,
                                      (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangEmptyList))))) (ErlangCons (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangCons (ErlangInt num_10) (ErlangCons (ErlangInt num_11) (ErlangEmptyList))))))))) (ErlangEmptyList)))]),
                        (ErlangEmptyList), _, _, _icode_12]
  | (ErlangInt num_0) == (toErl 67)
  , (ErlangInt num_1) == (toErl 97)
  , (ErlangInt num_2) == (toErl 108)
  , (ErlangInt num_3) == (toErl 108)
  , (ErlangInt num_4) == (toErl 103)
  , (ErlangInt num_5) == (toErl 97)
  , (ErlangInt num_6) == (toErl 115)
  , (ErlangInt num_7) == (toErl 95)
  , (ErlangInt num_8) == (toErl 108)
  , (ErlangInt num_9) == (toErl 101)
  , (ErlangInt num_10) == (toErl 102)
  , (ErlangInt num_11) == (toErl 116) =
  ErlangAtom "prim_gas_left"
erlps__builtin_code__6 [_,
                        (ErlangTuple [(ErlangAtom "id"), _,
                                      (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangEmptyList))))))]),
                        (ErlangCons string_5 (ErlangEmptyList)), _, _, icode_6]
  | (ErlangInt num_0) == (toErl 97)
  , (ErlangInt num_1) == (toErl 98)
  , (ErlangInt num_2) == (toErl 111)
  , (ErlangInt num_3) == (toErl 114)
  , (ErlangInt num_4) == (toErl 116) =
  let head_9 = erlps__ast_body__2 [string_5, icode_6]
  in
    erlps__builtin_call__2
      [ErlangAtom "abort", ErlangCons head_9 ErlangEmptyList]
erlps__builtin_code__6 [_,
                        (ErlangTuple [(ErlangAtom "id"), _,
                                      (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangEmptyList))))))))]),
                        (ErlangCons bool_7 (ErlangCons string_8 (ErlangEmptyList))),
                        _, _, icode_9]
  | (ErlangInt num_0) == (toErl 114)
  , (ErlangInt num_1) == (toErl 101)
  , (ErlangInt num_2) == (toErl 113)
  , (ErlangInt num_3) == (toErl 117)
  , (ErlangInt num_4) == (toErl 105)
  , (ErlangInt num_5) == (toErl 114)
  , (ErlangInt num_6) == (toErl 101) =
  let    head_12 = erlps__ast_body__2 [bool_7, icode_9]
  in let head_16 = erlps__ast_body__2 [string_8, icode_9]
  in
    erlps__builtin_call__2
      [ErlangAtom "require",
       ErlangCons head_12 (ErlangCons head_16 ErlangEmptyList)]
erlps__builtin_code__6 [_,
                        (ErlangTuple [(ErlangAtom "qid"), ann_0,
                                      (ErlangCons (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangEmptyList))))))) (ErlangCons (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangCons (ErlangInt num_10) (ErlangCons (ErlangInt num_11) (ErlangCons (ErlangInt num_12) (ErlangCons (ErlangInt num_13) (ErlangCons (ErlangInt num_14) (ErlangEmptyList))))))))) (ErlangEmptyList)))]),
                        args_15, _,
                        oracletype_24@(ErlangTuple [(ErlangAtom "app_t"), _,
                                                    (ErlangTuple [(ErlangAtom "id"),
                                                                  _,
                                                                  (ErlangCons (ErlangInt num_16) (ErlangCons (ErlangInt num_17) (ErlangCons (ErlangInt num_18) (ErlangCons (ErlangInt num_19) (ErlangCons (ErlangInt num_20) (ErlangCons (ErlangInt num_21) (ErlangEmptyList)))))))]),
                                                    (ErlangCons qtype_22 (ErlangCons rtype_23 (ErlangEmptyList)))]),
                        icode_25]
  | (ErlangInt num_1) == (toErl 79)
  , (ErlangInt num_2) == (toErl 114)
  , (ErlangInt num_3) == (toErl 97)
  , (ErlangInt num_4) == (toErl 99)
  , (ErlangInt num_5) == (toErl 108)
  , (ErlangInt num_6) == (toErl 101)
  , (ErlangInt num_7) == (toErl 114)
  , (ErlangInt num_8) == (toErl 101)
  , (ErlangInt num_9) == (toErl 103)
  , (ErlangInt num_10) == (toErl 105)
  , (ErlangInt num_11) == (toErl 115)
  , (ErlangInt num_12) == (toErl 116)
  , (ErlangInt num_13) == (toErl 101)
  , (ErlangInt num_14) == (toErl 114)
  , (ErlangInt num_16) == (toErl 111)
  , (ErlangInt num_17) == (toErl 114)
  , (ErlangInt num_18) == (toErl 97)
  , (ErlangInt num_19) == (toErl 99)
  , (ErlangInt num_20) == (toErl 108)
  , (ErlangInt num_21) == (toErl 101) =
  let    _ = erlps__check_oracle_type__2 [ann_0, oracletype_24]
  in let matchExpr_33 = erlps__get_signature_arg__1 [args_15]
  in
    case matchExpr_33 of
      (ErlangTuple [sign_29,
                    (ErlangCons acct_30 (ErlangCons qfee_31 (ErlangCons ttl_32 (ErlangEmptyList))))]) ->
        let    arg_34 = toErl 100
        in let tup_el_37 = toErl 0
        in let arg_35 = ErlangTuple [ErlangAtom "integer", tup_el_37]
        in let head_39 = erlps__ast_body__2 [acct_30, icode_25]
        in let head_43 = erlps__ast_body__2 [sign_29, icode_25]
        in let head_47 = erlps__ast_body__2 [qfee_31, icode_25]
        in let head_51 = erlps__ast_body__2 [ttl_32, icode_25]
        in let head_55 = erlps__ast_type_value__2 [qtype_22, icode_25]
        in let head_59 = erlps__ast_type_value__2 [rtype_23, icode_25]
        in let head_66 = erlps__sign_t__0 []
        in let head_70 = erlps__ttl_t__1 [icode_25]
        in
          erlps__prim_call__5
            [arg_34, arg_35,
             ErlangCons head_39
               (ErlangCons head_43
                  (ErlangCons head_47
                     (ErlangCons head_51
                        (ErlangCons head_55
                           (ErlangCons head_59 ErlangEmptyList))))),
             ErlangCons (ErlangAtom "word")
               (ErlangCons head_66
                  (ErlangCons (ErlangAtom "word")
                     (ErlangCons head_70
                        (ErlangCons (ErlangAtom "typerep")
                           (ErlangCons (ErlangAtom "typerep")
                              ErlangEmptyList))))),
             ErlangAtom "word"]
      _ -> EXC.badmatch matchExpr_33
erlps__builtin_code__6 [_,
                        (ErlangTuple [(ErlangAtom "qid"), _,
                                      (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangEmptyList))))))) (ErlangCons (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangCons (ErlangInt num_10) (ErlangCons (ErlangInt num_11) (ErlangCons (ErlangInt num_12) (ErlangCons (ErlangInt num_13) (ErlangCons (ErlangInt num_14) (ErlangEmptyList)))))))))) (ErlangEmptyList)))]),
                        (ErlangCons oracle_15 (ErlangEmptyList)),
                        (ErlangCons _ (ErlangEmptyList)), _, icode_16]
  | (ErlangInt num_0) == (toErl 79)
  , (ErlangInt num_1) == (toErl 114)
  , (ErlangInt num_2) == (toErl 97)
  , (ErlangInt num_3) == (toErl 99)
  , (ErlangInt num_4) == (toErl 108)
  , (ErlangInt num_5) == (toErl 101)
  , (ErlangInt num_6) == (toErl 113)
  , (ErlangInt num_7) == (toErl 117)
  , (ErlangInt num_8) == (toErl 101)
  , (ErlangInt num_9) == (toErl 114)
  , (ErlangInt num_10) == (toErl 121)
  , (ErlangInt num_11) == (toErl 95)
  , (ErlangInt num_12) == (toErl 102)
  , (ErlangInt num_13) == (toErl 101)
  , (ErlangInt num_14) == (toErl 101) =
  let    arg_17 = toErl 106
  in let tup_el_20 = toErl 0
  in let arg_18 = ErlangTuple [ErlangAtom "integer", tup_el_20]
  in let head_22 = erlps__ast_body__2 [oracle_15, icode_16]
  in
    erlps__prim_call__5
      [arg_17, arg_18, ErlangCons head_22 ErlangEmptyList,
       ErlangCons (ErlangAtom "word") ErlangEmptyList,
       ErlangAtom "word"]
erlps__builtin_code__6 [_,
                        (ErlangTuple [(ErlangAtom "qid"), ann_0,
                                      (ErlangCons (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangEmptyList))))))) (ErlangCons (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangCons (ErlangInt num_10) (ErlangCons (ErlangInt num_11) (ErlangEmptyList)))))) (ErlangEmptyList)))]),
                        (ErlangCons oracle_12 (ErlangCons q_13 (ErlangCons qfee_14 (ErlangCons qttl_15 (ErlangCons rttl_16 (ErlangEmptyList)))))),
                        (ErlangCons oracletype_17 (ErlangCons qtype_18 (ErlangCons _ (ErlangCons _ (ErlangCons _ (ErlangEmptyList)))))),
                        _, icode_19]
  | (ErlangInt num_1) == (toErl 79)
  , (ErlangInt num_2) == (toErl 114)
  , (ErlangInt num_3) == (toErl 97)
  , (ErlangInt num_4) == (toErl 99)
  , (ErlangInt num_5) == (toErl 108)
  , (ErlangInt num_6) == (toErl 101)
  , (ErlangInt num_7) == (toErl 113)
  , (ErlangInt num_8) == (toErl 117)
  , (ErlangInt num_9) == (toErl 101)
  , (ErlangInt num_10) == (toErl 114)
  , (ErlangInt num_11) == (toErl 121) =
  let    _ = erlps__check_oracle_type__2 [ann_0, oracletype_17]
  in let arg_22 = toErl 101
  in let arg_23 = erlps__ast_body__2 [qfee_14, icode_19]
  in let head_27 = erlps__ast_body__2 [oracle_12, icode_19]
  in let head_31 = erlps__ast_body__2 [q_13, icode_19]
  in let head_35 = erlps__ast_body__2 [qttl_15, icode_19]
  in let head_39 = erlps__ast_body__2 [rttl_16, icode_19]
  in let head_46 = erlps__ast_type__2 [qtype_18, icode_19]
  in let head_50 = erlps__ttl_t__1 [icode_19]
  in let head_53 = erlps__ttl_t__1 [icode_19]
  in
    erlps__prim_call__5
      [arg_22, arg_23,
       ErlangCons head_27
         (ErlangCons head_31
            (ErlangCons head_35 (ErlangCons head_39 ErlangEmptyList))),
       ErlangCons (ErlangAtom "word")
         (ErlangCons head_46
            (ErlangCons head_50 (ErlangCons head_53 ErlangEmptyList))),
       ErlangAtom "word"]
erlps__builtin_code__6 [_,
                        (ErlangTuple [(ErlangAtom "qid"), _,
                                      (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangEmptyList))))))) (ErlangCons (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangCons (ErlangInt num_10) (ErlangCons (ErlangInt num_11) (ErlangEmptyList))))))) (ErlangEmptyList)))]),
                        args_12,
                        (ErlangCons _ (ErlangCons _ (ErlangEmptyList))), _,
                        icode_13]
  | (ErlangInt num_0) == (toErl 79)
  , (ErlangInt num_1) == (toErl 114)
  , (ErlangInt num_2) == (toErl 97)
  , (ErlangInt num_3) == (toErl 99)
  , (ErlangInt num_4) == (toErl 108)
  , (ErlangInt num_5) == (toErl 101)
  , (ErlangInt num_6) == (toErl 101)
  , (ErlangInt num_7) == (toErl 120)
  , (ErlangInt num_8) == (toErl 116)
  , (ErlangInt num_9) == (toErl 101)
  , (ErlangInt num_10) == (toErl 110)
  , (ErlangInt num_11) == (toErl 100) =
  let matchExpr_18 = erlps__get_signature_arg__1 [args_12]
  in
    case matchExpr_18 of
      (ErlangTuple [sign_15,
                    (ErlangCons oracle_16 (ErlangCons ttl_17 (ErlangEmptyList)))]) ->
        let    arg_19 = toErl 103
        in let tup_el_22 = toErl 0
        in let arg_20 = ErlangTuple [ErlangAtom "integer", tup_el_22]
        in let head_24 = erlps__ast_body__2 [oracle_16, icode_13]
        in let head_28 = erlps__ast_body__2 [sign_15, icode_13]
        in let head_32 = erlps__ast_body__2 [ttl_17, icode_13]
        in let head_39 = erlps__sign_t__0 []
        in let head_41 = erlps__ttl_t__1 [icode_13]
        in let arg_44 = ErlangTuple [ErlangAtom "tuple", ErlangEmptyList]
        in
          erlps__prim_call__5
            [arg_19, arg_20,
             ErlangCons head_24
               (ErlangCons head_28 (ErlangCons head_32 ErlangEmptyList)),
             ErlangCons (ErlangAtom "word")
               (ErlangCons head_39 (ErlangCons head_41 ErlangEmptyList)),
             arg_44]
      _ -> EXC.badmatch matchExpr_18
erlps__builtin_code__6 [_,
                        (ErlangTuple [(ErlangAtom "qid"), ann_0,
                                      (ErlangCons (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangEmptyList))))))) (ErlangCons (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangCons (ErlangInt num_10) (ErlangCons (ErlangInt num_11) (ErlangCons (ErlangInt num_12) (ErlangCons (ErlangInt num_13) (ErlangEmptyList)))))))) (ErlangEmptyList)))]),
                        args_14,
                        (ErlangCons oracletype_15 (ErlangCons _ (ErlangCons rtype_16 (ErlangEmptyList)))),
                        _, icode_17]
  | (ErlangInt num_1) == (toErl 79)
  , (ErlangInt num_2) == (toErl 114)
  , (ErlangInt num_3) == (toErl 97)
  , (ErlangInt num_4) == (toErl 99)
  , (ErlangInt num_5) == (toErl 108)
  , (ErlangInt num_6) == (toErl 101)
  , (ErlangInt num_7) == (toErl 114)
  , (ErlangInt num_8) == (toErl 101)
  , (ErlangInt num_9) == (toErl 115)
  , (ErlangInt num_10) == (toErl 112)
  , (ErlangInt num_11) == (toErl 111)
  , (ErlangInt num_12) == (toErl 110)
  , (ErlangInt num_13) == (toErl 100) =
  let    _ = erlps__check_oracle_type__2 [ann_0, oracletype_15]
  in let matchExpr_25 = erlps__get_signature_arg__1 [args_14]
  in
    case matchExpr_25 of
      (ErlangTuple [sign_21,
                    (ErlangCons oracle_22 (ErlangCons query_23 (ErlangCons r_24 (ErlangEmptyList))))]) ->
        let    arg_26 = toErl 102
        in let tup_el_29 = toErl 0
        in let arg_27 = ErlangTuple [ErlangAtom "integer", tup_el_29]
        in let head_31 = erlps__ast_body__2 [oracle_22, icode_17]
        in let head_35 = erlps__ast_body__2 [query_23, icode_17]
        in let head_39 = erlps__ast_body__2 [sign_21, icode_17]
        in let head_43 = erlps__ast_body__2 [r_24, icode_17]
        in let head_52 = erlps__sign_t__0 []
        in let head_54 = erlps__ast_type__2 [rtype_16, icode_17]
        in let arg_58 = ErlangTuple [ErlangAtom "tuple", ErlangEmptyList]
        in
          erlps__prim_call__5
            [arg_26, arg_27,
             ErlangCons head_31
               (ErlangCons head_35
                  (ErlangCons head_39 (ErlangCons head_43 ErlangEmptyList))),
             ErlangCons (ErlangAtom "word")
               (ErlangCons (ErlangAtom "word")
                  (ErlangCons head_52 (ErlangCons head_54 ErlangEmptyList))),
             arg_58]
      _ -> EXC.badmatch matchExpr_25
erlps__builtin_code__6 [_,
                        (ErlangTuple [(ErlangAtom "qid"), ann_0,
                                      (ErlangCons (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangEmptyList))))))) (ErlangCons (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangCons (ErlangInt num_10) (ErlangCons (ErlangInt num_11) (ErlangCons (ErlangInt num_12) (ErlangCons (ErlangInt num_13) (ErlangCons (ErlangInt num_14) (ErlangCons (ErlangInt num_15) (ErlangCons (ErlangInt num_16) (ErlangCons (ErlangInt num_17) (ErlangCons (ErlangInt num_18) (ErlangEmptyList))))))))))))) (ErlangEmptyList)))]),
                        (ErlangCons oracle_19 (ErlangCons q_20 (ErlangEmptyList))),
                        (ErlangCons oracletype_21 (ErlangCons (ErlangTuple [(ErlangAtom "app_t"),
                                                                            _,
                                                                            (ErlangTuple [(ErlangAtom "id"),
                                                                                          _,
                                                                                          (ErlangCons (ErlangInt num_22) (ErlangCons (ErlangInt num_23) (ErlangCons (ErlangInt num_24) (ErlangCons (ErlangInt num_25) (ErlangCons (ErlangInt num_26) (ErlangCons (ErlangInt num_27) (ErlangCons (ErlangInt num_28) (ErlangCons (ErlangInt num_29) (ErlangCons (ErlangInt num_30) (ErlangCons (ErlangInt num_31) (ErlangCons (ErlangInt num_32) (ErlangCons (ErlangInt num_33) (ErlangEmptyList)))))))))))))]),
                                                                            (ErlangCons qtype_34 (ErlangCons _ (ErlangEmptyList)))]) (ErlangEmptyList))),
                        _, icode_35]
  | (ErlangInt num_1) == (toErl 79)
  , (ErlangInt num_2) == (toErl 114)
  , (ErlangInt num_3) == (toErl 97)
  , (ErlangInt num_4) == (toErl 99)
  , (ErlangInt num_5) == (toErl 108)
  , (ErlangInt num_6) == (toErl 101)
  , (ErlangInt num_7) == (toErl 103)
  , (ErlangInt num_8) == (toErl 101)
  , (ErlangInt num_9) == (toErl 116)
  , (ErlangInt num_10) == (toErl 95)
  , (ErlangInt num_11) == (toErl 113)
  , (ErlangInt num_12) == (toErl 117)
  , (ErlangInt num_13) == (toErl 101)
  , (ErlangInt num_14) == (toErl 115)
  , (ErlangInt num_15) == (toErl 116)
  , (ErlangInt num_16) == (toErl 105)
  , (ErlangInt num_17) == (toErl 111)
  , (ErlangInt num_18) == (toErl 110)
  , (ErlangInt num_22) == (toErl 111)
  , (ErlangInt num_23) == (toErl 114)
  , (ErlangInt num_24) == (toErl 97)
  , (ErlangInt num_25) == (toErl 99)
  , (ErlangInt num_26) == (toErl 108)
  , (ErlangInt num_27) == (toErl 101)
  , (ErlangInt num_28) == (toErl 95)
  , (ErlangInt num_29) == (toErl 113)
  , (ErlangInt num_30) == (toErl 117)
  , (ErlangInt num_31) == (toErl 101)
  , (ErlangInt num_32) == (toErl 114)
  , (ErlangInt num_33) == (toErl 121) =
  let    _ = erlps__check_oracle_type__2 [ann_0, oracletype_21]
  in let arg_38 = toErl 105
  in let tup_el_41 = toErl 0
  in let arg_39 = ErlangTuple [ErlangAtom "integer", tup_el_41]
  in let head_43 = erlps__ast_body__2 [oracle_19, icode_35]
  in let head_47 = erlps__ast_body__2 [q_20, icode_35]
  in let arg_56 = erlps__ast_type__2 [qtype_34, icode_35]
  in
    erlps__prim_call__5
      [arg_38, arg_39,
       ErlangCons head_43 (ErlangCons head_47 ErlangEmptyList),
       ErlangCons (ErlangAtom "word")
         (ErlangCons (ErlangAtom "word") ErlangEmptyList),
       arg_56]
erlps__builtin_code__6 [_,
                        (ErlangTuple [(ErlangAtom "qid"), ann_0,
                                      (ErlangCons (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangEmptyList))))))) (ErlangCons (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangCons (ErlangInt num_10) (ErlangCons (ErlangInt num_11) (ErlangCons (ErlangInt num_12) (ErlangCons (ErlangInt num_13) (ErlangCons (ErlangInt num_14) (ErlangCons (ErlangInt num_15) (ErlangCons (ErlangInt num_16) (ErlangEmptyList))))))))))) (ErlangEmptyList)))]),
                        (ErlangCons oracle_17 (ErlangCons q_18 (ErlangEmptyList))),
                        (ErlangCons oracletype_19 (ErlangCons (ErlangTuple [(ErlangAtom "app_t"),
                                                                            _,
                                                                            (ErlangTuple [(ErlangAtom "id"),
                                                                                          _,
                                                                                          (ErlangCons (ErlangInt num_20) (ErlangCons (ErlangInt num_21) (ErlangCons (ErlangInt num_22) (ErlangCons (ErlangInt num_23) (ErlangCons (ErlangInt num_24) (ErlangCons (ErlangInt num_25) (ErlangCons (ErlangInt num_26) (ErlangCons (ErlangInt num_27) (ErlangCons (ErlangInt num_28) (ErlangCons (ErlangInt num_29) (ErlangCons (ErlangInt num_30) (ErlangCons (ErlangInt num_31) (ErlangEmptyList)))))))))))))]),
                                                                            (ErlangCons _ (ErlangCons rtype_32 (ErlangEmptyList)))]) (ErlangEmptyList))),
                        _, icode_33]
  | (ErlangInt num_1) == (toErl 79)
  , (ErlangInt num_2) == (toErl 114)
  , (ErlangInt num_3) == (toErl 97)
  , (ErlangInt num_4) == (toErl 99)
  , (ErlangInt num_5) == (toErl 108)
  , (ErlangInt num_6) == (toErl 101)
  , (ErlangInt num_7) == (toErl 103)
  , (ErlangInt num_8) == (toErl 101)
  , (ErlangInt num_9) == (toErl 116)
  , (ErlangInt num_10) == (toErl 95)
  , (ErlangInt num_11) == (toErl 97)
  , (ErlangInt num_12) == (toErl 110)
  , (ErlangInt num_13) == (toErl 115)
  , (ErlangInt num_14) == (toErl 119)
  , (ErlangInt num_15) == (toErl 101)
  , (ErlangInt num_16) == (toErl 114)
  , (ErlangInt num_20) == (toErl 111)
  , (ErlangInt num_21) == (toErl 114)
  , (ErlangInt num_22) == (toErl 97)
  , (ErlangInt num_23) == (toErl 99)
  , (ErlangInt num_24) == (toErl 108)
  , (ErlangInt num_25) == (toErl 101)
  , (ErlangInt num_26) == (toErl 95)
  , (ErlangInt num_27) == (toErl 113)
  , (ErlangInt num_28) == (toErl 117)
  , (ErlangInt num_29) == (toErl 101)
  , (ErlangInt num_30) == (toErl 114)
  , (ErlangInt num_31) == (toErl 121) =
  let    _ = erlps__check_oracle_type__2 [ann_0, oracletype_19]
  in let arg_36 = toErl 104
  in let tup_el_39 = toErl 0
  in let arg_37 = ErlangTuple [ErlangAtom "integer", tup_el_39]
  in let head_41 = erlps__ast_body__2 [oracle_17, icode_33]
  in let head_45 = erlps__ast_body__2 [q_18, icode_33]
  in let arg_55 = erlps__ast_type__2 [rtype_32, icode_33]
  in let
    arg_54 =
      BIF.do_remote_fun_call "Aeso.Icode" "erlps__option_typerep__1"
        [arg_55]
  in
    erlps__prim_call__5
      [arg_36, arg_37,
       ErlangCons head_41 (ErlangCons head_45 ErlangEmptyList),
       ErlangCons (ErlangAtom "word")
         (ErlangCons (ErlangAtom "word") ErlangEmptyList),
       arg_54]
erlps__builtin_code__6 [_,
                        (ErlangTuple [(ErlangAtom "qid"), ann_0,
                                      (ErlangCons (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangEmptyList))))))) (ErlangCons (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangCons (ErlangInt num_10) (ErlangCons (ErlangInt num_11) (ErlangEmptyList)))))) (ErlangEmptyList)))]),
                        (ErlangCons oracle_12 (ErlangEmptyList)),
                        (ErlangCons oracletype_21@(ErlangTuple [(ErlangAtom "app_t"),
                                                                _,
                                                                (ErlangTuple [(ErlangAtom "id"),
                                                                              _,
                                                                              (ErlangCons (ErlangInt num_13) (ErlangCons (ErlangInt num_14) (ErlangCons (ErlangInt num_15) (ErlangCons (ErlangInt num_16) (ErlangCons (ErlangInt num_17) (ErlangCons (ErlangInt num_18) (ErlangEmptyList)))))))]),
                                                                (ErlangCons q_19 (ErlangCons r_20 (ErlangEmptyList)))]) (ErlangEmptyList)),
                        _, icode_22]
  | (ErlangInt num_1) == (toErl 79)
  , (ErlangInt num_2) == (toErl 114)
  , (ErlangInt num_3) == (toErl 97)
  , (ErlangInt num_4) == (toErl 99)
  , (ErlangInt num_5) == (toErl 108)
  , (ErlangInt num_6) == (toErl 101)
  , (ErlangInt num_7) == (toErl 99)
  , (ErlangInt num_8) == (toErl 104)
  , (ErlangInt num_9) == (toErl 101)
  , (ErlangInt num_10) == (toErl 99)
  , (ErlangInt num_11) == (toErl 107)
  , (ErlangInt num_13) == (toErl 111)
  , (ErlangInt num_14) == (toErl 114)
  , (ErlangInt num_15) == (toErl 97)
  , (ErlangInt num_16) == (toErl 99)
  , (ErlangInt num_17) == (toErl 108)
  , (ErlangInt num_18) == (toErl 101) =
  let    _ = erlps__check_oracle_type__2 [ann_0, oracletype_21]
  in let arg_25 = toErl 110
  in let tup_el_28 = toErl 0
  in let arg_26 = ErlangTuple [ErlangAtom "integer", tup_el_28]
  in let head_30 = erlps__ast_body__2 [oracle_12, icode_22]
  in let head_34 = erlps__ast_type_value__2 [q_19, icode_22]
  in let head_38 = erlps__ast_type_value__2 [r_20, icode_22]
  in
    erlps__prim_call__5
      [arg_25, arg_26,
       ErlangCons head_30
         (ErlangCons head_34 (ErlangCons head_38 ErlangEmptyList)),
       ErlangCons (ErlangAtom "word")
         (ErlangCons (ErlangAtom "typerep")
            (ErlangCons (ErlangAtom "typerep") ErlangEmptyList)),
       ErlangAtom "word"]
erlps__builtin_code__6 [_,
                        (ErlangTuple [(ErlangAtom "qid"), ann_0,
                                      (ErlangCons (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangEmptyList))))))) (ErlangCons (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangCons (ErlangInt num_10) (ErlangCons (ErlangInt num_11) (ErlangCons (ErlangInt num_12) (ErlangCons (ErlangInt num_13) (ErlangCons (ErlangInt num_14) (ErlangCons (ErlangInt num_15) (ErlangCons (ErlangInt num_16) (ErlangCons (ErlangInt num_17) (ErlangEmptyList)))))))))))) (ErlangEmptyList)))]),
                        (ErlangCons oracle_18 (ErlangCons query_19 (ErlangEmptyList))),
                        (ErlangCons oracletype_20 (ErlangCons (ErlangTuple [(ErlangAtom "app_t"),
                                                                            _,
                                                                            (ErlangTuple [(ErlangAtom "id"),
                                                                                          _,
                                                                                          (ErlangCons (ErlangInt num_21) (ErlangCons (ErlangInt num_22) (ErlangCons (ErlangInt num_23) (ErlangCons (ErlangInt num_24) (ErlangCons (ErlangInt num_25) (ErlangCons (ErlangInt num_26) (ErlangCons (ErlangInt num_27) (ErlangCons (ErlangInt num_28) (ErlangCons (ErlangInt num_29) (ErlangCons (ErlangInt num_30) (ErlangCons (ErlangInt num_31) (ErlangCons (ErlangInt num_32) (ErlangEmptyList)))))))))))))]),
                                                                            (ErlangCons q_33 (ErlangCons r_34 (ErlangEmptyList)))]) (ErlangEmptyList))),
                        _, icode_35]
  | (ErlangInt num_1) == (toErl 79)
  , (ErlangInt num_2) == (toErl 114)
  , (ErlangInt num_3) == (toErl 97)
  , (ErlangInt num_4) == (toErl 99)
  , (ErlangInt num_5) == (toErl 108)
  , (ErlangInt num_6) == (toErl 101)
  , (ErlangInt num_7) == (toErl 99)
  , (ErlangInt num_8) == (toErl 104)
  , (ErlangInt num_9) == (toErl 101)
  , (ErlangInt num_10) == (toErl 99)
  , (ErlangInt num_11) == (toErl 107)
  , (ErlangInt num_12) == (toErl 95)
  , (ErlangInt num_13) == (toErl 113)
  , (ErlangInt num_14) == (toErl 117)
  , (ErlangInt num_15) == (toErl 101)
  , (ErlangInt num_16) == (toErl 114)
  , (ErlangInt num_17) == (toErl 121)
  , (ErlangInt num_21) == (toErl 111)
  , (ErlangInt num_22) == (toErl 114)
  , (ErlangInt num_23) == (toErl 97)
  , (ErlangInt num_24) == (toErl 99)
  , (ErlangInt num_25) == (toErl 108)
  , (ErlangInt num_26) == (toErl 101)
  , (ErlangInt num_27) == (toErl 95)
  , (ErlangInt num_28) == (toErl 113)
  , (ErlangInt num_29) == (toErl 117)
  , (ErlangInt num_30) == (toErl 101)
  , (ErlangInt num_31) == (toErl 114)
  , (ErlangInt num_32) == (toErl 121) =
  let    _ = erlps__check_oracle_type__2 [ann_0, oracletype_20]
  in let arg_38 = toErl 111
  in let tup_el_41 = toErl 0
  in let arg_39 = ErlangTuple [ErlangAtom "integer", tup_el_41]
  in let head_43 = erlps__ast_body__2 [oracle_18, icode_35]
  in let head_47 = erlps__ast_body__2 [query_19, icode_35]
  in let head_51 = erlps__ast_type_value__2 [q_33, icode_35]
  in let head_55 = erlps__ast_type_value__2 [r_34, icode_35]
  in
    erlps__prim_call__5
      [arg_38, arg_39,
       ErlangCons head_43
         (ErlangCons head_47
            (ErlangCons head_51 (ErlangCons head_55 ErlangEmptyList))),
       ErlangCons (ErlangAtom "word")
         (ErlangCons (ErlangAtom "typerep")
            (ErlangCons (ErlangAtom "typerep") ErlangEmptyList)),
       ErlangAtom "word"]
erlps__builtin_code__6 [_,
                        (ErlangTuple [(ErlangAtom "qid"), ann_0,
                                      (ErlangCons (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangEmptyList))))) (ErlangCons (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangCons (ErlangInt num_10) (ErlangCons (ErlangInt num_11) (ErlangEmptyList)))))))) (ErlangEmptyList)))]),
                        (ErlangCons name_12 (ErlangCons key_13 (ErlangEmptyList))),
                        _,
                        (ErlangTuple [(ErlangAtom "app_t"), _,
                                      (ErlangTuple [(ErlangAtom "id"), _,
                                                    (ErlangCons (ErlangInt num_14) (ErlangCons (ErlangInt num_15) (ErlangCons (ErlangInt num_16) (ErlangCons (ErlangInt num_17) (ErlangCons (ErlangInt num_18) (ErlangCons (ErlangInt num_19) (ErlangEmptyList)))))))]),
                                      (ErlangCons type_20 (ErlangEmptyList))]),
                        icode_21]
  | (ErlangInt num_1) == (toErl 65)
  , (ErlangInt num_2) == (toErl 69)
  , (ErlangInt num_3) == (toErl 78)
  , (ErlangInt num_4) == (toErl 83)
  , (ErlangInt num_5) == (toErl 114)
  , (ErlangInt num_6) == (toErl 101)
  , (ErlangInt num_7) == (toErl 115)
  , (ErlangInt num_8) == (toErl 111)
  , (ErlangInt num_9) == (toErl 108)
  , (ErlangInt num_10) == (toErl 118)
  , (ErlangInt num_11) == (toErl 101)
  , (ErlangInt num_14) == (toErl 111)
  , (ErlangInt num_15) == (toErl 112)
  , (ErlangInt num_16) == (toErl 116)
  , (ErlangInt num_17) == (toErl 105)
  , (ErlangInt num_18) == (toErl 111)
  , (ErlangInt num_19) == (toErl 110) =
  let case_22 = erlps__is_monomorphic__1 [type_20]
  in
    case case_22 of
      (ErlangAtom "true") ->
        let    case_24 = erlps__ast_type__2 [type_20, icode_21]
        in let
          _ =
            case case_24 of
              t_27 | (weakEq t_27 (ErlangAtom "word")) ||
                       (weakEq t_27 (ErlangAtom "string")) ->
                ErlangAtom "ok"
              _ ->
                let
                  arg_28 =
                    ErlangTuple
                      [ErlangAtom "invalid_aens_resolve_type", ann_0, type_20]
                in erlps__gen_error__1 [arg_28]
        in let arg_32 = toErl 200
        in let tup_el_35 = toErl 0
        in let arg_33 = ErlangTuple [ErlangAtom "integer", tup_el_35]
        in let head_37 = erlps__ast_body__2 [name_12, icode_21]
        in let head_41 = erlps__ast_body__2 [key_13, icode_21]
        in let head_45 = erlps__ast_type_value__2 [type_20, icode_21]
        in let arg_57 = erlps__ast_type__2 [type_20, icode_21]
        in let
          arg_56 =
            BIF.do_remote_fun_call "Aeso.Icode" "erlps__option_typerep__1"
              [arg_57]
        in
          erlps__prim_call__5
            [arg_32, arg_33,
             ErlangCons head_37
               (ErlangCons head_41 (ErlangCons head_45 ErlangEmptyList)),
             ErlangCons (ErlangAtom "string")
               (ErlangCons (ErlangAtom "string")
                  (ErlangCons (ErlangAtom "typerep") ErlangEmptyList)),
             arg_56]
      (ErlangAtom "false") ->
        let
          arg_60 =
            ErlangTuple
              [ErlangAtom "invalid_aens_resolve_type", ann_0, type_20]
        in erlps__gen_error__1 [arg_60]
      something_else -> EXC.case_clause something_else
erlps__builtin_code__6 [_,
                        (ErlangTuple [(ErlangAtom "qid"), _,
                                      (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangEmptyList))))) (ErlangCons (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangCons (ErlangInt num_10) (ErlangCons (ErlangInt num_11) (ErlangEmptyList))))))))) (ErlangEmptyList)))]),
                        args_12, _, _, icode_13]
  | (ErlangInt num_0) == (toErl 65)
  , (ErlangInt num_1) == (toErl 69)
  , (ErlangInt num_2) == (toErl 78)
  , (ErlangInt num_3) == (toErl 83)
  , (ErlangInt num_4) == (toErl 112)
  , (ErlangInt num_5) == (toErl 114)
  , (ErlangInt num_6) == (toErl 101)
  , (ErlangInt num_7) == (toErl 99)
  , (ErlangInt num_8) == (toErl 108)
  , (ErlangInt num_9) == (toErl 97)
  , (ErlangInt num_10) == (toErl 105)
  , (ErlangInt num_11) == (toErl 109) =
  let matchExpr_18 = erlps__get_signature_arg__1 [args_12]
  in
    case matchExpr_18 of
      (ErlangTuple [sign_15,
                    (ErlangCons addr_16 (ErlangCons chash_17 (ErlangEmptyList)))]) ->
        let    arg_19 = toErl 201
        in let tup_el_22 = toErl 0
        in let arg_20 = ErlangTuple [ErlangAtom "integer", tup_el_22]
        in let head_24 = erlps__ast_body__2 [addr_16, icode_13]
        in let head_28 = erlps__ast_body__2 [chash_17, icode_13]
        in let head_32 = erlps__ast_body__2 [sign_15, icode_13]
        in let head_41 = erlps__sign_t__0 []
        in let arg_43 = ErlangTuple [ErlangAtom "tuple", ErlangEmptyList]
        in
          erlps__prim_call__5
            [arg_19, arg_20,
             ErlangCons head_24
               (ErlangCons head_28 (ErlangCons head_32 ErlangEmptyList)),
             ErlangCons (ErlangAtom "word")
               (ErlangCons (ErlangAtom "word")
                  (ErlangCons head_41 ErlangEmptyList)),
             arg_43]
      _ -> EXC.badmatch matchExpr_18
erlps__builtin_code__6 [_,
                        (ErlangTuple [(ErlangAtom "qid"), _,
                                      (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangEmptyList))))) (ErlangCons (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangEmptyList)))))) (ErlangEmptyList)))]),
                        args_9, _, _, icode_10]
  | (ErlangInt num_0) == (toErl 65)
  , (ErlangInt num_1) == (toErl 69)
  , (ErlangInt num_2) == (toErl 78)
  , (ErlangInt num_3) == (toErl 83)
  , (ErlangInt num_4) == (toErl 99)
  , (ErlangInt num_5) == (toErl 108)
  , (ErlangInt num_6) == (toErl 97)
  , (ErlangInt num_7) == (toErl 105)
  , (ErlangInt num_8) == (toErl 109) =
  let matchExpr_17 = erlps__get_signature_arg__1 [args_9]
  in
    case matchExpr_17 of
      (ErlangTuple [sign_12,
                    (ErlangCons addr_13 (ErlangCons name_14 (ErlangCons salt_15 (ErlangCons namefee_16 (ErlangEmptyList)))))]) ->
        let    arg_18 = toErl 202
        in let tup_el_21 = toErl 0
        in let arg_19 = ErlangTuple [ErlangAtom "integer", tup_el_21]
        in let head_23 = erlps__ast_body__2 [addr_13, icode_10]
        in let head_27 = erlps__ast_body__2 [name_14, icode_10]
        in let head_31 = erlps__ast_body__2 [salt_15, icode_10]
        in let head_35 = erlps__ast_body__2 [namefee_16, icode_10]
        in let head_39 = erlps__ast_body__2 [sign_12, icode_10]
        in let head_52 = erlps__sign_t__0 []
        in let arg_54 = ErlangTuple [ErlangAtom "tuple", ErlangEmptyList]
        in
          erlps__prim_call__5
            [arg_18, arg_19,
             ErlangCons head_23
               (ErlangCons head_27
                  (ErlangCons head_31
                     (ErlangCons head_35
                        (ErlangCons head_39 ErlangEmptyList)))),
             ErlangCons (ErlangAtom "word")
               (ErlangCons (ErlangAtom "string")
                  (ErlangCons (ErlangAtom "word")
                     (ErlangCons (ErlangAtom "word")
                        (ErlangCons head_52 ErlangEmptyList)))),
             arg_54]
      _ -> EXC.badmatch matchExpr_17
erlps__builtin_code__6 [_,
                        (ErlangTuple [(ErlangAtom "qid"), _,
                                      (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangEmptyList))))) (ErlangCons (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangCons (ErlangInt num_10) (ErlangCons (ErlangInt num_11) (ErlangEmptyList))))))))) (ErlangEmptyList)))]),
                        args_12, _, _, icode_13]
  | (ErlangInt num_0) == (toErl 65)
  , (ErlangInt num_1) == (toErl 69)
  , (ErlangInt num_2) == (toErl 78)
  , (ErlangInt num_3) == (toErl 83)
  , (ErlangInt num_4) == (toErl 116)
  , (ErlangInt num_5) == (toErl 114)
  , (ErlangInt num_6) == (toErl 97)
  , (ErlangInt num_7) == (toErl 110)
  , (ErlangInt num_8) == (toErl 115)
  , (ErlangInt num_9) == (toErl 102)
  , (ErlangInt num_10) == (toErl 101)
  , (ErlangInt num_11) == (toErl 114) =
  let matchExpr_19 = erlps__get_signature_arg__1 [args_12]
  in
    case matchExpr_19 of
      (ErlangTuple [sign_15,
                    (ErlangCons fromaddr_16 (ErlangCons toaddr_17 (ErlangCons name_18 (ErlangEmptyList))))]) ->
        let    arg_20 = toErl 204
        in let tup_el_23 = toErl 0
        in let arg_21 = ErlangTuple [ErlangAtom "integer", tup_el_23]
        in let head_25 = erlps__ast_body__2 [fromaddr_16, icode_13]
        in let head_29 = erlps__ast_body__2 [toaddr_17, icode_13]
        in let head_33 = erlps__ast_body__2 [name_18, icode_13]
        in let head_37 = erlps__ast_body__2 [sign_15, icode_13]
        in let head_48 = erlps__sign_t__0 []
        in let arg_50 = ErlangTuple [ErlangAtom "tuple", ErlangEmptyList]
        in
          erlps__prim_call__5
            [arg_20, arg_21,
             ErlangCons head_25
               (ErlangCons head_29
                  (ErlangCons head_33 (ErlangCons head_37 ErlangEmptyList))),
             ErlangCons (ErlangAtom "word")
               (ErlangCons (ErlangAtom "word")
                  (ErlangCons (ErlangAtom "word")
                     (ErlangCons head_48 ErlangEmptyList))),
             arg_50]
      _ -> EXC.badmatch matchExpr_19
erlps__builtin_code__6 [_,
                        (ErlangTuple [(ErlangAtom "qid"), _,
                                      (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangEmptyList))))) (ErlangCons (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangEmptyList))))))) (ErlangEmptyList)))]),
                        args_10, _, _, icode_11]
  | (ErlangInt num_0) == (toErl 65)
  , (ErlangInt num_1) == (toErl 69)
  , (ErlangInt num_2) == (toErl 78)
  , (ErlangInt num_3) == (toErl 83)
  , (ErlangInt num_4) == (toErl 114)
  , (ErlangInt num_5) == (toErl 101)
  , (ErlangInt num_6) == (toErl 118)
  , (ErlangInt num_7) == (toErl 111)
  , (ErlangInt num_8) == (toErl 107)
  , (ErlangInt num_9) == (toErl 101) =
  let matchExpr_16 = erlps__get_signature_arg__1 [args_10]
  in
    case matchExpr_16 of
      (ErlangTuple [sign_13,
                    (ErlangCons addr_14 (ErlangCons name_15 (ErlangEmptyList)))]) ->
        let    arg_17 = toErl 205
        in let tup_el_20 = toErl 0
        in let arg_18 = ErlangTuple [ErlangAtom "integer", tup_el_20]
        in let head_22 = erlps__ast_body__2 [addr_14, icode_11]
        in let head_26 = erlps__ast_body__2 [name_15, icode_11]
        in let head_30 = erlps__ast_body__2 [sign_13, icode_11]
        in let head_39 = erlps__sign_t__0 []
        in let arg_41 = ErlangTuple [ErlangAtom "tuple", ErlangEmptyList]
        in
          erlps__prim_call__5
            [arg_17, arg_18,
             ErlangCons head_22
               (ErlangCons head_26 (ErlangCons head_30 ErlangEmptyList)),
             ErlangCons (ErlangAtom "word")
               (ErlangCons (ErlangAtom "word")
                  (ErlangCons head_39 ErlangEmptyList)),
             arg_41]
      _ -> EXC.badmatch matchExpr_16
erlps__builtin_code__6 [_,
                        (ErlangTuple [(ErlangAtom "qid"), _,
                                      (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangEmptyList))))) (ErlangCons (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangEmptyList))))))) (ErlangEmptyList)))]),
                        args_10, _, _, icode_11]
  | (ErlangInt num_0) == (toErl 65)
  , (ErlangInt num_1) == (toErl 69)
  , (ErlangInt num_2) == (toErl 78)
  , (ErlangInt num_3) == (toErl 83)
  , (ErlangInt num_4) == (toErl 117)
  , (ErlangInt num_5) == (toErl 112)
  , (ErlangInt num_6) == (toErl 100)
  , (ErlangInt num_7) == (toErl 97)
  , (ErlangInt num_8) == (toErl 116)
  , (ErlangInt num_9) == (toErl 101) =
  let matchExpr_19 = erlps__get_signature_arg__1 [args_10]
  in
    case matchExpr_19 of
      (ErlangTuple [sign_13,
                    (ErlangCons addr_14 (ErlangCons name_15 (ErlangCons ttl_16 (ErlangCons clientttl_17 (ErlangCons pointers_18 (ErlangEmptyList))))))]) ->
        let    arg_20 = toErl 203
        in let tup_el_23 = toErl 0
        in let arg_21 = ErlangTuple [ErlangAtom "integer", tup_el_23]
        in let head_25 = erlps__ast_body__2 [addr_14, icode_11]
        in let head_29 = erlps__ast_body__2 [name_15, icode_11]
        in let head_33 = erlps__ast_body__2 [ttl_16, icode_11]
        in let head_37 = erlps__ast_body__2 [clientttl_17, icode_11]
        in let head_41 = erlps__ast_body__2 [pointers_18, icode_11]
        in let head_45 = erlps__ast_body__2 [sign_13, icode_11]
        in let head_60 = erlps__sign_t__0 []
        in let arg_62 = ErlangTuple [ErlangAtom "tuple", ErlangEmptyList]
        in
          erlps__prim_call__5
            [arg_20, arg_21,
             ErlangCons head_25
               (ErlangCons head_29
                  (ErlangCons head_33
                     (ErlangCons head_37
                        (ErlangCons head_41
                           (ErlangCons head_45 ErlangEmptyList))))),
             ErlangCons (ErlangAtom "word")
               (ErlangCons (ErlangAtom "string")
                  (ErlangCons (ErlangAtom "word")
                     (ErlangCons (ErlangAtom "word")
                        (ErlangCons (ErlangAtom "word")
                           (ErlangCons head_60 ErlangEmptyList))))),
             arg_62]
      _ -> EXC.badmatch matchExpr_19
erlps__builtin_code__6 [_,
                        (ErlangTuple [(ErlangAtom "qid"), _,
                                      (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangEmptyList)))) (ErlangCons (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangEmptyList))))))) (ErlangEmptyList)))]),
                        (ErlangCons key_9 (ErlangCons map_10 (ErlangEmptyList))),
                        _, _, icode_11]
  | (ErlangInt num_0) == (toErl 77)
  , (ErlangInt num_1) == (toErl 97)
  , (ErlangInt num_2) == (toErl 112)
  , (ErlangInt num_3) == (toErl 108)
  , (ErlangInt num_4) == (toErl 111)
  , (ErlangInt num_5) == (toErl 111)
  , (ErlangInt num_6) == (toErl 107)
  , (ErlangInt num_7) == (toErl 117)
  , (ErlangInt num_8) == (toErl 112) =
  erlps__map_get__3 [key_9, map_10, icode_11]
erlps__builtin_code__6 [_,
                        (ErlangTuple [(ErlangAtom "qid"), _,
                                      (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangEmptyList)))) (ErlangCons (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangCons (ErlangInt num_10) (ErlangCons (ErlangInt num_11) (ErlangCons (ErlangInt num_12) (ErlangCons (ErlangInt num_13) (ErlangCons (ErlangInt num_14) (ErlangCons (ErlangInt num_15) (ErlangCons (ErlangInt num_16) (ErlangEmptyList))))))))))))))) (ErlangEmptyList)))]),
                        (ErlangCons key_17 (ErlangCons map_18 (ErlangCons val_19 (ErlangEmptyList)))),
                        _, _, icode_20]
  | (ErlangInt num_0) == (toErl 77)
  , (ErlangInt num_1) == (toErl 97)
  , (ErlangInt num_2) == (toErl 112)
  , (ErlangInt num_3) == (toErl 108)
  , (ErlangInt num_4) == (toErl 111)
  , (ErlangInt num_5) == (toErl 111)
  , (ErlangInt num_6) == (toErl 107)
  , (ErlangInt num_7) == (toErl 117)
  , (ErlangInt num_8) == (toErl 112)
  , (ErlangInt num_9) == (toErl 95)
  , (ErlangInt num_10) == (toErl 100)
  , (ErlangInt num_11) == (toErl 101)
  , (ErlangInt num_12) == (toErl 102)
  , (ErlangInt num_13) == (toErl 97)
  , (ErlangInt num_14) == (toErl 117)
  , (ErlangInt num_15) == (toErl 108)
  , (ErlangInt num_16) == (toErl 116) =
  let
    matchExpr_24 = erlps__check_monomorphic_map__2 [map_18, icode_20]
  in
    case matchExpr_24 of
      (ErlangTuple [_, valtype_23]) ->
        let    tup_el_26 = erlps__ast_typerep__2 [valtype_23, icode_20]
        in let
          fun_29 = ErlangTuple [ErlangAtom "map_lookup_default", tup_el_26]
        in let head_32 = erlps__ast_body__2 [map_18, icode_20]
        in let head_36 = erlps__ast_body__2 [key_17, icode_20]
        in let head_40 = erlps__ast_body__2 [val_19, icode_20]
        in
          erlps__builtin_call__2
            [fun_29,
             ErlangCons head_32
               (ErlangCons head_36 (ErlangCons head_40 ErlangEmptyList))]
      _ -> EXC.badmatch matchExpr_24
erlps__builtin_code__6 [_,
                        (ErlangTuple [(ErlangAtom "qid"), _,
                                      (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangEmptyList)))) (ErlangCons (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangEmptyList))))))) (ErlangEmptyList)))]),
                        (ErlangCons key_9 (ErlangCons map_10 (ErlangEmptyList))),
                        _, _, icode_11]
  | (ErlangInt num_0) == (toErl 77)
  , (ErlangInt num_1) == (toErl 97)
  , (ErlangInt num_2) == (toErl 112)
  , (ErlangInt num_3) == (toErl 109)
  , (ErlangInt num_4) == (toErl 101)
  , (ErlangInt num_5) == (toErl 109)
  , (ErlangInt num_6) == (toErl 98)
  , (ErlangInt num_7) == (toErl 101)
  , (ErlangInt num_8) == (toErl 114) =
  let    head_14 = erlps__ast_body__2 [map_10, icode_11]
  in let head_18 = erlps__ast_body__2 [key_9, icode_11]
  in
    erlps__builtin_call__2
      [ErlangAtom "map_member",
       ErlangCons head_14 (ErlangCons head_18 ErlangEmptyList)]
erlps__builtin_code__6 [_,
                        (ErlangTuple [(ErlangAtom "qid"), _,
                                      (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangEmptyList)))) (ErlangCons (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangEmptyList))))) (ErlangEmptyList)))]),
                        (ErlangCons map_7 (ErlangEmptyList)), _, _, icode_8]
  | (ErlangInt num_0) == (toErl 77)
  , (ErlangInt num_1) == (toErl 97)
  , (ErlangInt num_2) == (toErl 112)
  , (ErlangInt num_3) == (toErl 115)
  , (ErlangInt num_4) == (toErl 105)
  , (ErlangInt num_5) == (toErl 122)
  , (ErlangInt num_6) == (toErl 101) =
  let head_11 = erlps__ast_body__2 [map_7, icode_8]
  in
    erlps__builtin_call__2
      [ErlangAtom "map_size", ErlangCons head_11 ErlangEmptyList]
erlps__builtin_code__6 [_,
                        (ErlangTuple [(ErlangAtom "qid"), _,
                                      (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangEmptyList)))) (ErlangCons (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangEmptyList))))))) (ErlangEmptyList)))]),
                        (ErlangCons key_9 (ErlangCons map_10 (ErlangEmptyList))),
                        _, _, icode_11]
  | (ErlangInt num_0) == (toErl 77)
  , (ErlangInt num_1) == (toErl 97)
  , (ErlangInt num_2) == (toErl 112)
  , (ErlangInt num_3) == (toErl 100)
  , (ErlangInt num_4) == (toErl 101)
  , (ErlangInt num_5) == (toErl 108)
  , (ErlangInt num_6) == (toErl 101)
  , (ErlangInt num_7) == (toErl 116)
  , (ErlangInt num_8) == (toErl 101) =
  erlps__map_del__3 [key_9, map_10, icode_11]
erlps__builtin_code__6 [_,
                        (ErlangTuple [(ErlangAtom "qid"), ann_0,
                                      (ErlangCons (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangEmptyList)))) (ErlangCons (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangCons (ErlangInt num_10) (ErlangCons (ErlangInt num_11) (ErlangCons (ErlangInt num_12) (ErlangEmptyList)))))))))) (ErlangEmptyList)))]),
                        (ErlangCons list_13 (ErlangEmptyList)), _, maptype_14,
                        icode_15]
  | (ErlangInt num_1) == (toErl 77)
  , (ErlangInt num_2) == (toErl 97)
  , (ErlangInt num_3) == (toErl 112)
  , (ErlangInt num_4) == (toErl 102)
  , (ErlangInt num_5) == (toErl 114)
  , (ErlangInt num_6) == (toErl 111)
  , (ErlangInt num_7) == (toErl 109)
  , (ErlangInt num_8) == (toErl 95)
  , (ErlangInt num_9) == (toErl 108)
  , (ErlangInt num_10) == (toErl 105)
  , (ErlangInt num_11) == (toErl 115)
  , (ErlangInt num_12) == (toErl 116) =
  let
    matchExpr_21 =
      erlps__check_monomorphic_map__3 [ann_0, maptype_14, icode_15]
  in
    case matchExpr_21 of
      (ErlangTuple [keytype_19, valtype_20]) ->
        let    head_24 = erlps__ast_body__2 [list_13, icode_15]
        in let
          head_28 = erlps__map_empty__3 [keytype_19, valtype_20, icode_15]
        in
          erlps__builtin_call__2
            [ErlangAtom "map_from_list",
             ErlangCons head_24 (ErlangCons head_28 ErlangEmptyList)]
      _ -> EXC.badmatch matchExpr_21
erlps__builtin_code__6 [_,
                        (ErlangTuple [(ErlangAtom "qid"), _,
                                      (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangEmptyList)))) (ErlangCons (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangEmptyList)))))))) (ErlangEmptyList)))]),
                        (ErlangCons map_10 (ErlangEmptyList)), _, _, icode_11]
  | (ErlangInt num_0) == (toErl 77)
  , (ErlangInt num_1) == (toErl 97)
  , (ErlangInt num_2) == (toErl 112)
  , (ErlangInt num_3) == (toErl 116)
  , (ErlangInt num_4) == (toErl 111)
  , (ErlangInt num_5) == (toErl 95)
  , (ErlangInt num_6) == (toErl 108)
  , (ErlangInt num_7) == (toErl 105)
  , (ErlangInt num_8) == (toErl 115)
  , (ErlangInt num_9) == (toErl 116) =
  erlps__map_tolist__2 [map_10, icode_11]
erlps__builtin_code__6 [_,
                        (ErlangTuple [(ErlangAtom "qid"), _,
                                      (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangEmptyList))))))) (ErlangCons (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangCons (ErlangInt num_10) (ErlangCons (ErlangInt num_11) (ErlangCons (ErlangInt num_12) (ErlangCons (ErlangInt num_13) (ErlangCons (ErlangInt num_14) (ErlangCons (ErlangInt num_15) (ErlangEmptyList))))))))))) (ErlangEmptyList)))]),
                        (ErlangCons msg_16 (ErlangCons pk_17 (ErlangCons sig_18 (ErlangEmptyList)))),
                        _, _, icode_19]
  | (ErlangInt num_0) == (toErl 67)
  , (ErlangInt num_1) == (toErl 114)
  , (ErlangInt num_2) == (toErl 121)
  , (ErlangInt num_3) == (toErl 112)
  , (ErlangInt num_4) == (toErl 116)
  , (ErlangInt num_5) == (toErl 111)
  , (ErlangInt num_6) == (toErl 118)
  , (ErlangInt num_7) == (toErl 101)
  , (ErlangInt num_8) == (toErl 114)
  , (ErlangInt num_9) == (toErl 105)
  , (ErlangInt num_10) == (toErl 102)
  , (ErlangInt num_11) == (toErl 121)
  , (ErlangInt num_12) == (toErl 95)
  , (ErlangInt num_13) == (toErl 115)
  , (ErlangInt num_14) == (toErl 105)
  , (ErlangInt num_15) == (toErl 103) =
  let    arg_20 = toErl 400
  in let tup_el_23 = toErl 0
  in let arg_21 = ErlangTuple [ErlangAtom "integer", tup_el_23]
  in let head_25 = erlps__ast_body__2 [msg_16, icode_19]
  in let head_29 = erlps__ast_body__2 [pk_17, icode_19]
  in let head_33 = erlps__ast_body__2 [sig_18, icode_19]
  in let head_42 = erlps__sign_t__0 []
  in
    erlps__prim_call__5
      [arg_20, arg_21,
       ErlangCons head_25
         (ErlangCons head_29 (ErlangCons head_33 ErlangEmptyList)),
       ErlangCons (ErlangAtom "word")
         (ErlangCons (ErlangAtom "word")
            (ErlangCons head_42 ErlangEmptyList)),
       ErlangAtom "word"]
erlps__builtin_code__6 [_,
                        (ErlangTuple [(ErlangAtom "qid"), _,
                                      (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangEmptyList))))))) (ErlangCons (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangCons (ErlangInt num_10) (ErlangCons (ErlangInt num_11) (ErlangCons (ErlangInt num_12) (ErlangCons (ErlangInt num_13) (ErlangCons (ErlangInt num_14) (ErlangCons (ErlangInt num_15) (ErlangCons (ErlangInt num_16) (ErlangCons (ErlangInt num_17) (ErlangCons (ErlangInt num_18) (ErlangCons (ErlangInt num_19) (ErlangCons (ErlangInt num_20) (ErlangCons (ErlangInt num_21) (ErlangCons (ErlangInt num_22) (ErlangCons (ErlangInt num_23) (ErlangCons (ErlangInt num_24) (ErlangCons (ErlangInt num_25) (ErlangEmptyList))))))))))))))))))))) (ErlangEmptyList)))]),
                        (ErlangCons msg_26 (ErlangCons pk_27 (ErlangCons sig_28 (ErlangEmptyList)))),
                        _, _, icode_29]
  | (ErlangInt num_0) == (toErl 67)
  , (ErlangInt num_1) == (toErl 114)
  , (ErlangInt num_2) == (toErl 121)
  , (ErlangInt num_3) == (toErl 112)
  , (ErlangInt num_4) == (toErl 116)
  , (ErlangInt num_5) == (toErl 111)
  , (ErlangInt num_6) == (toErl 118)
  , (ErlangInt num_7) == (toErl 101)
  , (ErlangInt num_8) == (toErl 114)
  , (ErlangInt num_9) == (toErl 105)
  , (ErlangInt num_10) == (toErl 102)
  , (ErlangInt num_11) == (toErl 121)
  , (ErlangInt num_12) == (toErl 95)
  , (ErlangInt num_13) == (toErl 115)
  , (ErlangInt num_14) == (toErl 105)
  , (ErlangInt num_15) == (toErl 103)
  , (ErlangInt num_16) == (toErl 95)
  , (ErlangInt num_17) == (toErl 115)
  , (ErlangInt num_18) == (toErl 101)
  , (ErlangInt num_19) == (toErl 99)
  , (ErlangInt num_20) == (toErl 112)
  , (ErlangInt num_21) == (toErl 50)
  , (ErlangInt num_22) == (toErl 53)
  , (ErlangInt num_23) == (toErl 54)
  , (ErlangInt num_24) == (toErl 107)
  , (ErlangInt num_25) == (toErl 49) =
  let    arg_30 = toErl 410
  in let tup_el_33 = toErl 0
  in let arg_31 = ErlangTuple [ErlangAtom "integer", tup_el_33]
  in let head_35 = erlps__ast_body__2 [msg_26, icode_29]
  in let head_39 = erlps__ast_body__2 [pk_27, icode_29]
  in let head_43 = erlps__ast_body__2 [sig_28, icode_29]
  in let arg_49 = toErl 32
  in let head_48 = erlps__bytes_t__1 [arg_49]
  in let arg_52 = toErl 64
  in let head_51 = erlps__bytes_t__1 [arg_52]
  in let arg_55 = toErl 64
  in let head_54 = erlps__bytes_t__1 [arg_55]
  in
    erlps__prim_call__5
      [arg_30, arg_31,
       ErlangCons head_35
         (ErlangCons head_39 (ErlangCons head_43 ErlangEmptyList)),
       ErlangCons head_48
         (ErlangCons head_51 (ErlangCons head_54 ErlangEmptyList)),
       ErlangAtom "word"]
erlps__builtin_code__6 [_,
                        (ErlangTuple [(ErlangAtom "qid"), _,
                                      (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangEmptyList))))))) (ErlangCons (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangCons (ErlangInt num_10) (ErlangCons (ErlangInt num_11) (ErlangCons (ErlangInt num_12) (ErlangCons (ErlangInt num_13) (ErlangCons (ErlangInt num_14) (ErlangCons (ErlangInt num_15) (ErlangCons (ErlangInt num_16) (ErlangCons (ErlangInt num_17) (ErlangCons (ErlangInt num_18) (ErlangCons (ErlangInt num_19) (ErlangCons (ErlangInt num_20) (ErlangCons (ErlangInt num_21) (ErlangCons (ErlangInt num_22) (ErlangCons (ErlangInt num_23) (ErlangEmptyList))))))))))))))))))) (ErlangEmptyList)))]),
                        (ErlangCons msg_24 (ErlangCons addr_25 (ErlangCons sig_26 (ErlangEmptyList)))),
                        _, _, icode_27]
  | (ErlangInt num_0) == (toErl 67)
  , (ErlangInt num_1) == (toErl 114)
  , (ErlangInt num_2) == (toErl 121)
  , (ErlangInt num_3) == (toErl 112)
  , (ErlangInt num_4) == (toErl 116)
  , (ErlangInt num_5) == (toErl 111)
  , (ErlangInt num_6) == (toErl 101)
  , (ErlangInt num_7) == (toErl 99)
  , (ErlangInt num_8) == (toErl 118)
  , (ErlangInt num_9) == (toErl 101)
  , (ErlangInt num_10) == (toErl 114)
  , (ErlangInt num_11) == (toErl 105)
  , (ErlangInt num_12) == (toErl 102)
  , (ErlangInt num_13) == (toErl 121)
  , (ErlangInt num_14) == (toErl 95)
  , (ErlangInt num_15) == (toErl 115)
  , (ErlangInt num_16) == (toErl 101)
  , (ErlangInt num_17) == (toErl 99)
  , (ErlangInt num_18) == (toErl 112)
  , (ErlangInt num_19) == (toErl 50)
  , (ErlangInt num_20) == (toErl 53)
  , (ErlangInt num_21) == (toErl 54)
  , (ErlangInt num_22) == (toErl 107)
  , (ErlangInt num_23) == (toErl 49) =
  let    arg_28 = toErl 420
  in let tup_el_31 = toErl 0
  in let arg_29 = ErlangTuple [ErlangAtom "integer", tup_el_31]
  in let head_33 = erlps__ast_body__2 [msg_24, icode_27]
  in let head_37 = erlps__ast_body__2 [addr_25, icode_27]
  in let head_41 = erlps__ast_body__2 [sig_26, icode_27]
  in let arg_49 = toErl 20
  in let head_48 = erlps__bytes_t__1 [arg_49]
  in let arg_52 = toErl 65
  in let head_51 = erlps__bytes_t__1 [arg_52]
  in
    erlps__prim_call__5
      [arg_28, arg_29,
       ErlangCons head_33
         (ErlangCons head_37 (ErlangCons head_41 ErlangEmptyList)),
       ErlangCons (ErlangAtom "word")
         (ErlangCons head_48 (ErlangCons head_51 ErlangEmptyList)),
       ErlangAtom "word"]
erlps__builtin_code__6 [_,
                        (ErlangTuple [(ErlangAtom "qid"), _,
                                      (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangEmptyList))))))) (ErlangCons (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangCons (ErlangInt num_10) (ErlangCons (ErlangInt num_11) (ErlangCons (ErlangInt num_12) (ErlangCons (ErlangInt num_13) (ErlangCons (ErlangInt num_14) (ErlangCons (ErlangInt num_15) (ErlangCons (ErlangInt num_16) (ErlangCons (ErlangInt num_17) (ErlangCons (ErlangInt num_18) (ErlangCons (ErlangInt num_19) (ErlangCons (ErlangInt num_20) (ErlangCons (ErlangInt num_21) (ErlangCons (ErlangInt num_22) (ErlangCons (ErlangInt num_23) (ErlangCons (ErlangInt num_24) (ErlangEmptyList)))))))))))))))))))) (ErlangEmptyList)))]),
                        (ErlangCons msg_25 (ErlangCons sig_26 (ErlangEmptyList))),
                        _, _, icode_27]
  | (ErlangInt num_0) == (toErl 67)
  , (ErlangInt num_1) == (toErl 114)
  , (ErlangInt num_2) == (toErl 121)
  , (ErlangInt num_3) == (toErl 112)
  , (ErlangInt num_4) == (toErl 116)
  , (ErlangInt num_5) == (toErl 111)
  , (ErlangInt num_6) == (toErl 101)
  , (ErlangInt num_7) == (toErl 99)
  , (ErlangInt num_8) == (toErl 114)
  , (ErlangInt num_9) == (toErl 101)
  , (ErlangInt num_10) == (toErl 99)
  , (ErlangInt num_11) == (toErl 111)
  , (ErlangInt num_12) == (toErl 118)
  , (ErlangInt num_13) == (toErl 101)
  , (ErlangInt num_14) == (toErl 114)
  , (ErlangInt num_15) == (toErl 95)
  , (ErlangInt num_16) == (toErl 115)
  , (ErlangInt num_17) == (toErl 101)
  , (ErlangInt num_18) == (toErl 99)
  , (ErlangInt num_19) == (toErl 112)
  , (ErlangInt num_20) == (toErl 50)
  , (ErlangInt num_21) == (toErl 53)
  , (ErlangInt num_22) == (toErl 54)
  , (ErlangInt num_23) == (toErl 107)
  , (ErlangInt num_24) == (toErl 49) =
  let    arg_28 = toErl 421
  in let tup_el_31 = toErl 0
  in let arg_29 = ErlangTuple [ErlangAtom "integer", tup_el_31]
  in let head_33 = erlps__ast_body__2 [msg_25, icode_27]
  in let head_37 = erlps__ast_body__2 [sig_26, icode_27]
  in let arg_45 = toErl 65
  in let head_44 = erlps__bytes_t__1 [arg_45]
  in let arg_49 = toErl 20
  in let arg_48 = erlps__bytes_t__1 [arg_49]
  in let
    arg_47 =
      BIF.do_remote_fun_call "Aeso.Icode" "erlps__option_typerep__1"
        [arg_48]
  in
    erlps__prim_call__5
      [arg_28, arg_29,
       ErlangCons head_33 (ErlangCons head_37 ErlangEmptyList),
       ErlangCons (ErlangAtom "word")
         (ErlangCons head_44 ErlangEmptyList),
       arg_47]
erlps__builtin_code__6 [_,
                        (ErlangTuple [(ErlangAtom "qid"), _,
                                      (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangEmptyList))))))) (ErlangCons op_6 (ErlangEmptyList)))]),
                        (ErlangCons term_7 (ErlangEmptyList)),
                        (ErlangCons type_8 (ErlangEmptyList)), _, icode_9]
  | (ErlangInt num_0) == (toErl 67)
  , (ErlangInt num_1) == (toErl 114)
  , (ErlangInt num_2) == (toErl 121)
  , (ErlangInt num_3) == (toErl 112)
  , (ErlangInt num_4) == (toErl 116)
  , (ErlangInt num_5) == (toErl 111)
  , (((ErlangAtom "true") ==
        (falsifyErrors
           (\ _ ->
              let rop_18 = toErl "sha3"
              in BIF.erlang__op_eq [op_6, rop_18]))) ||
       ((ErlangAtom "true") ==
          (falsifyErrors
             (\ _ ->
                let rop_20 = toErl "sha256"
                in BIF.erlang__op_eq [op_6, rop_20])))) ||
      ((ErlangAtom "true") ==
         (falsifyErrors
            (\ _ ->
               let rop_22 = toErl "blake2b"
               in BIF.erlang__op_eq [op_6, rop_22]))) =
  let    arg_10 = BIF.erlang__list_to_atom__1 [op_6]
  in let arg_12 = erlps__ast_body__2 [term_7, icode_9]
  in
    erlps__generic_hash_primop__4 [arg_10, arg_12, type_8, icode_9]
erlps__builtin_code__6 [_,
                        (ErlangTuple [(ErlangAtom "qid"), _,
                                      (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangEmptyList))))))) (ErlangCons op_6 (ErlangEmptyList)))]),
                        (ErlangCons string_7 (ErlangEmptyList)), _, _, icode_8]
  | (ErlangInt num_0) == (toErl 83)
  , (ErlangInt num_1) == (toErl 116)
  , (ErlangInt num_2) == (toErl 114)
  , (ErlangInt num_3) == (toErl 105)
  , (ErlangInt num_4) == (toErl 110)
  , (ErlangInt num_5) == (toErl 103)
  , (((ErlangAtom "true") ==
        (falsifyErrors
           (\ _ ->
              let rop_15 = toErl "sha3"
              in BIF.erlang__op_eq [op_6, rop_15]))) ||
       ((ErlangAtom "true") ==
          (falsifyErrors
             (\ _ ->
                let rop_17 = toErl "sha256"
                in BIF.erlang__op_eq [op_6, rop_17])))) ||
      ((ErlangAtom "true") ==
         (falsifyErrors
            (\ _ ->
               let rop_19 = toErl "blake2b"
               in BIF.erlang__op_eq [op_6, rop_19]))) =
  let    arg_9 = BIF.erlang__list_to_atom__1 [op_6]
  in let arg_11 = erlps__ast_body__2 [string_7, icode_8]
  in erlps__string_hash_primop__2 [arg_9, arg_11]
erlps__builtin_code__6 [_,
                        (ErlangTuple [(ErlangAtom "qid"), _,
                                      (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangEmptyList))))))) (ErlangCons (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangCons (ErlangInt num_10) (ErlangCons (ErlangInt num_11) (ErlangEmptyList))))))) (ErlangEmptyList)))]),
                        (ErlangCons string_12 (ErlangEmptyList)), _, _,
                        icode_13]
  | (ErlangInt num_0) == (toErl 83)
  , (ErlangInt num_1) == (toErl 116)
  , (ErlangInt num_2) == (toErl 114)
  , (ErlangInt num_3) == (toErl 105)
  , (ErlangInt num_4) == (toErl 110)
  , (ErlangInt num_5) == (toErl 103)
  , (ErlangInt num_6) == (toErl 108)
  , (ErlangInt num_7) == (toErl 101)
  , (ErlangInt num_8) == (toErl 110)
  , (ErlangInt num_9) == (toErl 103)
  , (ErlangInt num_10) == (toErl 116)
  , (ErlangInt num_11) == (toErl 104) =
  let head_16 = erlps__ast_body__2 [string_12, icode_13]
  in
    erlps__builtin_call__2
      [ErlangAtom "string_length", ErlangCons head_16 ErlangEmptyList]
erlps__builtin_code__6 [_,
                        (ErlangTuple [(ErlangAtom "qid"), _,
                                      (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangEmptyList))))))) (ErlangCons (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangCons (ErlangInt num_10) (ErlangCons (ErlangInt num_11) (ErlangEmptyList))))))) (ErlangEmptyList)))]),
                        (ErlangCons string1_12 (ErlangCons string2_13 (ErlangEmptyList))),
                        _, _, icode_14]
  | (ErlangInt num_0) == (toErl 83)
  , (ErlangInt num_1) == (toErl 116)
  , (ErlangInt num_2) == (toErl 114)
  , (ErlangInt num_3) == (toErl 105)
  , (ErlangInt num_4) == (toErl 110)
  , (ErlangInt num_5) == (toErl 103)
  , (ErlangInt num_6) == (toErl 99)
  , (ErlangInt num_7) == (toErl 111)
  , (ErlangInt num_8) == (toErl 110)
  , (ErlangInt num_9) == (toErl 99)
  , (ErlangInt num_10) == (toErl 97)
  , (ErlangInt num_11) == (toErl 116) =
  let    head_17 = erlps__ast_body__2 [string1_12, icode_14]
  in let head_21 = erlps__ast_body__2 [string2_13, icode_14]
  in
    erlps__builtin_call__2
      [ErlangAtom "string_concat",
       ErlangCons head_17 (ErlangCons head_21 ErlangEmptyList)]
erlps__builtin_code__6 [_,
                        (ErlangTuple [(ErlangAtom "qid"), _,
                                      (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangEmptyList))))) (ErlangCons fun_4 (ErlangEmptyList)))]),
                        args_5, _, _, icode_6]
  | (ErlangInt num_0) == (toErl 66)
  , (ErlangInt num_1) == (toErl 105)
  , (ErlangInt num_2) == (toErl 116)
  , (ErlangInt num_3) == (toErl 115)
  , ((((((ErlangAtom "true") ==
           (falsifyErrors
              (\ _ ->
                 let rop_163 = toErl "test"
                 in BIF.erlang__op_eq [fun_4, rop_163]))) ||
          ((ErlangAtom "true") ==
             (falsifyErrors
                (\ _ ->
                   let rop_165 = toErl "set"
                   in BIF.erlang__op_eq [fun_4, rop_165])))) ||
         ((ErlangAtom "true") ==
            (falsifyErrors
               (\ _ ->
                  let rop_167 = toErl "clear"
                  in BIF.erlang__op_eq [fun_4, rop_167])))) ||
        ((ErlangAtom "true") ==
           (falsifyErrors
              (\ _ ->
                 let rop_169 = toErl "union"
                 in BIF.erlang__op_eq [fun_4, rop_169])))) ||
       ((ErlangAtom "true") ==
          (falsifyErrors
             (\ _ ->
                let rop_171 = toErl "intersection"
                in BIF.erlang__op_eq [fun_4, rop_171])))) ||
      ((ErlangAtom "true") ==
         (falsifyErrors
            (\ _ ->
               let rop_173 = toErl "difference"
               in BIF.erlang__op_eq [fun_4, rop_173]))) =
  let   
    c_13 =
      ErlangFun 1
        (let
           lambda_7 [n_9] | isEInt n_9 =
             ErlangTuple [ErlangAtom "integer", n_9]
           lambda_7 [x_12] = x_12
           lambda_7 [arg_8] = EXC.function_clause unit
           lambda_7 args = EXC.badarity (ErlangFun 1 lambda_7) args
         in lambda_7)
  in let
    bin_30 =
      ErlangFun 1
        (let
           lambda_14 [o_16] =
             ErlangFun 2
               (let
                  lambda_17 [a_20, b_21] =
                    let   
                      tup_el_24 =
                        BIF.erlang__apply__2
                          [c_13, ErlangCons a_20 ErlangEmptyList]
                    in let
                      tup_el_27 =
                        BIF.erlang__apply__2
                          [c_13, ErlangCons b_21 ErlangEmptyList]
                    in
                      ErlangTuple
                        [ErlangAtom "binop", o_16, tup_el_24, tup_el_27]
                  lambda_17 [arg_18, arg_19] = EXC.function_clause unit
                  lambda_17 args = EXC.badarity (ErlangFun 2 lambda_17) args
                in lambda_17)
           lambda_14 [arg_15] = EXC.function_clause unit
           lambda_14 args = EXC.badarity (ErlangFun 1 lambda_14) args
         in lambda_14)
  in let
    and_33 =
      BIF.erlang__apply__2
        [bin_30, ErlangCons (ErlangAtom "band") ErlangEmptyList]
  in let
    or_36 =
      BIF.erlang__apply__2
        [bin_30, ErlangCons (ErlangAtom "bor") ErlangEmptyList]
  in let
    bsl_47 =
      ErlangFun 2
        (let
           lambda_37 [a_40, b_41] =
             let
               fun_44 =
                 BIF.erlang__apply__2
                   [bin_30, ErlangCons (ErlangAtom "bsl") ErlangEmptyList]
             in
               BIF.erlang__apply__2
                 [fun_44, ErlangCons b_41 (ErlangCons a_40 ErlangEmptyList)]
           lambda_37 [arg_38, arg_39] = EXC.function_clause unit
           lambda_37 args = EXC.badarity (ErlangFun 2 lambda_37) args
         in lambda_37)
  in let
    bsr_58 =
      ErlangFun 2
        (let
           lambda_48 [a_51, b_52] =
             let
               fun_55 =
                 BIF.erlang__apply__2
                   [bin_30, ErlangCons (ErlangAtom "bsr") ErlangEmptyList]
             in
               BIF.erlang__apply__2
                 [fun_55, ErlangCons b_52 (ErlangCons a_51 ErlangEmptyList)]
           lambda_48 [arg_49, arg_50] = EXC.function_clause unit
           lambda_48 args = EXC.badarity (ErlangFun 2 lambda_48) args
         in lambda_48)
  in let
    neg_67 =
      ErlangFun 1
        (let
           lambda_59 [a_61] =
             let
               tup_el_64 =
                 BIF.erlang__apply__2 [c_13, ErlangCons a_61 ErlangEmptyList]
             in ErlangTuple [ErlangAtom "unop", ErlangAtom "bnot", tup_el_64]
           lambda_59 [arg_60] = EXC.function_clause unit
           lambda_59 args = EXC.badarity (ErlangFun 1 lambda_59) args
         in lambda_59)
  in let
    tail_70 =
      flmap
        (\ lc_73 ->
           let lcRet_74 = erlps__ast_body__2 [lc_73, icode_6]
           in ErlangCons lcRet_74 ErlangEmptyList)
        args_5
  in
    case ErlangCons fun_4 tail_70 of
      (ErlangCons (ErlangCons (ErlangInt num_77) (ErlangCons (ErlangInt num_78) (ErlangCons (ErlangInt num_79) (ErlangCons (ErlangInt num_80) (ErlangEmptyList))))) (ErlangCons bits_81 (ErlangCons ix_82 (ErlangEmptyList)))) | (ErlangInt
                                                                                                                                                                                                                                    num_77) ==
                                                                                                                                                                                                                                   (toErl
                                                                                                                                                                                                                                      116)
                                                                                                                                                                                                                               , (ErlangInt
                                                                                                                                                                                                                                    num_78) ==
                                                                                                                                                                                                                                   (toErl
                                                                                                                                                                                                                                      101)
                                                                                                                                                                                                                               , (ErlangInt
                                                                                                                                                                                                                                    num_79) ==
                                                                                                                                                                                                                                   (toErl
                                                                                                                                                                                                                                      115)
                                                                                                                                                                                                                               , (ErlangInt
                                                                                                                                                                                                                                    num_80) ==
                                                                                                                                                                                                                                   (toErl
                                                                                                                                                                                                                                      116) ->
        let   
          arg_83 =
            BIF.erlang__apply__2
              [bsr_58, ErlangCons bits_81 (ErlangCons ix_82 ErlangEmptyList)]
        in let arg_87 = toErl 1
        in
          BIF.erlang__apply__2
            [and_33, ErlangCons arg_83 (ErlangCons arg_87 ErlangEmptyList)]
      (ErlangCons (ErlangCons (ErlangInt num_89) (ErlangCons (ErlangInt num_90) (ErlangCons (ErlangInt num_91) (ErlangEmptyList)))) (ErlangCons bits_92 (ErlangCons ix_93 (ErlangEmptyList)))) | (ErlangInt
                                                                                                                                                                                                    num_89) ==
                                                                                                                                                                                                   (toErl
                                                                                                                                                                                                      115)
                                                                                                                                                                                               , (ErlangInt
                                                                                                                                                                                                    num_90) ==
                                                                                                                                                                                                   (toErl
                                                                                                                                                                                                      101)
                                                                                                                                                                                               , (ErlangInt
                                                                                                                                                                                                    num_91) ==
                                                                                                                                                                                                   (toErl
                                                                                                                                                                                                      116) ->
        let    arg_96 = toErl 1
        in let
          arg_95 =
            BIF.erlang__apply__2
              [bsl_47, ErlangCons arg_96 (ErlangCons ix_93 ErlangEmptyList)]
        in
          BIF.erlang__apply__2
            [or_36, ErlangCons bits_92 (ErlangCons arg_95 ErlangEmptyList)]
      (ErlangCons (ErlangCons (ErlangInt num_100) (ErlangCons (ErlangInt num_101) (ErlangCons (ErlangInt num_102) (ErlangCons (ErlangInt num_103) (ErlangCons (ErlangInt num_104) (ErlangEmptyList)))))) (ErlangCons bits_105 (ErlangCons ix_106 (ErlangEmptyList)))) | (ErlangInt
                                                                                                                                                                                                                                                                           num_100) ==
                                                                                                                                                                                                                                                                          (toErl
                                                                                                                                                                                                                                                                             99)
                                                                                                                                                                                                                                                                      , (ErlangInt
                                                                                                                                                                                                                                                                           num_101) ==
                                                                                                                                                                                                                                                                          (toErl
                                                                                                                                                                                                                                                                             108)
                                                                                                                                                                                                                                                                      , (ErlangInt
                                                                                                                                                                                                                                                                           num_102) ==
                                                                                                                                                                                                                                                                          (toErl
                                                                                                                                                                                                                                                                             101)
                                                                                                                                                                                                                                                                      , (ErlangInt
                                                                                                                                                                                                                                                                           num_103) ==
                                                                                                                                                                                                                                                                          (toErl
                                                                                                                                                                                                                                                                             97)
                                                                                                                                                                                                                                                                      , (ErlangInt
                                                                                                                                                                                                                                                                           num_104) ==
                                                                                                                                                                                                                                                                          (toErl
                                                                                                                                                                                                                                                                             114) ->
        let    arg_110 = toErl 1
        in let
          arg_109 =
            BIF.erlang__apply__2
              [bsl_47, ErlangCons arg_110 (ErlangCons ix_106 ErlangEmptyList)]
        in let
          arg_108 =
            BIF.erlang__apply__2 [neg_67, ErlangCons arg_109 ErlangEmptyList]
        in
          BIF.erlang__apply__2
            [and_33,
             ErlangCons bits_105 (ErlangCons arg_108 ErlangEmptyList)]
      (ErlangCons (ErlangCons (ErlangInt num_115) (ErlangCons (ErlangInt num_116) (ErlangCons (ErlangInt num_117) (ErlangCons (ErlangInt num_118) (ErlangCons (ErlangInt num_119) (ErlangEmptyList)))))) (ErlangCons a_120 (ErlangCons b_121 (ErlangEmptyList)))) | (ErlangInt
                                                                                                                                                                                                                                                                       num_115) ==
                                                                                                                                                                                                                                                                      (toErl
                                                                                                                                                                                                                                                                         117)
                                                                                                                                                                                                                                                                  , (ErlangInt
                                                                                                                                                                                                                                                                       num_116) ==
                                                                                                                                                                                                                                                                      (toErl
                                                                                                                                                                                                                                                                         110)
                                                                                                                                                                                                                                                                  , (ErlangInt
                                                                                                                                                                                                                                                                       num_117) ==
                                                                                                                                                                                                                                                                      (toErl
                                                                                                                                                                                                                                                                         105)
                                                                                                                                                                                                                                                                  , (ErlangInt
                                                                                                                                                                                                                                                                       num_118) ==
                                                                                                                                                                                                                                                                      (toErl
                                                                                                                                                                                                                                                                         111)
                                                                                                                                                                                                                                                                  , (ErlangInt
                                                                                                                                                                                                                                                                       num_119) ==
                                                                                                                                                                                                                                                                      (toErl
                                                                                                                                                                                                                                                                         110) ->
        BIF.erlang__apply__2
          [or_36, ErlangCons a_120 (ErlangCons b_121 ErlangEmptyList)]
      (ErlangCons (ErlangCons (ErlangInt num_125) (ErlangCons (ErlangInt num_126) (ErlangCons (ErlangInt num_127) (ErlangCons (ErlangInt num_128) (ErlangCons (ErlangInt num_129) (ErlangCons (ErlangInt num_130) (ErlangCons (ErlangInt num_131) (ErlangCons (ErlangInt num_132) (ErlangCons (ErlangInt num_133) (ErlangCons (ErlangInt num_134) (ErlangCons (ErlangInt num_135) (ErlangCons (ErlangInt num_136) (ErlangEmptyList))))))))))))) (ErlangCons a_137 (ErlangCons b_138 (ErlangEmptyList)))) | (ErlangInt
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              num_125) ==
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             (toErl

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         , (ErlangInt
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              num_126) ==
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             (toErl

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         , (ErlangInt
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              num_127) ==
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             (toErl

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         , (ErlangInt
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              num_128) ==
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             (toErl

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         , (ErlangInt
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              num_129) ==
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             (toErl

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         , (ErlangInt
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              num_130) ==
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             (toErl

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         , (ErlangInt
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              num_131) ==
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             (toErl

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         , (ErlangInt
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              num_132) ==
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             (toErl
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                99)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         , (ErlangInt
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              num_133) ==
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             (toErl

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         , (ErlangInt
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              num_134) ==
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             (toErl

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         , (ErlangInt
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              num_135) ==
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             (toErl

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         , (ErlangInt
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              num_136) ==
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             (toErl

        BIF.erlang__apply__2
          [and_33, ErlangCons a_137 (ErlangCons b_138 ErlangEmptyList)]
      (ErlangCons (ErlangCons (ErlangInt num_142) (ErlangCons (ErlangInt num_143) (ErlangCons (ErlangInt num_144) (ErlangCons (ErlangInt num_145) (ErlangCons (ErlangInt num_146) (ErlangCons (ErlangInt num_147) (ErlangCons (ErlangInt num_148) (ErlangCons (ErlangInt num_149) (ErlangCons (ErlangInt num_150) (ErlangCons (ErlangInt num_151) (ErlangEmptyList))))))))))) (ErlangCons a_152 (ErlangCons b_153 (ErlangEmptyList)))) | (ErlangInt
                                                                                                                                                                                                                                                                                                                                                                                                                                            num_142) ==
                                                                                                                                                                                                                                                                                                                                                                                                                                           (toErl
                                                                                                                                                                                                                                                                                                                                                                                                                                              100)
                                                                                                                                                                                                                                                                                                                                                                                                                                       , (ErlangInt
                                                                                                                                                                                                                                                                                                                                                                                                                                            num_143) ==
                                                                                                                                                                                                                                                                                                                                                                                                                                           (toErl
                                                                                                                                                                                                                                                                                                                                                                                                                                              105)
                                                                                                                                                                                                                                                                                                                                                                                                                                       , (ErlangInt
                                                                                                                                                                                                                                                                                                                                                                                                                                            num_144) ==
                                                                                                                                                                                                                                                                                                                                                                                                                                           (toErl
                                                                                                                                                                                                                                                                                                                                                                                                                                              102)
                                                                                                                                                                                                                                                                                                                                                                                                                                       , (ErlangInt
                                                                                                                                                                                                                                                                                                                                                                                                                                            num_145) ==
                                                                                                                                                                                                                                                                                                                                                                                                                                           (toErl
                                                                                                                                                                                                                                                                                                                                                                                                                                              102)
                                                                                                                                                                                                                                                                                                                                                                                                                                       , (ErlangInt
                                                                                                                                                                                                                                                                                                                                                                                                                                            num_146) ==
                                                                                                                                                                                                                                                                                                                                                                                                                                           (toErl
                                                                                                                                                                                                                                                                                                                                                                                                                                              101)
                                                                                                                                                                                                                                                                                                                                                                                                                                       , (ErlangInt
                                                                                                                                                                                                                                                                                                                                                                                                                                            num_147) ==
                                                                                                                                                                                                                                                                                                                                                                                                                                           (toErl
                                                                                                                                                                                                                                                                                                                                                                                                                                              114)
                                                                                                                                                                                                                                                                                                                                                                                                                                       , (ErlangInt
                                                                                                                                                                                                                                                                                                                                                                                                                                            num_148) ==
                                                                                                                                                                                                                                                                                                                                                                                                                                           (toErl
                                                                                                                                                                                                                                                                                                                                                                                                                                              101)
                                                                                                                                                                                                                                                                                                                                                                                                                                       , (ErlangInt
                                                                                                                                                                                                                                                                                                                                                                                                                                            num_149) ==
                                                                                                                                                                                                                                                                                                                                                                                                                                           (toErl
                                                                                                                                                                                                                                                                                                                                                                                                                                              110)
                                                                                                                                                                                                                                                                                                                                                                                                                                       , (ErlangInt
                                                                                                                                                                                                                                                                                                                                                                                                                                            num_150) ==
                                                                                                                                                                                                                                                                                                                                                                                                                                           (toErl
                                                                                                                                                                                                                                                                                                                                                                                                                                              99)
                                                                                                                                                                                                                                                                                                                                                                                                                                       , (ErlangInt
                                                                                                                                                                                                                                                                                                                                                                                                                                            num_151) ==
                                                                                                                                                                                                                                                                                                                                                                                                                                           (toErl
                                                                                                                                                                                                                                                                                                                                                                                                                                              101) ->
        let   
          arg_156 =
            BIF.erlang__apply__2
              [and_33, ErlangCons a_152 (ErlangCons b_153 ErlangEmptyList)]
        in let
          arg_155 =
            BIF.erlang__apply__2 [neg_67, ErlangCons arg_156 ErlangEmptyList]
        in
          BIF.erlang__apply__2
            [and_33, ErlangCons a_152 (ErlangCons arg_155 ErlangEmptyList)]
      something_else -> EXC.case_clause something_else
erlps__builtin_code__6 [_,
                        (ErlangTuple [(ErlangAtom "qid"), _,
                                      (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangEmptyList))))) (ErlangCons (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangEmptyList)))) (ErlangEmptyList)))]),
                        (ErlangCons bits_7 (ErlangEmptyList)), _, _, icode_8]
  | (ErlangInt num_0) == (toErl 66)
  , (ErlangInt num_1) == (toErl 105)
  , (ErlangInt num_2) == (toErl 116)
  , (ErlangInt num_3) == (toErl 115)
  , (ErlangInt num_4) == (toErl 115)
  , (ErlangInt num_5) == (toErl 117)
  , (ErlangInt num_6) == (toErl 109) =
  let    head_11 = erlps__ast_body__2 [bits_7, icode_8]
  in let tup_el_17 = toErl 0
  in let head_15 = ErlangTuple [ErlangAtom "integer", tup_el_17]
  in
    erlps__builtin_call__2
      [ErlangAtom "popcount",
       ErlangCons head_11 (ErlangCons head_15 ErlangEmptyList)]
erlps__builtin_code__6 [_,
                        (ErlangTuple [(ErlangAtom "qid"), _,
                                      (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangEmptyList)))) (ErlangCons (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangEmptyList))))))) (ErlangEmptyList)))]),
                        (ErlangCons int_9 (ErlangEmptyList)), _, _, icode_10]
  | (ErlangInt num_0) == (toErl 73)
  , (ErlangInt num_1) == (toErl 110)
  , (ErlangInt num_2) == (toErl 116)
  , (ErlangInt num_3) == (toErl 116)
  , (ErlangInt num_4) == (toErl 111)
  , (ErlangInt num_5) == (toErl 95)
  , (ErlangInt num_6) == (toErl 115)
  , (ErlangInt num_7) == (toErl 116)
  , (ErlangInt num_8) == (toErl 114) =
  let head_13 = erlps__ast_body__2 [int_9, icode_10]
  in
    erlps__builtin_call__2
      [ErlangAtom "int_to_str", ErlangCons head_13 ErlangEmptyList]
erlps__builtin_code__6 [_,
                        (ErlangTuple [(ErlangAtom "qid"), _,
                                      (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangEmptyList)))))))) (ErlangCons (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangCons (ErlangInt num_10) (ErlangCons (ErlangInt num_11) (ErlangCons (ErlangInt num_12) (ErlangEmptyList))))))) (ErlangEmptyList)))]),
                        (ErlangCons addr_13 (ErlangEmptyList)), _, _, icode_14]
  | (ErlangInt num_0) == (toErl 65)
  , (ErlangInt num_1) == (toErl 100)
  , (ErlangInt num_2) == (toErl 100)
  , (ErlangInt num_3) == (toErl 114)
  , (ErlangInt num_4) == (toErl 101)
  , (ErlangInt num_5) == (toErl 115)
  , (ErlangInt num_6) == (toErl 115)
  , (ErlangInt num_7) == (toErl 116)
  , (ErlangInt num_8) == (toErl 111)
  , (ErlangInt num_9) == (toErl 95)
  , (ErlangInt num_10) == (toErl 115)
  , (ErlangInt num_11) == (toErl 116)
  , (ErlangInt num_12) == (toErl 114) =
  let head_17 = erlps__ast_body__2 [addr_13, icode_14]
  in
    erlps__builtin_call__2
      [ErlangAtom "addr_to_str", ErlangCons head_17 ErlangEmptyList]
erlps__builtin_code__6 [_,
                        (ErlangTuple [(ErlangAtom "qid"), _,
                                      (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangEmptyList)))))))) (ErlangCons (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangCons (ErlangInt num_10) (ErlangCons (ErlangInt num_11) (ErlangCons (ErlangInt num_12) (ErlangCons (ErlangInt num_13) (ErlangCons (ErlangInt num_14) (ErlangCons (ErlangInt num_15) (ErlangEmptyList)))))))))) (ErlangEmptyList)))]),
                        (ErlangCons addr_16 (ErlangEmptyList)), _, _, icode_17]
  | (ErlangInt num_0) == (toErl 65)
  , (ErlangInt num_1) == (toErl 100)
  , (ErlangInt num_2) == (toErl 100)
  , (ErlangInt num_3) == (toErl 114)
  , (ErlangInt num_4) == (toErl 101)
  , (ErlangInt num_5) == (toErl 115)
  , (ErlangInt num_6) == (toErl 115)
  , (ErlangInt num_7) == (toErl 105)
  , (ErlangInt num_8) == (toErl 115)
  , (ErlangInt num_9) == (toErl 95)
  , (ErlangInt num_10) == (toErl 111)
  , (ErlangInt num_11) == (toErl 114)
  , (ErlangInt num_12) == (toErl 97)
  , (ErlangInt num_13) == (toErl 99)
  , (ErlangInt num_14) == (toErl 108)
  , (ErlangInt num_15) == (toErl 101) =
  let    arg_18 = toErl 600
  in let tup_el_21 = toErl 0
  in let arg_19 = ErlangTuple [ErlangAtom "integer", tup_el_21]
  in let head_23 = erlps__ast_body__2 [addr_16, icode_17]
  in
    erlps__prim_call__5
      [arg_18, arg_19, ErlangCons head_23 ErlangEmptyList,
       ErlangCons (ErlangAtom "word") ErlangEmptyList,
       ErlangAtom "word"]
erlps__builtin_code__6 [_,
                        (ErlangTuple [(ErlangAtom "qid"), _,
                                      (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangEmptyList)))))))) (ErlangCons (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangCons (ErlangInt num_10) (ErlangCons (ErlangInt num_11) (ErlangCons (ErlangInt num_12) (ErlangCons (ErlangInt num_13) (ErlangCons (ErlangInt num_14) (ErlangCons (ErlangInt num_15) (ErlangCons (ErlangInt num_16) (ErlangCons (ErlangInt num_17) (ErlangEmptyList)))))))))))) (ErlangEmptyList)))]),
                        (ErlangCons addr_18 (ErlangEmptyList)), _, _, icode_19]
  | (ErlangInt num_0) == (toErl 65)
  , (ErlangInt num_1) == (toErl 100)
  , (ErlangInt num_2) == (toErl 100)
  , (ErlangInt num_3) == (toErl 114)
  , (ErlangInt num_4) == (toErl 101)
  , (ErlangInt num_5) == (toErl 115)
  , (ErlangInt num_6) == (toErl 115)
  , (ErlangInt num_7) == (toErl 105)
  , (ErlangInt num_8) == (toErl 115)
  , (ErlangInt num_9) == (toErl 95)
  , (ErlangInt num_10) == (toErl 99)
  , (ErlangInt num_11) == (toErl 111)
  , (ErlangInt num_12) == (toErl 110)
  , (ErlangInt num_13) == (toErl 116)
  , (ErlangInt num_14) == (toErl 114)
  , (ErlangInt num_15) == (toErl 97)
  , (ErlangInt num_16) == (toErl 99)
  , (ErlangInt num_17) == (toErl 116) =
  let    arg_20 = toErl 601
  in let tup_el_23 = toErl 0
  in let arg_21 = ErlangTuple [ErlangAtom "integer", tup_el_23]
  in let head_25 = erlps__ast_body__2 [addr_18, icode_19]
  in
    erlps__prim_call__5
      [arg_20, arg_21, ErlangCons head_25 ErlangEmptyList,
       ErlangCons (ErlangAtom "word") ErlangEmptyList,
       ErlangAtom "word"]
erlps__builtin_code__6 [_,
                        (ErlangTuple [(ErlangAtom "qid"), _,
                                      (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangEmptyList)))))))) (ErlangCons (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangCons (ErlangInt num_10) (ErlangCons (ErlangInt num_11) (ErlangCons (ErlangInt num_12) (ErlangCons (ErlangInt num_13) (ErlangCons (ErlangInt num_14) (ErlangCons (ErlangInt num_15) (ErlangCons (ErlangInt num_16) (ErlangEmptyList))))))))))) (ErlangEmptyList)))]),
                        (ErlangCons addr_17 (ErlangEmptyList)), _, _, icode_18]
  | (ErlangInt num_0) == (toErl 65)
  , (ErlangInt num_1) == (toErl 100)
  , (ErlangInt num_2) == (toErl 100)
  , (ErlangInt num_3) == (toErl 114)
  , (ErlangInt num_4) == (toErl 101)
  , (ErlangInt num_5) == (toErl 115)
  , (ErlangInt num_6) == (toErl 115)
  , (ErlangInt num_7) == (toErl 105)
  , (ErlangInt num_8) == (toErl 115)
  , (ErlangInt num_9) == (toErl 95)
  , (ErlangInt num_10) == (toErl 112)
  , (ErlangInt num_11) == (toErl 97)
  , (ErlangInt num_12) == (toErl 121)
  , (ErlangInt num_13) == (toErl 97)
  , (ErlangInt num_14) == (toErl 98)
  , (ErlangInt num_15) == (toErl 108)
  , (ErlangInt num_16) == (toErl 101) =
  let    arg_19 = toErl 610
  in let tup_el_22 = toErl 0
  in let arg_20 = ErlangTuple [ErlangAtom "integer", tup_el_22]
  in let head_24 = erlps__ast_body__2 [addr_17, icode_18]
  in
    erlps__prim_call__5
      [arg_19, arg_20, ErlangCons head_24 ErlangEmptyList,
       ErlangCons (ErlangAtom "word") ErlangEmptyList,
       ErlangAtom "word"]
erlps__builtin_code__6 [_,
                        (ErlangTuple [(ErlangAtom "qid"), _,
                                      (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangEmptyList)))))))) (ErlangCons (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangCons (ErlangInt num_10) (ErlangCons (ErlangInt num_11) (ErlangCons (ErlangInt num_12) (ErlangCons (ErlangInt num_13) (ErlangCons (ErlangInt num_14) (ErlangCons (ErlangInt num_15) (ErlangCons (ErlangInt num_16) (ErlangCons (ErlangInt num_17) (ErlangEmptyList)))))))))))) (ErlangEmptyList)))]),
                        (ErlangCons addr_18 (ErlangEmptyList)), _, _, icode_19]
  | (ErlangInt num_0) == (toErl 65)
  , (ErlangInt num_1) == (toErl 100)
  , (ErlangInt num_2) == (toErl 100)
  , (ErlangInt num_3) == (toErl 114)
  , (ErlangInt num_4) == (toErl 101)
  , (ErlangInt num_5) == (toErl 115)
  , (ErlangInt num_6) == (toErl 115)
  , (ErlangInt num_7) == (toErl 116)
  , (ErlangInt num_8) == (toErl 111)
  , (ErlangInt num_9) == (toErl 95)
  , (ErlangInt num_10) == (toErl 99)
  , (ErlangInt num_11) == (toErl 111)
  , (ErlangInt num_12) == (toErl 110)
  , (ErlangInt num_13) == (toErl 116)
  , (ErlangInt num_14) == (toErl 114)
  , (ErlangInt num_15) == (toErl 97)
  , (ErlangInt num_16) == (toErl 99)
  , (ErlangInt num_17) == (toErl 116) =
  erlps__ast_body__2 [addr_18, icode_19]
erlps__builtin_code__6 [_,
                        (ErlangTuple [(ErlangAtom "qid"), _,
                                      (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangEmptyList)))))) (ErlangCons (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangCons (ErlangInt num_10) (ErlangEmptyList))))))) (ErlangEmptyList)))]),
                        (ErlangCons bytes_11 (ErlangEmptyList)), _, _, icode_12]
  | (ErlangInt num_0) == (toErl 66)
  , (ErlangInt num_1) == (toErl 121)
  , (ErlangInt num_2) == (toErl 116)
  , (ErlangInt num_3) == (toErl 101)
  , (ErlangInt num_4) == (toErl 115)
  , (ErlangInt num_5) == (toErl 116)
  , (ErlangInt num_6) == (toErl 111)
  , (ErlangInt num_7) == (toErl 95)
  , (ErlangInt num_8) == (toErl 105)
  , (ErlangInt num_9) == (toErl 110)
  , (ErlangInt num_10) == (toErl 116) =
  case bytes_11 of
    (ErlangTuple [(ErlangAtom "typed"), _, _,
                  (ErlangTuple [(ErlangAtom "bytes_t"), _, n_13])]) ->
      let    arg_15 = ErlangTuple [ErlangAtom "bytes_to_int", n_13]
      in let head_19 = erlps__ast_body__2 [bytes_11, icode_12]
      in
        erlps__builtin_call__2
          [arg_15, ErlangCons head_19 ErlangEmptyList]
    _ -> EXC.badmatch bytes_11
erlps__builtin_code__6 [_,
                        (ErlangTuple [(ErlangAtom "qid"), _,
                                      (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangEmptyList)))))) (ErlangCons (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangCons (ErlangInt num_10) (ErlangEmptyList))))))) (ErlangEmptyList)))]),
                        (ErlangCons bytes_11 (ErlangEmptyList)), _, _, icode_12]
  | (ErlangInt num_0) == (toErl 66)
  , (ErlangInt num_1) == (toErl 121)
  , (ErlangInt num_2) == (toErl 116)
  , (ErlangInt num_3) == (toErl 101)
  , (ErlangInt num_4) == (toErl 115)
  , (ErlangInt num_5) == (toErl 116)
  , (ErlangInt num_6) == (toErl 111)
  , (ErlangInt num_7) == (toErl 95)
  , (ErlangInt num_8) == (toErl 115)
  , (ErlangInt num_9) == (toErl 116)
  , (ErlangInt num_10) == (toErl 114) =
  case bytes_11 of
    (ErlangTuple [(ErlangAtom "typed"), _, _,
                  (ErlangTuple [(ErlangAtom "bytes_t"), _, n_13])]) ->
      let    arg_15 = ErlangTuple [ErlangAtom "bytes_to_str", n_13]
      in let head_19 = erlps__ast_body__2 [bytes_11, icode_12]
      in
        erlps__builtin_call__2
          [arg_15, ErlangCons head_19 ErlangEmptyList]
    _ -> EXC.badmatch bytes_11
erlps__builtin_code__6 [_,
                        (ErlangTuple [(ErlangAtom "qid"), _,
                                      (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangEmptyList)))))) (ErlangCons (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangCons (ErlangInt num_10) (ErlangEmptyList))))))) (ErlangEmptyList)))]),
                        (ErlangCons a_11 (ErlangCons b_12 (ErlangEmptyList))),
                        (ErlangCons typea_13 (ErlangCons typeb_14 (ErlangEmptyList))),
                        _, icode_15]
  | (ErlangInt num_0) == (toErl 66)
  , (ErlangInt num_1) == (toErl 121)
  , (ErlangInt num_2) == (toErl 116)
  , (ErlangInt num_3) == (toErl 101)
  , (ErlangInt num_4) == (toErl 115)
  , (ErlangInt num_5) == (toErl 99)
  , (ErlangInt num_6) == (toErl 111)
  , (ErlangInt num_7) == (toErl 110)
  , (ErlangInt num_8) == (toErl 99)
  , (ErlangInt num_9) == (toErl 97)
  , (ErlangInt num_10) == (toErl 116) =
  case typea_13 of
    (ErlangTuple [(ErlangAtom "bytes_t"), _, m_16]) ->
      case typeb_14 of
        (ErlangTuple [(ErlangAtom "bytes_t"), _, n_18]) ->
          let   
            arg_20 = ErlangTuple [ErlangAtom "bytes_concat", m_16, n_18]
          in let head_25 = erlps__ast_body__2 [a_11, icode_15]
          in let head_29 = erlps__ast_body__2 [b_12, icode_15]
          in
            erlps__builtin_call__2
              [arg_20, ErlangCons head_25 (ErlangCons head_29 ErlangEmptyList)]
        _ -> EXC.badmatch typeb_14
    _ -> EXC.badmatch typea_13
erlps__builtin_code__6 [_,
                        (ErlangTuple [(ErlangAtom "qid"), _,
                                      (ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangEmptyList)))))) (ErlangCons (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) (ErlangEmptyList)))))) (ErlangEmptyList)))]),
                        (ErlangCons a_10 (ErlangEmptyList)), _, restype_11,
                        icode_12]
  | (ErlangInt num_0) == (toErl 66)
  , (ErlangInt num_1) == (toErl 121)
  , (ErlangInt num_2) == (toErl 116)
  , (ErlangInt num_3) == (toErl 101)
  , (ErlangInt num_4) == (toErl 115)
  , (ErlangInt num_5) == (toErl 115)
  , (ErlangInt num_6) == (toErl 112)
  , (ErlangInt num_7) == (toErl 108)
  , (ErlangInt num_8) == (toErl 105)
  , (ErlangInt num_9) == (toErl 116) =
  case restype_11 of
    (ErlangTuple [(ErlangAtom "tuple_t"), _,
                  (ErlangCons (ErlangTuple [(ErlangAtom "bytes_t"), _,
                                            m_13]) (ErlangCons (ErlangTuple [(ErlangAtom "bytes_t"),
                                                                             _,
                                                                             n_14]) (ErlangEmptyList)))]) ->
      let   
        arg_16 = ErlangTuple [ErlangAtom "bytes_split", m_13, n_14]
      in let head_21 = erlps__ast_body__2 [a_10, icode_12]
      in
        erlps__builtin_call__2
          [arg_16, ErlangCons head_21 ErlangEmptyList]
    _ -> EXC.badmatch restype_11
erlps__builtin_code__6 [_as_0, fun_1, _args_2, _argst_3, _rett_4,
                        _icode_5]
  =
  let arg_6 = ErlangTuple [ErlangAtom "missing_code_for", fun_1]
  in erlps__gen_error__1 [arg_6]
erlps__builtin_code__6 [arg_9, arg_10, arg_11, arg_12, arg_13,
                        arg_14]
  =
  EXC.function_clause unit
erlps__builtin_code__6 args =
  EXC.badarity (ErlangFun 6 erlps__builtin_code__6) args

erlps__eta_expand__3 :: ErlangFun
erlps__eta_expand__3 [id_1@(ErlangTuple [_, ann0_0, _]),
                      type_3@(ErlangTuple [(ErlangAtom "fun_t"), _,
                                           (ErlangEmptyList), argst_2, _]),
                      icode_4]
  =
  let   
    head_5 = ErlangTuple [ErlangAtom "origin", ErlangAtom "system"]
  in let arg_12 = toErl 1
  in let arg_13 = BIF.erlang__length__1 [argst_2]
  in let
    arg_11 =
      BIF.do_remote_fun_call "Lists" "erlps__seq__2" [arg_12, arg_13]
  in let
    lcSrc_10 =
      BIF.do_remote_fun_call "Lists" "erlps__zip__2" [arg_11, argst_2]
  in let
    xs_30 =
      flmap
        (\ lc_18 ->
           case lc_18 of
             (ErlangTuple [i_16, t_17]) ->
               let    lop_26 = toErl "%"
               in let rop_27 = BIF.erlang__integer_to_list__1 [i_16]
               in let tup_el_25 = BIF.erlang__op_append [lop_26, rop_27]
               in let
                 tup_el_22 =
                   ErlangTuple
                     [ErlangAtom "id", ErlangCons head_5 ann0_0, tup_el_25]
               in let
                 lcRet_19 =
                   ErlangTuple
                     [ErlangAtom "arg", ErlangCons head_5 ann0_0, tup_el_22,
                      t_17]
               in ErlangCons lcRet_19 ErlangEmptyList
             _ -> ErlangEmptyList)
        lcSrc_10
  in let
    args_40 =
      flmap
        (\ lc_34 ->
           case lc_34 of
             (ErlangTuple [(ErlangAtom "arg"), _, x_32, t_33]) ->
               let
                 lcRet_35 =
                   ErlangTuple
                     [ErlangAtom "typed", ErlangCons head_5 ann0_0, x_32, t_33]
               in ErlangCons lcRet_35 ErlangEmptyList
             _ -> ErlangEmptyList)
        xs_30
  in let
    tup_el_48 =
      ErlangTuple
        [ErlangAtom "typed", ErlangCons head_5 ann0_0, id_1, type_3]
  in let
    tup_el_45 =
      ErlangTuple
        [ErlangAtom "app", ErlangCons head_5 ann0_0, tup_el_48, args_40]
  in let
    arg_41 =
      ErlangTuple
        [ErlangAtom "lam", ErlangCons head_5 ann0_0, xs_30, tup_el_45]
  in erlps__ast_body__2 [arg_41, icode_4]
erlps__eta_expand__3 [id_0, _type_1, _icode_2] =
  let arg_3 = ErlangTuple [ErlangAtom "unapplied_builtin", id_0]
  in erlps__gen_error__1 [arg_3]
erlps__eta_expand__3 [arg_6, arg_7, arg_8] =
  EXC.function_clause unit
erlps__eta_expand__3 args =
  EXC.badarity (ErlangFun 3 erlps__eta_expand__3) args

erlps__check_monomorphic_map__2 :: ErlangFun
erlps__check_monomorphic_map__2 [(ErlangTuple [(ErlangAtom "typed"),
                                               ann_0, _, maptype_1]),
                                 icode_2]
  =
  erlps__check_monomorphic_map__3 [ann_0, maptype_1, icode_2]
erlps__check_monomorphic_map__2 [arg_6, arg_7] =
  EXC.function_clause unit
erlps__check_monomorphic_map__2 args =
  EXC.badarity (ErlangFun 2 erlps__check_monomorphic_map__2) args

erlps__check_monomorphic_map__3 :: ErlangFun
erlps__check_monomorphic_map__3 [ann_0,
                                 (ErlangTuple [(ErlangAtom "app_t"), _,
                                               (ErlangTuple [(ErlangAtom "id"),
                                                             _,
                                                             (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangEmptyList))))]),
                                               (ErlangCons keytype_4 (ErlangCons valtype_5 (ErlangEmptyList)))]),
                                 _icode_6]
  | (ErlangInt num_1) == (toErl 109)
  , (ErlangInt num_2) == (toErl 97)
  , (ErlangInt num_3) == (toErl 112) =
  let   
    err_15 =
      ErlangFun 1
        (let
           lambda_7 [why_9] =
             let
               arg_10 =
                 ErlangTuple
                   [ErlangAtom "invalid_map_key_type", why_9, ann_0, keytype_4]
             in erlps__gen_error__1 [arg_10]
           lambda_7 [arg_8] = EXC.function_clause unit
           lambda_7 args = EXC.badarity (ErlangFun 1 lambda_7) args
         in lambda_7)
  in let op_arg_17 = erlps__is_monomorphic__1 [keytype_4]
  in let cond_16 = BIF.erlang__not__1 [op_arg_17]
  in let
    _ =
      case cond_16 of
        (ErlangAtom "true") ->
          let
            lcRet_19 =
              BIF.erlang__apply__2
                [err_15, ErlangCons (ErlangAtom "polymorphic") ErlangEmptyList]
          in ErlangCons lcRet_19 ErlangEmptyList
        _ -> ErlangEmptyList
  in let op_arg_23 = erlps__is_first_order_type__1 [keytype_4]
  in let cond_22 = BIF.erlang__not__1 [op_arg_23]
  in let
    _ =
      case cond_22 of
        (ErlangAtom "true") ->
          let
            lcRet_25 =
              BIF.erlang__apply__2
                [err_15, ErlangCons (ErlangAtom "function") ErlangEmptyList]
          in ErlangCons lcRet_25 ErlangEmptyList
        _ -> ErlangEmptyList
  in ErlangTuple [keytype_4, valtype_5]
erlps__check_monomorphic_map__3 [arg_30, arg_31, arg_32] =
  EXC.function_clause unit
erlps__check_monomorphic_map__3 args =
  EXC.badarity (ErlangFun 3 erlps__check_monomorphic_map__3) args

erlps__map_empty__3 :: ErlangFun
erlps__map_empty__3 [keytype_0, valtype_1, icode_2] =
  let    arg_3 = toErl 300
  in let tup_el_6 = toErl 0
  in let arg_4 = ErlangTuple [ErlangAtom "integer", tup_el_6]
  in let head_8 = erlps__ast_type_value__2 [keytype_0, icode_2]
  in let head_12 = erlps__ast_type_value__2 [valtype_1, icode_2]
  in
    erlps__prim_call__5
      [arg_3, arg_4,
       ErlangCons head_8 (ErlangCons head_12 ErlangEmptyList),
       ErlangCons (ErlangAtom "typerep")
         (ErlangCons (ErlangAtom "typerep") ErlangEmptyList),
       ErlangAtom "word"]
erlps__map_empty__3 [arg_22, arg_23, arg_24] =
  EXC.function_clause unit
erlps__map_empty__3 args =
  EXC.badarity (ErlangFun 3 erlps__map_empty__3) args

erlps__map_get__3 :: ErlangFun
erlps__map_get__3 [key_0,
                   map_3@(ErlangTuple [(ErlangAtom "typed"), _ann_1, _,
                                       maptype_2]),
                   icode_4]
  =
  let   
    arg_5 =
      BIF.do_remote_fun_call "Aeso.Syntax" "erlps__get_ann__1" [key_0]
  in let
    matchExpr_11 =
      erlps__check_monomorphic_map__3 [arg_5, maptype_2, icode_4]
  in
    case matchExpr_11 of
      (ErlangTuple [_keytype_9, valtype_10]) ->
        let    tup_el_14 = erlps__ast_type__2 [valtype_10, icode_4]
        in let arg_12 = ErlangTuple [ErlangAtom "map_lookup", tup_el_14]
        in let head_18 = erlps__ast_body__2 [map_3, icode_4]
        in let head_22 = erlps__ast_body__2 [key_0, icode_4]
        in
          erlps__builtin_call__2
            [arg_12, ErlangCons head_18 (ErlangCons head_22 ErlangEmptyList)]
      _ -> EXC.badmatch matchExpr_11
erlps__map_get__3 [arg_26, arg_27, arg_28] =
  EXC.function_clause unit
erlps__map_get__3 args =
  EXC.badarity (ErlangFun 3 erlps__map_get__3) args

erlps__map_put__4 :: ErlangFun
erlps__map_put__4 [key_0, val_1, map_2, icode_3] =
  let    head_6 = erlps__ast_body__2 [map_2, icode_3]
  in let head_10 = erlps__ast_body__2 [key_0, icode_3]
  in let head_14 = erlps__ast_body__2 [val_1, icode_3]
  in
    erlps__builtin_call__2
      [ErlangAtom "map_put",
       ErlangCons head_6
         (ErlangCons head_10 (ErlangCons head_14 ErlangEmptyList))]
erlps__map_put__4 [arg_18, arg_19, arg_20, arg_21] =
  EXC.function_clause unit
erlps__map_put__4 args =
  EXC.badarity (ErlangFun 4 erlps__map_put__4) args

erlps__map_del__3 :: ErlangFun
erlps__map_del__3 [key_0, map_1, icode_2] =
  let    arg_3 = toErl 303
  in let tup_el_6 = toErl 0
  in let arg_4 = ErlangTuple [ErlangAtom "integer", tup_el_6]
  in let head_8 = erlps__ast_body__2 [map_1, icode_2]
  in let head_12 = erlps__ast_body__2 [key_0, icode_2]
  in
    erlps__prim_call__5
      [arg_3, arg_4,
       ErlangCons head_8 (ErlangCons head_12 ErlangEmptyList),
       ErlangCons (ErlangAtom "word")
         (ErlangCons (ErlangAtom "word") ErlangEmptyList),
       ErlangAtom "word"]
erlps__map_del__3 [arg_22, arg_23, arg_24] =
  EXC.function_clause unit
erlps__map_del__3 args =
  EXC.badarity (ErlangFun 3 erlps__map_del__3) args

erlps__map_tolist__2 :: ErlangFun
erlps__map_tolist__2 [map_0, icode_1] =
  let
    matchExpr_6 = erlps__check_monomorphic_map__2 [map_0, icode_1]
  in
    case matchExpr_6 of
      (ErlangTuple [keytype_4, valtype_5]) ->
        let    arg_7 = toErl 305
        in let tup_el_10 = toErl 0
        in let arg_8 = ErlangTuple [ErlangAtom "integer", tup_el_10]
        in let head_12 = erlps__ast_body__2 [map_0, icode_1]
        in let head_24 = erlps__ast_type__2 [keytype_4, icode_1]
        in let head_28 = erlps__ast_type__2 [valtype_5, icode_1]
        in let
          tup_el_21 =
            ErlangTuple
              [ErlangAtom "tuple",
               ErlangCons head_24 (ErlangCons head_28 ErlangEmptyList)]
        in let arg_19 = ErlangTuple [ErlangAtom "list", tup_el_21]
        in
          erlps__prim_call__5
            [arg_7, arg_8, ErlangCons head_12 ErlangEmptyList,
             ErlangCons (ErlangAtom "word") ErlangEmptyList, arg_19]
      _ -> EXC.badmatch matchExpr_6
erlps__map_tolist__2 [arg_32, arg_33] = EXC.function_clause unit
erlps__map_tolist__2 args =
  EXC.badarity (ErlangFun 2 erlps__map_tolist__2) args

erlps__map_upd__4 :: ErlangFun
erlps__map_upd__4 [key_0, valfun_1,
                   map_4@(ErlangTuple [(ErlangAtom "typed"), ann_2, _,
                                       maptype_3]),
                   icode_5]
  =
  let
    matchExpr_10 =
      erlps__check_monomorphic_map__3 [ann_2, maptype_3, icode_5]
  in
    case matchExpr_10 of
      (ErlangTuple [_, valtype_9]) ->
        let    tup_el_12 = erlps__ast_type__2 [valtype_9, icode_5]
        in let funname_15 = ErlangTuple [ErlangAtom "map_upd", tup_el_12]
        in let head_16 = erlps__ast_body__2 [map_4, icode_5]
        in let head_20 = erlps__ast_body__2 [key_0, icode_5]
        in let head_24 = erlps__ast_body__2 [valfun_1, icode_5]
        in
          erlps__builtin_call__2
            [funname_15,
             ErlangCons head_16
               (ErlangCons head_20 (ErlangCons head_24 ErlangEmptyList))]
      _ -> EXC.badmatch matchExpr_10
erlps__map_upd__4 [arg_31, arg_32, arg_33, arg_34] =
  EXC.function_clause unit
erlps__map_upd__4 args =
  EXC.badarity (ErlangFun 4 erlps__map_upd__4) args

erlps__map_upd__5 :: ErlangFun
erlps__map_upd__5 [key_0, default_1, valfun_2,
                   map_5@(ErlangTuple [(ErlangAtom "typed"), ann_3, _,
                                       maptype_4]),
                   icode_6]
  =
  let
    matchExpr_11 =
      erlps__check_monomorphic_map__3 [ann_3, maptype_4, icode_6]
  in
    case matchExpr_11 of
      (ErlangTuple [_, valtype_10]) ->
        let    tup_el_13 = erlps__ast_type__2 [valtype_10, icode_6]
        in let
          funname_16 =
            ErlangTuple [ErlangAtom "map_upd_default", tup_el_13]
        in let head_17 = erlps__ast_body__2 [map_5, icode_6]
        in let head_21 = erlps__ast_body__2 [key_0, icode_6]
        in let head_25 = erlps__ast_body__2 [default_1, icode_6]
        in let head_29 = erlps__ast_body__2 [valfun_2, icode_6]
        in
          erlps__builtin_call__2
            [funname_16,
             ErlangCons head_17
               (ErlangCons head_21
                  (ErlangCons head_25 (ErlangCons head_29 ErlangEmptyList)))]
      _ -> EXC.badmatch matchExpr_11
erlps__map_upd__5 [arg_36, arg_37, arg_38, arg_39, arg_40] =
  EXC.function_clause unit
erlps__map_upd__5 args =
  EXC.badarity (ErlangFun 5 erlps__map_upd__5) args

erlps__check_entrypoint_type__4 :: ErlangFun
erlps__check_entrypoint_type__4 [ann_0, name_1, args_2, ret_3] =
  let   
    checkfirstorder_12 =
      ErlangFun 2
        (let
           lambda_4 [t_7, err_8] =
             let case_9 = erlps__is_first_order_type__1 [t_7]
             in
               case case_9 of
                 (ErlangAtom "false") -> erlps__gen_error__1 [err_8]
                 (ErlangAtom "true") -> ErlangAtom "ok"
                 something_else -> EXC.case_clause something_else
           lambda_4 [arg_5, arg_6] = EXC.function_clause unit
           lambda_4 args = EXC.badarity (ErlangFun 2 lambda_4) args
         in lambda_4)
  in let
    checkmonomorphic_21 =
      ErlangFun 2
        (let
           lambda_13 [t_16, err_17] =
             let case_18 = erlps__is_monomorphic__1 [t_16]
             in
               case case_18 of
                 (ErlangAtom "false") -> erlps__gen_error__1 [err_17]
                 (ErlangAtom "true") -> ErlangAtom "ok"
                 something_else -> EXC.case_clause something_else
           lambda_13 [arg_14, arg_15] = EXC.function_clause unit
           lambda_13 args = EXC.badarity (ErlangFun 2 lambda_13) args
         in lambda_13)
  in let
    _ =
      flmap
        (\ lc_26 ->
           case lc_26 of
             (ErlangTuple [(ErlangAtom "typed"), ann1_23, x_24, t_25]) ->
               let   
                 tup_el_34 = ErlangTuple [ErlangAtom "argument", x_24, t_25]
               in let
                 arg_29 =
                   ErlangTuple
                     [ErlangAtom "invalid_entrypoint",
                      ErlangAtom "higher_order", ann1_23, name_1, tup_el_34]
               in let
                 lcRet_27 =
                   BIF.erlang__apply__2
                     [checkfirstorder_12,
                      ErlangCons t_25 (ErlangCons arg_29 ErlangEmptyList)]
               in ErlangCons lcRet_27 ErlangEmptyList
             _ -> ErlangEmptyList)
        args_2
  in let tup_el_45 = ErlangTuple [ErlangAtom "result", ret_3]
  in let
    arg_40 =
      ErlangTuple
        [ErlangAtom "invalid_entrypoint", ErlangAtom "higher_order",
         ann_0, name_1, tup_el_45]
  in let
    _ =
      BIF.erlang__apply__2
        [checkfirstorder_12,
         ErlangCons ret_3 (ErlangCons arg_40 ErlangEmptyList)]
  in let
    _ =
      flmap
        (\ lc_53 ->
           case lc_53 of
             (ErlangTuple [(ErlangAtom "typed"), ann1_50, x_51, t_52]) ->
               let   
                 tup_el_61 = ErlangTuple [ErlangAtom "argument", x_51, t_52]
               in let
                 arg_56 =
                   ErlangTuple
                     [ErlangAtom "invalid_entrypoint", ErlangAtom "polymorphic",
                      ann1_50, name_1, tup_el_61]
               in let
                 lcRet_54 =
                   BIF.erlang__apply__2
                     [checkmonomorphic_21,
                      ErlangCons t_52 (ErlangCons arg_56 ErlangEmptyList)]
               in ErlangCons lcRet_54 ErlangEmptyList
             _ -> ErlangEmptyList)
        args_2
  in let tup_el_72 = ErlangTuple [ErlangAtom "result", ret_3]
  in let
    arg_67 =
      ErlangTuple
        [ErlangAtom "invalid_entrypoint", ErlangAtom "polymorphic",
         ann_0, name_1, tup_el_72]
  in
    BIF.erlang__apply__2
      [checkmonomorphic_21,
       ErlangCons ret_3 (ErlangCons arg_67 ErlangEmptyList)]
erlps__check_entrypoint_type__4 [arg_76, arg_77, arg_78, arg_79]
  =
  EXC.function_clause unit
erlps__check_entrypoint_type__4 args =
  EXC.badarity (ErlangFun 4 erlps__check_entrypoint_type__4) args

erlps__check_oracle_type__2 :: ErlangFun
erlps__check_oracle_type__2 [ann_0,
                             type_9@(ErlangTuple [(ErlangAtom "app_t"), _,
                                                  (ErlangTuple [(ErlangAtom "id"),
                                                                _,
                                                                (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangEmptyList)))))))]),
                                                  (ErlangCons qtype_7 (ErlangCons rtype_8 (ErlangEmptyList)))])]
  | (ErlangInt num_1) == (toErl 111)
  , (ErlangInt num_2) == (toErl 114)
  , (ErlangInt num_3) == (toErl 97)
  , (ErlangInt num_4) == (toErl 99)
  , (ErlangInt num_5) == (toErl 108)
  , (ErlangInt num_6) == (toErl 101) =
  let    tup_el_13 = ErlangFun 1 erlps__is_monomorphic__1
  in let
    head_11 = ErlangTuple [ErlangAtom "polymorphic", tup_el_13]
  in let tup_el_17 = ErlangFun 1 erlps__is_first_order_type__1
  in let
    head_15 = ErlangTuple [ErlangAtom "higher_order", tup_el_17]
  in
    flmap
      (\ lc_21 ->
         case lc_21 of
           (ErlangTuple [why_19, check_20]) ->
             let    head_23 = ErlangTuple [ErlangAtom "query", qtype_7]
             in let head_27 = ErlangTuple [ErlangAtom "response", rtype_8]
             in
               flmap
                 (\ lc_33 ->
                    case lc_33 of
                      (ErlangTuple [which_31, t_32]) ->
                        let   
                          op_arg_35 =
                            BIF.erlang__apply__2
                              [check_20, ErlangCons t_32 ErlangEmptyList]
                        in let cond_34 = BIF.erlang__not__1 [op_arg_35]
                        in
                          case cond_34 of
                            (ErlangAtom "true") ->
                              let   
                                arg_39 =
                                  ErlangTuple
                                    [ErlangAtom "invalid_oracle_type", why_19,
                                     which_31, ann_0, type_9]
                              in let lcRet_38 = erlps__gen_error__1 [arg_39]
                              in ErlangCons lcRet_38 ErlangEmptyList
                            _ -> ErlangEmptyList
                      _ -> ErlangEmptyList)
                 (ErlangCons head_23 (ErlangCons head_27 ErlangEmptyList))
           _ -> ErlangEmptyList)
      (ErlangCons head_11 (ErlangCons head_15 ErlangEmptyList))
erlps__check_oracle_type__2 [arg_45, arg_46] =
  EXC.function_clause unit
erlps__check_oracle_type__2 args =
  EXC.badarity (ErlangFun 2 erlps__check_oracle_type__2) args

erlps__is_simple_type__1 :: ErlangFun
erlps__is_simple_type__1 [(ErlangTuple [(ErlangAtom "tvar"), _,
                                        _])]
  =
  ErlangAtom "false"
erlps__is_simple_type__1 [(ErlangTuple [(ErlangAtom "fun_t"), _,
                                        _, _, _])]
  =
  ErlangAtom "false"
erlps__is_simple_type__1 [ts_0] | isEList ts_0 =
  let arg_1 = ErlangFun 1 erlps__is_simple_type__1
  in BIF.do_remote_fun_call "Lists" "erlps__all__2" [arg_1, ts_0]
erlps__is_simple_type__1 [t_0] | isETuple t_0 =
  let arg_1 = BIF.erlang__tuple_to_list__1 [t_0]
  in erlps__is_simple_type__1 [arg_1]
erlps__is_simple_type__1 [_] = ErlangAtom "true"
erlps__is_simple_type__1 [arg_0] = EXC.function_clause unit
erlps__is_simple_type__1 args =
  EXC.badarity (ErlangFun 1 erlps__is_simple_type__1) args

erlps__is_first_order_type__1 :: ErlangFun
erlps__is_first_order_type__1 [(ErlangTuple [(ErlangAtom "fun_t"),
                                             _, _, _, _])]
  =
  ErlangAtom "false"
erlps__is_first_order_type__1 [ts_0] | isEList ts_0 =
  let arg_1 = ErlangFun 1 erlps__is_first_order_type__1
  in BIF.do_remote_fun_call "Lists" "erlps__all__2" [arg_1, ts_0]
erlps__is_first_order_type__1 [t_0] | isETuple t_0 =
  let arg_1 = BIF.erlang__tuple_to_list__1 [t_0]
  in erlps__is_first_order_type__1 [arg_1]
erlps__is_first_order_type__1 [_] = ErlangAtom "true"
erlps__is_first_order_type__1 [arg_0] = EXC.function_clause unit
erlps__is_first_order_type__1 args =
  EXC.badarity (ErlangFun 1 erlps__is_first_order_type__1) args

erlps__is_monomorphic__1 :: ErlangFun
erlps__is_monomorphic__1 [(ErlangTuple [(ErlangAtom "tvar"), _,
                                        _])]
  =
  ErlangAtom "false"
erlps__is_monomorphic__1 [(ErlangCons h_0 t_1)] =
  let lop_2 = erlps__is_monomorphic__1 [h_0]
  in
    case lop_2 of
      (ErlangAtom "false") -> ErlangAtom "false"
      (ErlangAtom "true") -> erlps__is_monomorphic__1 [t_1]
      _ -> EXC.badarg1 lop_2
erlps__is_monomorphic__1 [t_0] | isETuple t_0 =
  let arg_1 = BIF.erlang__tuple_to_list__1 [t_0]
  in erlps__is_monomorphic__1 [arg_1]
erlps__is_monomorphic__1 [_] = ErlangAtom "true"
erlps__is_monomorphic__1 [arg_0] = EXC.function_clause unit
erlps__is_monomorphic__1 args =
  EXC.badarity (ErlangFun 1 erlps__is_monomorphic__1) args

erlps__prim_call__5 :: ErlangFun
erlps__prim_call__5 [prim_0, amount_1, args_2, argtypes_3,
                     outtype_4]
  =
  let   
    case_5 =
      BIF.do_remote_fun_call "Aeb.Primops"
        "erlps__op_needs_type_check__1" [prim_0]
  in let
    typehash_20 =
      case case_5 of
        (ErlangAtom "true") ->
          let    primbin_8 = BIF.binary__encode_unsigned__1 [prim_0]
          in let argtype_11 = ErlangTuple [ErlangAtom "tuple", argtypes_3]
          in let
            matchExpr_19 =
              BIF.do_remote_fun_call "Aeb.Aevm.Abi"
                "erlps__function_type_hash__3"
                [primbin_8, argtype_11, outtype_4]
          in
            case matchExpr_19 of
              (ErlangBinary binSeg_15) | (ErlangInt size_16) <- (toErl 256)
                                       , (BIN.Ok th_18 bin_17) <-
                                           (BIN.chopInt binSeg_15 size_16 1
                                              BIN.Big BIN.Unsigned)
                                       , BIN.empty bin_17 ->
                th_18
              _ -> EXC.badmatch matchExpr_19
        (ErlangAtom "false") -> toErl 0
        something_else -> EXC.case_clause something_else
  in let tup_el_25 = toErl 0
  in let tup_el_23 = ErlangTuple [ErlangAtom "integer", tup_el_25]
  in let head_30 = ErlangTuple [ErlangAtom "integer", prim_0]
  in let
    tup_el_27 =
      ErlangTuple [ErlangAtom "tuple", ErlangCons head_30 args_2]
  in let
    tup_el_34 = ErlangTuple [ErlangAtom "integer", typehash_20]
  in
    ErlangTuple
      [ErlangAtom "prim_call_contract", ErlangAtom "prim_gas_left",
       tup_el_23, amount_1, tup_el_27, tup_el_34]
erlps__prim_call__5 [arg_37, arg_38, arg_39, arg_40, arg_41] =
  EXC.function_clause unit
erlps__prim_call__5 args =
  EXC.badarity (ErlangFun 5 erlps__prim_call__5) args

erlps__generic_hash_primop__4 :: ErlangFun
erlps__generic_hash_primop__4 [op_0, arg_1,
                               (ErlangTuple [(ErlangAtom "bytes_t"), _, n_2]),
                               _icode_3]
  =
  let
    arg_5 =
      BIF.do_remote_fun_call "Aeso.Builtins"
        "erlps__bytes_to_raw_string__2" [n_2, arg_1]
  in erlps__string_hash_primop__2 [op_0, arg_5]
erlps__generic_hash_primop__4 [op_0, arg_1, type_2, icode_3] =
  let   
    primop_5 =
      case op_0 of
        (ErlangAtom "sha3") -> toErl 401
        (ErlangAtom "sha256") -> toErl 402
        (ErlangAtom "blake2b") -> toErl 403
        something_else -> EXC.case_clause something_else
  in let argtype_8 = erlps__ast_type__2 [type_2, icode_3]
  in let typevalue_10 = erlps__type_value__1 [argtype_8]
  in let tup_el_14 = toErl 0
  in let arg_12 = ErlangTuple [ErlangAtom "integer", tup_el_14]
  in
    erlps__prim_call__5
      [primop_5, arg_12,
       ErlangCons typevalue_10 (ErlangCons arg_1 ErlangEmptyList),
       ErlangCons (ErlangAtom "typerep")
         (ErlangCons argtype_8 ErlangEmptyList),
       ErlangAtom "word"]
erlps__generic_hash_primop__4 [arg_26, arg_27, arg_28, arg_29] =
  EXC.function_clause unit
erlps__generic_hash_primop__4 args =
  EXC.badarity (ErlangFun 4 erlps__generic_hash_primop__4) args

erlps__string_hash_primop__2 :: ErlangFun
erlps__string_hash_primop__2 [(ErlangAtom "sha3"), string_0] =
  ErlangTuple [ErlangAtom "unop", ErlangAtom "sha3", string_0]
erlps__string_hash_primop__2 [op_0, string_1] =
  let   
    primop_3 =
      case op_0 of
        (ErlangAtom "sha256") -> toErl 404
        (ErlangAtom "blake2b") -> toErl 405
        something_else -> EXC.case_clause something_else
  in let tup_el_7 = toErl 0
  in let arg_5 = ErlangTuple [ErlangAtom "integer", tup_el_7]
  in
    erlps__prim_call__5
      [primop_3, arg_5, ErlangCons string_1 ErlangEmptyList,
       ErlangCons (ErlangAtom "string") ErlangEmptyList,
       ErlangAtom "word"]
erlps__string_hash_primop__2 [arg_15, arg_16] =
  EXC.function_clause unit
erlps__string_hash_primop__2 args =
  EXC.badarity (ErlangFun 2 erlps__string_hash_primop__2) args

erlps__make_type_def__3 :: ErlangFun
erlps__make_type_def__3 [args_0, def_1,
                         icode_4@(ErlangMap map_2)]
  | (DM.Just typeenv_3) <-
      (Map.lookup (ErlangAtom "type_vars") map_2) =
  let
    tvars_9 =
      flmap
        (\ lc_7 ->
           case lc_7 of
             (ErlangTuple [(ErlangAtom "tvar"), _, x_6]) ->
               ErlangCons x_6 ErlangEmptyList
             _ -> ErlangEmptyList)
        args_0
  in
    ErlangFun 1
      (let
         lambda_10 [types_12] =
           let   
             arg_13 =
               BIF.do_remote_fun_call "Lists" "erlps__zip__2"
                 [tvars_9, types_12]
           in let typeenv1_16 = BIF.maps__from_list__1 [arg_13]
           in let val_21 = BIF.maps__merge__2 [typeenv_3, typeenv1_16]
           in let
             mapExt_24 =
               ErlangMap (Map.singleton (ErlangAtom "type_vars") val_21)
           in let
             arg_18 =
               case findMissingKey icode_4 [ErlangAtom "type_vars"] of
                 (DM.Nothing) -> BIF.maps__merge__2 [icode_4, mapExt_24]
                 (DM.Just missing_26) -> EXC.badkey missing_26
           in erlps__ast_typerep1__2 [def_1, arg_18]
         lambda_10 [arg_11] = EXC.function_clause unit
         lambda_10 args = EXC.badarity (ErlangFun 1 lambda_10) args
       in lambda_10)
erlps__make_type_def__3 [arg_27, arg_28, arg_29] =
  EXC.function_clause unit
erlps__make_type_def__3 args =
  EXC.badarity (ErlangFun 3 erlps__make_type_def__3) args

erlps__ast_typerep__1 :: ErlangFun
erlps__ast_typerep__1 [type_0] =
  let
    arg_2 =
      BIF.do_remote_fun_call "Aeso.Icode" "erlps__new__1"
        [ErlangEmptyList]
  in erlps__ast_typerep__2 [type_0, arg_2]
erlps__ast_typerep__1 [arg_4] = EXC.function_clause unit
erlps__ast_typerep__1 args =
  EXC.badarity (ErlangFun 1 erlps__ast_typerep__1) args

erlps__ast_typerep__2 :: ErlangFun
erlps__ast_typerep__2 [type_0, icode_1] =
  let case_2 = erlps__is_simple_type__1 [type_0]
  in
    case case_2 of
      (ErlangAtom "false") ->
        let arg_4 = ErlangTuple [ErlangAtom "not_a_simple_type", type_0]
        in erlps__gen_error__1 [arg_4]
      (ErlangAtom "true") -> erlps__ast_typerep1__2 [type_0, icode_1]
      something_else -> EXC.case_clause something_else
erlps__ast_typerep__2 [arg_9, arg_10] = EXC.function_clause unit
erlps__ast_typerep__2 args =
  EXC.badarity (ErlangFun 2 erlps__ast_typerep__2) args

erlps__ast_typerep1__2 :: ErlangFun
erlps__ast_typerep1__2 [(ErlangTuple [(ErlangAtom "id"), _,
                                      name_0]),
                        icode_1]
  =
  erlps__lookup_type_id__3 [name_0, ErlangEmptyList, icode_1]
erlps__ast_typerep1__2 [(ErlangTuple [(ErlangAtom "qid"), _,
                                      name_0]),
                        icode_1]
  =
  erlps__lookup_type_id__3 [name_0, ErlangEmptyList, icode_1]
erlps__ast_typerep1__2 [(ErlangTuple [(ErlangAtom "con"), _, _]),
                        _]
  =
  ErlangAtom "word"
erlps__ast_typerep1__2 [(ErlangTuple [(ErlangAtom "bytes_t"), _,
                                      len_0]),
                        _]
  =
  erlps__bytes_t__1 [len_0]
erlps__ast_typerep1__2 [(ErlangTuple [(ErlangAtom "app_t"), _,
                                      (ErlangTuple [i_0, _, name_1]), args_2]),
                        icode_3]
  | ((==) i_0 (ErlangAtom "id")) || ((==) i_0 (ErlangAtom "qid")) =
  let
    argreps_10 =
      flmap
        (\ lc_6 ->
           let lcRet_7 = erlps__ast_typerep1__2 [lc_6, icode_3]
           in ErlangCons lcRet_7 ErlangEmptyList)
        args_2
  in erlps__lookup_type_id__3 [name_1, argreps_10, icode_3]
erlps__ast_typerep1__2 [(ErlangTuple [(ErlangAtom "tvar"), _,
                                      a_0]),
                        (ErlangMap map_1)]
  | (DM.Just typevars_2) <-
      (Map.lookup (ErlangAtom "type_vars") map_1) =
  let
    case_3 =
      BIF.do_remote_fun_call "Maps" "erlps__get__3"
        [a_0, typevars_2, ErlangAtom "undefined"]
  in
    case case_3 of
      (ErlangAtom "undefined") -> ErlangAtom "word"
      type_7 -> type_7
erlps__ast_typerep1__2 [(ErlangTuple [(ErlangAtom "tuple_t"), _,
                                      cpts_0]),
                        icode_1]
  =
  let
    tup_el_3 =
      flmap
        (\ lc_6 ->
           let lcRet_7 = erlps__ast_typerep1__2 [lc_6, icode_1]
           in ErlangCons lcRet_7 ErlangEmptyList)
        cpts_0
  in ErlangTuple [ErlangAtom "tuple", tup_el_3]
erlps__ast_typerep1__2 [(ErlangTuple [(ErlangAtom "record_t"),
                                      fields_0]),
                        icode_1]
  =
  let
    tup_el_3 =
      flmap
        (\ lc_6 ->
           case lc_6 of
             (ErlangTuple [(ErlangAtom "field_t"), _, _, t_8]) ->
               let lcRet_7 = erlps__ast_typerep1__2 [t_8, icode_1]
               in ErlangCons lcRet_7 ErlangEmptyList
             _ -> EXC.badmatch lc_6)
        fields_0
  in ErlangTuple [ErlangAtom "tuple", tup_el_3]
erlps__ast_typerep1__2 [(ErlangTuple [(ErlangAtom "fun_t"), _, _,
                                      _, _]),
                        _icode_0]
  =
  ErlangAtom "function"
erlps__ast_typerep1__2 [(ErlangTuple [(ErlangAtom "alias_t"),
                                      t_0]),
                        icode_1]
  =
  erlps__ast_typerep1__2 [t_0, icode_1]
erlps__ast_typerep1__2 [(ErlangTuple [(ErlangAtom "variant_t"),
                                      cons_0]),
                        icode_1]
  =
  let
    tup_el_3 =
      flmap
        (\ lc_6 ->
           case lc_6 of
             (ErlangTuple [(ErlangAtom "constr_t"), _, _, args_8]) ->
               let
                 lcRet_7 =
                   flmap
                     (\ lc_12 ->
                        let lcRet_13 = erlps__ast_typerep1__2 [lc_12, icode_1]
                        in ErlangCons lcRet_13 ErlangEmptyList)
                     args_8
               in ErlangCons lcRet_7 ErlangEmptyList
             _ -> EXC.badmatch lc_6)
        cons_0
  in ErlangTuple [ErlangAtom "variant", tup_el_3]
erlps__ast_typerep1__2 [(ErlangTuple [(ErlangAtom "if_t"), _, _,
                                      _, else_0]),
                        icode_1]
  =
  erlps__ast_typerep1__2 [else_0, icode_1]
erlps__ast_typerep1__2 [arg_4, arg_5] = EXC.function_clause unit
erlps__ast_typerep1__2 args =
  EXC.badarity (ErlangFun 2 erlps__ast_typerep1__2) args

erlps__ttl_t__1 :: ErlangFun
erlps__ttl_t__1 [icode_0] =
  let    head_5 = toErl "Chain"
  in let head_7 = toErl "ttl"
  in let
    arg_1 =
      ErlangTuple
        [ErlangAtom "qid", ErlangEmptyList,
         ErlangCons head_5 (ErlangCons head_7 ErlangEmptyList)]
  in erlps__ast_typerep__2 [arg_1, icode_0]
erlps__ttl_t__1 [arg_10] = EXC.function_clause unit
erlps__ttl_t__1 args =
  EXC.badarity (ErlangFun 1 erlps__ttl_t__1) args

erlps__sign_t__0 :: ErlangFun
erlps__sign_t__0 [] =
  let arg_0 = toErl 64
  in erlps__bytes_t__1 [arg_0]
erlps__sign_t__0 args =
  EXC.badarity (ErlangFun 0 erlps__sign_t__0) args

erlps__bytes_t__1 :: ErlangFun
erlps__bytes_t__1 [len_0] | weakLeq len_0 (toErl 32) =
  ErlangAtom "word"
erlps__bytes_t__1 [len_0] =
  let    lop_5 = toErl 31
  in let lop_4 = BIF.erlang__op_plus [lop_5, len_0]
  in let rop_7 = toErl 32
  in let arg_3 = BIF.erlang__op_div_strict [lop_4, rop_7]
  in let
    tup_el_2 =
      BIF.do_remote_fun_call "Lists" "erlps__duplicate__2"
        [arg_3, ErlangAtom "word"]
  in ErlangTuple [ErlangAtom "tuple", tup_el_2]
erlps__bytes_t__1 [arg_9] = EXC.function_clause unit
erlps__bytes_t__1 args =
  EXC.badarity (ErlangFun 1 erlps__bytes_t__1) args

erlps__get_signature_arg__1 :: ErlangFun
erlps__get_signature_arg__1 [args0_0] =
  let   
    namedargs_5 =
      flmap
        (\ lc_3 ->
           case lc_3 of
             arg_2@(ErlangTuple [(ErlangAtom "named_arg"), _, _, _]) ->
               ErlangCons arg_2 ErlangEmptyList
             _ -> ErlangEmptyList)
        args0_0
  in let args_8 = BIF.erlang__op_unAppend [args0_0, namedargs_5]
  in let tup_el_15 = toErl 0
  in let
    head_12 =
      ErlangTuple [ErlangAtom "int", ErlangEmptyList, tup_el_15]
  in let tup_el_20 = toErl 0
  in let
    head_17 =
      ErlangTuple [ErlangAtom "int", ErlangEmptyList, tup_el_20]
  in let
    defaultval_22 =
      ErlangTuple
        [ErlangAtom "tuple", ErlangEmptyList,
         ErlangCons head_12 (ErlangCons head_17 ErlangEmptyList)]
  in let
    sig_25 =
      case namedargs_5 of
        (ErlangEmptyList) -> defaultval_22
        (ErlangCons (ErlangTuple [(ErlangAtom "named_arg"), _, _,
                                  val_24]) (ErlangEmptyList)) ->
          val_24
        something_else -> EXC.case_clause something_else
  in ErlangTuple [sig_25, args_8]
erlps__get_signature_arg__1 [arg_28] = EXC.function_clause unit
erlps__get_signature_arg__1 args =
  EXC.badarity (ErlangFun 1 erlps__get_signature_arg__1) args

erlps__lookup_type_id__3 :: ErlangFun
erlps__lookup_type_id__3 [name_0, args_1, (ErlangMap map_2)]
  | (DM.Just types_3) <- (Map.lookup (ErlangAtom "types") map_2) =
  let
    case_4 =
      BIF.do_remote_fun_call "Maps" "erlps__get__3"
        [name_0, types_3, ErlangAtom "undefined"]
  in
    case case_4 of
      (ErlangAtom "undefined") ->
        let arg_8 = ErlangTuple [ErlangAtom "undefined_type", name_0]
        in erlps__gen_error__1 [arg_8]
      tdef_11 ->
        BIF.erlang__apply__2 [tdef_11, ErlangCons args_1 ErlangEmptyList]
erlps__lookup_type_id__3 [arg_14, arg_15, arg_16] =
  EXC.function_clause unit
erlps__lookup_type_id__3 args =
  EXC.badarity (ErlangFun 3 erlps__lookup_type_id__3) args

erlps__ast_type_value__2 :: ErlangFun
erlps__ast_type_value__2 [t_0, icode_1] =
  let arg_2 = erlps__ast_type__2 [t_0, icode_1]
  in erlps__type_value__1 [arg_2]
erlps__ast_type_value__2 [arg_5, arg_6] =
  EXC.function_clause unit
erlps__ast_type_value__2 args =
  EXC.badarity (ErlangFun 2 erlps__ast_type_value__2) args

erlps__type_value__1 :: ErlangFun
erlps__type_value__1 [(ErlangAtom "word")] =
  let    tup_el_4 = toErl 0
  in let head_2 = ErlangTuple [ErlangAtom "integer", tup_el_4]
  in
    ErlangTuple
      [ErlangAtom "tuple", ErlangCons head_2 ErlangEmptyList]
erlps__type_value__1 [(ErlangAtom "string")] =
  let    tup_el_4 = toErl 1
  in let head_2 = ErlangTuple [ErlangAtom "integer", tup_el_4]
  in
    ErlangTuple
      [ErlangAtom "tuple", ErlangCons head_2 ErlangEmptyList]
erlps__type_value__1 [(ErlangAtom "typerep")] =
  let    tup_el_4 = toErl 5
  in let head_2 = ErlangTuple [ErlangAtom "integer", tup_el_4]
  in
    ErlangTuple
      [ErlangAtom "tuple", ErlangCons head_2 ErlangEmptyList]
erlps__type_value__1 [(ErlangTuple [(ErlangAtom "list"), a_0])] =
  let    tup_el_5 = toErl 2
  in let head_3 = ErlangTuple [ErlangAtom "integer", tup_el_5]
  in let head_7 = erlps__type_value__1 [a_0]
  in
    ErlangTuple
      [ErlangAtom "tuple",
       ErlangCons head_3 (ErlangCons head_7 ErlangEmptyList)]
erlps__type_value__1 [(ErlangTuple [(ErlangAtom "tuple"), as_0])]
  =
  let    tup_el_5 = toErl 3
  in let head_3 = ErlangTuple [ErlangAtom "integer", tup_el_5]
  in let
    tup_el_9 =
      flmap
        (\ lc_12 ->
           let lcRet_13 = erlps__type_value__1 [lc_12]
           in ErlangCons lcRet_13 ErlangEmptyList)
        as_0
  in let head_7 = ErlangTuple [ErlangAtom "list", tup_el_9]
  in
    ErlangTuple
      [ErlangAtom "tuple",
       ErlangCons head_3 (ErlangCons head_7 ErlangEmptyList)]
erlps__type_value__1 [(ErlangTuple [(ErlangAtom "variant"),
                                    cs_0])]
  =
  let    tup_el_5 = toErl 4
  in let head_3 = ErlangTuple [ErlangAtom "integer", tup_el_5]
  in let
    tup_el_9 =
      flmap
        (\ lc_12 ->
           let   
             tup_el_15 =
               flmap
                 (\ lc_18 ->
                    let lcRet_19 = erlps__type_value__1 [lc_18]
                    in ErlangCons lcRet_19 ErlangEmptyList)
                 lc_12
           in let lcRet_13 = ErlangTuple [ErlangAtom "list", tup_el_15]
           in ErlangCons lcRet_13 ErlangEmptyList)
        cs_0
  in let head_7 = ErlangTuple [ErlangAtom "list", tup_el_9]
  in
    ErlangTuple
      [ErlangAtom "tuple",
       ErlangCons head_3 (ErlangCons head_7 ErlangEmptyList)]
erlps__type_value__1 [(ErlangTuple [(ErlangAtom "map"), k_0,
                                    v_1])]
  =
  let    tup_el_6 = toErl 6
  in let head_4 = ErlangTuple [ErlangAtom "integer", tup_el_6]
  in let head_8 = erlps__type_value__1 [k_0]
  in let head_11 = erlps__type_value__1 [v_1]
  in
    ErlangTuple
      [ErlangAtom "tuple",
       ErlangCons head_4
         (ErlangCons head_8 (ErlangCons head_11 ErlangEmptyList))]
erlps__type_value__1 [arg_14] = EXC.function_clause unit
erlps__type_value__1 args =
  EXC.badarity (ErlangFun 1 erlps__type_value__1) args

erlps__ast_fun_to_icode__6 :: ErlangFun
erlps__ast_fun_to_icode__6 [name_0, attrs_1, args_2, body_3,
                            typerep_4, icode_7@(ErlangMap map_5)]
  | (DM.Just funs_6) <-
      (Map.lookup (ErlangAtom "functions") map_5) =
  let
    head_8 = ErlangTuple [name_0, attrs_1, args_2, body_3, typerep_4]
  in
    BIF.do_remote_fun_call "Aeso.Icode" "erlps__set_functions__2"
      [ErlangCons head_8 funs_6, icode_7]
erlps__ast_fun_to_icode__6 [arg_18, arg_19, arg_20, arg_21,
                            arg_22, arg_23]
  =
  EXC.function_clause unit
erlps__ast_fun_to_icode__6 args =
  EXC.badarity (ErlangFun 6 erlps__ast_fun_to_icode__6) args

erlps__is_private__2 :: ErlangFun
erlps__is_private__2 [ann_0, icode_3@(ErlangMap map_1)]
  | (DM.Just maincontract_2) <-
      (Map.lookup (ErlangAtom "contract_name") map_1) =
  let
    matchExpr_6 =
      BIF.do_remote_fun_call "Aeso.Icode" "erlps__get_namespace__1"
        [icode_3]
  in
    case matchExpr_6 of
      (ErlangTuple [_, _, currentnamespace_5]) ->
        let   
          op_arg_8 =
            BIF.do_remote_fun_call "Proplists" "erlps__get_value__3"
              [ErlangAtom "entrypoint", ann_0, ErlangAtom "false"]
        in let lop_7 = BIF.erlang__not__1 [op_arg_8]
        in
          case lop_7 of
            (ErlangAtom "true") -> ErlangAtom "true"
            (ErlangAtom "false") ->
              BIF.erlang__op_neq [maincontract_2, currentnamespace_5]
            _ -> EXC.badarg1 lop_7
      _ -> EXC.badmatch matchExpr_6
erlps__is_private__2 [arg_14, arg_15] = EXC.function_clause unit
erlps__is_private__2 args =
  EXC.badarity (ErlangFun 2 erlps__is_private__2) args

erlps__builtin_call__2 :: ErlangFun
erlps__builtin_call__2 [builtin_0, args_1] =
  let    tup_el_5 = ErlangTuple [ErlangAtom "builtin", builtin_0]
  in let tup_el_3 = ErlangTuple [ErlangAtom "var_ref", tup_el_5]
  in ErlangTuple [ErlangAtom "funcall", tup_el_3, args_1]
erlps__builtin_call__2 [arg_9, arg_10] = EXC.function_clause unit
erlps__builtin_call__2 args =
  EXC.badarity (ErlangFun 2 erlps__builtin_call__2) args

erlps__add_builtins__1 :: ErlangFun
erlps__add_builtins__1 [icode_2@(ErlangMap map_0)]
  | (DM.Just funs_1) <-
      (Map.lookup (ErlangAtom "functions") map_0) =
  let   
    builtins_4 =
      BIF.do_remote_fun_call "Aeso.Builtins" "erlps__used_builtins__1"
        [funs_1]
  in let
    lop_8 =
      flmap
        (\ lc_11 ->
           let
             lcRet_12 =
               BIF.do_remote_fun_call "Aeso.Builtins"
                 "erlps__builtin_function__1" [lc_11]
           in ErlangCons lcRet_12 ErlangEmptyList)
        builtins_4
  in let val_7 = BIF.erlang__op_append [lop_8, funs_1]
  in let
    mapExt_15 =
      ErlangMap (Map.singleton (ErlangAtom "functions") val_7)
  in
    case findMissingKey icode_2 [ErlangAtom "functions"] of
      (DM.Nothing) -> BIF.maps__merge__2 [icode_2, mapExt_15]
      (DM.Just missing_17) -> EXC.badkey missing_17
erlps__add_builtins__1 [arg_18] = EXC.function_clause unit
erlps__add_builtins__1 args =
  EXC.badarity (ErlangFun 1 erlps__add_builtins__1) args

erlps__deadcode_elimination__1 :: ErlangFun
erlps__deadcode_elimination__1 [icode_2@(ErlangMap map_0)]
  | (DM.Just funs_1) <-
      (Map.lookup (ErlangAtom "functions") map_0) =
  let   
    publicnames_12 =
      flmap
        (\ lc_6 ->
           case lc_6 of
             (ErlangTuple [name_4, ann_5, _, _, _]) ->
               let   
                 op_arg_8 = BIF.lists__member__2 [ErlangAtom "private", ann_5]
               in let cond_7 = BIF.erlang__not__1 [op_arg_8]
               in
                 case cond_7 of
                   (ErlangAtom "true") -> ErlangCons name_4 ErlangEmptyList
                   _ -> ErlangEmptyList
             _ -> ErlangEmptyList)
        funs_1
  in let
    argstopat_22 =
      ErlangFun 1
        (let
           lambda_13 [args_15] =
             flmap
               (\ lc_18 ->
                  case lc_18 of
                    (ErlangTuple [x_17, _]) ->
                      let lcRet_19 = ErlangTuple [ErlangAtom "var_ref", x_17]
                      in ErlangCons lcRet_19 ErlangEmptyList
                    _ -> ErlangEmptyList)
               args_15
           lambda_13 [arg_14] = EXC.function_clause unit
           lambda_13 args = EXC.badarity (ErlangFun 1 lambda_13) args
         in lambda_13)
  in let
    arg_23 =
      flmap
        (\ lc_28 ->
           case lc_28 of
             (ErlangTuple [name_25, _, args_26, body_27, _]) ->
               let   
                 tup_el_33 =
                   BIF.erlang__apply__2
                     [argstopat_22, ErlangCons args_26 ErlangEmptyList]
               in let
                 tup_el_31 =
                   ErlangTuple [ErlangAtom "binder", tup_el_33, body_27]
               in let lcRet_29 = ErlangTuple [name_25, tup_el_31]
               in ErlangCons lcRet_29 ErlangEmptyList
             _ -> ErlangEmptyList)
        funs_1
  in let defs_37 = BIF.maps__from_list__1 [arg_23]
  in let arg_40 = ErlangMap Map.empty
  in let
    usednames_41 =
      erlps__chase_names__3 [defs_37, publicnames_12, arg_40]
  in let
    usedfuns_50 =
      flmap
        (\ lc_45 ->
           case lc_45 of
             def_44@(ErlangTuple [name_43, _, _, _, _]) ->
               let cond_46 = BIF.maps__is_key__2 [name_43, usednames_41]
               in
                 case cond_46 of
                   (ErlangAtom "true") -> ErlangCons def_44 ErlangEmptyList
                   _ -> ErlangEmptyList
             _ -> ErlangEmptyList)
        funs_1
  in let
    mapExt_54 =
      ErlangMap (Map.singleton (ErlangAtom "functions") usedfuns_50)
  in
    case findMissingKey icode_2 [ErlangAtom "functions"] of
      (DM.Nothing) -> BIF.maps__merge__2 [icode_2, mapExt_54]
      (DM.Just missing_56) -> EXC.badkey missing_56
erlps__deadcode_elimination__1 [arg_57] =
  EXC.function_clause unit
erlps__deadcode_elimination__1 args =
  EXC.badarity (ErlangFun 1 erlps__deadcode_elimination__1) args

erlps__chase_names__3 :: ErlangFun
erlps__chase_names__3 [_defs_0, (ErlangEmptyList), used_1] =
  used_1
erlps__chase_names__3 [defs_0, (ErlangCons x_1 xs_2), used_3] =
  let    lop_5 = BIF.maps__is_key__2 [x_1, used_3]
  in let
    case_4 =
      case lop_5 of
        (ErlangAtom "true") -> ErlangAtom "true"
        (ErlangAtom "false") ->
          let op_arg_8 = BIF.maps__is_key__2 [x_1, defs_0]
          in BIF.erlang__not__1 [op_arg_8]
        _ -> EXC.badarg1 lop_5
  in
    case case_4 of
      (ErlangAtom "true") ->
        erlps__chase_names__3 [defs_0, xs_2, used_3]
      (ErlangAtom "false") ->
        let    def_16 = BIF.maps__get__2 [x_1, defs_0]
        in let arg_17 = erlps__free_vars__1 [def_16]
        in let vars_19 = BIF.maps__keys__1 [arg_17]
        in let arg_21 = BIF.erlang__op_append [vars_19, xs_2]
        in let
          mapExt_28 = ErlangMap (Map.singleton x_1 (ErlangAtom "true"))
        in let arg_24 = BIF.maps__merge__2 [used_3, mapExt_28]
        in erlps__chase_names__3 [defs_0, arg_21, arg_24]
      something_else -> EXC.case_clause something_else
erlps__chase_names__3 [arg_30, arg_31, arg_32] =
  EXC.function_clause unit
erlps__chase_names__3 args =
  EXC.badarity (ErlangFun 3 erlps__chase_names__3) args

erlps__free_vars__1 :: ErlangFun
erlps__free_vars__1 [(ErlangTuple [(ErlangAtom "var_ref"), x_0])]
  =
  ErlangMap (Map.singleton x_0 (ErlangAtom "true"))
erlps__free_vars__1 [(ErlangTuple [(ErlangAtom "arg"), x_0, _])]
  =
  ErlangMap (Map.singleton x_0 (ErlangAtom "true"))
erlps__free_vars__1 [(ErlangTuple [(ErlangAtom "binder"), pat_0,
                                   body_1])]
  =
  let    arg_3 = erlps__free_vars__1 [pat_0]
  in let arg_2 = BIF.maps__keys__1 [arg_3]
  in let arg_5 = erlps__free_vars__1 [body_1]
  in
    BIF.do_remote_fun_call "Maps" "erlps__without__2" [arg_2, arg_5]
erlps__free_vars__1 [(ErlangTuple [(ErlangAtom "switch"), e_0,
                                   cases_1])]
  =
  let
    tail_4 =
      flmap
        (\ lc_8 ->
           case lc_8 of
             (ErlangTuple [p_6, b_7]) ->
               let lcRet_9 = ErlangTuple [ErlangAtom "binder", p_6, b_7]
               in ErlangCons lcRet_9 ErlangEmptyList
             _ -> ErlangEmptyList)
        cases_1
  in erlps__free_vars__1 [ErlangCons e_0 tail_4]
erlps__free_vars__1 [(ErlangTuple [(ErlangAtom "lambda"), xs_0,
                                   e_1])]
  =
  let arg_2 = ErlangTuple [ErlangAtom "binder", xs_0, e_1]
  in erlps__free_vars__1 [arg_2]
erlps__free_vars__1 [t_0] | isETuple t_0 =
  let arg_1 = BIF.erlang__tuple_to_list__1 [t_0]
  in erlps__free_vars__1 [arg_1]
erlps__free_vars__1 [(ErlangCons h_0 t_1)] =
  let    arg_2 = erlps__free_vars__1 [h_0]
  in let arg_4 = erlps__free_vars__1 [t_1]
  in BIF.maps__merge__2 [arg_2, arg_4]
erlps__free_vars__1 [_] = ErlangMap Map.empty
erlps__free_vars__1 [arg_0] = EXC.function_clause unit
erlps__free_vars__1 args =
  EXC.badarity (ErlangFun 1 erlps__free_vars__1) args