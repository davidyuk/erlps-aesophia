module Aeso.Scan(erlps__scan__1) where
{-
This file has been autogenerated
DO NOT EDIT - Your changes WILL be overwritten
Use this code at your own risk - the authors are just a mischievous raccoon and a haskell devote
Erlscripten v0.1.0
-}

import Prelude
import Data.Array as DA
import Data.List as DL
import Data.Maybe as DM
import Data.Map as Map
import Data.Tuple as Tup
import Data.BigInt as DBI
import Erlang.Builtins as BIF
import Erlang.Binary as BIN
import Erlang.Helpers as H
import Erlang.Exception as EXC
import Erlang.Type (ErlangFun, ErlangTerm(..), weakCmp, weakEq,
                    weakNEq, weakLt, weakLeq, weakGeq, weakGt)
import Effect (Effect)
import Effect.Unsafe (unsafePerformEffect)
import Effect.Exception (throw)
import Partial.Unsafe (unsafePartial)


erlps__lexer__0 :: ErlangFun
erlps__lexer__0 [] =
  let   
    number_11 =
      (ErlangFun 1
         let
           lambda_0 [digit_2] =
             let    head_5 = (H.make_string "+(_")
             in let head_9 = (H.make_string "+)*")
             in
               (ErlangCons digit_2
                  (ErlangCons head_5
                     (ErlangCons digit_2 (ErlangCons head_9 ErlangEmptyList))))
           lambda_0 [arg_1] = (EXC.function_clause unit)
           lambda_0 args = (EXC.badarity (ErlangFun 1 lambda_0) args)
         in lambda_0)
  in let digit_12 = (H.make_string "[0-9]")
  in let hexdigit_13 = (H.make_string "[0-9a-fA-F]")
  in let lower_14 = (H.make_string "[a-z_]")
  in let upper_15 = (H.make_string "[A-Z]")
  in let head_18 = (H.make_string "[a-zA-Z0-9_]*")
  in let
    int_23 =
      (BIF.erlang__apply__2
         [number_11, (ErlangCons digit_12 ErlangEmptyList)])
  in let head_24 = (H.make_string "0x")
  in let
    head_26 =
      (BIF.erlang__apply__2
         [number_11, (ErlangCons hexdigit_13 ErlangEmptyList)])
  in let head_31 = (H.make_string "#")
  in let
    head_33 =
      (BIF.erlang__apply__2
         [number_11, (ErlangCons hexdigit_13 ErlangEmptyList)])
  in let ws_38 = (H.make_string "[\\000-\\ ]+")
  in let head_41 = (H.make_string "[a-zA-Z0-9_\']*")
  in let head_44 = (H.make_string "\'")
  in let head_49 = (H.make_string "(")
  in let head_53 = (H.make_string "\\.)+")
  in let head_58 = (H.make_string "(")
  in let head_62 = (H.make_string "\\.)+")
  in let op_67 = (H.make_string "[=!<>+\\-*/:&|?~@^]+")
  in let char_68 = (H.make_string "\'([^\'\\\\]|(\\\\.))\'")
  in let string_69 = (H.make_string "\"([^\"\\\\]|(\\\\.))*\"")
  in let tup_el_70 = (H.make_string "/\\*")
  in let
    arg_73 =
      (BIF.do_remote_fun_call "Aeso.Scan.Lib" "erlps__skip__0" [])
  in let
    tup_el_71 =
      (BIF.do_remote_fun_call "Aeso.Scan.Lib" "erlps__push__2"
         [(ErlangAtom "comment"), arg_73])
  in let commentstart_74 = (ErlangTuple [tup_el_70, tup_el_71])
  in let tup_el_78 = (H.make_string "\\*/")
  in let
    arg_80 =
      (BIF.do_remote_fun_call "Aeso.Scan.Lib" "erlps__skip__0" [])
  in let
    tup_el_79 =
      (BIF.do_remote_fun_call "Aeso.Scan.Lib" "erlps__pop__1" [arg_80])
  in let head_77 = (ErlangTuple [tup_el_78, tup_el_79])
  in let tup_el_83 = (H.make_string "[^/*]+|[/*]")
  in let
    tup_el_84 =
      (BIF.do_remote_fun_call "Aeso.Scan.Lib" "erlps__skip__0" [])
  in let head_82 = (ErlangTuple [tup_el_83, tup_el_84])
  in let head_87 = (H.make_string "contract")
  in let head_89 = (H.make_string "include")
  in let head_91 = (H.make_string "let")
  in let head_93 = (H.make_string "switch")
  in let head_95 = (H.make_string "type")
  in let head_97 = (H.make_string "record")
  in let head_99 = (H.make_string "datatype")
  in let head_101 = (H.make_string "if")
  in let head_103 = (H.make_string "elif")
  in let head_105 = (H.make_string "else")
  in let head_107 = (H.make_string "function")
  in let head_109 = (H.make_string "stateful")
  in let head_111 = (H.make_string "payable")
  in let head_113 = (H.make_string "true")
  in let head_115 = (H.make_string "false")
  in let head_117 = (H.make_string "mod")
  in let head_119 = (H.make_string "public")
  in let head_121 = (H.make_string "entrypoint")
  in let head_123 = (H.make_string "private")
  in let head_125 = (H.make_string "indexed")
  in let head_127 = (H.make_string "namespace")
  in let arg_131 = (H.make_string "|")
  in let
    kw_132 =
      (BIF.do_remote_fun_call "String" "erlps__join__2"
         [(ErlangCons head_87
             (ErlangCons head_89
                (ErlangCons head_91
                   (ErlangCons head_93
                      (ErlangCons head_95
                         (ErlangCons head_97
                            (ErlangCons head_99
                               (ErlangCons head_101
                                  (ErlangCons head_103
                                     (ErlangCons head_105
                                        (ErlangCons head_107
                                           (ErlangCons head_109
                                              (ErlangCons head_111
                                                 (ErlangCons head_113
                                                    (ErlangCons head_115
                                                       (ErlangCons head_117
                                                          (ErlangCons head_119
                                                             (ErlangCons
                                                                head_121
                                                                (ErlangCons
                                                                   head_123
                                                                   (ErlangCons
                                                                      head_125
                                                                      (ErlangCons
                                                                         head_127
                                                                         ErlangEmptyList))))))))))))))))))))),
          arg_131])
  in let tup_el_136 = (H.make_string "//.*")
  in let
    tup_el_137 =
      (BIF.do_remote_fun_call "Aeso.Scan.Lib" "erlps__skip__0" [])
  in let head_135 = (ErlangTuple [tup_el_136, tup_el_137])
  in let
    tup_el_141 =
      (BIF.do_remote_fun_call "Aeso.Scan.Lib" "erlps__skip__0" [])
  in let head_139 = (ErlangTuple [ws_38, tup_el_141])
  in let tup_el_144 = (H.make_string "\\.\\.|[,.;()\\[\\]{}]")
  in let
    tup_el_145 =
      (BIF.do_remote_fun_call "Aeso.Scan.Lib" "erlps__symbol__0" [])
  in let head_143 = (ErlangTuple [tup_el_144, tup_el_145])
  in let arg_151 = (ErlangFun 1 erlps__parse_char__1)
  in let
    tup_el_149 =
      (BIF.do_remote_fun_call "Aeso.Scan.Lib" "erlps__token__2"
         [(ErlangAtom "char"), arg_151])
  in let head_147 = (ErlangTuple [char_68, tup_el_149])
  in let arg_157 = (ErlangFun 1 erlps__parse_string__1)
  in let
    tup_el_155 =
      (BIF.do_remote_fun_call "Aeso.Scan.Lib" "erlps__token__2"
         [(ErlangAtom "string"), arg_157])
  in let head_153 = (ErlangTuple [string_69, tup_el_155])
  in let arg_163 = (ErlangFun 1 erlps__parse_hex__1)
  in let
    tup_el_161 =
      (BIF.do_remote_fun_call "Aeso.Scan.Lib" "erlps__token__2"
         [(ErlangAtom "hex"), arg_163])
  in let
    head_159 =
      (ErlangTuple
         [(ErlangCons head_24 (ErlangCons head_26 ErlangEmptyList)),
          tup_el_161])
  in let arg_169 = (ErlangFun 1 erlps__parse_int__1)
  in let
    tup_el_167 =
      (BIF.do_remote_fun_call "Aeso.Scan.Lib" "erlps__token__2"
         [(ErlangAtom "int"), arg_169])
  in let head_165 = (ErlangTuple [int_23, tup_el_167])
  in let arg_175 = (ErlangFun 1 erlps__parse_bytes__1)
  in let
    tup_el_173 =
      (BIF.do_remote_fun_call "Aeso.Scan.Lib" "erlps__token__2"
         [(ErlangAtom "bytes"), arg_175])
  in let
    head_171 =
      (ErlangTuple
         [(ErlangCons head_31 (ErlangCons head_33 ErlangEmptyList)),
          tup_el_173])
  in let
    arg_181 =
      (ErlangFun 1
         let
           lambda_182 [s_184] =
             let arg_186 = (H.make_string ".")
             in
               (BIF.do_remote_fun_call "String" "erlps__tokens__2"
                  [s_184, arg_186])
           lambda_182 [arg_183] = (EXC.function_clause unit)
           lambda_182 args = (EXC.badarity (ErlangFun 1 lambda_182) args)
         in lambda_182)
  in let
    tup_el_179 =
      (BIF.do_remote_fun_call "Aeso.Scan.Lib" "erlps__token__2"
         [(ErlangAtom "qid"), arg_181])
  in let
    head_177 =
      (ErlangTuple
         [(ErlangCons head_49
             (ErlangCons
                (ErlangCons upper_15 (ErlangCons head_18 ErlangEmptyList))
                (ErlangCons head_53
                   (ErlangCons
                      (ErlangCons lower_14 (ErlangCons head_41 ErlangEmptyList))
                      ErlangEmptyList)))),
          tup_el_179])
  in let
    arg_192 =
      (ErlangFun 1
         let
           lambda_193 [s_195] =
             let arg_197 = (H.make_string ".")
             in
               (BIF.do_remote_fun_call "String" "erlps__tokens__2"
                  [s_195, arg_197])
           lambda_193 [arg_194] = (EXC.function_clause unit)
           lambda_193 args = (EXC.badarity (ErlangFun 1 lambda_193) args)
         in lambda_193)
  in let
    tup_el_190 =
      (BIF.do_remote_fun_call "Aeso.Scan.Lib" "erlps__token__2"
         [(ErlangAtom "qcon"), arg_192])
  in let
    head_188 =
      (ErlangTuple
         [(ErlangCons head_58
             (ErlangCons
                (ErlangCons upper_15 (ErlangCons head_18 ErlangEmptyList))
                (ErlangCons head_62
                   (ErlangCons
                      (ErlangCons upper_15 (ErlangCons head_18 ErlangEmptyList))
                      ErlangEmptyList)))),
          tup_el_190])
  in let
    tup_el_201 =
      (BIF.do_remote_fun_call "Aeso.Scan.Lib" "erlps__token__1"
         [(ErlangAtom "tvar")])
  in let
    head_199 =
      (ErlangTuple
         [(ErlangCons head_44
             (ErlangCons
                (ErlangCons lower_14 (ErlangCons head_41 ErlangEmptyList))
                ErlangEmptyList)),
          tup_el_201])
  in let
    tup_el_207 =
      (BIF.do_remote_fun_call "Aeso.Scan.Lib" "erlps__token__1"
         [(ErlangAtom "id")])
  in let
    arg_205 =
      (ErlangTuple
         [(ErlangCons lower_14 (ErlangCons head_41 ErlangEmptyList)),
          tup_el_207])
  in let
    tup_el_211 =
      (BIF.do_remote_fun_call "Aeso.Scan.Lib" "erlps__symbol__0" [])
  in let arg_209 = (ErlangTuple [kw_132, tup_el_211])
  in let
    head_204 =
      (BIF.do_remote_fun_call "Aeso.Scan.Lib" "erlps__override__2"
         [arg_205, arg_209])
  in let
    tup_el_215 =
      (BIF.do_remote_fun_call "Aeso.Scan.Lib" "erlps__token__1"
         [(ErlangAtom "con")])
  in let
    head_213 =
      (ErlangTuple
         [(ErlangCons upper_15 (ErlangCons head_18 ErlangEmptyList)),
          tup_el_215])
  in let
    tup_el_220 =
      (BIF.do_remote_fun_call "Aeso.Scan.Lib" "erlps__symbol__0" [])
  in let head_218 = (ErlangTuple [op_67, tup_el_220])
  in let
    head_223 =
      (ErlangTuple
         [(ErlangAtom "code"),
          (ErlangCons commentstart_74
             (ErlangCons head_135
                (ErlangCons head_139
                   (ErlangCons head_143
                      (ErlangCons head_147
                         (ErlangCons head_153
                            (ErlangCons head_159
                               (ErlangCons head_165
                                  (ErlangCons head_171
                                     (ErlangCons head_177
                                        (ErlangCons head_188
                                           (ErlangCons head_199
                                              (ErlangCons head_204
                                                 (ErlangCons head_213
                                                    (ErlangCons head_218
                                                       ErlangEmptyList)))))))))))))))])
  in let
    head_227 =
      (ErlangTuple
         [(ErlangAtom "comment"),
          (ErlangCons commentstart_74
             (ErlangCons head_77 (ErlangCons head_82 ErlangEmptyList)))])
  in (ErlangCons head_223 (ErlangCons head_227 ErlangEmptyList))
erlps__lexer__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__scan__1 :: ErlangFun
erlps__scan__1 [string_0] =
  let    arg_1 = (erlps__lexer__0 [])
  in let
    lexer_2 =
      (BIF.do_remote_fun_call "Aeso.Scan.Lib" "erlps__compile__1"
         [arg_1])
  in
    (BIF.do_remote_fun_call "Aeso.Scan.Lib" "erlps__string__3"
       [lexer_2, (ErlangAtom "code"), string_0])
erlps__scan__1 [arg_6] = (EXC.function_clause unit)
erlps__scan__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__parse_string__1 :: ErlangFun
erlps__parse_string__1 [(ErlangCons (ErlangInt num_0) chars_1)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 34))) =
  (erlps__unescape__1 [chars_1])
erlps__parse_string__1 [arg_3] = (EXC.function_clause unit)
erlps__parse_string__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__parse_char__1 :: ErlangFun
erlps__parse_char__1 [(ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons code_2 (ErlangCons (ErlangInt num_3) (ErlangEmptyList)))))]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 39)))
  , ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 92)))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 39))) =
  case code_2 of
    (ErlangInt num_5) | ((ErlangInt num_5) ==
                           (ErlangInt (DBI.fromInt 39))) ->
      (ErlangInt (DBI.fromInt 39))
    (ErlangInt num_6) | ((ErlangInt num_6) ==
                           (ErlangInt (DBI.fromInt 92))) ->
      (ErlangInt (DBI.fromInt 92))
    (ErlangInt num_7) | ((ErlangInt num_7) ==
                           (ErlangInt (DBI.fromInt 98))) ->
      (ErlangInt (DBI.fromInt 8))
    (ErlangInt num_8) | ((ErlangInt num_8) ==
                           (ErlangInt (DBI.fromInt 101))) ->
      (ErlangInt (DBI.fromInt 27))
    (ErlangInt num_9) | ((ErlangInt num_9) ==
                           (ErlangInt (DBI.fromInt 102))) ->
      (ErlangInt (DBI.fromInt 12))
    (ErlangInt num_10) | ((ErlangInt num_10) ==
                            (ErlangInt (DBI.fromInt 110))) ->
      (ErlangInt (DBI.fromInt 10))
    (ErlangInt num_11) | ((ErlangInt num_11) ==
                            (ErlangInt (DBI.fromInt 114))) ->
      (ErlangInt (DBI.fromInt 13))
    (ErlangInt num_12) | ((ErlangInt num_12) ==
                            (ErlangInt (DBI.fromInt 116))) ->
      (ErlangInt (DBI.fromInt 9))
    (ErlangInt num_13) | ((ErlangInt num_13) ==
                            (ErlangInt (DBI.fromInt 118))) ->
      (ErlangInt (DBI.fromInt 11))
    _ ->
      let    lop_16 = (H.make_string "Bad control sequence: \\")
      in let
        tup_el_15 =
          (BIF.erlang__op_append
             [lop_16, (ErlangCons code_2 ErlangEmptyList)])
      in (ErlangTuple [(ErlangAtom "error"), tup_el_15])
erlps__parse_char__1 [(ErlangCons (ErlangInt num_0) (ErlangCons c_1 (ErlangCons (ErlangInt num_2) (ErlangEmptyList))))]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 39)))
  , ((ErlangInt num_2) == (ErlangInt (DBI.fromInt 39))) =
  c_1
erlps__parse_char__1 [arg_3] = (EXC.function_clause unit)
erlps__parse_char__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__unescape__1 :: ErlangFun
erlps__unescape__1 [str_0] =
  (erlps__unescape__2 [str_0, ErlangEmptyList])
erlps__unescape__1 [arg_3] = (EXC.function_clause unit)
erlps__unescape__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__unescape__2 :: ErlangFun
erlps__unescape__2 [(ErlangCons (ErlangInt num_0) (ErlangEmptyList)),
                    acc_1]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 34))) =
  let
    arg_2 =
      (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [acc_1])
  in (BIF.erlang__list_to_binary__1 [arg_2])
erlps__unescape__2 [(ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons d1_2 (ErlangCons d2_3 chars_4)))),
                    acc_5]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 92)))
  , ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 120))) =
  let
    c_12 =
      (BIF.erlang__list_to_integer__2
         [(ErlangCons d1_2 (ErlangCons d2_3 ErlangEmptyList)),
          (ErlangInt (DBI.fromInt 16))])
  in (erlps__unescape__2 [chars_4, (ErlangCons c_12 acc_5)])
erlps__unescape__2 [(ErlangCons (ErlangInt num_0) (ErlangCons code_1 chars_2)),
                    acc_3]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 92))) =
  let
    ok_11 =
      (ErlangFun 1
         let
           lambda_4 [c_6] =
             (erlps__unescape__2 [chars_2, (ErlangCons c_6 acc_3)])
           lambda_4 [arg_5] = (EXC.function_clause unit)
           lambda_4 args = (EXC.badarity (ErlangFun 1 lambda_4) args)
         in lambda_4)
  in
    case code_1 of
      (ErlangInt num_13) | ((ErlangInt num_13) ==
                              (ErlangInt (DBI.fromInt 34))) ->
        (BIF.erlang__apply__2
           [ok_11,
            (ErlangCons (ErlangInt (DBI.fromInt 34)) ErlangEmptyList)])
      (ErlangInt num_16) | ((ErlangInt num_16) ==
                              (ErlangInt (DBI.fromInt 92))) ->
        (BIF.erlang__apply__2
           [ok_11,
            (ErlangCons (ErlangInt (DBI.fromInt 92)) ErlangEmptyList)])
      (ErlangInt num_19) | ((ErlangInt num_19) ==
                              (ErlangInt (DBI.fromInt 98))) ->
        (BIF.erlang__apply__2
           [ok_11,
            (ErlangCons (ErlangInt (DBI.fromInt 8)) ErlangEmptyList)])
      (ErlangInt num_22) | ((ErlangInt num_22) ==
                              (ErlangInt (DBI.fromInt 101))) ->
        (BIF.erlang__apply__2
           [ok_11,
            (ErlangCons (ErlangInt (DBI.fromInt 27)) ErlangEmptyList)])
      (ErlangInt num_25) | ((ErlangInt num_25) ==
                              (ErlangInt (DBI.fromInt 102))) ->
        (BIF.erlang__apply__2
           [ok_11,
            (ErlangCons (ErlangInt (DBI.fromInt 12)) ErlangEmptyList)])
      (ErlangInt num_28) | ((ErlangInt num_28) ==
                              (ErlangInt (DBI.fromInt 110))) ->
        (BIF.erlang__apply__2
           [ok_11,
            (ErlangCons (ErlangInt (DBI.fromInt 10)) ErlangEmptyList)])
      (ErlangInt num_31) | ((ErlangInt num_31) ==
                              (ErlangInt (DBI.fromInt 114))) ->
        (BIF.erlang__apply__2
           [ok_11,
            (ErlangCons (ErlangInt (DBI.fromInt 13)) ErlangEmptyList)])
      (ErlangInt num_34) | ((ErlangInt num_34) ==
                              (ErlangInt (DBI.fromInt 116))) ->
        (BIF.erlang__apply__2
           [ok_11,
            (ErlangCons (ErlangInt (DBI.fromInt 9)) ErlangEmptyList)])
      (ErlangInt num_37) | ((ErlangInt num_37) ==
                              (ErlangInt (DBI.fromInt 118))) ->
        (BIF.erlang__apply__2
           [ok_11,
            (ErlangCons (ErlangInt (DBI.fromInt 11)) ErlangEmptyList)])
      _ ->
        let    lop_41 = (H.make_string "Bad control sequence: \\")
        in let
          arg_40 =
            (BIF.erlang__op_append
               [lop_41, (ErlangCons code_1 ErlangEmptyList)])
        in (BIF.erlang__error__1 [arg_40])
erlps__unescape__2 [(ErlangCons c_0 chars_1), acc_2] =
  (erlps__unescape__2 [chars_1, (ErlangCons c_0 acc_2)])
erlps__unescape__2 [arg_7, arg_8] = (EXC.function_clause unit)
erlps__unescape__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__strip_underscores__1 :: ErlangFun
erlps__strip_underscores__1 [s_0] =
  let
    arg_1 =
      (ErlangFun 1
         let
           lambda_2 [c_4] =
             (BIF.erlang__op_neq [c_4, (ErlangInt (DBI.fromInt 95))])
           lambda_2 [arg_3] = (EXC.function_clause unit)
           lambda_2 args = (EXC.badarity (ErlangFun 1 lambda_2) args)
         in lambda_2)
  in
    (BIF.do_remote_fun_call "Lists" "erlps__filter__2" [arg_1, s_0])
erlps__strip_underscores__1 [arg_8] = (EXC.function_clause unit)
erlps__strip_underscores__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__parse_hex__1 :: ErlangFun
erlps__parse_hex__1 [(ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) s_2))]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 48)))
  , ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 120))) =
  let arg_3 = (erlps__strip_underscores__1 [s_2])
  in
    (BIF.erlang__list_to_integer__2
       [arg_3, (ErlangInt (DBI.fromInt 16))])
erlps__parse_hex__1 [arg_6] = (EXC.function_clause unit)
erlps__parse_hex__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__parse_int__1 :: ErlangFun
erlps__parse_int__1 [s_0] =
  let arg_1 = (erlps__strip_underscores__1 [s_0])
  in (BIF.erlang__list_to_integer__1 [arg_1])
erlps__parse_int__1 [arg_3] = (EXC.function_clause unit)
erlps__parse_int__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__parse_bytes__1 :: ErlangFun
erlps__parse_bytes__1 [(ErlangCons (ErlangInt num_0) s0_1)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 35))) =
  let    s_3 = (erlps__strip_underscores__1 [s0_1])
  in let
    n_6 =
      (BIF.erlang__list_to_integer__2
         [s_3, (ErlangInt (DBI.fromInt 16))])
  in let lop_8 = (BIF.erlang__length__1 [s_3])
  in let
    lop_7 =
      (BIF.erlang__op_plus [lop_8, (ErlangInt (DBI.fromInt 1))])
  in let
    digits_12 =
      (BIF.erlang__op_div_strict [lop_7, (ErlangInt (DBI.fromInt 2))])
  in (ErlangBinary (BIN.from_int n_6 digits_12 8 BIN.Big))
erlps__parse_bytes__1 [arg_14] = (EXC.function_clause unit)
erlps__parse_bytes__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)